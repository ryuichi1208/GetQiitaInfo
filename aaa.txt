[{'rendered_body': '\n<h2>\n<span id="lazydocker" class="fragment"></span><a href="#lazydocker"><i class="fa fa-link"></i></a>lazydocker</h2>\n\n<p><a href="https://camo.qiitausercontent.com/a63b99c67128efa8f0127f8c7eddb871a16bc87e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f61643135363033392d346265352d373861342d346435662d6132623638303332663065342e706e67" target="_blank" rel="nofollow noopener"><img width="1138" alt="スクリーンショット 2019-07-05 21.03.08.png" src="https://camo.qiitausercontent.com/a63b99c67128efa8f0127f8c7eddb871a16bc87e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f61643135363033392d346265352d373861342d346435662d6132623638303332663065342e706e67" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/ad156039-4be5-78a4-4d5f-a2b68032f0e4.png"></a></p>\n\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>LazyDockerは、DockerおよびDocker ComposeをTUIで操作できるツールです。<br>\ndocker、docker-composeコンテナ環境の状態の表示、ログの表示、コンテナまたはサービスの再起動/削除/再構築などが1つのウインドゥで実行できます。<br>\nGithubでソースは公開されておりGoで実装されているようです。</p>\n\n<p><a href="https://github.com/jesseduffield/lazydocker" rel="nofollow noopener" target="_blank">jesseduffield/lazydocker</a></p>\n\n<p>公開されたばかりですがスター数の伸びがとてもすごいです(7/5現在で7000ほど)</p>\n\n<h2>\n<span id="実行環境" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>\u3000実行環境</h2>\n\n<ul>\n<li>macOS Mojave</li>\n</ul>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> docker version\n<span class="go">Client: Docker Engine - Community\n Version:           18.09.2\n API version:       1.39\n Go version:        go1.10.8\n Git commit:        6247962\n Built:             Sun Feb 10 04:12:39 2019\n OS/Arch:           darwin/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          18.09.2\n  API version:      1.39 (minimum version 1.12)\n  Go version:       go1.10.6\n  Git commit:       6247962\n  Built:            Sun Feb 10 04:13:06 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n\n</span><span class="gp">$</span> docker-compose version\n<span class="go">docker-compose version 1.23.2, build 1110ad01\ndocker-py version: 3.6.0\nCPython version: 3.6.6\nOpenSSL version: OpenSSL 1.1.0h  27 Mar 2018\n</span></pre></div></div>\n\n<h2>\n<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h2>\n\n<p>macの場合はリポジトリを追加してbrew installだけで完了です。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>brew tap jesseduffield/lazydocker\n<span class="nv">$ </span>brew <span class="nb">install </span>lazydocker\n</pre></div></div>\n\n<p>Linuxの場合もインストール方法などはREADMEをご参照ください。<br>\n<a href="https://github.com/jesseduffield/lazydocker/blob/master/README.md" rel="nofollow noopener" target="_blank">README.md</a></p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> lazydocker <span class="nt">-h</span>\n<span class="go">lazydocker - The lazier way to manage everything docker\nhttps://github.com/jesseduffield/lazydocker\n\n  Flags:\n       --version  Displays the program version string.\n    -h --help  Displays help with available flag, subcommand, and positional value parameters.\n    -c --config  Print the current default config\n    -d --debug  a boolean\n    -f --file  Specify alternate compose files\n</span></pre></div></div>\n\n<h2>\n<span id="できること" class="fragment"></span><a href="#%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8"><i class="fa fa-link"></i></a>できること</h2>\n\n<ul>\n<li>コンテナの状態の表示</li>\n<li>コンテナのログの確認</li>\n<li>メトリクスの視覚化</li>\n<li>コンテナの再起動/削除/リビルド</li>\n<li>イメージの詳細の確認</li>\n</ul>\n\n<p>imageのdockerfileなんかも同一画面から確認できます。</p>\n\n<h2>\n<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>\n\n<p><a href="https://camo.qiitausercontent.com/ac22c8927863874cd4f846c5853fbee2c9a1545e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f65653339303664332d326464332d383636352d656631382d3635333664313030363637362e676966" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/ac22c8927863874cd4f846c5853fbee2c9a1545e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f65653339303664332d326464332d383636352d656631382d3635333664313030363637362e676966" alt="名称未設定.mov.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/ee3906d3-2dd3-8665-ef18-6536d1006676.gif"></a></p>\n\n<p>インストール後は<code>lazydocker</code>で起動します。<br>\nキーボードでの操作に加えマウスでの操作も可能です。<br>\nキーバインドについては下記をご参照ください。</p>\n\n<p><a href="https://github.com/jesseduffield/lazydocker/blob/master/docs/keybindings/Keybindings_en.md" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/jesseduffield/lazydocker/blob/master/docs/keybindings/Keybindings_en.md</a></p>\n\n<p>「r」で再起動や「s」で停止などなど簡単にコンテナ操作ができます。</p>\n\n<p>動画でも使い方説明されているのでこちらも<br>\n<a href="https://www.youtube.com/watch?v=NICqQPxwJWw&amp;feature=youtu.be" class="autolink" rel="nofollow noopener" target="_blank">https://www.youtube.com/watch?v=NICqQPxwJWw&amp;feature=youtu.be</a></p>\n\n<p>Configを書き換えるだけで見れるデータなども簡単に変えることができます。</p>\n\n<p><a href="https://camo.qiitausercontent.com/fc727cc8e700e554bd487233f2d4812982d2b38e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f39386634386533342d653062622d363332372d643232332d3839353236353665393734622e706e67" target="_blank" rel="nofollow noopener"><img width="631" alt="スクリーンショット 2019-07-06 14.44.08.png" src="https://camo.qiitausercontent.com/fc727cc8e700e554bd487233f2d4812982d2b38e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f39386634386533342d653062622d363332372d643232332d3839353236353665393734622e706e67" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/98f48e34-e0bb-6327-d223-8952656e974b.png"></a></p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<ul>\n<li><a href="https://github.com/jesseduffield/lazydocker" rel="nofollow noopener" target="_blank">jesseduffield/lazydocker</a></li>\n</ul>\n\n<h2>\n<span id="終わり" class="fragment"></span><a href="#%E7%B5%82%E3%82%8F%E3%82%8A"><i class="fa fa-link"></i></a>終わり</h2>\n\n<p>CPU/メモリの使用量がグラフィカルに見れるのはとても便利で、コンテナ再起動なんかも同一のウィンドウでできるのも強いです。<br>\nカスタムキーバインドの話なんかも出てたり機能強化のissueなんかみても今後がとても楽しみですね(<a href="https://github.com/jesseduffield/lazydocker/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/jesseduffield/lazydocker/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement</a>)</p>\n', 'body': '## lazydocker\n\n<img width="1138" alt="スクリーンショット 2019-07-05 21.03.08.png" src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/ad156039-4be5-78a4-4d5f-a2b68032f0e4.png">\n\n## 概要\n\nLazyDockerは、DockerおよびDocker ComposeをTUIで操作できるツールです。\ndocker、docker-composeコンテナ環境の状態の表示、ログの表示、コンテナまたはサービスの再起動/削除/再構築などが1つのウインドゥで実行できます。\nGithubでソースは公開されておりGoで実装されているようです。\n\n[jesseduffield/lazydocker](https://github.com/jesseduffield/lazydocker)\n\n公開されたばかりですがスター数の伸びがとてもすごいです(7/5現在で7000ほど)\n\n##\u3000実行環境\n\n* macOS Mojave\n\n``` console\n$ docker version\nClient: Docker Engine - Community\n Version:           18.09.2\n API version:       1.39\n Go version:        go1.10.8\n Git commit:        6247962\n Built:             Sun Feb 10 04:12:39 2019\n OS/Arch:           darwin/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          18.09.2\n  API version:      1.39 (minimum version 1.12)\n  Go version:       go1.10.6\n  Git commit:       6247962\n  Built:            Sun Feb 10 04:13:06 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n\n$ docker-compose version\ndocker-compose version 1.23.2, build 1110ad01\ndocker-py version: 3.6.0\nCPython version: 3.6.6\nOpenSSL version: OpenSSL 1.1.0h  27 Mar 2018\n```\n\n## インストール\n\nmacの場合はリポジトリを追加してbrew installだけで完了です。\n\n``` bash\n$ brew tap jesseduffield/lazydocker\n$ brew install lazydocker\n```\n\nLinuxの場合もインストール方法などはREADMEをご参照ください。\n[README.md](https://github.com/jesseduffield/lazydocker/blob/master/README.md)\n\n``` console\n$ lazydocker -h\nlazydocker - The lazier way to manage everything docker\nhttps://github.com/jesseduffield/lazydocker\n\n  Flags:\n       --version  Displays the program version string.\n    -h --help  Displays help with available flag, subcommand, and positional value parameters.\n    -c --config  Print the current default config\n    -d --debug  a boolean\n    -f --file  Specify alternate compose files\n```\n\n## できること\n\n* コンテナの状態の表示\n* コンテナのログの確認\n* メトリクスの視覚化\n* コンテナの再起動/削除/リビルド\n* イメージの詳細の確認\n\nimageのdockerfileなんかも同一画面から確認できます。\n\n## 使い方\n\n![名称未設定.mov.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/ee3906d3-2dd3-8665-ef18-6536d1006676.gif)\n\nインストール後は``` lazydocker ```で起動します。\nキーボードでの操作に加えマウスでの操作も可能です。\nキーバインドについては下記をご参照ください。\n\nhttps://github.com/jesseduffield/lazydocker/blob/master/docs/keybindings/Keybindings_en.md\n\n「r」で再起動や「s」で停止などなど簡単にコンテナ操作ができます。\n\n動画でも使い方説明されているのでこちらも\nhttps://www.youtube.com/watch?v=NICqQPxwJWw&feature=youtu.be\n\nConfigを書き換えるだけで見れるデータなども簡単に変えることができます。\n\n<img width="631" alt="スクリーンショット 2019-07-06 14.44.08.png" src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/98f48e34-e0bb-6327-d223-8952656e974b.png">\n\n\n## 参考リンク\n\n* [jesseduffield/lazydocker](https://github.com/jesseduffield/lazydocker)\n\n## 終わり\n\nCPU/メモリの使用量がグラフィカルに見れるのはとても便利で、コンテナ再起動なんかも同一のウィンドウでできるのも強いです。\nカスタムキーバインドの話なんかも出てたり機能強化のissueなんかみても今後がとても楽しみですね(https://github.com/jesseduffield/lazydocker/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-07-05T21:05:01+09:00', 'group': None, 'id': '7e6daceecc660f097726', 'likes_count': 342, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'docker-compose', 'versions': []}, {'name': 'gocui', 'versions': []}], 'title': 'DockerとDocker ComposeのTerminal UI「lazydocker」のご紹介', 'updated_at': '2019-07-06T14:45:02+09:00', 'url': 'https://qiita.com/ryuichi1208/items/7e6daceecc660f097726', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/74beffa30d9eaf51a48ce98fdeac9bcc78ee8145/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f35363338346137322d396633332d363539352d643261632d3535333762383330656563322e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/74beffa30d9eaf51a48ce98fdeac9bcc78ee8145/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f35363338346137322d396633332d363539352d643261632d3535333762383330656563322e706e67" alt="vertical (1).png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/56384a72-9f33-6595-d2ac-5537b830eec2.png"></a></p>\n\n<p>A Python library for the Docker Engine API.</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p><a href="https://github.com/docker" rel="nofollow noopener" target="_blank">docker</a>のページを見てると<a href="https://github.com/docker/docker-py" rel="nofollow noopener" target="_blank">docker-py</a>っていうリポジトリを見つけた。<br>\nせっかくだから触ってみたので使い方とかまとめてみました。</p>\n\n<h2>\n<span id="docker-pyとは" class="fragment"></span><a href="#docker-py%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>docker-pyとは</h2>\n\n<p>Docker Engine API用のPythonライブラリです。<br>\ndockerコマンドを使ってやるような操作をpythonで書いたアプリケーションから実行できます。<br>\nオープンソースでありGitHubで公開されています。(Apache License 2.0)<br>\n『<a href="https://github.com/docker/docker-py" rel="nofollow noopener" target="_blank">docker/docker-py</a>』<br>\n言語はpythonで書かれている。スター数は4000程度</p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<ul>\n<li>OS : macOS Mojave 10.14.2</li>\n<li>Python : 3.7.3</li>\n</ul>\n\n<h2>\n<span id="インストール手順" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>インストール手順</h2>\n\n<p>pipを使って簡単にインストールできる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>pip <span class="nb">install </span>docker\n</pre></div></div>\n\n<h2>\n<span id="とりあえず実行" class="fragment"></span><a href="#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>とりあえず実行</h2>\n\n<p>とりあえず実行します。<br>\n下記のソースではdockerデーモンと通信をするだけで何も表示されません。<br>\nここでエラーが起きてる場合はインストールが失敗しているかimportのパス解決がうまくいってない場合があります。<br>\n過去にインストールしてあったりする場合は一度消してから再度インストールしてみるなどで解決する場合が多いようです。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">docker</span>\n\n<span class="c"># デフォルトソケットを用いて通信</span>\n<span class="n">client</span> <span class="o">=</span> <span class="n">docker</span><span class="o">.</span><span class="n">from_env</span><span class="p">()</span>\n</pre></div></div>\n\n<p>ここでfrom_envへDockerサーバへのURLを記載することもできます。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="n">client</span> <span class="o">=</span> <span class="n">docker</span><span class="o">.</span><span class="n">DockerClient</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="s">\'unix://var/run/docker.sock\'</span><span class="p">)</span>\n</pre></div></div>\n\n<p>またこの段階でdockerに関する情報を取得するための機能も実装されています。<br>\nどれも辞書型で値を返されます。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># データ使用情報を表示</span>\n<span class="n">client</span><span class="o">.</span><span class="n">df</span><span class="p">()</span>\n\n<span class="c"># システムの情報を表示します。 =&gt; docker info</span>\n<span class="n">client</span><span class="o">.</span><span class="n">info</span><span class="p">())</span>\n\n<span class="c"># dockerのバージョンを表示 =&gt; docker version</span>\n<span class="n">client</span><span class="o">.</span><span class="n">version</span><span class="p">()</span>\n\n<span class="c"># サーバが応答してるかどうか確認</span>\n<span class="n">client</span><span class="o">.</span><span class="n">ping</span><span class="p">()</span>\n</pre></div></div>\n\n<p>上記を使えばこんな感じでdockerが起動してるかやアプリ側からもdockerのバージョン情報なんかが落とすとかが簡単にできたりします。(dockerが昔入れてそのまんまで動かない！みたいなのが減りそうです。そもそもコマンド叩いて見ろって話ですが。。。)</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">sys</span>\n<span class="kn">import</span> <span class="nn">docker</span>\n\n<span class="n">client</span> <span class="o">=</span> <span class="n">docker</span><span class="o">.</span><span class="n">from_env</span><span class="p">()</span>\n\n<span class="c"># 応答確認</span>\n<span class="k">if</span> <span class="n">client</span><span class="o">.</span><span class="n">ping</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span> <span class="p">:</span>\n    <span class="k">print</span> <span class="p">(</span><span class="s">"Ping Error"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">)</span>\n\n<span class="n">cv</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">version</span><span class="p">()</span>\n<span class="k">print</span><span class="p">(</span><span class="n">cv</span><span class="p">[</span><span class="s">"Components"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">"Version"</span><span class="p">])</span>\n</pre></div></div>\n\n<h2>\n<span id="コンテナを走らせる" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E8%B5%B0%E3%82%89%E3%81%9B%E3%82%8B"><i class="fa fa-link"></i></a>コンテナを走らせる</h2>\n\n<p>上まではdockerの実行環境を見たりしてるだけでしたがここからはコンテナを実際に動かしてみます。<br>\ndocker runのような形同様にとっても簡単に動かせます。<br>\n実行時オプションはrun()の第3引数へ渡すことで処理することができます。<br>\ncpu_countでのCPU割り当てやentrypointでコンテナのエントリポイント、networkでネットワークなどを指定することができます。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">sys</span>\n<span class="kn">import</span> <span class="nn">docker</span>\n\n<span class="n">client</span> <span class="o">=</span> <span class="n">docker</span><span class="o">.</span><span class="n">from_env</span><span class="p">()</span>\n\n<span class="c"># run(image, command=None, **kwargs)</span>\n<span class="k">print</span> <span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">containers</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s">"alpine"</span><span class="p">,</span> <span class="s">"cat /etc/alpine-release"</span><span class="p">))</span>\n</pre></div></div>\n\n<p>当然ですが起動せずにコンテナを作成したりコンテナ情報を取得したりすることもでできます。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># コンテナを作成</span>\n<span class="n">client</span><span class="o">.</span><span class="n">containers</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>\n\n<span class="c"># コンテナリストを取得</span>\n<span class="n">client</span><span class="o">.</span><span class="n">containers</span><span class="o">.</span><span class="nb">list</span><span class="p">()</span>\n\n<span class="c"># コンテナオブジェクトを取得</span>\n<span class="n">client</span><span class="o">.</span><span class="n">containers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span> <span class="ow">or</span> <span class="n">name</span><span class="p">)</span>\n\n<span class="c"># 停止したコンテナを削除</span>\n<span class="n">client</span><span class="o">.</span><span class="n">containers</span><span class="o">.</span><span class="n">prune</span><span class="p">()</span>\n\n<span class="c"># pullもできる</span>\n<span class="n">image</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">pull</span><span class="p">(</span><span class="s">"alpine"</span><span class="p">)</span>\n</pre></div></div>\n\n<p>若干余談ですが、ここら辺は全て共通してサーバでのエラーは「docker.errors.APIError」を返す仕様となっているようです。</p>\n\n<h2>\n<span id="ネットワーク" class="fragment"></span><a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF"><i class="fa fa-link"></i></a>ネットワーク</h2>\n\n<p>ネットワークもpythonから操作できます。<br>\ndocker networkに対応した操作がそれぞれあるようです。<br>\n<a href="http://docs.docker.jp/engine/userguide/networking/dockernetworks.html" rel="nofollow noopener" target="_blank">Docker コンテナ・ネットワークの理解</a></p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="n">client</span><span class="o">.</span><span class="n">networks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s">"network1"</span><span class="p">,</span> <span class="n">driver</span><span class="o">=</span><span class="s">"bridge"</span><span class="p">)</span>\n\n<span class="c"># サブネット、ゲートウェイを使うことも</span>\n<span class="n">ipam_pool</span> <span class="o">=</span> <span class="n">docker</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">IPAMPool</span><span class="p">(</span>\n    <span class="n">subnet</span><span class="o">=</span><span class="s">\'192.168.52.0/24\'</span><span class="p">,</span>\n    <span class="n">gateway</span><span class="o">=</span><span class="s">\'192.168.52.254\'</span>\n<span class="p">)</span>\n\n<span class="n">ipam_config</span> <span class="o">=</span> <span class="n">docker</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">IPAMConfig</span><span class="p">(</span>\n    <span class="n">pool_configs</span><span class="o">=</span><span class="p">[</span><span class="n">ipam_pool</span><span class="p">]</span>\n<span class="p">)</span>\n\n<span class="n">client</span><span class="o">.</span><span class="n">networks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>\n    <span class="s">"network1"</span><span class="p">,</span>\n    <span class="n">driver</span><span class="o">=</span><span class="s">"bridge"</span><span class="p">,</span>\n    <span class="n">ipam</span><span class="o">=</span><span class="n">ipam_config</span>\n<span class="p">)</span>\n</pre></div></div>\n\n<h2>\n<span id="ボリューム" class="fragment"></span><a href="#%E3%83%9C%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%A0"><i class="fa fa-link"></i></a>ボリューム</h2>\n\n<p>ボリューム作成/削除も可能</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="n">volume</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">volumes</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">\'foobar\'</span><span class="p">,</span> <span class="n">driver</span><span class="o">=</span><span class="s">\'local\'</span><span class="p">,</span>\n        <span class="n">driver_opts</span><span class="o">=</span><span class="p">{</span><span class="s">\'foo\'</span><span class="p">:</span> <span class="s">\'bar\'</span><span class="p">,</span> <span class="s">\'baz\'</span><span class="p">:</span> <span class="s">\'false\'</span><span class="p">},</span>\n        <span class="n">labels</span><span class="o">=</span><span class="p">{</span><span class="s">"key"</span><span class="p">:</span> <span class="s">"value"</span><span class="p">})</span>\n\n<span class="c"># 未使用ボリュームの削除</span>\n<span class="n">volume</span><span class="o">.</span><span class="n">prune</span><span class="p">(</span><span class="n">filters</span><span class="p">)</span>\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>触ってて思ったのは「python」 &amp; [docker]を効率よく同時に学べるいい題材！だなって感じでした。<br>\nここで紹介した機能以外にもたくさんの機能がありました。dockerコマンドでできることは恐らくできるんだと思います。<br>\n公式のドキュメントを読みつつ進めていくと色々活用できそうだなって感じでした。<br>\n(docker-py使うためのコンテナとか面白そう)</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<ul>\n<li><a href="https://github.com/docker/docker-py" rel="nofollow noopener" target="_blank">docker/docker-py</a></li>\n<li><a href="https://docker-py.readthedocs.io/en/latest/index.html" rel="nofollow noopener" target="_blank">Docker SDK for Python</a></li>\n<li><a href="https://dev.classmethod.jp/tool/docker/learning-on-docker-sdk-for-python/" rel="nofollow noopener" target="_blank">Python の学習がてら、SDKs for Docker Engine API を触ってみた</a></li>\n</ul>\n', 'body': '![vertical (1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/56384a72-9f33-6595-d2ac-5537b830eec2.png)\n\nA Python library for the Docker Engine API.\n\n## 背景\n\n[docker](https://github.com/docker)のページを見てると[docker-py](https://github.com/docker/docker-py)っていうリポジトリを見つけた。\nせっかくだから触ってみたので使い方とかまとめてみました。\n\n## docker-pyとは\n\nDocker Engine API用のPythonライブラリです。\ndockerコマンドを使ってやるような操作をpythonで書いたアプリケーションから実行できます。\nオープンソースでありGitHubで公開されています。(Apache License 2.0)\n『[docker/docker-py](https://github.com/docker/docker-py)』\n言語はpythonで書かれている。スター数は4000程度\n\n## 環境\n\n* OS : macOS Mojave 10.14.2\n* Python : 3.7.3\n\n## インストール手順\n\npipを使って簡単にインストールできる\n\n``` bash\n$ pip install docker\n```\n\n## とりあえず実行\n\nとりあえず実行します。\n下記のソースではdockerデーモンと通信をするだけで何も表示されません。\nここでエラーが起きてる場合はインストールが失敗しているかimportのパス解決がうまくいってない場合があります。\n過去にインストールしてあったりする場合は一度消してから再度インストールしてみるなどで解決する場合が多いようです。\n\n``` python\nimport docker\n\n# デフォルトソケットを用いて通信\nclient = docker.from_env()\n```\n\nここでfrom_envへDockerサーバへのURLを記載することもできます。\n\n``` python\nclient = docker.DockerClient(base_url=\'unix://var/run/docker.sock\')\n```\n\nまたこの段階でdockerに関する情報を取得するための機能も実装されています。\nどれも辞書型で値を返されます。\n\n``` python\n# データ使用情報を表示\nclient.df()\n\n# システムの情報を表示します。 => docker info\nclient.info())\n\n# dockerのバージョンを表示 => docker version\nclient.version()\n\n# サーバが応答してるかどうか確認\nclient.ping()\n```\n\n上記を使えばこんな感じでdockerが起動してるかやアプリ側からもdockerのバージョン情報なんかが落とすとかが簡単にできたりします。(dockerが昔入れてそのまんまで動かない！みたいなのが減りそうです。そもそもコマンド叩いて見ろって話ですが。。。)\n\n``` python\nimport sys\nimport docker\n\nclient = docker.from_env()\n\n# 応答確認\nif client.ping() == False :\n    print ("Ping Error", file=sys.stderr)\n\ncv = client.version()\nprint(cv["Components"][0]["Version"])\n```\n\n## コンテナを走らせる\n\n上まではdockerの実行環境を見たりしてるだけでしたがここからはコンテナを実際に動かしてみます。\ndocker runのような形同様にとっても簡単に動かせます。\n実行時オプションはrun()の第3引数へ渡すことで処理することができます。\ncpu_countでのCPU割り当てやentrypointでコンテナのエントリポイント、networkでネットワークなどを指定することができます。\n\n``` python\nimport sys\nimport docker\n\nclient = docker.from_env()\n\n# run(image, command=None, **kwargs)\nprint (client.containers.run("alpine", "cat /etc/alpine-release"))\n```\n\n当然ですが起動せずにコンテナを作成したりコンテナ情報を取得したりすることもでできます。\n\n``` python\n# コンテナを作成\nclient.containers.create()\n\n# コンテナリストを取得\nclient.containers.list()\n\n# コンテナオブジェクトを取得\nclient.containers.get(id or name)\n\n# 停止したコンテナを削除\nclient.containers.prune()\n\n# pullもできる\nimage = client.images.pull("alpine")\n```\n\n若干余談ですが、ここら辺は全て共通してサーバでのエラーは「docker.errors.APIError」を返す仕様となっているようです。\n\n## ネットワーク\n\nネットワークもpythonから操作できます。\ndocker networkに対応した操作がそれぞれあるようです。\n[Docker コンテナ・ネットワークの理解](http://docs.docker.jp/engine/userguide/networking/dockernetworks.html)\n\n``` python\nclient.networks.create("network1", driver="bridge")\n\n# サブネット、ゲートウェイを使うことも\nipam_pool = docker.types.IPAMPool(\n    subnet=\'192.168.52.0/24\',\n    gateway=\'192.168.52.254\'\n)\n\nipam_config = docker.types.IPAMConfig(\n    pool_configs=[ipam_pool]\n)\n\nclient.networks.create(\n    "network1",\n    driver="bridge",\n    ipam=ipam_config\n)\n```\n\n## ボリューム\n\nボリューム作成/削除も可能\n\n``` python\nvolume = client.volumes.create(name=\'foobar\', driver=\'local\',\n        driver_opts={\'foo\': \'bar\', \'baz\': \'false\'},\n        labels={"key": "value"})\n\n# 未使用ボリュームの削除\nvolume.prune(filters)\n```\n\n## まとめ\n\n触ってて思ったのは「python」 & [docker]を効率よく同時に学べるいい題材！だなって感じでした。\nここで紹介した機能以外にもたくさんの機能がありました。dockerコマンドでできることは恐らくできるんだと思います。\n公式のドキュメントを読みつつ進めていくと色々活用できそうだなって感じでした。\n(docker-py使うためのコンテナとか面白そう)\n\n## 参考リンク\n\n* [docker/docker-py](https://github.com/docker/docker-py)\n* [Docker SDK for Python](https://docker-py.readthedocs.io/en/latest/index.html)\n* [Python の学習がてら、SDKs for Docker Engine API を触ってみた](https://dev.classmethod.jp/tool/docker/learning-on-docker-sdk-for-python/)\n', 'coediting': False, 'comments_count': 5, 'created_at': '2019-06-26T23:41:25+09:00', 'group': None, 'id': 'd673fe50121599f6b063', 'likes_count': 54, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Python', 'versions': []}, {'name': 'Docker', 'versions': []}], 'title': 'docker-pyを使ってpythonでコンテナを操作する方法', 'updated_at': '2019-06-27T00:14:00+09:00', 'url': 'https://qiita.com/ryuichi1208/items/d673fe50121599f6b063', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="シグナル送信" class="fragment"></span><a href="#%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E9%80%81%E4%BF%A1"><i class="fa fa-link"></i></a>シグナル送信</h2>\n\n<p>pidを元に指定されたプロセスへSIGKILLを送信</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">do_kill_process</span><span class="p">(</span><span class="n">pid</span><span class="p">):</span>\n    <span class="k">try</span><span class="p">:</span>\n        <span class="n">os</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">pid</span><span class="p">),</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIGKILL</span><span class="p">)</span> <span class="c"># kill(pid, sig)</span>\n    <span class="k">except</span> <span class="nb">OSError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>\n        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">errno</span><span class="o">.</span><span class="n">ESRCH</span><span class="p">:</span> <span class="c">#「No such process」じゃない場合</span>\n            <span class="k">raise</span> <span class="n">e</span>\n</pre></div></div>\n\n<p>利用可能なシグナルはsigkill以外にも多数あるので下記の公式ドキュメントがわかりやすかったです。<br>\n<a href="https://docs.python.org/ja/3/library/signal.html#module-signal" rel="nofollow noopener" target="_blank">signal --- 非同期イベントにハンドラを設定する</a></p>\n\n<h2>\n<span id="シグナルハンドラ" class="fragment"></span><a href="#%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9"><i class="fa fa-link"></i></a>シグナルハンドラ</h2>\n\n<p>pythonで書くシグナルハンドラの例です。<br>\n今回の例ではSIGINTをハンドリングしています。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>\n    <span class="k">print</span> <span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">frame</span><span class="p">))</span>\n\n<span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">func</span><span class="p">)</span>\n<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>\n   <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>\n</pre></div></div>\n\n<p>上記、実行中にCtr-Cを入力しても受けとたシグナルナンバーとスタックフレームが出力されるだけとなります。</p>\n', 'body': '## シグナル送信\n\npidを元に指定されたプロセスへSIGKILLを送信\n\n``` python\ndef do_kill_process(pid):\n    try:\n        os.kill(int(pid), signal.SIGKILL) # kill(pid, sig)\n    except OSError as e:\n        if e.errno != errno.ESRCH: #「No such process」じゃない場合\n            raise e\n```\n\n利用可能なシグナルはsigkill以外にも多数あるので下記の公式ドキュメントがわかりやすかったです。\n[signal --- 非同期イベントにハンドラを設定する](https://docs.python.org/ja/3/library/signal.html#module-signal)\n\n## シグナルハンドラ\n\npythonで書くシグナルハンドラの例です。\n今回の例ではSIGINTをハンドリングしています。\n\n``` python\ndef func(num, frame):\n    print (num, str(frame))\n\nsignal.signal(signal.SIGINT, func)\nfor i in range(100):\n   sleep(10)\n```\n\n上記、実行中にCtr-Cを入力しても受けとたシグナルナンバーとスタックフレームが出力されるだけとなります。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-06-18T10:17:03+09:00', 'group': None, 'id': 'e4a4804fb75a133a50bb', 'likes_count': 1, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Python', 'versions': []}], 'title': 'pythonで他プロセスへシグナルを送る方法', 'updated_at': '2019-06-18T10:29:11+09:00', 'url': 'https://qiita.com/ryuichi1208/items/e4a4804fb75a133a50bb', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/97204f2cb2c18797c28fa044e83de4a7aafb0614/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f62383932356430612d653066312d633538392d663330332d6431393036393032616237302e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/97204f2cb2c18797c28fa044e83de4a7aafb0614/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f62383932356430612d653066312d633538392d663330332d6431393036393032616237302e6a706567" alt="b07ed8277cb970460b4b8de8c50ea601.jpg" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/b8925d0a-e0f1-c589-f303-d1906902ab70.jpeg"></a></p>\n\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>mac買った時にやる初期設定やインストールしたいアプリのまとめ<br>\n構築して何しようって人へ少しでもヒントになれば幸いです。</p>\n\n<h2>\n<span id="想定読者" class="fragment"></span><a href="#%E6%83%B3%E5%AE%9A%E8%AA%AD%E8%80%85"><i class="fa fa-link"></i></a>想定読者</h2>\n\n<ul>\n<li>windowsPCで開発してきたけどMac買って何からすればいいかイマイチな人</li>\n<li>Macちょっと触ってさらに便利にしたい人</li>\n</ul>\n\n<h2>\n<span id="基本設定" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>基本設定</h2>\n\n<p>とりあえずやる基本設定。</p>\n\n<h4>\n<span id="-タッチバーを固定" class="fragment"></span><a href="#-%E3%82%BF%E3%83%83%E3%83%81%E3%83%90%E3%83%BC%E3%82%92%E5%9B%BA%E5%AE%9A"><i class="fa fa-link"></i></a>● タッチバーを固定</h4>\n\n<p>タッチバーが使いづらい。<br>\n外部キーボードは使うとしてもたまにノートで作業する時に不便すぎるので必須の設定</p>\n\n<ul>\n<li><a href="https://pc-karuma.net/mac-touch-bar-function-key/" rel="nofollow noopener" target="_blank">Mac - Touch Barにファンクションキー（Fnキー）を常に表示する</a></li>\n</ul>\n\n<h4>\n<span id="-メニューバー設定" class="fragment"></span><a href="#-%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%90%E3%83%BC%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● メニューバー設定</h4>\n\n<p>デフォルトでは情報が少し物足りず空白が多いです。<br>\nあまり常駐させすぎるとパフォーマンスへ影響が出るので最低限<br>\n『日付』『バッテリー状況』『メモリ使用率』を出しています。</p>\n\n<ul>\n<li><a href="https://pc-karuma.net/mac-menu-bar-buttery/" rel="nofollow noopener" target="_blank">Mac - メニューバーにバッテリーの状況を表示/非表示</a></li>\n<li><a href="https://webhoric.com/apple/mac/mac-menubar-dateandday/" rel="nofollow noopener" target="_blank">Mac 使い方 メニューバーの時計に日付と曜日を表示させる方法</a></li>\n<li><a href="https://blog.piyo.tech/posts/2018-10-13-mac-menu-bar-resource-monitor/" rel="nofollow noopener" target="_blank">Macのメニューバーにリソースモニターを表示する</a></li>\n</ul>\n\n<h4>\n<span id="-night-shiftモード" class="fragment"></span><a href="#-night-shift%E3%83%A2%E3%83%BC%E3%83%89"><i class="fa fa-link"></i></a>● Night Shiftモード</h4>\n\n<p>必須中の必須設定。<br>\nMacからのブルーライトをカットできるので長時間使用時などはぜひやっておきましょう。<br>\n色調が気に食わないって方もいたので設定方法と戻し方も確認すると良いかもしれませんね。</p>\n\n<p><a href="https://www.danshihack.com/2017/03/30/junp/mac-night-shift.html" rel="nofollow noopener" target="_blank">Macからのブルーライトをカット</a></p>\n\n<h4>\n<span id="-マウストラックパッド設定" class="fragment"></span><a href="#-%E3%83%9E%E3%82%A6%E3%82%B9%E3%83%88%E3%83%A9%E3%83%83%E3%82%AF%E3%83%91%E3%83%83%E3%83%89%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● マウス/トラックパッド設定</h4>\n\n<p>マウスのスクロール方向やトラックパッドへのジェスチャー。右クリックなんかを設定していきます。<br>\nジェスチャー機能は専用のアプリを使って独自の設定などもできますが、個人的にはトラックパッドを多用することはあまりなくマウス操作が多いので使ってません。</p>\n\n<ul>\n<li><a href="https://pc-karuma.net/mac-mouse-settings/" rel="nofollow noopener" target="_blank">Mac - マウスの設定 - スクロールの方向 - 軌跡の速さ - スクロールの速さ</a></li>\n</ul>\n\n<h4>\n<span id="-通知オフ" class="fragment"></span><a href="#-%E9%80%9A%E7%9F%A5%E3%82%AA%E3%83%95"><i class="fa fa-link"></i></a>● 通知オフ</h4>\n\n<p>デフォルトだと不要な通知があったりするのでこちらも購入直後に切ります<br>\n「おやすみモード」でiPhoneなどのようにオフにしたりすることもできます。</p>\n\n<ul>\n<li><a href="https://timetoenjoy.info/archives/543" rel="nofollow noopener" target="_blank">Macの通知センターからの通知をオフにする２つの方法</a></li>\n</ul>\n\n<h4>\n<span id="-siriオフ" class="fragment"></span><a href="#-siri%E3%82%AA%E3%83%95"><i class="fa fa-link"></i></a>● siriオフ</h4>\n\n<p>個人的には不要でした。<br>\n開発において使うことはないと思うのでオフで問題ないと思います。<br>\n(そもそも使ってる人を自分は見たことない気がする。。。)</p>\n\n<ul>\n<li><a href="https://pc-karuma.net/mac-disable-siri/" rel="nofollow noopener" target="_blank">Mac - Siri を無効に - メニューバーとDockからSiriアイコンを削除</a></li>\n</ul>\n\n<h4>\n<span id="-dotfiles隠しファイルの可視化" class="fragment"></span><a href="#-dotfiles%E9%9A%A0%E3%81%97%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%8F%AF%E8%A6%96%E5%8C%96"><i class="fa fa-link"></i></a>● dotfiles（隠しファイル）の可視化</h4>\n\n<p>デフォルトだと隠しファイルは見えなくなってますが、開発においては見ること多いと思います。<br>\nfinderからあまり弄ることはないですが一応見えるようにしておきます。</p>\n\n<ul>\n<li><a href="https://qiita.com/clutter/items/520efe83b48375048c9f" id="reference-eb2bd897bfc0faee1af1">Macで隠しファイルを表示する方法</a></li>\n</ul>\n\n<h4>\n<span id="-キー入れ替え" class="fragment"></span><a href="#-%E3%82%AD%E3%83%BC%E5%85%A5%E3%82%8C%E6%9B%BF%E3%81%88"><i class="fa fa-link"></i></a>● キー入れ替え</h4>\n\n<p>Windows→Macと来たためキーの配置が若干使いにくいです。<br>\n特にCapsLockの位置がとても悪いのとWindowsでいうCtrlキーの位置がよくないです。これらを入れ替えるだけでも操作性は割とWindows風に使えたりします。<br>\n半角/全角変換なんかについても割と話題になりますがこれはMacの方が自然と使えるのでWindowsをMac風に使うとよさそうです。<br>\n下記で紹介しているのは修飾キーのみの入れ替えなのでもっと凝った設定をしたい場合は専用のアプリが必要となります。</p>\n\n<ul>\n<li><a href="https://pc-karuma.net/mac-keys-modifiers-switch-command-control-caps/" rel="nofollow noopener" target="_blank">Mac - キーバインドの変更・入替え（command、ctrl、caps）</a></li>\n</ul>\n\n<p>TwitterなどでMac + HHKBのような構成が人気です。私も同じような構成で使ってます。<br>\nその際に参考になった記事を下記へ記載します(Macの上に載せて使ってる画像が話題になってて正直最初は「え？？」って思いましたが意外と快適です)。</p>\n\n<ul>\n<li><a href="https://qiita.com/ezawa800/items/bedef97a5ec87b8acf91" id="reference-9f658643ae0b8770292b">MacBookでHHKB Proを使うときにやったこと</a></li>\n</ul>\n\n<h4>\n<span id="-defaultsコマンド設定" class="fragment"></span><a href="#-defaults%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● defaultsコマンド設定</h4>\n\n<p>システム環境設定や各アプリの環境設定画面では設定できない値を設定していきます。<br>\n前に私が書いた記事があるので参考になれば幸いです。</p>\n\n<ul>\n<li><a href="https://qiita.com/ryuichi1208/items/5905240f3bfce793b33d" id="reference-04f79b24f33110c932d7">iMac/MacBook購入後に必ず設定したい設定項目</a></li>\n</ul>\n\n<p>Finderでのパスの表示など結構便利なものが多いのでとてもおススメ。</p>\n\n<h4>\n<span id="-アプリインストール" class="fragment"></span><a href="#-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>● アプリインストール</h4>\n\n<p>以下のアプリをインストールしていきます。<br>\n基本的には全て無料です。</p>\n\n<ul>\n<li>開発用\n\n<ul>\n<li>Xcode</li>\n</ul>\n</li>\n<li>ブラウザ\n\n<ul>\n<li>Google Chrome</li>\n<li>Firefox</li>\n</ul>\n</li>\n<li>テキストエディタ\n\n<ul>\n<li>Sublime text 3</li>\n<li>Visual Studio Code 2019</li>\n</ul>\n</li>\n<li>チャットツール\n\n<ul>\n<li>Slack</li>\n<li>LINE</li>\n<li>Skype</li>\n<li>Discord</li>\n</ul>\n</li>\n<li>仮想化\n\n<ul>\n<li>Docker for Mac</li>\n<li>VMware Fusion</li>\n</ul>\n</li>\n<li>その他\n\n<ul>\n<li>Google日本語入力</li>\n<li>Dropbox</li>\n<li>Evernote</li>\n<li>Todoist</li>\n</ul>\n</li>\n</ul>\n\n<p>下記が大変参考になります</p>\n\n<ul>\n<li><a href="https://qiita.com/blue0513/items/3e81d629dbada17a3b69" id="reference-81bd2601108b5be16be6">Macおすすめ作業効率向上アプリ</a></li>\n</ul>\n\n<h4>\n<span id="-デフォルトブラウザ設定" class="fragment"></span><a href="#-%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● デフォルトブラウザ設定</h4>\n\n<p>Safariも十分いいブラウザです。<br>\nただSafariだけだとWindows機なりとのブラウザのブックマークなどの連携が面倒だったりGoogleアプリ関連の操作性が若干微妙だったりすることが多いのでデフォルトブラウザを「safari」→「Chrome」へと変更します。<br>\n(safariの開発者モードが少し前だと微妙でしたが最近はそこそこ評判いいらしいですね。使ってないですけど。)</p>\n\n<ul>\n<li><a href="https://support.apple.com/ja-jp/HT201607" rel="nofollow noopener" target="_blank">Mac でデフォルトのブラウザやメールクライアントを変更する\n</a></li>\n</ul>\n\n<h4>\n<span id="-time-machine-バックアップの設定" class="fragment"></span><a href="#-time-machine-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%AE%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● Time Machine バックアップの設定</h4>\n\n<p>Macには便利なバックアップアプリが標準で入っています。<br>\nこれをしとけば壊れた時に復元できたり精神的な安心も得られるのでできれば設定しておきます<br>\nバックアップはスケジューリングすることも可能ですので使用していない時間などをあらかじめ設定しておけます。</p>\n\n<ul>\n<li><a href="https://pc-karuma.net/mac-time-machine/" rel="nofollow noopener" target="_blank">Mac - Time Machine の使い方と設定</a></li>\n</ul>\n\n<h4>\n<span id="-ファイアウォール設定" class="fragment"></span><a href="#-%E3%83%95%E3%82%A1%E3%82%A4%E3%82%A2%E3%82%A6%E3%82%A9%E3%83%BC%E3%83%AB%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● ファイアウォール設定</h4>\n\n<p>必要性の有無についてはケースバイケースですが設定方法は知っておいて損はないはずです。</p>\n\n<ul>\n<li><a href="https://pc-karuma.net/mac-firewall/" rel="nofollow noopener" target="_blank">macOS - ファイアウォールをオン/オフ（有効/無効）にする</a></li>\n</ul>\n\n<h4>\n<span id="-共有ファイル設定" class="fragment"></span><a href="#-%E5%85%B1%E6%9C%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● 共有ファイル設定</h4>\n\n<p>GUIで操作することはあまりないですが共有サーバの設定方法です。<br>\nWindowsなどとやり取りする際は必須なので共有については一応設定。</p>\n\n<ul>\n<li><a href="https://support.apple.com/ja-jp/HT204445" rel="nofollow noopener" target="_blank">Mac のファイル共有で接続する方法</a></li>\n</ul>\n\n<h4>\n<span id="-ライブ変換をoff" class="fragment"></span><a href="#-%E3%83%A9%E3%82%A4%E3%83%96%E5%A4%89%E6%8F%9B%E3%82%92off"><i class="fa fa-link"></i></a>● ライブ変換をOFF</h4>\n\n<p>これは正直使えこなせなかったからオフにしてます。<br>\nオンのままで使いこなせる人もいるようだが私はなれなかった。<br>\nうまくやれればとても便利らしいです。</p>\n\n<p><a href="https://sbapp.net/appnews/osxelcapitan-33422" rel="nofollow noopener" target="_blank">Macで日本語が自動変換される「ライブ変換」をオフにする方法</a></p>\n\n<h4>\n<span id="-findy拡張子を表示させる" class="fragment"></span><a href="#-findy%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B"><i class="fa fa-link"></i></a>● Findy拡張子を表示させる</h4>\n\n<p>Macの標準設定ではファイルの拡張子が表示されません。<br>\n色々と不便なのでとりあえず出しておきます。</p>\n\n<p><a href="http://inforati.jp/apple/mac-tips-techniques/system-hints/how-to-show-the-filename-extension-of-a-file-always-in-macos.html" rel="nofollow noopener" target="_blank">Macでファイルの拡張子を表示する方法</a></p>\n\n<h4>\n<span id="-コンピュータ名変更" class="fragment"></span><a href="#-%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E5%90%8D%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>● コンピュータ名変更</h4>\n\n<p>カフェなどでネットへつなぐ際に自分の＋マシン名のような感じで表示されるのが恥ずかしいので変えます。<br>\nそこまで必須ではないですが何故か恥ずかしいので必ず買えるようにしています。</p>\n\n<ul>\n<li><a href="https://matome.naver.jp/odai/2138629469334511401" rel="nofollow noopener" target="_blank">Mac - コンピュータ名（ホスト名）の確認・変更</a></li>\n</ul>\n\n<h4>\n<span id="-ダークモードオン" class="fragment"></span><a href="#-%E3%83%80%E3%83%BC%E3%82%AF%E3%83%A2%E3%83%BC%E3%83%89%E3%82%AA%E3%83%B3"><i class="fa fa-link"></i></a>● ダークモードオン</h4>\n\n<p>これは完全に好みです。<br>\nmacOS Mojaveから待望だったダークテーマのモードが搭載されました。<br>\n開発してますよ！っていう雰囲気出るので自身のモチベも上がったり良いことしかないのでおススメ。</p>\n\n<ul>\n<li><a href="https://support.apple.com/ja-jp/HT208976" rel="nofollow noopener" target="_blank">Mac でダークモードを使う方法</a></li>\n</ul>\n\n<h4>\n<span id="-dockの設定" class="fragment"></span><a href="#-dock%E3%81%AE%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● Dockの設定</h4>\n\n<p>Macの便利な機能Dock。デフォルトでは下ですが個人的にはディスプレイの表示領域的に下はイマイチ<br>\nあと常に表示されてますが隠しておきたい派なので設定します。<br>\nあとデフォルトではでかいです。でかすぎです。なのでアイコンを小さくしてます。</p>\n\n<p><a href="https://lovemac.jp/blog/2583/" rel="nofollow noopener" target="_blank">Mac中級者への道！Dockを整理・カスタマイズしてすっきり使う</a></p>\n\n<h4>\n<span id="-ディスプレイスリープ設定" class="fragment"></span><a href="#-%E3%83%87%E3%82%A3%E3%82%B9%E3%83%97%E3%83%AC%E3%82%A4%E3%82%B9%E3%83%AA%E3%83%BC%E3%83%97%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● ディスプレイスリープ設定</h4>\n\n<p>一定時間触らないことでスリープする機能がデフォルトでオンです。<br>\nWindows機でもなんでも意図しないスリープは個人的にはNGなので必ず切るようにしています。<br>\nただ外出中で電源がない環境だと意外と便利だって声も聞いたことがありますがそこらへんどうなんでしょ。</p>\n\n<ul>\n<li><a href="https://aprico-media.com/posts/1365" rel="nofollow noopener" target="_blank">Macのスリープ機能を解除する設定方法</a></li>\n</ul>\n\n<h4>\n<span id="-コラム的なのショートカットを覚えよう" class="fragment"></span><a href="#-%E3%82%B3%E3%83%A9%E3%83%A0%E7%9A%84%E3%81%AA%E3%81%AE%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%82%92%E8%A6%9A%E3%81%88%E3%82%88%E3%81%86"><i class="fa fa-link"></i></a>● [コラム(的なの)]ショートカットを覚えよう</h4>\n\n<p>設定ではないですが、よく使う操作はショートカットキーを覚えておきましょう。<br>\n全部覚える必要はないしまあ使ってたらかっこいいよねくらいに思いながらやってます(笑)<br>\n(ただwindowsなども並行して使ってるとキーの違いで色々とストレスが溜まるのという現実)</p>\n\n<ul>\n<li><a href="https://qiita.com/ryuichi1208/items/95b835b63c31d39c7629" id="reference-aed94be24263ba592b63">Macで開発するなら抑えておくべきショートカットキーまとめ</a></li>\n</ul>\n\n<p>中でも文書入力やプログラミングにおいてControlキーを用いたショートカットは使うとても便利かつ使用頻度は多いです。<br>\nここら辺を使いこなせるかどうかで生産性に大きな差が生まれるともいます(個人的見解)。<br>\n説明は文章だけではわかりにくい点もあるので実際の操作を動画で説明しているものが下記でとても参考になります。<br>\nWindowsには無い概念の機能なので若干違和感はあるかもしれませんがぜひとも覚えてみてください。</p>\n\n<ul>\n<li><a href="https://www.youtube.com/watch?v=o_DO8zKIuEI" rel="nofollow noopener" target="_blank">【Mac入門】Macを使うなら、Controlキーの使い方を覚えよう！</a></li>\n</ul>\n\n<h2>\n<span id="開発用設定" class="fragment"></span><a href="#%E9%96%8B%E7%99%BA%E7%94%A8%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>開発用設定</h2>\n\n<p>開発にあたってやっておくと便利な設定など</p>\n\n<h4>\n<span id="-パッケージマネージャーhomebrewインストール" class="fragment"></span><a href="#-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BChomebrew%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>● パッケージマネージャー「homebrew」インストール</h4>\n\n<p>パッケージマネージャーです。Gitやらの便利ツールはこちらからインストールします。<br>\n(GUIでも同様のことができたりしますが利便性で言えばこちらがいいと思います)</p>\n\n<ul>\n<li><a href="https://brew.sh/index_ja.html" rel="nofollow noopener" target="_blank">Homebrew</a></li>\n<li><a href="https://qiita.com/vintersnow/items/fca0be79cdc28bd2f5e4" id="reference-ad9e34ddcbdd38ae84c7">Homebrew使い方まとめ</a></li>\n</ul>\n\n<h4>\n<span id="-ターミナル設定" class="fragment"></span><a href="#-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>● ターミナル設定</h4>\n\n<p>デフォルトではいい感じのフォントがなかったので開発者から評判のいいRictyというフォントを使用します。<br>\n全く知らなかったのですがwindows版もあるとのことです。</p>\n\n<ul>\n<li><a href="http://vdeep.net/ricty-font" rel="nofollow noopener" target="_blank">[Win,Mac]プログラミング用フォント『Ricty』を導入してみよう</a></li>\n</ul>\n\n<p>ターミナルの設定は奥深いです。<br>\nテーマや透明度,アプリの設定でとてもカッコよくできたりします。<br>\n下記記事は導入の際に役立つ情報が多いので是非みてください。</p>\n\n<ul>\n<li><a href="https://qiita.com/kinchiki/items/57e9391128d07819c321" id="reference-b4b1d53bec43b007ed23">お前らのターミナルはダサい</a></li>\n</ul>\n\n<h4>\n<span id="-パッケージインストール" class="fragment"></span><a href="#-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>● パッケージインストール</h4>\n\n<p>とりあえず入れておいてるものを記載します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>brew <span class="nb">install</span> <span class="se">\\</span>\ngit <span class="se">\\</span>\ntmux <span class="se">\\</span>\nvim <span class="se">\\</span>\ncurl <span class="se">\\</span>\nzsh <span class="se">\\</span>\ncoreutils <span class="se">\\</span>\nfindutils <span class="se">\\</span>\ntree <span class="se">\\</span>\ngcc\n</pre></div></div>\n\n<p>インストールされてるものやアンインストールは全てCUIで行います</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># インストール</span>\n<span class="nv">$ </span>brew <span class="nb">install </span>vim\n\n<span class="c"># インストールされているものを表示</span>\n<span class="nv">$ </span>brew list\n\n<span class="c"># brewのアップデート</span>\n<span class="nv">$ </span>brew update\n\n<span class="c"># brewでインストールしたパッケージのアップデート</span>\n<span class="nv">$ </span>brew upgrade\n\n<span class="c"># アンインストール</span>\n<span class="nv">$ </span>brew uninstall vim\n\n<span class="c"># パッケージの情報を確認</span>\n<span class="nv">$ </span>brew info vim\n\n<span class="c"># パッケージの依存関係のみを確認</span>\n<span class="nv">$ </span>brew deps vim\n\n<span class="c"># brewに問題がないか調べる</span>\n<span class="nv">$ </span>brew doctor\n</pre></div></div>\n\n<h4>\n<span id="-dotfilesを配置" class="fragment"></span><a href="#-dotfiles%E3%82%92%E9%85%8D%E7%BD%AE"><i class="fa fa-link"></i></a>● dotfilesを配置</h4>\n\n<p>bashやzshなど設定をdotfilesで管理できるものがあります。<br>\nそれらはテキストとして保存しておきGitHubなどで管理します。</p>\n\n<ul>\n<li><a href="https://qiita.com/massy22/items/5bdb97f8d6e93517f916" id="reference-b5f6d870e1a46f8805b4">dotfilesを管理しよう</a></li>\n</ul>\n\n<p>以下は私が管理してる例。<br>\ndotfilesはGitHubでも結構公開されていて参考になるのも多いのでぜひ見てみてください。</p>\n\n<ul>\n<li><a href="https://github.com/ryuichi1208/dotfiles" rel="nofollow noopener" target="_blank">ryuichi1208/dotfiles</a></li>\n</ul>\n\n<h4>\n<span id="-sshconfig" class="fragment"></span><a href="#-sshconfig"><i class="fa fa-link"></i></a>● sshconfig</h4>\n\n<p>macに限らずですがsshコマンドの引数を減らすためのconfigを書きます。<br>\n下記ファイルへ設定を記載しておくだけで「ssh マシン名」だけで指定のユーザ名/ポート/接続用の鍵が利用されます。</p>\n\n<ul>\n<li><a href="https://qiita.com/passol78/items/2ad123e39efeb1a5286b" id="reference-e5dbf6ea6c8b3b30e91d">~/.ssh/configについて</a></li>\n</ul>\n\n<h4>\n<span id="-コラム的なのmac小技tips" class="fragment"></span><a href="#-%E3%82%B3%E3%83%A9%E3%83%A0%E7%9A%84%E3%81%AA%E3%81%AEmac%E5%B0%8F%E6%8A%80tips"><i class="fa fa-link"></i></a>● (コラム的なの)Mac小技Tips</h4>\n\n<p>MacもWindows同様小技がたくさんあります。<br>\n他の人の操作を見てる時に何それ！っていうことが多々あります。<br>\nそんな感じの小技集でいいと思った記事を記載します。</p>\n\n<ul>\n<li><a href="http://itea40.jp/technic/mac-tips-summary/tricks-going-to-love-mac/" rel="nofollow noopener" target="_blank">Mac厳選Tips ― 初心者でもすぐに使える便利な小技50</a></li>\n</ul>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>メイン：サブでなるべく環境に差異を作りたくない場合はこういった形でまとめとくと便利かもしれませんね。<br>\n宗教的理由で紹介していない素晴らしいツールが他にもたくさんあります。<br>\n他の方の構築記事なんかを参考に是非自分だけのMacを作っていってください！</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p>記事中へ記載</p>\n\n<h2>\n<span id="その他おススメ記事" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%8A%E3%82%B9%E3%82%B9%E3%83%A1%E8%A8%98%E4%BA%8B"><i class="fa fa-link"></i></a>その他おススメ記事</h2>\n\n<ul>\n<li><a href="https://qiita.com/zakiyamaaaaa/items/20d4dc4a3d587500e1f1" id="reference-fda073d661b287247cee">Mac初心者に送るMacのメモリ管理について</a></li>\n</ul>\n', 'body': '![b07ed8277cb970460b4b8de8c50ea601.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/b8925d0a-e0f1-c589-f303-d1906902ab70.jpeg)\n\n## 概要\n\nmac買った時にやる初期設定やインストールしたいアプリのまとめ\n構築して何しようって人へ少しでもヒントになれば幸いです。\n\n## 想定読者\n\n* windowsPCで開発してきたけどMac買って何からすればいいかイマイチな人\n* Macちょっと触ってさらに便利にしたい人\n\n## 基本設定\n\nとりあえずやる基本設定。\n\n#### ● タッチバーを固定\n\nタッチバーが使いづらい。\n外部キーボードは使うとしてもたまにノートで作業する時に不便すぎるので必須の設定\n\n- [Mac - Touch Barにファンクションキー（Fnキー）を常に表示する](\nhttps://pc-karuma.net/mac-touch-bar-function-key/)\n\n#### ● メニューバー設定\n\nデフォルトでは情報が少し物足りず空白が多いです。\nあまり常駐させすぎるとパフォーマンスへ影響が出るので最低限\n『日付』『バッテリー状況』『メモリ使用率』を出しています。\n\n- [Mac - メニューバーにバッテリーの状況を表示/非表示](https://pc-karuma.net/mac-menu-bar-buttery/)\n- [Mac 使い方 メニューバーの時計に日付と曜日を表示させる方法](https://webhoric.com/apple/mac/mac-menubar-dateandday/)\n- [Macのメニューバーにリソースモニターを表示する](https://blog.piyo.tech/posts/2018-10-13-mac-menu-bar-resource-monitor/)\n\n#### ● Night Shiftモード\n\n必須中の必須設定。\nMacからのブルーライトをカットできるので長時間使用時などはぜひやっておきましょう。\n色調が気に食わないって方もいたので設定方法と戻し方も確認すると良いかもしれませんね。\n\n[Macからのブルーライトをカット](https://www.danshihack.com/2017/03/30/junp/mac-night-shift.html)\n\n#### ● マウス/トラックパッド設定\n\nマウスのスクロール方向やトラックパッドへのジェスチャー。右クリックなんかを設定していきます。\nジェスチャー機能は専用のアプリを使って独自の設定などもできますが、個人的にはトラックパッドを多用することはあまりなくマウス操作が多いので使ってません。\n\n- [Mac - マウスの設定 - スクロールの方向 - 軌跡の速さ - スクロールの速さ](https://pc-karuma.net/mac-mouse-settings/)\n\n#### ● 通知オフ\n\nデフォルトだと不要な通知があったりするのでこちらも購入直後に切ります\n「おやすみモード」でiPhoneなどのようにオフにしたりすることもできます。\n\n- [Macの通知センターからの通知をオフにする２つの方法](https://timetoenjoy.info/archives/543)\n\n#### ● siriオフ\n\n個人的には不要でした。\n開発において使うことはないと思うのでオフで問題ないと思います。\n(そもそも使ってる人を自分は見たことない気がする。。。)\n\n- [Mac - Siri を無効に - メニューバーとDockからSiriアイコンを削除](https://pc-karuma.net/mac-disable-siri/)\n\n#### ● dotfiles（隠しファイル）の可視化\n\nデフォルトだと隠しファイルは見えなくなってますが、開発においては見ること多いと思います。\nfinderからあまり弄ることはないですが一応見えるようにしておきます。\n\n- [Macで隠しファイルを表示する方法](https://qiita.com/clutter/items/520efe83b48375048c9f)\n\n#### ● キー入れ替え\n\nWindows→Macと来たためキーの配置が若干使いにくいです。\n特にCapsLockの位置がとても悪いのとWindowsでいうCtrlキーの位置がよくないです。これらを入れ替えるだけでも操作性は割とWindows風に使えたりします。\n半角/全角変換なんかについても割と話題になりますがこれはMacの方が自然と使えるのでWindowsをMac風に使うとよさそうです。\n下記で紹介しているのは修飾キーのみの入れ替えなのでもっと凝った設定をしたい場合は専用のアプリが必要となります。\n\n- [Mac - キーバインドの変更・入替え（command、ctrl、caps）](https://pc-karuma.net/mac-keys-modifiers-switch-command-control-caps/)\n\nTwitterなどでMac + HHKBのような構成が人気です。私も同じような構成で使ってます。\nその際に参考になった記事を下記へ記載します(Macの上に載せて使ってる画像が話題になってて正直最初は「え？？」って思いましたが意外と快適です)。\n\n- [MacBookでHHKB Proを使うときにやったこと](https://qiita.com/ezawa800/items/bedef97a5ec87b8acf91)\n\n#### ● defaultsコマンド設定\n\nシステム環境設定や各アプリの環境設定画面では設定できない値を設定していきます。\n前に私が書いた記事があるので参考になれば幸いです。\n\n- [iMac/MacBook購入後に必ず設定したい設定項目](https://qiita.com/ryuichi1208/items/5905240f3bfce793b33d)\n\nFinderでのパスの表示など結構便利なものが多いのでとてもおススメ。\n\n#### ● アプリインストール\n\n以下のアプリをインストールしていきます。\n基本的には全て無料です。\n\n- 開発用\n  - Xcode\n- ブラウザ\n  - Google Chrome\n  - Firefox\n- テキストエディタ\n  - Sublime text 3\n  - Visual Studio Code 2019\n- チャットツール\n  - Slack\n  - LINE\n  - Skype\n  - Discord\n- 仮想化\n  - Docker for Mac\n  - VMware Fusion\n- その他\n  - Google日本語入力\n  - Dropbox\n  - Evernote\n  - Todoist\n\n下記が大変参考になります\n\n- [Macおすすめ作業効率向上アプリ](https://qiita.com/blue0513/items/3e81d629dbada17a3b69)\n\n#### ● デフォルトブラウザ設定\n\nSafariも十分いいブラウザです。\nただSafariだけだとWindows機なりとのブラウザのブックマークなどの連携が面倒だったりGoogleアプリ関連の操作性が若干微妙だったりすることが多いのでデフォルトブラウザを「safari」→「Chrome」へと変更します。\n(safariの開発者モードが少し前だと微妙でしたが最近はそこそこ評判いいらしいですね。使ってないですけど。)\n\n- [Mac でデフォルトのブラウザやメールクライアントを変更する\n](https://support.apple.com/ja-jp/HT201607)\n\n#### ● Time Machine バックアップの設定\n\nMacには便利なバックアップアプリが標準で入っています。\nこれをしとけば壊れた時に復元できたり精神的な安心も得られるのでできれば設定しておきます\nバックアップはスケジューリングすることも可能ですので使用していない時間などをあらかじめ設定しておけます。\n\n- [Mac - Time Machine の使い方と設定](https://pc-karuma.net/mac-time-machine/)\n\n#### ● ファイアウォール設定\n\n必要性の有無についてはケースバイケースですが設定方法は知っておいて損はないはずです。\n\n- [macOS - ファイアウォールをオン/オフ（有効/無効）にする](https://pc-karuma.net/mac-firewall/)\n\n#### ● 共有ファイル設定\n\nGUIで操作することはあまりないですが共有サーバの設定方法です。\nWindowsなどとやり取りする際は必須なので共有については一応設定。\n\n- [Mac のファイル共有で接続する方法](https://support.apple.com/ja-jp/HT204445)\n\n#### ● ライブ変換をOFF\n\nこれは正直使えこなせなかったからオフにしてます。\nオンのままで使いこなせる人もいるようだが私はなれなかった。\nうまくやれればとても便利らしいです。\n\n[Macで日本語が自動変換される「ライブ変換」をオフにする方法](https://sbapp.net/appnews/osxelcapitan-33422)\n\n#### ● Findy拡張子を表示させる\n\nMacの標準設定ではファイルの拡張子が表示されません。\n色々と不便なのでとりあえず出しておきます。\n\n[Macでファイルの拡張子を表示する方法](http://inforati.jp/apple/mac-tips-techniques/system-hints/how-to-show-the-filename-extension-of-a-file-always-in-macos.html)\n\n#### ● コンピュータ名変更\n\nカフェなどでネットへつなぐ際に自分の＋マシン名のような感じで表示されるのが恥ずかしいので変えます。\nそこまで必須ではないですが何故か恥ずかしいので必ず買えるようにしています。\n\n- [Mac - コンピュータ名（ホスト名）の確認・変更](https://matome.naver.jp/odai/2138629469334511401)\n\n#### ● ダークモードオン\n\nこれは完全に好みです。\nmacOS Mojaveから待望だったダークテーマのモードが搭載されました。\n開発してますよ！っていう雰囲気出るので自身のモチベも上がったり良いことしかないのでおススメ。\n\n- [Mac でダークモードを使う方法](https://support.apple.com/ja-jp/HT208976)\n\n#### ● Dockの設定\n\nMacの便利な機能Dock。デフォルトでは下ですが個人的にはディスプレイの表示領域的に下はイマイチ\nあと常に表示されてますが隠しておきたい派なので設定します。\nあとデフォルトではでかいです。でかすぎです。なのでアイコンを小さくしてます。\n\n[Mac中級者への道！Dockを整理・カスタマイズしてすっきり使う](https://lovemac.jp/blog/2583/)\n\n#### ● ディスプレイスリープ設定\n\n一定時間触らないことでスリープする機能がデフォルトでオンです。\nWindows機でもなんでも意図しないスリープは個人的にはNGなので必ず切るようにしています。\nただ外出中で電源がない環境だと意外と便利だって声も聞いたことがありますがそこらへんどうなんでしょ。\n\n- [Macのスリープ機能を解除する設定方法](https://aprico-media.com/posts/1365)\n\n#### ● [コラム(的なの)]ショートカットを覚えよう\n\n設定ではないですが、よく使う操作はショートカットキーを覚えておきましょう。\n全部覚える必要はないしまあ使ってたらかっこいいよねくらいに思いながらやってます(笑)\n(ただwindowsなども並行して使ってるとキーの違いで色々とストレスが溜まるのという現実)\n\n- [Macで開発するなら抑えておくべきショートカットキーまとめ](https://qiita.com/ryuichi1208/items/95b835b63c31d39c7629)\n\n中でも文書入力やプログラミングにおいてControlキーを用いたショートカットは使うとても便利かつ使用頻度は多いです。\nここら辺を使いこなせるかどうかで生産性に大きな差が生まれるともいます(個人的見解)。\n説明は文章だけではわかりにくい点もあるので実際の操作を動画で説明しているものが下記でとても参考になります。\nWindowsには無い概念の機能なので若干違和感はあるかもしれませんがぜひとも覚えてみてください。\n\n- [【Mac入門】Macを使うなら、Controlキーの使い方を覚えよう！](https://www.youtube.com/watch?v=o_DO8zKIuEI)\n\n## 開発用設定\n\n開発にあたってやっておくと便利な設定など\n\n#### ● パッケージマネージャー「homebrew」インストール\n\nパッケージマネージャーです。Gitやらの便利ツールはこちらからインストールします。\n(GUIでも同様のことができたりしますが利便性で言えばこちらがいいと思います)\n\n- [Homebrew](https://brew.sh/index_ja.html)\n- [Homebrew使い方まとめ](https://qiita.com/vintersnow/items/fca0be79cdc28bd2f5e4)\n\n#### ● ターミナル設定\n\nデフォルトではいい感じのフォントがなかったので開発者から評判のいいRictyというフォントを使用します。\n全く知らなかったのですがwindows版もあるとのことです。\n\n- [[Win,Mac]プログラミング用フォント『Ricty』を導入してみよう](http://vdeep.net/ricty-font)\n\nターミナルの設定は奥深いです。\nテーマや透明度,アプリの設定でとてもカッコよくできたりします。\n下記記事は導入の際に役立つ情報が多いので是非みてください。\n\n- [お前らのターミナルはダサい](https://qiita.com/kinchiki/items/57e9391128d07819c321)\n\n#### ● パッケージインストール\n\nとりあえず入れておいてるものを記載します。\n\n``` bash\n$ brew install \\\ngit \\\ntmux \\\nvim \\\ncurl \\\nzsh \\\ncoreutils \\\nfindutils \\\ntree \\\ngcc\n```\n\nインストールされてるものやアンインストールは全てCUIで行います\n\n``` bash\n# インストール\n$ brew install vim\n\n# インストールされているものを表示\n$ brew list\n\n# brewのアップデート\n$ brew update\n\n# brewでインストールしたパッケージのアップデート\n$ brew upgrade\n\n# アンインストール\n$ brew uninstall vim\n\n# パッケージの情報を確認\n$ brew info vim\n\n# パッケージの依存関係のみを確認\n$ brew deps vim\n\n# brewに問題がないか調べる\n$ brew doctor\n```\n\n#### ● dotfilesを配置\n\nbashやzshなど設定をdotfilesで管理できるものがあります。\nそれらはテキストとして保存しておきGitHubなどで管理します。\n\n- [dotfilesを管理しよう](https://qiita.com/massy22/items/5bdb97f8d6e93517f916)\n\n以下は私が管理してる例。\ndotfilesはGitHubでも結構公開されていて参考になるのも多いのでぜひ見てみてください。\n\n- [ryuichi1208/dotfiles](https://github.com/ryuichi1208/dotfiles)\n\n#### ● sshconfig\n\nmacに限らずですがsshコマンドの引数を減らすためのconfigを書きます。\n下記ファイルへ設定を記載しておくだけで「ssh マシン名」だけで指定のユーザ名/ポート/接続用の鍵が利用されます。\n\n- [~/.ssh/configについて](https://qiita.com/passol78/items/2ad123e39efeb1a5286b)\n\n#### ● (コラム的なの)Mac小技Tips\n\nMacもWindows同様小技がたくさんあります。\n他の人の操作を見てる時に何それ！っていうことが多々あります。\nそんな感じの小技集でいいと思った記事を記載します。\n\n- [Mac厳選Tips ― 初心者でもすぐに使える便利な小技50](http://itea40.jp/technic/mac-tips-summary/tricks-going-to-love-mac/)\n\n## まとめ\n\nメイン：サブでなるべく環境に差異を作りたくない場合はこういった形でまとめとくと便利かもしれませんね。\n宗教的理由で紹介していない素晴らしいツールが他にもたくさんあります。\n他の方の構築記事なんかを参考に是非自分だけのMacを作っていってください！\n\n## 参考リンク\n\n記事中へ記載\n\n## その他おススメ記事\n\n- [Mac初心者に送るMacのメモリ管理について](https://qiita.com/zakiyamaaaaa/items/20d4dc4a3d587500e1f1)\n', 'coediting': False, 'comments_count': 4, 'created_at': '2019-05-17T21:21:35+09:00', 'group': None, 'id': 'da08cea7ba79cdc14fc8', 'likes_count': 239, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Mac', 'versions': []}, {'name': 'apple', 'versions': []}, {'name': 'ポエム', 'versions': []}], 'title': 'Mac購入後にやりたい設定&入れておきたいアプリ', 'updated_at': '2019-05-20T15:39:06+09:00', 'url': 'https://qiita.com/ryuichi1208/items/da08cea7ba79cdc14fc8', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="肯否先読みとは" class="fragment"></span><a href="#%E8%82%AF%E5%90%A6%E5%85%88%E8%AA%AD%E3%81%BF%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>(肯|否)先読みとは</h2>\n\n<p>何らかの正規表現を (?= と ) もしくは (?! と ) で括ることで，括られた正規表現にマッチする文字列が直後に存在する／存在しないことを指定してマッチングを行う。</p>\n\n<p>使用例としては「hoge」という文字列を含むや「hoge」のあとに「fuga」が来たらマッチさせるなどといった場合に使える</p>\n\n<h2>\n<span id="使用例" class="fragment"></span><a href="#%E4%BD%BF%E7%94%A8%E4%BE%8B"><i class="fa fa-link"></i></a>使用例</h2>\n\n<h4>\n<span id="先読み" class="fragment"></span><a href="#%E5%85%88%E8%AA%AD%E3%81%BF"><i class="fa fa-link"></i></a>先読み</h4>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">「hoge」がありかつその後に「fuga」がある</span></div>\n<div class="highlight"><pre><span class="sr">/hoge(?=fuga)/</span>\n\n<span class="c1"># match例</span>\n<span class="c1">#  hogefuga</span>\n<span class="c1"># matchしない例</span>\n<span class="c1">#  hogeefuga</span>\n</pre></div>\n</div>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">「hoge」を含まない</span></div>\n<div class="highlight"><pre><span class="sr">/^(?!.*hoge).*$/</span>\n\n<span class="c1"># match例</span>\n<span class="c1">#  fugafuga</span>\n<span class="c1"># matchしない例</span>\n<span class="c1"># fugafugahogefuga</span>\n</pre></div>\n</div>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">「hoge」または「fuga」を含まない</span></div>\n<div class="highlight"><pre><span class="sr">/^(?!.*(hoge|fuga)).*$/</span>\n\n<span class="c1"># match例</span>\n<span class="c1">#  foobar</span>\n<span class="c1"># matchしない例</span>\n<span class="c1">#  higehoge</span>\n</pre></div>\n</div>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">「hoge」を含むが「fuga」を含まない</span></div>\n<div class="highlight"><pre><span class="sr">/^(?=.*abc)(?!.*def).*$/</span>\n\n<span class="c1"># match例</span>\n<span class="c1"># hogehoge</span>\n<span class="c1"># matchしない例</span>\n<span class="c1">#  hogefuga</span>\n<span class="c1">#  fugahoge</span>\n</pre></div>\n</div>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">「hoge」で始まらない</span></div>\n<div class="highlight"><pre><span class="sr">/^(?!hoge).*$/</span>\n\n<span class="c1"># match例</span>\n<span class="c1">#  fuga</span>\n<span class="c1"># matchしない例</span>\n<span class="c1">#  hogefuga</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="後読み" class="fragment"></span><a href="#%E5%BE%8C%E8%AA%AD%E3%81%BF"><i class="fa fa-link"></i></a>後読み</h4>\n\n<p>肯定後読みは\u3000（？＜＝）<br>\n否定後読みは\u3000（？＜！）<br>\nと書いて表します。</p>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">「fuga」が直前にある「hoge」</span></div>\n<div class="highlight"><pre><span class="sr">/(?&lt;=fuga)hoge/</span>\n\n<span class="c1"># match例</span>\n<span class="c1">#  fugahoge</span>\n<span class="c1">#  afugahoge</span>\n<span class="c1"># matchしない例</span>\n<span class="c1">#  fuga hoge</span>\n\n</pre></div>\n</div>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">「fuga」が直前にない「hoge」</span></div>\n<div class="highlight"><pre><span class="sr">/(?&lt;!fuga)hoge/</span>\n\n<span class="c1"># match例</span>\n<span class="c1">#  fuga hoge</span>\n<span class="c1"># matchしない例</span>\n<span class="c1">#  fugahoge</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="参考記事" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E8%A8%98%E4%BA%8B"><i class="fa fa-link"></i></a>参考記事</h4>\n\n<p><a href="https://abicky.net/2010/05/30/135112/" rel="nofollow noopener" target="_blank">正規表現の先読み・後読みを極める！</a><br>\n<a href="https://qiita.com/mochizukikotaro/items/84f3ab2740b8efbe0dc6" id="reference-6e0c36265621952d6812">[コラム] 正規表現の先読み/後読みは、どう考えても名前が悪いので、呼称禁止令を出してルックと気軽に呼んでみませんか。</a></p>\n', 'body': '\n## (肯|否)先読みとは\n\n何らかの正規表現を (?= と ) もしくは (?! と ) で括ることで，括られた正規表現にマッチする文字列が直後に存在する／存在しないことを指定してマッチングを行う。\n\n使用例としては「hoge」という文字列を含むや「hoge」のあとに「fuga」が来たらマッチさせるなどといった場合に使える\n\n## 使用例\n\n#### 先読み\n\n``` perl:「hoge」がありかつその後に「fuga」がある\n/hoge(?=fuga)/\n\n# match例\n#  hogefuga\n# matchしない例\n#  hogeefuga\n```\n\n``` perl:「hoge」を含まない\n/^(?!.*hoge).*$/\n\n# match例\n#  fugafuga\n# matchしない例\n# fugafugahogefuga\n```\n\n``` perl:「hoge」または「fuga」を含まない\n/^(?!.*(hoge|fuga)).*$/\n\n# match例\n#  foobar\n# matchしない例\n#  higehoge\n```\n\n``` perl:「hoge」を含むが「fuga」を含まない\n/^(?=.*abc)(?!.*def).*$/\n\n# match例\n# hogehoge\n# matchしない例\n#  hogefuga\n#  fugahoge\n```\n\n``` perl:「hoge」で始まらない\n/^(?!hoge).*$/\n\n# match例\n#  fuga\n# matchしない例\n#  hogefuga\n```\n\n#### 後読み\n\n肯定後読みは\u3000（？＜＝）\n否定後読みは\u3000（？＜！）\nと書いて表します。\n\n``` perl:「fuga」が直前にある「hoge」\n/(?<=fuga)hoge/\n\n# match例\n#  fugahoge\n#  afugahoge\n# matchしない例\n#  fuga hoge\n\n```\n\n``` perl:「fuga」が直前にない「hoge」\n/(?<!fuga)hoge/\n\n# match例\n#  fuga hoge\n# matchしない例\n#  fugahoge\n```\n\n#### 参考記事\n\n[正規表現の先読み・後読みを極める！](https://abicky.net/2010/05/30/135112/)\n[[コラム] 正規表現の先読み/後読みは、どう考えても名前が悪いので、呼称禁止令を出してルックと気軽に呼んでみませんか。](https://qiita.com/mochizukikotaro/items/84f3ab2740b8efbe0dc6)\n\n', 'coediting': False, 'comments_count': 2, 'created_at': '2019-05-06T00:07:18+09:00', 'group': None, 'id': '6c9da6485174cfb793a5', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Perl', 'versions': []}, {'name': '正規表現', 'versions': []}], 'title': 'perlで正規表現 肯定先読み、否定後読みなど', 'updated_at': '2019-05-11T19:44:58+09:00', 'url': 'https://qiita.com/ryuichi1208/items/6c9da6485174cfb793a5', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/9851fb1671e27a9b9949b8be3b3b0f8eda2aa58c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f61376436666361342d376465302d383134642d343032622d3333376461663434353532312e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/9851fb1671e27a9b9949b8be3b3b0f8eda2aa58c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f61376436666361342d376465302d383134642d343032622d3333376461663434353532312e706e67" alt="06.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/a7d6fca4-7de0-814d-402b-337daf445521.png"></a></p>\n\n<h3>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h3>\n\n<p>プラグインが動かない！なんで！vimが古い！！<br>\nってなって最新版を入れようと思って色々調べた際のメモ</p>\n\n<h3>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h3>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nb">cat</span> /etc/redhat-release <span class="p">;</span> <span class="nb">uname</span> <span class="nt">-r</span>\nCentOS Linux release 7.6.1810 <span class="o">(</span>Core<span class="o">)</span>\n3.10.0-957.el7.x86_64\n</pre></div></div>\n\n<h3>\n<span id="インストール手順-前準備" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%89%8B%E9%A0%86-%E5%89%8D%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>インストール手順 (前準備)</h3>\n\n<p>ビルドにはいろいろと必要なので入れてきます。</p>\n\n<h4>\n<span id="gcc-他" class="fragment"></span><a href="#gcc-%E4%BB%96"><i class="fa fa-link"></i></a>gcc 他</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>yum <span class="nb">install</span> <span class="nt">-y</span> gcc lua-devel ncurses-devel\n</pre></div></div>\n\n<h4>\n<span id="ruby-160以降" class="fragment"></span><a href="#ruby-160%E4%BB%A5%E9%99%8D"><i class="fa fa-link"></i></a>ruby (1.6.0以降)</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>yum <span class="nb">install </span>ruby-devel\n\n<span class="c"># GitHubからとってくる</span>\n<span class="nv">$ </span>git clone https://github.com/rbenv/rbenv.git ~/.rbenv\n\n<span class="c"># パスを通す</span>\n<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">\'export PATH="$HOME/.rbenv/bin:$PATH"\'</span> <span class="o">&gt;&gt;</span> ~/.bash_profile\n\n<span class="c"># 初期化</span>\n<span class="nv">$ </span>~/.rbenv/bin/rbenv init\n\n<span class="c"># 読み込み</span>\n<span class="nv">$ </span>bash\n\n<span class="c"># MakeFile作成時に使うのでメモしておきます</span>\n/usr/bin/ruby\n</pre></div></div>\n\n<p>ないと怒られたり</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>checking <span class="nt">--with-ruby-command</span> argument... defaulting to ruby\nchecking <span class="k">for </span>ruby... no\nconfigure: error: could not configure Ruby\n\n<span class="c"># または</span>\nchecking <span class="k">for</span> /usr/bin/ruby... /usr/bin/ruby\nchecking Ruby version... OK\nchecking Ruby rbconfig... RbConfig\nchecking Ruby header files... not found<span class="p">;</span> disabling Ruby\nconfigure: error: could not configure Ruby\n</pre></div></div>\n\n<p>古くても怒られます</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>checking <span class="k">for</span> /usr/bin/... /usr/bin/\nchecking Ruby version... too old<span class="p">;</span> need Ruby version 1.6.0 or later\nconfigure: error: could not configure Ruby\n</pre></div></div>\n\n<h3>\n<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h3>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>git clone https://github.com/vim/vim.git\n\n<span class="nv">$ </span><span class="nb">cd </span>vim\n<span class="c"># 特定のバージョンは下記のように指定できる</span>\n<span class="nv">$ </span>git checkout v7.4.393\n\n<span class="nv">$ </span>./configure <span class="nt">--prefix</span><span class="o">=</span>/usr/local <span class="nt">--with-features</span><span class="o">=</span>huge <span class="nt">--enable-multibyte</span> <span class="nt">--enable-rubyinterp</span> <span class="nt">--enable-luainterp</span> <span class="nt">--enable-cscope</span> <span class="nt">--enable-fail-if-missing</span> <span class="nt">--with-ruby-command</span><span class="o">=</span>/usr/bin/ruby\n\n<span class="nv">$ </span>make <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>make <span class="nb">install</span>\n\n<span class="nv">$ </span>vim <span class="nt">--version</span> | <span class="nb">head</span> <span class="nt">-n3</span>\nVIM - Vi IMproved 8.1 <span class="o">(</span>2018 May 18, compiled Apr 25 2019 16:19:07<span class="o">)</span>\n適用済パッチ: 1-1201\nCompiled by root@localhos\n</pre></div></div>\n\n<h3>\n<span id="参考サイト" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88"><i class="fa fa-link"></i></a>参考サイト</h3>\n\n<p><a href="https://vim-jp.org/docs/build_linux.html" rel="nofollow noopener" target="_blank">vim-jp » Vimのユーザーと開発者を結ぶコミュニティサイト</a></p>\n', 'body': '![06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/a7d6fca4-7de0-814d-402b-337daf445521.png)\n\n### 背景\n\nプラグインが動かない！なんで！vimが古い！！\nってなって最新版を入れようと思って色々調べた際のメモ\n\n### 環境\n\n``` bash\ncat /etc/redhat-release ; uname -r\nCentOS Linux release 7.6.1810 (Core)\n3.10.0-957.el7.x86_64\n```\n\n### インストール手順 (前準備)\n\nビルドにはいろいろと必要なので入れてきます。\n\n#### gcc 他\n\n``` bash\n$ yum install -y gcc lua-devel ncurses-devel\n```\n\n#### ruby (1.6.0以降)\n\n``` bash\n$ yum install ruby-devel\n\n# GitHubからとってくる\n$ git clone https://github.com/rbenv/rbenv.git ~/.rbenv\n\n# パスを通す\n$ echo \'export PATH="$HOME/.rbenv/bin:$PATH"\' >> ~/.bash_profile\n\n# 初期化\n$ ~/.rbenv/bin/rbenv init\n\n# 読み込み\n$ bash\n\n# MakeFile作成時に使うのでメモしておきます\n/usr/bin/ruby\n```\n\nないと怒られたり\n\n``` bash\nchecking --with-ruby-command argument... defaulting to ruby\nchecking for ruby... no\nconfigure: error: could not configure Ruby\n\n# または\nchecking for /usr/bin/ruby... /usr/bin/ruby\nchecking Ruby version... OK\nchecking Ruby rbconfig... RbConfig\nchecking Ruby header files... not found; disabling Ruby\nconfigure: error: could not configure Ruby\n```\n\n古くても怒られます\n\n``` bash\nchecking for /usr/bin/... /usr/bin/\nchecking Ruby version... too old; need Ruby version 1.6.0 or later\nconfigure: error: could not configure Ruby\n```\n\n### インストール\n\n```bash\n$ git clone https://github.com/vim/vim.git\n\n$ cd vim\n# 特定のバージョンは下記のように指定できる\n$ git checkout v7.4.393\n\n$ ./configure --prefix=/usr/local --with-features=huge --enable-multibyte --enable-rubyinterp --enable-luainterp --enable-cscope --enable-fail-if-missing --with-ruby-command=/usr/bin/ruby\n\n$ make && sudo make install\n\n$ vim --version | head -n3\nVIM - Vi IMproved 8.1 (2018 May 18, compiled Apr 25 2019 16:19:07)\n適用済パッチ: 1-1201\nCompiled by root@localhos\n```\n\n### 参考サイト\n\n[vim-jp » Vimのユーザーと開発者を結ぶコミュニティサイト](https://vim-jp.org/docs/build_linux.html)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-04-25T16:41:12+09:00', 'group': None, 'id': 'ec2c9bb9564b7c54addf', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Vim', 'versions': []}], 'title': 'CentOS7.6へVim8.1をインストール', 'updated_at': '2019-04-25T20:27:44+09:00', 'url': 'https://qiita.com/ryuichi1208/items/ec2c9bb9564b7c54addf', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/e0e8e994278103f6864a936a35b30a80333536d7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f63303631386438652d633330652d643663372d623231352d3664333430333834376632322e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/e0e8e994278103f6864a936a35b30a80333536d7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3235383834312f63303631386438652d633330652d643663372d623231352d3664333430333834376632322e706e67" alt="awk.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/c0618d8e-c30e-d6c7-b215-6d3403847f22.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>GNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップをしたというニュースを見て早速使ってみようと思いとりあえず使う段階まで行ったのでメモ的に残します。</p>\n\n<p><a href="https://www.publickey1.jp/blog/19/gnu_awk_508glibcgnulib.html" rel="nofollow noopener" target="_blank">GNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップ。正規表現ライブラリがGLIBCからGNULIBへ移行、名前空間が実装<br>\n</a></p>\n\n<h2>\n<span id="ビルド手順" class="fragment"></span><a href="#%E3%83%93%E3%83%AB%E3%83%89%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>ビルド手順</h2>\n\n<p>①ソースを入手 解凍<br>\n下記から自分の使いたいバージョンを持ってこれる<br>\n今回は5.0.0.を使用<br>\n<a class="autolink">ftp://ftp.gnu.org/gnu/gawk</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>wget ftp://ftp.gnu.org/gnu/gawk/gawk-5.0.0.tar.gz\n\n<span class="nv">$ </span><span class="nb">cd </span>gawk-5.0.0/\n\n<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">-zxvf</span> gawk-5.0.0.tar.gz\n</pre></div></div>\n\n<p>②ビルド<br>\nconfigure⇒make⇒make installの流れでビルドからインストールまでできます。<br>\n※ 当然だがmake installだけ「root権」が必要</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>./configure\n\n<span class="nv">$ </span>make clean <span class="p">;</span> make\n\n</pre></div></div>\n\n<h2>\n<span id="試す" class="fragment"></span><a href="#%E8%A9%A6%E3%81%99"><i class="fa fa-link"></i></a>試す</h2>\n\n<p>5.0.0になってることを確認しました。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>root@OPST-N394:~/work2/gawk-5.0.0# ./gawk <span class="nt">--version</span>\nGNU Awk 5.0.0, API: 2.0\nCopyright <span class="o">(</span>C<span class="o">)</span> 1989, 1991-2019 Free Software Foundation.\n\nThis program is free software<span class="p">;</span> you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation<span class="p">;</span> either version 3 of the License, or\n<span class="o">(</span>at your option<span class="o">)</span> any later version.\n\nThis program is distributed <span class="k">in </span>the hope that it will be useful,\nbut WITHOUT ANY WARRANTY<span class="p">;</span> without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License <span class="k">for </span>more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see http://www.gnu.org/licenses/.\n</pre></div></div>\n\n<h2>\n<span id="変更点など" class="fragment"></span><a href="#%E5%A4%89%E6%9B%B4%E7%82%B9%E3%81%AA%E3%81%A9"><i class="fa fa-link"></i></a>変更点など</h2>\n\n<p>ソースと一緒に入っているNEWSに細かい変更点などが記載されています。<br>\n名前空間の実装がとても気になったので近々追記します。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="go">11. Namespaces have been implemented! See the manual.  One consequence of this\n    is that files included with -i, read with -f, and command line program\n    segments must all be self-contained syntactic units. E.g., you can no\n    longer do something like this:\n\n        gawk -e \'BEGIN {\' -e \'print "hello" }\'\n</span></pre></div></div>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p>■ <a href="https://www.publickey1.jp/blog/19/gnu_awk_508glibcgnulib.html" rel="nofollow noopener" target="_blank">GNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップ。正規表現ライブラリがGLIBCからGNULIBへ移行、名前空間が実装</a><br>\n■ <a href="https://www.softantenna.com/wp/software/gnu-awk-5-0-0/" rel="nofollow noopener" target="_blank">GNU awk 5.0.0がリリース - 名前空間が実装されたメジャーバージョンアップ版</a></p>\n', 'body': '![awk.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258841/c0618d8e-c30e-d6c7-b215-6d3403847f22.png)\n\n## 背景\n\nGNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップをしたというニュースを見て早速使ってみようと思いとりあえず使う段階まで行ったのでメモ的に残します。\n\n[GNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップ。正規表現ライブラリがGLIBCからGNULIBへ移行、名前空間が実装\n](https://www.publickey1.jp/blog/19/gnu_awk_508glibcgnulib.html)\n\n## ビルド手順\n\n①ソースを入手 解凍\n下記から自分の使いたいバージョンを持ってこれる\n今回は5.0.0.を使用\nftp://ftp.gnu.org/gnu/gawk\n\n``` bash\n$ wget ftp://ftp.gnu.org/gnu/gawk/gawk-5.0.0.tar.gz\n\n$ cd gawk-5.0.0/\n\n$ tar -zxvf gawk-5.0.0.tar.gz\n```\n\n②ビルド\nconfigure⇒make⇒make installの流れでビルドからインストールまでできます。\n※ 当然だがmake installだけ「root権」が必要\n\n``` bash\n$ ./configure\n\n$ make clean ; make\n\n```\n\n## 試す\n\n5.0.0になってることを確認しました。\n\n``` bash\nroot@OPST-N394:~/work2/gawk-5.0.0# ./gawk --version\nGNU Awk 5.0.0, API: 2.0\nCopyright (C) 1989, 1991-2019 Free Software Foundation.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see http://www.gnu.org/licenses/.\n```\n\n## 変更点など\n\nソースと一緒に入っているNEWSに細かい変更点などが記載されています。\n名前空間の実装がとても気になったので近々追記します。\n\n``` console\n11. Namespaces have been implemented! See the manual.  One consequence of this\n    is that files included with -i, read with -f, and command line program\n    segments must all be self-contained syntactic units. E.g., you can no\n    longer do something like this:\n\n        gawk -e \'BEGIN {\' -e \'print "hello" }\'\n```\n\n## 参考リンク\n\n■ [GNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップ。正規表現ライブラリがGLIBCからGNULIBへ移行、名前空間が実装](https://www.publickey1.jp/blog/19/gnu_awk_508glibcgnulib.html)\n■ [GNU awk 5.0.0がリリース - 名前空間が実装されたメジャーバージョンアップ版](https://www.softantenna.com/wp/software/gnu-awk-5-0-0/)\n', 'coediting': False, 'comments_count': 1, 'created_at': '2019-04-17T10:06:16+09:00', 'group': None, 'id': 'fe625fba0afe0ec46789', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'awk', 'versions': []}], 'title': 'GNU AWK 5.0を早速インストールしてみる', 'updated_at': '2019-04-17T10:06:16+09:00', 'url': 'https://qiita.com/ryuichi1208/items/fe625fba0afe0ec46789', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/9dcc0a31530d749e8f08a0e73bf8d2bc4460cb4c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33336166333934332d353063622d373437322d376230372d3930303034333233303663352e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/9dcc0a31530d749e8f08a0e73bf8d2bc4460cb4c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33336166333934332d353063622d373437322d376230372d3930303034333233303663352e706e67" alt="zsh_logo.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/33af3943-50cb-7472-7b07-9000432306c5.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>あるところにZshを熱く語ってくる友人がいました。<br>\n聞けば聞くほど興味が出てきたのでとりあえず入門してみたのでzshrcを色々調べた時の使えそうな者たちです。<br>\nお暇な方は見てってください。<br>\nzsh歴は1週間程度です。超ど素人の記事なので達人の方々は得られる情報は少ないと思います。。。</p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<p>CeotOS 7.6へインストールしてみます。<br>\n入れてみたZshのバージョンは5.0.2です。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat</span> /etc/redhat-release\nCentOS Linux release 7.6.1810 <span class="o">(</span>Core<span class="o">)</span>\n\n<span class="nv">$ </span>zsh <span class="nt">--version</span>\nzsh 5.0.2 <span class="o">(</span>x86_64-redhat-linux-gnu<span class="o">)</span>\n</pre></div></div>\n\n<p>ちなみに最新バージョンは5.7<br>\n変更点等々は下記のサイトで確認できます。<br>\nyumとかaptだと最新版は入れられないので最新がいい人は下記から落としてインストールが必要です。</p>\n\n<p><a href="http://zsh.sourceforge.net/Arc/source.html" class="autolink" rel="nofollow noopener" target="_blank">http://zsh.sourceforge.net/Arc/source.html</a></p>\n\n<h2>\n<span id="対象読者" class="fragment"></span><a href="#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85"><i class="fa fa-link"></i></a>対象読者</h2>\n\n<ul>\n<li>「bashに不満はないけどzshってよく聞くし使ってみたいな」</li>\n<li>「zshのカスタマイズやってみたい」</li>\n</ul>\n\n<p>って人を対象にします。</p>\n\n<h2>\n<span id="zshとは" class="fragment"></span><a href="#zsh%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Zshとは</h2>\n\n<p>Zsh(Z Shell)とはシェルの種類の1つです。<br>\n拡張機能が多彩で自分好みに育ててく感覚が楽しいらしいです。<br>\n最近だとfishとかxonshとかも有名です。</p>\n\n<p>有名な特徴としては下記2点</p>\n\n<ul>\n<li>タブ補完が強力</li>\n<li>柔軟性があり自在にカスタマイズが可能</li>\n</ul>\n\n<p>ちなみにソースはGitHubで見ることが出来ます。<br>\n<a href="https://github.com/zsh-users/zsh" rel="nofollow noopener" target="_blank">zsh-users/zsh</a></p>\n\n<h2>\n<span id="導入" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>導入</h2>\n\n<p>導入はとても簡単です。<br>\nRHEL系ならyum、Debian系ならaptで入ります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># RHEL</span>\n<span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> zsh\n\n<span class="c"># debian</span>\n<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> zsh\n</pre></div></div>\n\n<p>デフォルトでbashではなくzshでログインしたいなら下記コマンドを使用します。<br>\n次回以降はbashではなくzshになります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># デフォルト</span>\n<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$SHELL</span>\n/bin/bash\n\n<span class="c"># ログインシェルを変更</span>\n<span class="nv">$ </span>whichi zsh\n/usr/bin/zsh\n<span class="nv">$ </span>chsh <span class="nt">-s</span> /usr/bin/zsh\n\n<span class="c"># 再ログインして確認</span>\n<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$SHELL</span>\n/usr/bin/zsh\n</pre></div></div>\n\n<h2>\n<span id="zshrcコメント付き" class="fragment"></span><a href="#zshrc%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E4%BB%98%E3%81%8D"><i class="fa fa-link"></i></a>zshrc(コメント付き)</h2>\n\n<p>GitHubでも一応公開しています。<br>\n更新はこっちでやってくので興味ある方は見てみてください。<br>\n■ <a href="https://github.com/ryuichi1208/dotfiles" rel="nofollow noopener" target="_blank">ryuichi1208/dotfiles</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># -----------------------------</span>\n<span class="c"># Lang</span>\n<span class="c"># -----------------------------</span>\n<span class="c">#export LANG=ja_JP.UTF-8</span>\n<span class="c">#export LESSCHARSET=utf-8</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># General</span>\n<span class="c"># -----------------------------</span>\n<span class="c"># 色を使用</span>\nautoload <span class="nt">-Uz</span> colors <span class="p">;</span> colors\n\n<span class="c"># エディタをvimに設定</span>\n<span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span>vim\n\n<span class="c"># Ctrl+Dでログアウトしてしまうことを防ぐ</span>\n<span class="c">#setopt IGNOREEOF</span>\n\n<span class="c"># パスを追加したい場合</span>\n<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>\n\n<span class="c"># cdした際のディレクトリをディレクトリスタックへ自動追加</span>\nsetopt auto_pushd\n\n<span class="c"># ディレクトリスタックへの追加の際に重複させない</span>\nsetopt pushd_ignore_dups\n\n<span class="c"># emacsキーバインド</span>\nbindkey <span class="nt">-e</span>\n\n<span class="c"># viキーバインド</span>\n<span class="c">#bindkey -v</span>\n\n<span class="c"># フローコントロールを無効にする</span>\nsetopt no_flow_control\n\n<span class="c"># ワイルドカード展開を使用する</span>\nsetopt extended_glob\n\n<span class="c"># cdコマンドを省略して、ディレクトリ名のみの入力で移動</span>\nsetopt auto_cd\n\n<span class="c"># コマンドラインがどのように展開され実行されたかを表示するようになる</span>\n<span class="c">#setopt xtrace</span>\n\n<span class="c"># 自動でpushdを実行</span>\nsetopt auto_pushd\n\n<span class="c"># pushdから重複を削除</span>\nsetopt pushd_ignore_dups\n\n<span class="c"># ビープ音を鳴らさないようにする</span>\n<span class="c">#setopt no_beep</span>\n\n<span class="c"># カッコの対応などを自動的に補完する</span>\nsetopt auto_param_keys\n\n<span class="c"># ディレクトリ名の入力のみで移動する</span>\nsetopt auto_cd\n\n<span class="c"># bgプロセスの状態変化を即時に知らせる</span>\nsetopt notify\n\n<span class="c"># 8bit文字を有効にする</span>\nsetopt print_eight_bit\n\n<span class="c"># 終了ステータスが0以外の場合にステータスを表示する</span>\nsetopt print_exit_value\n\n<span class="c"># ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加</span>\nsetopt mark_dirs\n\n<span class="c"># コマンドのスペルチェックをする</span>\nsetopt correct\n\n<span class="c"># コマンドライン全てのスペルチェックをする</span>\nsetopt correct_all\n\n<span class="c"># 上書きリダイレクトの禁止</span>\nsetopt no_clobber\n\n<span class="c"># sudo の後ろでコマンド名を補完する</span>\nzstyle <span class="s1">\':completion:*:sudo:*\'</span> command-path /usr/local/sbin /usr/local/bin <span class="se">\\</span>\n                   /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin\n\n<span class="c"># ps コマンドのプロセス名補完</span>\nzstyle <span class="s1">\':completion:*:processes\'</span> <span class="nb">command</span> <span class="s1">\'ps x -o pid,s,args\'</span>\n\n<span class="c"># パスの最後のスラッシュを削除しない</span>\nsetopt noautoremoveslash\n\n<span class="c"># 各コマンドが実行されるときにパスをハッシュに入れる</span>\n<span class="c">#setopt hash_cmds</span>\n\n<span class="c"># rsysncでsshを使用する</span>\n<span class="nb">export </span><span class="nv">RSYNC_RSH</span><span class="o">=</span>ssh\n\n<span class="c"># その他</span>\n<span class="nb">umask </span>022\n<span class="nb">ulimit</span> <span class="nt">-c</span> 0\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Prompt</span>\n<span class="c"># -----------------------------</span>\n<span class="c"># %M    ホスト名</span>\n<span class="c"># %m    ホスト名</span>\n<span class="c"># %d    カレントディレクトリ(フルパス)</span>\n<span class="c"># %~    カレントディレクトリ(フルパス2)</span>\n<span class="c"># %C    カレントディレクトリ(相対パス)</span>\n<span class="c"># %c    カレントディレクトリ(相対パス)</span>\n<span class="c"># %n    ユーザ名</span>\n<span class="c"># %#    ユーザ種別</span>\n<span class="c"># %?    直前のコマンドの戻り値</span>\n<span class="c"># %D    日付(yy-mm-dd)</span>\n<span class="c"># %W    日付(yy/mm/dd)</span>\n<span class="c"># %w    日付(day dd)</span>\n<span class="c"># %*    時間(hh:flag_mm:ss)</span>\n<span class="c"># %T    時間(hh:mm)</span>\n<span class="c"># %t    時間(hh:mm(am/pm))</span>\n<span class="nv">PROMPT</span><span class="o">=</span><span class="s1">\'%F{cyan}%n@%m%f:%~# \'</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Completion</span>\n<span class="c"># -----------------------------</span>\n<span class="c"># 自動補完を有効にする</span>\nautoload <span class="nt">-Uz</span> compinit <span class="p">;</span> compinit\n\n<span class="c"># 単語の入力途中でもTab補完を有効化</span>\n<span class="c">#setopt complete_in_word</span>\n\n<span class="c"># コマンドミスを修正</span>\nsetopt correct\n\n<span class="c"># 補完の選択を楽にする</span>\nzstyle <span class="s1">\':completion:*\'</span> menu <span class="k">select</span>\n\n<span class="c"># 補完候補をできるだけ詰めて表示する</span>\nsetopt list_packed\n\n<span class="c"># 補完候補にファイルの種類も表示する</span>\n<span class="c">#setopt list_types</span>\n\n<span class="c"># 色の設定</span>\n<span class="nb">export </span><span class="nv">LSCOLORS</span><span class="o">=</span>Exfxcxdxbxegedabagacad\n\n<span class="c"># 補完時の色設定</span>\n<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="s1">\'di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30\'</span>\n\n<span class="c"># キャッシュの利用による補完の高速化</span>\nzstyle <span class="s1">\':completion::complete:*\'</span> use-cache <span class="nb">true</span>\n\n<span class="c"># 補完候補に色つける</span>\nautoload <span class="nt">-U</span> colors <span class="p">;</span> colors <span class="p">;</span> zstyle <span class="s1">\':completion:*\'</span> list-colors <span class="s2">"</span><span class="k">${</span><span class="nv">LS_COLORS</span><span class="k">}</span><span class="s2">"</span>\n<span class="c">#zstyle \':completion:*\' list-colors ${(s.:.)LS_COLORS}</span>\n\n<span class="c"># 大文字・小文字を区別しない(大文字を入力した場合は区別する)</span>\nzstyle <span class="s1">\':completion:*\'</span> matcher-list <span class="s1">\'m:{a-z}={A-Z}\'</span>\n\n<span class="c"># manの補完をセクション番号別に表示させる</span>\nzstyle <span class="s1">\':completion:*:manuals\'</span> separate-sections <span class="nb">true</span>\n\n<span class="c"># --prefix=/usr などの = 以降でも補完</span>\nsetopt magic_equal_subst\n\n<span class="c"># -----------------------------</span>\n<span class="c"># History</span>\n<span class="c"># -----------------------------</span>\n<span class="c"># 基本設定</span>\n<span class="nv">HISTFILE</span><span class="o">=</span><span class="nv">$HOME</span>/.zsh-history\n<span class="nv">HISTSIZE</span><span class="o">=</span>100000\n<span class="nv">SAVEHIST</span><span class="o">=</span>1000000\n\n<span class="c"># ヒストリーに重複を表示しない</span>\nsetopt histignorealldups\n\n<span class="c"># 他のターミナルとヒストリーを共有</span>\nsetopt share_history\n\n<span class="c"># すでにhistoryにあるコマンドは残さない</span>\nsetopt hist_ignore_all_dups\n\n<span class="c"># historyに日付を表示</span>\n<span class="nb">alias </span><span class="nv">h</span><span class="o">=</span><span class="s1">\'fc -lt \'</span>%F %T<span class="s1">\' 1\'</span>\n\n<span class="c"># ヒストリに保存するときに余分なスペースを削除する</span>\nsetopt hist_reduce_blanks\n\n<span class="c"># 履歴をすぐに追加する</span>\nsetopt inc_append_history\n\n<span class="c"># ヒストリを呼び出してから実行する間に一旦編集できる状態になる</span>\nsetopt hist_verify\n\n<span class="c">#余分なスペースを削除してヒストリに記録する</span>\n<span class="c">#setopt hist_reduce_blanks</span>\n\n<span class="c"># historyコマンドは残さない</span>\n<span class="c">#setopt hist_save_no_dups</span>\n\n<span class="c"># ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする</span>\n<span class="c">#bindkey \'^R\' history-incremental-pattern-search-backward</span>\n<span class="c">#bindkey "^S" history-incremental-search-forward</span>\n\n<span class="c"># ^P,^Nを検索へ割り当て</span>\n<span class="c">#bindkey "^P" history-beginning-search-backward-end</span>\n<span class="c">#bindkey "^N" history-beginning-search-forward-end</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Alias</span>\n<span class="c"># -----------------------------</span>\n<span class="c"># グローバルエイリアス</span>\n<span class="nb">alias</span> <span class="nt">-g</span> <span class="nv">L</span><span class="o">=</span><span class="s1">\'| less\'</span>\n<span class="nb">alias</span> <span class="nt">-g</span> <span class="nv">H</span><span class="o">=</span><span class="s1">\'| head\'</span>\n<span class="nb">alias</span> <span class="nt">-g</span> <span class="nv">G</span><span class="o">=</span><span class="s1">\'| grep\'</span>\n<span class="nb">alias</span> <span class="nt">-g</span> <span class="nv">GI</span><span class="o">=</span><span class="s1">\'| grep -ri\'</span>\n\n<span class="c"># エイリアス</span>\n<span class="nb">alias </span><span class="nv">lst</span><span class="o">=</span><span class="s1">\'ls -ltr --color=auto\'</span>\n<span class="nb">alias ls</span><span class="o">=</span><span class="s1">\'ls --color=auto\'</span>\n<span class="nb">alias </span><span class="nv">la</span><span class="o">=</span><span class="s1">\'ls -la --color=auto\'</span>\n<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">\'ls -l --color=auto\'</span>\n\n<span class="nb">alias du</span><span class="o">=</span><span class="s2">"du -Th"</span>\n<span class="nb">alias df</span><span class="o">=</span><span class="s2">"df -Th"</span>\n<span class="nb">alias </span><span class="nv">su</span><span class="o">=</span><span class="s2">"su -l"</span>\n<span class="nb">alias </span><span class="nv">so</span><span class="o">=</span><span class="s1">\'source\'</span>\n<span class="nb">alias </span><span class="nv">vi</span><span class="o">=</span><span class="s1">\'vim\'</span>\n<span class="nb">alias </span><span class="nv">vz</span><span class="o">=</span><span class="s1">\'vim ~/.zshrc\'</span>\n<span class="nb">alias </span><span class="nv">c</span><span class="o">=</span><span class="s1">\'cdr\'</span>\n<span class="nb">alias cp</span><span class="o">=</span><span class="s1">\'cp -i\'</span>\n<span class="nb">alias rm</span><span class="o">=</span><span class="s1">\'rm -i\'</span>\n<span class="nb">alias mkdir</span><span class="o">=</span><span class="s1">\'mkdir -p\'</span>\n<span class="nb">alias</span> ..<span class="o">=</span><span class="s1">\'c ../\'</span>\n<span class="nb">alias </span><span class="nv">back</span><span class="o">=</span><span class="s1">\'pushd\'</span>\n<span class="nb">alias </span><span class="nv">diff</span><span class="o">=</span><span class="s1">\'diff -U1\'</span>\n\n<span class="nb">alias </span><span class="nv">tma</span><span class="o">=</span><span class="s1">\'tmux attach\'</span>\n<span class="nb">alias </span><span class="nv">tml</span><span class="o">=</span><span class="s1">\'tmux list-window\'</span>\n\n<span class="nb">alias </span><span class="nv">dki</span><span class="o">=</span><span class="s2">"docker run -i -t -P"</span>\n<span class="nb">alias </span><span class="nv">dex</span><span class="o">=</span><span class="s2">"docker exec -i -t"</span>\n<span class="nb">alias </span><span class="nv">drmf</span><span class="o">=</span><span class="s1">\'docker stop $(docker ps -a -q) &amp;&amp; docker rm $(docker ps -a -q)\'</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Plugin</span>\n<span class="c"># -----------------------------</span>\n<span class="c"># root のコマンドはヒストリに追加しない</span>\n<span class="c">#if [ $UID = 0 ]; then</span>\n<span class="c">#  unset HISTFILE</span>\n<span class="c">#  SAVEHIST=0</span>\n<span class="c">#fi</span>\n\n<span class="c">#function h {</span>\n<span class="c">#  history</span>\n<span class="c">#}</span>\n\n<span class="c">#function g() {</span>\n<span class="c">#  egrep -r "$1" .</span>\n<span class="c">#}</span>\n\n<span class="k">function </span>t<span class="o">()</span>\n<span class="o">{</span>\n  tmux new-session <span class="nt">-s</span> <span class="k">$(</span><span class="nb">pwd</span> |sed <span class="nt">-E</span> <span class="s1">\'s!^.+/([^/]+/[^/]+)$!\\1!g\'</span> | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">\'s/\\./-/g\'</span><span class="k">)</span>\n<span class="o">}</span>\n\n<span class="k">function </span>psgrep<span class="o">()</span> <span class="o">{</span>\n  ps aux | <span class="nb">grep</span> <span class="nt">-v</span> <span class="nb">grep</span> | <span class="nb">grep</span> <span class="s2">"USER.*COMMAND"</span>\n  ps aux | <span class="nb">grep</span> <span class="nt">-v</span> <span class="nb">grep</span> | <span class="nb">grep</span> <span class="nv">$1</span>\n<span class="o">}</span>\n\n<span class="k">function </span>dstop<span class="o">()</span>\n<span class="o">{</span>\n  docker stop <span class="k">$(</span>docker ps <span class="nt">-a</span> <span class="nt">-q</span><span class="k">)</span><span class="p">;</span>\n<span class="o">}</span>\n\n<span class="k">function </span>drm<span class="o">()</span>\n<span class="o">{</span>\n  docker <span class="nb">rm</span> <span class="k">$(</span>docker ps <span class="nt">-a</span> <span class="nt">-q</span><span class="k">)</span><span class="p">;</span>\n<span class="o">}</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Plugin</span>\n<span class="c"># -----------------------------</span>\n<span class="c"># zplugが無ければインストール</span>\n<span class="k">if</span> <span class="o">[[</span> <span class="o">!</span> <span class="nt">-d</span> ~/.zplug <span class="o">]]</span><span class="p">;</span><span class="k">then\n  </span>git clone https://github.com/zplug/zplug ~/.zplug\n<span class="k">fi</span>\n\n<span class="c"># zplugを有効化する</span>\n<span class="nb">source</span> ~/.zplug/init.zsh\n\n<span class="c"># プラグインList</span>\n<span class="c"># zplug "ユーザー名/リポジトリ名", タグ</span>\nzplug <span class="s2">"zsh-users/zsh-completions"</span>\nzplug <span class="s2">"zsh-users/zsh-autosuggestions"</span>\nzplug <span class="s2">"zsh-users/zsh-syntax-highlighting"</span>, defer:2\nzplug <span class="s2">"b4b4r07/enhancd"</span>, use:init.sh\n<span class="c">#zplug "junegunn/fzf-bin", as:command, from:gh-r, file:fzf</span>\n\n<span class="c"># インストールしていないプラグインをインストール</span>\n<span class="k">if</span> <span class="o">!</span> zplug check <span class="nt">--verbose</span><span class="p">;</span> <span class="k">then\n  </span><span class="nb">printf</span> <span class="s2">"Install? [y/N]: "</span>\n  <span class="k">if </span><span class="nb">read</span> <span class="nt">-q</span><span class="p">;</span> <span class="k">then\n      </span><span class="nb">echo</span><span class="p">;</span> zplug <span class="nb">install\n  </span><span class="k">fi\nfi</span>\n\n<span class="c"># コマンドをリンクして、PATH に追加し、プラグインは読み込む</span>\nzplug load <span class="nt">--verbose</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># PATH</span>\n<span class="c"># -----------------------------</span>\n<span class="k">case</span> <span class="s2">"</span><span class="k">${</span><span class="nv">OSTYPE</span><span class="k">}</span><span class="s2">"</span> <span class="k">in\n  </span>darwin<span class="k">*</span><span class="p">)</span>\n    <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/opt/local/bin:/opt/local/sbin:<span class="nv">$PATH</span>\n    <span class="nb">export </span><span class="nv">MANPATH</span><span class="o">=</span>/opt/local/share/man:/opt/local/man:<span class="nv">$MANPATH</span>\n  <span class="p">;;</span>\n<span class="k">esac</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Python</span>\n<span class="c"># -----------------------------</span>\n<span class="nb">export </span><span class="nv">PYENV_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.pyenv"</span>\n<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PYENV_ROOT</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>\n<span class="c">#eval "$(pyenv init -)"</span>\n<span class="nb">alias </span><span class="nv">pipallupgrade</span><span class="o">=</span><span class="s2">"pip freeze --local | grep -v \'^</span><span class="se">\\-</span><span class="s2">e\' | cut -d = -f 1  | xargs pip install -U"</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Golang</span>\n<span class="c"># -----------------------------</span>\n<span class="k">if </span>which go <span class="o">&gt;</span> /dev/null 2&gt;&amp;1  <span class="p">;</span> <span class="k">then\n  </span><span class="nb">export </span><span class="nv">CGO_ENABLED</span><span class="o">=</span>1\n  <span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/dev/go\n  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="k">$(</span>go <span class="nb">env </span>GOROOT<span class="k">)</span>/bin:<span class="nv">$GOPATH</span>/bin\n<span class="k">fi</span>\n\n<span class="c"># -----------------------------</span>\n<span class="c"># Git</span>\n<span class="c"># -----------------------------</span>\n<span class="k">function </span>gt<span class="o">()</span> <span class="o">{</span>\n  is_in_git_repo <span class="o">||</span> <span class="k">return\n  </span>git tag <span class="nt">--sort</span> <span class="nt">-version</span>:refname |\n  fzf-down <span class="nt">--multi</span> <span class="nt">--preview-window</span> right:70% <span class="se">\\</span>\n    <span class="nt">--preview</span> <span class="s1">\'git show --color=always {} | head -200\'</span>\n<span class="o">}</span>\n\n<span class="k">function </span>gr<span class="o">()</span> <span class="o">{</span>\n  is_in_git_repo <span class="o">||</span> <span class="k">return\n  </span>git remote <span class="nt">-v</span> | <span class="nb">awk</span> <span class="s1">\'{print $1 "\\t" $2}\'</span> | <span class="nb">uniq</span> |\n  fzf-down <span class="nt">--tac</span> <span class="se">\\</span>\n    <span class="nt">--preview</span> <span class="s1">\'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200\'</span> |\n  <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">$\'</span><span class="se">\\t</span><span class="s1">\'</span> <span class="nt">-f1</span>\n<span class="o">}</span>\n\n<span class="k">function </span>gs<span class="o">()</span> <span class="o">{</span>\n  is_in_git_repo <span class="o">||</span> <span class="k">return\n  </span>git stash list | fzf-down <span class="nt">--reverse</span> <span class="nt">-d</span>: <span class="nt">--preview</span> <span class="s1">\'git show --color=always {1}\'</span> |\n  <span class="nb">cut</span> <span class="nt">-d</span>: <span class="nt">-f1</span>\n<span class="o">}</span>\n</pre></div></div>\n\n<p>Bashで使ってたaliasとかfunctionはそのまま持ってきてzsh特有の設定を追記したって感じです。<br>\nこの長さだと分けたい気持ちが強いです。</p>\n\n<h2>\n<span id="感想" class="fragment"></span><a href="#%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>感想</h2>\n\n<p>Bashと違ってZshはインストールが必要なので業務で使うことはあまりなさそう。<br>\nただ家で遊ぶ分には面白いなって思いました。<br>\n勉強&amp;経験不足なのでZshの恩恵は正直受けきれてないと思うのでこれからもzshrc含め広げてこうと思います。</p>\n\n<p>別サーバにSSH接続して作業することが多い現状だがこれが変われば業務でも使えるかもしれませんね。。。</p>\n\n<h2>\n<span id="雰囲気" class="fragment"></span><a href="#%E9%9B%B0%E5%9B%B2%E6%B0%97"><i class="fa fa-link"></i></a>雰囲気</h2>\n\n<p>コマンドを打ってtabを打つだけで下記のような入力候補が色付きで出力されます。<br>\nファイルやシンボリックリンク、ディレクトリが一目でわかるようになってます。</p>\n\n<p><a href="https://camo.qiitausercontent.com/3dd4da77d11e29426eb81427e8a67f4c75dbfe37/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64653235623264352d303530322d663962342d313936312d3132656131623330666636332e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/3dd4da77d11e29426eb81427e8a67f4c75dbfe37/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64653235623264352d303530322d663962342d313936312d3132656131623330666636332e706e67" alt="1.PNG" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/de25b2d5-0502-f9b4-1961-12ea1b30ff63.png"></a></p>\n\n<p>ショートオプションやロングオプションの補完も効きます。<br>\nbash-completionと違って方向キーで簡単に選択できるので便利です。<br>\nmanやpsコマンドの引数も補完が効きます。</p>\n\n<p><a href="https://camo.qiitausercontent.com/c4ca7496542b85a72c3cc40e24e26ec7c2a47054/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30303734666438662d343435372d393935612d343338622d6230343637356564346565652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/c4ca7496542b85a72c3cc40e24e26ec7c2a47054/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30303734666438662d343435372d393935612d343338622d6230343637356564346565652e706e67" alt="2.PNG" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/0074fd8f-4457-995a-438b-b04675ed4eee.png"></a></p>\n\n<p>コマンド + 「-」でtabを入力するとusageも見ることが可能です。</p>\n\n<p><a href="https://camo.qiitausercontent.com/2d2a6b3e3dafb84d46c0147c324c8b1730ece1c7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63653064393466322d623134382d396136392d663361642d3035393632383531653562332e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/2d2a6b3e3dafb84d46c0147c324c8b1730ece1c7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63653064393466322d623134382d396136392d663361642d3035393632383531653562332e706e67" alt="3.PNG" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/ce0d94f2-b148-9a69-f3ad-05962851e5b3.png"></a></p>\n\n<h2>\n<span id="小ネタ" class="fragment"></span><a href="#%E5%B0%8F%E3%83%8D%E3%82%BF"><i class="fa fa-link"></i></a>小ネタ</h2>\n\n<p>Zshインストールするとテトリスが一緒に入る。<br>\n遊び方はもせっかくなので載せておきます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 下記コマンドを入力</span>\n<span class="nv">$ </span>autoload <span class="nt">-Uz</span> tetris\n<span class="nv">$ </span>zle <span class="nt">-N</span> tetris\n\n<span class="c"># ESC + 「x」キーを入力し「testris」と入力</span>\n<span class="nv">$ </span>\nexecute: tetris\n\nroot@OPST-N394:~#\n|                      |   Score: 1\n|                      |\n|                      |   Game parameters: 11x20, 2.5Hz\n|                      |\n|                      |   Keys:   left: a j\n|                      |         rotate: s k\n|                      |          right: d l\n|        <span class="k">******</span>        |           drop: space\n|        <span class="k">**</span>            |           quit: q\n|                      |\n|                      |\n|                      |\n|        <span class="o">()()</span>          |\n|  <span class="o">()()()</span>  <span class="o">()()</span>        |\n|  <span class="o">()()</span>      <span class="o">()()</span>      |\n|<span class="o">()()()()()()()()</span>  <span class="o">()()</span>|\n|  <span class="o">()()</span>  <span class="o">()</span>    <span class="o">()()()</span>  |\n|  <span class="o">()()()()()</span>  <span class="o">()</span>  <span class="o">()</span>  |\n|<span class="o">()()()()()()()()()()</span>  |\n|<span class="o">()()</span>  <span class="o">()()()()()()()</span>  |\n+----------------------+\n</pre></div></div>\n\n<p>ちなみにq でゲームから抜けれます。<br>\n暇つぶしには使えそうですね～。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p>● <a href="https://qiita.com/iwaseasahi/items/a2b00b65ebd06785b443" id="reference-03da49ffa1dd99fb00df">初心者向け：Zshの導入</a><br>\n● <a href="https://qiita.com/ktr_type23/items/3eb782f98c7a5f4c60b0" id="reference-5131b66d7329aa4f7cd0">とりあえずZshを使えば良いんだろう？</a><br>\n● <a href="https://qiita.com/kinchiki/items/57e9391128d07819c321" id="reference-c4efb258ace82f831ce6">お前らのターミナルはダサい</a><br>\n● <a href="https://suin.io/568" rel="nofollow noopener" target="_blank">Shellライフをそこそこ快適に！僕のこだわりzsh設定</a><br>\n● <a href="http://gihyo.jp/dev/serial/01/zsh-book/0001" rel="nofollow noopener" target="_blank">zshで究極のオペレーションを</a><br>\n● <a href="http://labs.septeni.co.jp/entry/2015/12/25/142201" rel="nofollow noopener" target="_blank">zshを使用してみよう！</a><br>\n● <a href="https://medium.freecodecamp.org/how-to-configure-your-macos-terminal-with-zsh-like-a-pro-c0ab3f3c1156" rel="nofollow noopener" target="_blank">How to Configure your macOs Terminal with Zsh like a Pro</a><br>\n● <a href="https://ohmyz.sh/" rel="nofollow noopener" target="_blank">Oh My Zsh</a></p>\n', 'body': '![zsh_logo.png](https://qiita-image-store.s3.amazonaws.com/0/258841/33af3943-50cb-7472-7b07-9000432306c5.png)\n## 背景\n\nあるところにZshを熱く語ってくる友人がいました。\n聞けば聞くほど興味が出てきたのでとりあえず入門してみたのでzshrcを色々調べた時の使えそうな者たちです。\nお暇な方は見てってください。\nzsh歴は1週間程度です。超ど素人の記事なので達人の方々は得られる情報は少ないと思います。。。\n\n## 環境\n\nCeotOS 7.6へインストールしてみます。\n入れてみたZshのバージョンは5.0.2です。\n\n``` bash\n$ cat /etc/redhat-release\nCentOS Linux release 7.6.1810 (Core)\n\n$ zsh --version\nzsh 5.0.2 (x86_64-redhat-linux-gnu)\n```\n\nちなみに最新バージョンは5.7\n変更点等々は下記のサイトで確認できます。\nyumとかaptだと最新版は入れられないので最新がいい人は下記から落としてインストールが必要です。\n\nhttp://zsh.sourceforge.net/Arc/source.html\n\n## 対象読者\n\n* 「bashに不満はないけどzshってよく聞くし使ってみたいな」\n* 「zshのカスタマイズやってみたい」\n\nって人を対象にします。\n\n## Zshとは\n\nZsh(Z Shell)とはシェルの種類の1つです。\n拡張機能が多彩で自分好みに育ててく感覚が楽しいらしいです。\n最近だとfishとかxonshとかも有名です。\n\n有名な特徴としては下記2点\n\n* タブ補完が強力\n* 柔軟性があり自在にカスタマイズが可能\n\nちなみにソースはGitHubで見ることが出来ます。\n[zsh-users/zsh](https://github.com/zsh-users/zsh)\n\n## 導入\n\n導入はとても簡単です。\nRHEL系ならyum、Debian系ならaptで入ります。\n\n``` bash\n# RHEL\n$ sudo yum install -y zsh\n\n# debian\n$ sudo apt install -y zsh\n```\n\nデフォルトでbashではなくzshでログインしたいなら下記コマンドを使用します。\n次回以降はbashではなくzshになります。\n\n``` bash\n# デフォルト\n$ echo $SHELL\n/bin/bash\n\n# ログインシェルを変更\n$ whichi zsh\n/usr/bin/zsh\n$ chsh -s /usr/bin/zsh\n\n# 再ログインして確認\n$ echo $SHELL\n/usr/bin/zsh\n```\n\n## zshrc(コメント付き)\n\nGitHubでも一応公開しています。\n更新はこっちでやってくので興味ある方は見てみてください。\n■ [ryuichi1208/dotfiles](https://github.com/ryuichi1208/dotfiles)\n\n``` bash\n# -----------------------------\n# Lang\n# -----------------------------\n#export LANG=ja_JP.UTF-8\n#export LESSCHARSET=utf-8\n\n# -----------------------------\n# General\n# -----------------------------\n# 色を使用\nautoload -Uz colors ; colors\n\n# エディタをvimに設定\nexport EDITOR=vim\n\n# Ctrl+Dでログアウトしてしまうことを防ぐ\n#setopt IGNOREEOF\n\n# パスを追加したい場合\nexport PATH="$HOME/bin:$PATH"\n\n# cdした際のディレクトリをディレクトリスタックへ自動追加\nsetopt auto_pushd\n\n# ディレクトリスタックへの追加の際に重複させない\nsetopt pushd_ignore_dups\n\n# emacsキーバインド\nbindkey -e\n\n# viキーバインド\n#bindkey -v\n\n# フローコントロールを無効にする\nsetopt no_flow_control\n\n# ワイルドカード展開を使用する\nsetopt extended_glob\n\n# cdコマンドを省略して、ディレクトリ名のみの入力で移動\nsetopt auto_cd\n\n# コマンドラインがどのように展開され実行されたかを表示するようになる\n#setopt xtrace\n\n# 自動でpushdを実行\nsetopt auto_pushd\n\n# pushdから重複を削除\nsetopt pushd_ignore_dups\n\n# ビープ音を鳴らさないようにする\n#setopt no_beep\n\n# カッコの対応などを自動的に補完する\nsetopt auto_param_keys\n\n# ディレクトリ名の入力のみで移動する\nsetopt auto_cd\n\n# bgプロセスの状態変化を即時に知らせる\nsetopt notify\n\n# 8bit文字を有効にする\nsetopt print_eight_bit\n\n# 終了ステータスが0以外の場合にステータスを表示する\nsetopt print_exit_value\n\n# ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加\nsetopt mark_dirs\n\n# コマンドのスペルチェックをする\nsetopt correct\n\n# コマンドライン全てのスペルチェックをする\nsetopt correct_all\n\n# 上書きリダイレクトの禁止\nsetopt no_clobber\n\n# sudo の後ろでコマンド名を補完する\nzstyle \':completion:*:sudo:*\' command-path /usr/local/sbin /usr/local/bin \\\n                   /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin\n\n# ps コマンドのプロセス名補完\nzstyle \':completion:*:processes\' command \'ps x -o pid,s,args\'\n\n# パスの最後のスラッシュを削除しない\nsetopt noautoremoveslash\n\n# 各コマンドが実行されるときにパスをハッシュに入れる\n#setopt hash_cmds\n\n# rsysncでsshを使用する\nexport RSYNC_RSH=ssh\n\n# その他\numask 022\nulimit -c 0\n\n# -----------------------------\n# Prompt\n# -----------------------------\n# %M    ホスト名\n# %m    ホスト名\n# %d    カレントディレクトリ(フルパス)\n# %~    カレントディレクトリ(フルパス2)\n# %C    カレントディレクトリ(相対パス)\n# %c    カレントディレクトリ(相対パス)\n# %n    ユーザ名\n# %#    ユーザ種別\n# %?    直前のコマンドの戻り値\n# %D    日付(yy-mm-dd)\n# %W    日付(yy/mm/dd)\n# %w    日付(day dd)\n# %*    時間(hh:flag_mm:ss)\n# %T    時間(hh:mm)\n# %t    時間(hh:mm(am/pm))\nPROMPT=\'%F{cyan}%n@%m%f:%~# \'\n\n# -----------------------------\n# Completion\n# -----------------------------\n# 自動補完を有効にする\nautoload -Uz compinit ; compinit\n\n# 単語の入力途中でもTab補完を有効化\n#setopt complete_in_word\n\n# コマンドミスを修正\nsetopt correct\n\n# 補完の選択を楽にする\nzstyle \':completion:*\' menu select\n\n# 補完候補をできるだけ詰めて表示する\nsetopt list_packed\n\n# 補完候補にファイルの種類も表示する\n#setopt list_types\n\n# 色の設定\nexport LSCOLORS=Exfxcxdxbxegedabagacad\n\n# 補完時の色設定\nexport LS_COLORS=\'di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30\'\n\n# キャッシュの利用による補完の高速化\nzstyle \':completion::complete:*\' use-cache true\n\n# 補完候補に色つける\nautoload -U colors ; colors ; zstyle \':completion:*\' list-colors "${LS_COLORS}"\n#zstyle \':completion:*\' list-colors ${(s.:.)LS_COLORS}\n\n# 大文字・小文字を区別しない(大文字を入力した場合は区別する)\nzstyle \':completion:*\' matcher-list \'m:{a-z}={A-Z}\'\n\n# manの補完をセクション番号別に表示させる\nzstyle \':completion:*:manuals\' separate-sections true\n\n# --prefix=/usr などの = 以降でも補完\nsetopt magic_equal_subst\n\n# -----------------------------\n# History\n# -----------------------------\n# 基本設定\nHISTFILE=$HOME/.zsh-history\nHISTSIZE=100000\nSAVEHIST=1000000\n\n# ヒストリーに重複を表示しない\nsetopt histignorealldups\n\n# 他のターミナルとヒストリーを共有\nsetopt share_history\n\n# すでにhistoryにあるコマンドは残さない\nsetopt hist_ignore_all_dups\n\n# historyに日付を表示\nalias h=\'fc -lt \'%F %T\' 1\'\n\n# ヒストリに保存するときに余分なスペースを削除する\nsetopt hist_reduce_blanks\n\n# 履歴をすぐに追加する\nsetopt inc_append_history\n\n# ヒストリを呼び出してから実行する間に一旦編集できる状態になる\nsetopt hist_verify\n\n#余分なスペースを削除してヒストリに記録する\n#setopt hist_reduce_blanks\n\n# historyコマンドは残さない\n#setopt hist_save_no_dups\n\n# ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする\n#bindkey \'^R\' history-incremental-pattern-search-backward\n#bindkey "^S" history-incremental-search-forward\n\n# ^P,^Nを検索へ割り当て\n#bindkey "^P" history-beginning-search-backward-end\n#bindkey "^N" history-beginning-search-forward-end\n\n# -----------------------------\n# Alias\n# -----------------------------\n# グローバルエイリアス\nalias -g L=\'| less\'\nalias -g H=\'| head\'\nalias -g G=\'| grep\'\nalias -g GI=\'| grep -ri\'\n\n# エイリアス\nalias lst=\'ls -ltr --color=auto\'\nalias ls=\'ls --color=auto\'\nalias la=\'ls -la --color=auto\'\nalias ll=\'ls -l --color=auto\'\n\nalias du="du -Th"\nalias df="df -Th"\nalias su="su -l"\nalias so=\'source\'\nalias vi=\'vim\'\nalias vz=\'vim ~/.zshrc\'\nalias c=\'cdr\'\nalias cp=\'cp -i\'\nalias rm=\'rm -i\'\nalias mkdir=\'mkdir -p\'\nalias ..=\'c ../\'\nalias back=\'pushd\'\nalias diff=\'diff -U1\'\n\nalias tma=\'tmux attach\'\nalias tml=\'tmux list-window\'\n\nalias dki="docker run -i -t -P"\nalias dex="docker exec -i -t"\nalias drmf=\'docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)\'\n\n# -----------------------------\n# Plugin\n# -----------------------------\n# root のコマンドはヒストリに追加しない\n#if [ $UID = 0 ]; then\n#  unset HISTFILE\n#  SAVEHIST=0\n#fi\n\n#function h {\n#  history\n#}\n\n#function g() {\n#  egrep -r "$1" .\n#}\n\nfunction t()\n{\n  tmux new-session -s $(pwd |sed -E \'s!^.+/([^/]+/[^/]+)$!\\1!g\' | sed -e \'s/\\./-/g\')\n}\n\nfunction psgrep() {\n  ps aux | grep -v grep | grep "USER.*COMMAND"\n  ps aux | grep -v grep | grep $1\n}\n\nfunction dstop()\n{\n  docker stop $(docker ps -a -q);\n}\n\nfunction drm()\n{\n  docker rm $(docker ps -a -q);\n}\n\n# -----------------------------\n# Plugin\n# -----------------------------\n# zplugが無ければインストール\nif [[ ! -d ~/.zplug ]];then\n  git clone https://github.com/zplug/zplug ~/.zplug\nfi\n\n# zplugを有効化する\nsource ~/.zplug/init.zsh\n\n# プラグインList\n# zplug "ユーザー名/リポジトリ名", タグ\nzplug "zsh-users/zsh-completions"\nzplug "zsh-users/zsh-autosuggestions"\nzplug "zsh-users/zsh-syntax-highlighting", defer:2\nzplug "b4b4r07/enhancd", use:init.sh\n#zplug "junegunn/fzf-bin", as:command, from:gh-r, file:fzf\n\n# インストールしていないプラグインをインストール\nif ! zplug check --verbose; then\n  printf "Install? [y/N]: "\n  if read -q; then\n      echo; zplug install\n  fi\nfi\n\n# コマンドをリンクして、PATH に追加し、プラグインは読み込む\nzplug load --verbose\n\n# -----------------------------\n# PATH\n# -----------------------------\ncase "${OSTYPE}" in\n  darwin*)\n    export PATH=/opt/local/bin:/opt/local/sbin:$PATH\n    export MANPATH=/opt/local/share/man:/opt/local/man:$MANPATH\n  ;;\nesac\n\n# -----------------------------\n# Python\n# -----------------------------\nexport PYENV_ROOT="$HOME/.pyenv"\nexport PATH="$PYENV_ROOT/bin:$PATH"\n#eval "$(pyenv init -)"\nalias pipallupgrade="pip freeze --local | grep -v \'^\\-e\' | cut -d = -f 1  | xargs pip install -U"\n\n# -----------------------------\n# Golang\n# -----------------------------\nif which go > /dev/null 2>&1  ; then\n  export CGO_ENABLED=1\n  export GOPATH=$HOME/dev/go\n  export PATH=$PATH:$(go env GOROOT)/bin:$GOPATH/bin\nfi\n\n# -----------------------------\n# Git\n# -----------------------------\nfunction gt() {\n  is_in_git_repo || return\n  git tag --sort -version:refname |\n  fzf-down --multi --preview-window right:70% \\\n    --preview \'git show --color=always {} | head -200\'\n}\n\nfunction gr() {\n  is_in_git_repo || return\n  git remote -v | awk \'{print $1 "\\t" $2}\' | uniq |\n  fzf-down --tac \\\n    --preview \'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200\' |\n  cut -d$\'\\t\' -f1\n}\n\nfunction gs() {\n  is_in_git_repo || return\n  git stash list | fzf-down --reverse -d: --preview \'git show --color=always {1}\' |\n  cut -d: -f1\n}\n```\n\nBashで使ってたaliasとかfunctionはそのまま持ってきてzsh特有の設定を追記したって感じです。\nこの長さだと分けたい気持ちが強いです。\n\n## 感想\n\nBashと違ってZshはインストールが必要なので業務で使うことはあまりなさそう。\nただ家で遊ぶ分には面白いなって思いました。\n勉強&経験不足なのでZshの恩恵は正直受けきれてないと思うのでこれからもzshrc含め広げてこうと思います。\n\n別サーバにSSH接続して作業することが多い現状だがこれが変われば業務でも使えるかもしれませんね。。。\n\n## 雰囲気\n\nコマンドを打ってtabを打つだけで下記のような入力候補が色付きで出力されます。\nファイルやシンボリックリンク、ディレクトリが一目でわかるようになってます。\n\n![1.PNG](https://qiita-image-store.s3.amazonaws.com/0/258841/de25b2d5-0502-f9b4-1961-12ea1b30ff63.png)\n\nショートオプションやロングオプションの補完も効きます。\nbash-completionと違って方向キーで簡単に選択できるので便利です。\nmanやpsコマンドの引数も補完が効きます。\n\n![2.PNG](https://qiita-image-store.s3.amazonaws.com/0/258841/0074fd8f-4457-995a-438b-b04675ed4eee.png)\n\nコマンド + 「-」でtabを入力するとusageも見ることが可能です。\n\n![3.PNG](https://qiita-image-store.s3.amazonaws.com/0/258841/ce0d94f2-b148-9a69-f3ad-05962851e5b3.png)\n\n\n## 小ネタ\n\nZshインストールするとテトリスが一緒に入る。\n遊び方はもせっかくなので載せておきます。\n\n``` bash\n# 下記コマンドを入力\n$ autoload -Uz tetris\n$ zle -N tetris\n\n# ESC + 「x」キーを入力し「testris」と入力\n$ \nexecute: tetris\n\nroot@OPST-N394:~#\n|                      |   Score: 1\n|                      |\n|                      |   Game parameters: 11x20, 2.5Hz\n|                      |\n|                      |   Keys:   left: a j\n|                      |         rotate: s k\n|                      |          right: d l\n|        ******        |           drop: space\n|        **            |           quit: q\n|                      |\n|                      |\n|                      |\n|        ()()          |\n|  ()()()  ()()        |\n|  ()()      ()()      |\n|()()()()()()()()  ()()|\n|  ()()  ()    ()()()  |\n|  ()()()()()  ()  ()  |\n|()()()()()()()()()()  |\n|()()  ()()()()()()()  |\n+----------------------+\n```\n\nちなみにq でゲームから抜けれます。\n暇つぶしには使えそうですね～。\n\n## 参考リンク\n\n● [初心者向け：Zshの導入](https://qiita.com/iwaseasahi/items/a2b00b65ebd06785b443)\n● [とりあえずZshを使えば良いんだろう？](https://qiita.com/ktr_type23/items/3eb782f98c7a5f4c60b0)\n● [お前らのターミナルはダサい](https://qiita.com/kinchiki/items/57e9391128d07819c321)\n● [Shellライフをそこそこ快適に！僕のこだわりzsh設定](https://suin.io/568)\n● [zshで究極のオペレーションを](http://gihyo.jp/dev/serial/01/zsh-book/0001)\n● [zshを使用してみよう！](http://labs.septeni.co.jp/entry/2015/12/25/142201)\n● [How to Configure your macOs Terminal with Zsh like a Pro](https://medium.freecodecamp.org/how-to-configure-your-macos-terminal-with-zsh-like-a-pro-c0ab3f3c1156)\n● [Oh My Zsh](https://ohmyz.sh/)\n', 'coediting': False, 'comments_count': 7, 'created_at': '2019-04-06T19:58:24+09:00', 'group': None, 'id': '2eef96debebb15f5b402', 'likes_count': 73, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Zsh', 'versions': []}, {'name': 'Linux', 'versions': []}], 'title': 'Zsh初心者がzshrcを色々調べたの晒してみる', 'updated_at': '2019-04-08T09:30:38+09:00', 'url': 'https://qiita.com/ryuichi1208/items/2eef96debebb15f5b402', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/0a781258198b34f3d72144437f8bcb14909a0775/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33396461376666392d653437382d316164662d643439302d3063336631356139633631372e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/0a781258198b34f3d72144437f8bcb14909a0775/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33396461376666392d653437382d316164662d643439302d3063336631356139633631372e706e67" alt="Apache.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/39da7ff9-e478-1adf-d490-0c3f15a9c617.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>WSL上にapacheを立てて遊べる事が分かったのでやってみた。<br>\nその際のメモとか</p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<ul>\n<li>WSL Ubuntu 18.04</li>\n</ul>\n\n<h2>\n<span id="手順" class="fragment"></span><a href="#%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>手順</h2>\n\n<h4>\n<span id="wslのインストール" class="fragment"></span><a href="#wsl%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>WSLのインストール</h4>\n\n<p>下記を参考にwslをセットアップします。<br>\nubuntuのバージョンは正直何でもよいですがとりあえず最新を入れてみました。<br>\n<a href="http://www.aise.ics.saitama-u.ac.jp/%7Egotoh/HowToInstallUbuntu1804OnWSL.html" rel="nofollow noopener" target="_blank">Ubuntu 18.04のWSL上へのインストールと初期設定</a></p>\n\n<h4>\n<span id="リポジトリ一覧を更新パッケージのアップデート" class="fragment"></span><a href="#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%B8%80%E8%A6%A7%E3%82%92%E6%9B%B4%E6%96%B0%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88"><i class="fa fa-link"></i></a>リポジトリ一覧を更新/パッケージのアップデート</h4>\n\n<p>Ubuntu 14.04から「apt-get」じゃなくて「apt」コマンドが推奨されているらしいです。<br>\n知らなかった。。。</p>\n\n<p><a href="https://linuxfan.info/package-management-ubuntu" rel="nofollow noopener" target="_blank">「apt-get」はもう古い？新しい「apt」コマンドを使ったUbuntuのパッケージ管理</a></p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>apt update\n<span class="gp">$</span> <span class="nb">sudo </span>apt upgrade\n</pre></div></div>\n\n<h4>\n<span id="apache2のインストール" class="fragment"></span><a href="#apache2%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>Apache2のインストール</h4>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> apache\n</pre></div></div>\n\n<h4>\n<span id="サービス起動" class="fragment"></span><a href="#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E8%B5%B7%E5%8B%95"><i class="fa fa-link"></i></a>サービス起動</h4>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>service apache2 start\n</pre></div></div>\n\n<h4>\n<span id="ブラウザからアクセス" class="fragment"></span><a href="#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9"><i class="fa fa-link"></i></a>ブラウザからアクセス</h4>\n\n<p><a href="http://localhost/" class="autolink" rel="nofollow noopener" target="_blank">http://localhost/</a></p>\n\n<p>でブラウザを開けばapacheのおなじみにの画面が見れます。</p>\n\n<h4>\n<span id="httpsを許可してみる" class="fragment"></span><a href="#https%E3%82%92%E8%A8%B1%E5%8F%AF%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>httpsを許可してみる</h4>\n\n<p>当然ですがSSLモジュールのONもできるようです。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>a2enmod ssl\n<span class="gp">$</span> <span class="nb">sudo </span>a2ensite default-ssl\n<span class="gp">$</span> <span class="nb">sudo </span>service apache2 restart\n</pre></div></div>\n\n<h2>\n<span id="感想" class="fragment"></span><a href="#%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>感想</h2>\n\n<p>予想の100倍くらい簡単にインストール出来ました。<br>\nWSL上での操作ってもっと独特の何かがあると思ってましたがそんなことはなく普通に使えます。<br>\nsystemctlだったりところどころWSL特有の違いだったりlsの遅さだったり違和感はありますが全然気にすることなさそうです。</p>\n\n<p>LAMP環境も簡単に作れるようです。うーん便利。<br>\n<a href="https://qiita.com/mollinaca/items/60c54b7767a49c1e3e51" id="reference-c5724af7a9af06f4a6d1">WSLにLAMPを構築する（2018秋）</a></p>\n\n<p>(はまると思って書き始めましたが予想以上にすんなりいって記事は薄めです。。。笑)</p>\n', 'body': '![Apache.png](https://qiita-image-store.s3.amazonaws.com/0/258841/39da7ff9-e478-1adf-d490-0c3f15a9c617.png)\n\n## 背景\n\nWSL上にapacheを立てて遊べる事が分かったのでやってみた。\nその際のメモとか\n\n## 環境\n\n* WSL Ubuntu 18.04\n\n## 手順\n\n#### WSLのインストール\n\n下記を参考にwslをセットアップします。\nubuntuのバージョンは正直何でもよいですがとりあえず最新を入れてみました。\n[Ubuntu 18.04のWSL上へのインストールと初期設定](http://www.aise.ics.saitama-u.ac.jp/~gotoh/HowToInstallUbuntu1804OnWSL.html)\n\n#### リポジトリ一覧を更新/パッケージのアップデート\n\nUbuntu 14.04から「apt-get」じゃなくて「apt」コマンドが推奨されているらしいです。\n知らなかった。。。\n\n[「apt-get」はもう古い？新しい「apt」コマンドを使ったUbuntuのパッケージ管理](https://linuxfan.info/package-management-ubuntu)\n\n``` console\n$ sudo apt update\n$ sudo apt upgrade\n```\n\n#### Apache2のインストール\n\n``` console\n$ sudo apt install -y apache\n```\n\n#### サービス起動\n\n``` console\n$ sudo service apache2 start\n```\n\n#### ブラウザからアクセス\n\nhttp://localhost/\n\nでブラウザを開けばapacheのおなじみにの画面が見れます。\n\n#### httpsを許可してみる\n\n当然ですがSSLモジュールのONもできるようです。\n\n``` console\n$ sudo a2enmod ssl\n$ sudo a2ensite default-ssl\n$ sudo service apache2 restart\n```\n\n## 感想\n\n予想の100倍くらい簡単にインストール出来ました。\nWSL上での操作ってもっと独特の何かがあると思ってましたがそんなことはなく普通に使えます。\nsystemctlだったりところどころWSL特有の違いだったりlsの遅さだったり違和感はありますが全然気にすることなさそうです。\n\nLAMP環境も簡単に作れるようです。うーん便利。\n[WSLにLAMPを構築する（2018秋）](https://qiita.com/mollinaca/items/60c54b7767a49c1e3e51)\n\n(はまると思って書き始めましたが予想以上にすんなりいって記事は薄めです。。。笑)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-04-03T14:04:58+09:00', 'group': None, 'id': '2cea334a4ffb2625ad0b', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Apache', 'versions': []}, {'name': 'WSL', 'versions': []}], 'title': 'wsl上のapacheで遊んでみる', 'updated_at': '2019-04-03T22:40:18+09:00', 'url': 'https://qiita.com/ryuichi1208/items/2cea334a4ffb2625ad0b', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/8290179c388444555fd2e1158a0df982efdf2b4a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31626235666633632d313631612d333639382d366432382d3131396339396133306431302e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/8290179c388444555fd2e1158a0df982efdf2b4a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31626235666633632d313631612d333639382d366432382d3131396339396133306431302e6a706567" alt="20150307003237.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/1bb5ff3c-161a-3698-6d28-119c99a30d10.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>procファイルシステムについて気になったので調べた際の備忘録</p>\n\n<h2>\n<span id="疑似ファイルシステムとは" class="fragment"></span><a href="#%E7%96%91%E4%BC%BC%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>疑似ファイルシステムとは</h2>\n\n<p>記憶装置上にあるファイル以外のものを、さもファイルであるかのように見せかけるファイルシステムです。<br>\n本記事ではその中でもprocファイルシステムについて取り上げます。</p>\n\n<h2>\n<span id="procファイルシステムとは" class="fragment"></span><a href="#proc%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>procファイルシステムとは</h2>\n\n<p>procファイルシステムとはカーネルの現在の状態を示す特別なファイルが置いてある階層<br>\nこれを利用してアプリケーションやユーザーがカーネルのシステム情報を見ることが出来ます。</p>\n\n<p>/procディレクトリ配下には、システムハードウェアや現在実行中のプロセスの豊富な 詳細情報があります。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">ls</span> <span class="nt">-l</span> /proc/vmstat\n<span class="go">-r--r--r--. 1 root root 0 Mar 26 08:36 /proc/vmstat\n</span></pre></div></div>\n\n<p>また他にも</p>\n\n<p>/proc/net - ネットワークのプロトコルスタックに関する情報<br>\n/proc/tty - （擬似）端末に関する情報<br>\n/proc/version - カーネルのバージョン番号</p>\n\n<p>等があります。<br>\nここら辺の詳細はwikipediaをご参照ください。<br>\n<a href="https://ja.wikipedia.org/wiki/Procfs" class="autolink" rel="nofollow noopener" target="_blank">https://ja.wikipedia.org/wiki/Procfs</a></p>\n\n<h2>\n<span id="procmounts" class="fragment"></span><a href="#procmounts"><i class="fa fa-link"></i></a>/proc/mounts</h2>\n\n<p>このファイルは、システムで使用中の全マウントの一覧を提供します。<br>\n/etc/mtabやmountコマンドでも同様の結果が得られます。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cat</span> /proc/mounts\n<span class="go">rootfs / rootfs rw 0 0\nsysfs /sys sysfs rw,seclabel,nosuid,nodev,noexec,relatime 0 0\nproc /proc proc rw,nosuid,nodev,noexec,relatime 0 0\ndevtmpfs /dev devtmpfs rw,seclabel,nosuid,size=929184k,nr_inodes=232296,mode=755 0 0\nsecurityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,relatime 0 0\ntmpfs /dev/shm tmpfs rw,seclabel,nosuid,nodev 0 0\ndevpts /dev/pts devpts rw,seclabel,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 0 0\ntmpfs /run tmpfs rw,seclabel,nosuid,nodev,mode=755 0 0\ntmpfs /sys/fs/cgroup tmpfs ro,seclabel,nosuid,nodev,noexec,mode=755 0 0\n</span></pre></div></div>\n\n<h2>\n<span id="procuptime" class="fragment"></span><a href="#procuptime"><i class="fa fa-link"></i></a>/proc/uptime</h2>\n\n<p>このファイルには、システムを最後に再起動してから経過した時間についての情報が保存されています。<br>\nこのファイルを整形してuptimeコマンドやwコマンドは起動時間を出力しています。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cat</span> /proc/uptime\n<span class="go">1482329.71 1478226.66\n</span></pre></div></div>\n\n<h2>\n<span id="proccpuinfo" class="fragment"></span><a href="#proccpuinfo"><i class="fa fa-link"></i></a>/proc/cpuinfo</h2>\n\n<p>物理 CPU、CPU コア、および論理 CPU の数を確認できます。<br>\n保持している情報については実装によって違うようです。<br>\n<a href="https://www.wdic.org/w/TECH//proc/cpuinfo" class="autolink" rel="nofollow noopener" target="_blank">https://www.wdic.org/w/TECH//proc/cpuinfo</a></p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="go">cat /proc/cpuinfo\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 60\nmodel name      : Intel(R) Pentium(R) CPU G3420 @ 3.20GHz\nstepping        : 3\nmicrocode       : 0x24\ncpu MHz         : 3192.607\ncache size      : 3072 KB\nphysical id     : 0\nsiblings        : 1\ncore id         : 0\ncpu cores       : 1\napicid          : 0\ninitial apicid  : 0\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 13\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon nopl xtopology tsc_reliable nonstop_tsc eagerfpu pni pclmulqdq ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer xsave rdrand hypervisor lahf_lm abm ibrs ibpb stibp fsgsbase tsc_adjust invpcid xsaveopt arat spec_ctrl intel_stibp arch_capabilities\nbogomips        : 6385.21\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 43 bits physical, 48 bits virtual\npower management:\n</span></pre></div></div>\n\n<h2>\n<span id="procmeminfo" class="fragment"></span><a href="#procmeminfo"><i class="fa fa-link"></i></a>/proc/meminfo</h2>\n\n<p>システム上の現在のRAM使用率についての情報が記載されています。<br>\n物理的なメモリ量だったりを見ることができます。<br>\nただしカーネルが内部的に管理している枠組みでのメモリ情報でありユーザ視点での内容とは少し別となります。<br>\n<a href="http://enakai00.hatenablog.com/entry/20110906/1315315488" class="autolink" rel="nofollow noopener" target="_blank">http://enakai00.hatenablog.com/entry/20110906/1315315488</a></p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cat</span> /proc/meminfo\n<span class="go">MemTotal:        1882560 kB\nMemFree:         1212888 kB\nMemAvailable:    1483648 kB\nBuffers:               0 kB\nCached:           370828 kB\nSwapCached:          256 kB\nActive:           282168 kB\nInactive:         156996 kB\nActive(anon):       3604 kB\nInactive(anon):    73468 kB\nActive(file):     278564 kB\nInactive(file):    83528 kB\nUnevictable:           0 kB\nMlocked:               0 kB\nSwapTotal:       2097148 kB\nSwapFree:        2096372 kB\nDirty:                 0 kB\nWriteback:             0 kB\nAnonPages:         68100 kB\nMapped:            16388 kB\nShmem:              8736 kB\nSlab:             127540 kB\nSReclaimable:      79660 kB\nSUnreclaim:        47880 kB\nKernelStack:        2896 kB\nPageTables:         4084 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:     3038428 kB\nCommitted_AS:     287156 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:      147232 kB\nVmallocChunk:   34359341052 kB\nHardwareCorrupted:     0 kB\nAnonHugePages:      8192 kB\nCmaTotal:              0 kB\nCmaFree:               0 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\nDirectMap4k:       79744 kB\nDirectMap2M:     2017280 kB\nDirectMap1G:           0 kB\n</span></pre></div></div>\n\n<h2>\n<span id="procsysrq-trigger" class="fragment"></span><a href="#procsysrq-trigger"><i class="fa fa-link"></i></a>/proc/sysrq-trigger</h2>\n\n<p>sysrq-triggerとはSysRqキーからのコマンドキーを受け取るためのファイルです。<br>\nkernel panicなどを意図的に起こす際に使用したりします。<br>\n即座に再起動させたり、システムを強制停止させたりすることも可能です。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s1">\'echo 1 &gt; /proc/sys/kernel/sysrq\'</span>\n<span class="gp">$</span> <span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s1">\'echo c &gt; /proc/sysrq-trigger\'</span>\n</pre></div></div>\n\n<h2>\n<span id="あとがき" class="fragment"></span><a href="#%E3%81%82%E3%81%A8%E3%81%8C%E3%81%8D"><i class="fa fa-link"></i></a>あとがき</h2>\n\n<p>有名どころのprocファイルシステム配下について書いてみました。<br>\n他にも様々な情報が即座にとれる便利な仕組みがあるので是非見てみてください。</p>\n', 'body': "![20150307003237.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/1bb5ff3c-161a-3698-6d28-119c99a30d10.jpeg)\n\n## 背景\n\nprocファイルシステムについて気になったので調べた際の備忘録\n\n## 疑似ファイルシステムとは\n\n記憶装置上にあるファイル以外のものを、さもファイルであるかのように見せかけるファイルシステムです。\n本記事ではその中でもprocファイルシステムについて取り上げます。\n\n## procファイルシステムとは\n\nprocファイルシステムとはカーネルの現在の状態を示す特別なファイルが置いてある階層\nこれを利用してアプリケーションやユーザーがカーネルのシステム情報を見ることが出来ます。\n\n/procディレクトリ配下には、システムハードウェアや現在実行中のプロセスの豊富な 詳細情報があります。\n\n``` console\n$ ls -l /proc/vmstat\n-r--r--r--. 1 root root 0 Mar 26 08:36 /proc/vmstat\n```\n\nまた他にも\n\n/proc/net - ネットワークのプロトコルスタックに関する情報\n/proc/tty - （擬似）端末に関する情報\n/proc/version - カーネルのバージョン番号\n\n等があります。\nここら辺の詳細はwikipediaをご参照ください。\nhttps://ja.wikipedia.org/wiki/Procfs\n\n## /proc/mounts\n\nこのファイルは、システムで使用中の全マウントの一覧を提供します。\n/etc/mtabやmountコマンドでも同様の結果が得られます。\n\n``` console\n$ cat /proc/mounts\nrootfs / rootfs rw 0 0\nsysfs /sys sysfs rw,seclabel,nosuid,nodev,noexec,relatime 0 0\nproc /proc proc rw,nosuid,nodev,noexec,relatime 0 0\ndevtmpfs /dev devtmpfs rw,seclabel,nosuid,size=929184k,nr_inodes=232296,mode=755 0 0\nsecurityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,relatime 0 0\ntmpfs /dev/shm tmpfs rw,seclabel,nosuid,nodev 0 0\ndevpts /dev/pts devpts rw,seclabel,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 0 0\ntmpfs /run tmpfs rw,seclabel,nosuid,nodev,mode=755 0 0\ntmpfs /sys/fs/cgroup tmpfs ro,seclabel,nosuid,nodev,noexec,mode=755 0 0\n```\n\n## /proc/uptime\n\nこのファイルには、システムを最後に再起動してから経過した時間についての情報が保存されています。\nこのファイルを整形してuptimeコマンドやwコマンドは起動時間を出力しています。\n\n``` console\n$ cat /proc/uptime\n1482329.71 1478226.66\n```\n\n## /proc/cpuinfo\n\n物理 CPU、CPU コア、および論理 CPU の数を確認できます。\n保持している情報については実装によって違うようです。\nhttps://www.wdic.org/w/TECH//proc/cpuinfo\n\n``` console\ncat /proc/cpuinfo\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 60\nmodel name      : Intel(R) Pentium(R) CPU G3420 @ 3.20GHz\nstepping        : 3\nmicrocode       : 0x24\ncpu MHz         : 3192.607\ncache size      : 3072 KB\nphysical id     : 0\nsiblings        : 1\ncore id         : 0\ncpu cores       : 1\napicid          : 0\ninitial apicid  : 0\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 13\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon nopl xtopology tsc_reliable nonstop_tsc eagerfpu pni pclmulqdq ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer xsave rdrand hypervisor lahf_lm abm ibrs ibpb stibp fsgsbase tsc_adjust invpcid xsaveopt arat spec_ctrl intel_stibp arch_capabilities\nbogomips        : 6385.21\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 43 bits physical, 48 bits virtual\npower management:\n```\n\n## /proc/meminfo\n\nシステム上の現在のRAM使用率についての情報が記載されています。\n物理的なメモリ量だったりを見ることができます。\nただしカーネルが内部的に管理している枠組みでのメモリ情報でありユーザ視点での内容とは少し別となります。\nhttp://enakai00.hatenablog.com/entry/20110906/1315315488\n\n``` console\n$ cat /proc/meminfo\nMemTotal:        1882560 kB\nMemFree:         1212888 kB\nMemAvailable:    1483648 kB\nBuffers:               0 kB\nCached:           370828 kB\nSwapCached:          256 kB\nActive:           282168 kB\nInactive:         156996 kB\nActive(anon):       3604 kB\nInactive(anon):    73468 kB\nActive(file):     278564 kB\nInactive(file):    83528 kB\nUnevictable:           0 kB\nMlocked:               0 kB\nSwapTotal:       2097148 kB\nSwapFree:        2096372 kB\nDirty:                 0 kB\nWriteback:             0 kB\nAnonPages:         68100 kB\nMapped:            16388 kB\nShmem:              8736 kB\nSlab:             127540 kB\nSReclaimable:      79660 kB\nSUnreclaim:        47880 kB\nKernelStack:        2896 kB\nPageTables:         4084 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:     3038428 kB\nCommitted_AS:     287156 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:      147232 kB\nVmallocChunk:   34359341052 kB\nHardwareCorrupted:     0 kB\nAnonHugePages:      8192 kB\nCmaTotal:              0 kB\nCmaFree:               0 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\nDirectMap4k:       79744 kB\nDirectMap2M:     2017280 kB\nDirectMap1G:           0 kB\n```\n\n## /proc/sysrq-trigger\n\nsysrq-triggerとはSysRqキーからのコマンドキーを受け取るためのファイルです。\nkernel panicなどを意図的に起こす際に使用したりします。\n即座に再起動させたり、システムを強制停止させたりすることも可能です。\n\n``` console\n$ sudo sh -c 'echo 1 > /proc/sys/kernel/sysrq'\n$ sudo sh -c 'echo c > /proc/sysrq-trigger'\n```\n\n## あとがき\n\n有名どころのprocファイルシステム配下について書いてみました。\n他にも様々な情報が即座にとれる便利な仕組みがあるので是非見てみてください。\n", 'coediting': False, 'comments_count': 0, 'created_at': '2019-03-26T21:56:38+09:00', 'group': None, 'id': '13dae55b363619867005', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'Proc', 'versions': []}], 'title': '/procファイルシステムとは', 'updated_at': '2019-03-26T21:56:38+09:00', 'url': 'https://qiita.com/ryuichi1208/items/13dae55b363619867005', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/a3455bfcaa0e0727d94a543cfa38c8016a98c578/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37383264323430302d613235632d303961322d333866632d3538373337383234303832652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/a3455bfcaa0e0727d94a543cfa38c8016a98c578/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37383264323430302d613235632d303961322d333866632d3538373337383234303832652e706e67" alt="06.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/782d2400-a25c-09a2-38fc-58737824082e.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>プラグインがどうしても使えない環境でも比較的に使いやすくするためのvimrc<br>\n最低限中の最低限を書いただけです。</p>\n\n<h2>\n<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>\n\n<p>homeディレクトリ配下に.vimrcというファイルを作成してあとは好きなように設定を入れるだけです</p>\n\n<h2>\n<span id="vimrc" class="fragment"></span><a href="#vimrc"><i class="fa fa-link"></i></a>vimrc</h2>\n\n<div class="code-frame" data-lang="vim"><div class="highlight"><pre><span class="c">" ========== Character code =======</span>\n<span class="c">" 文字コードをUFT-8に設定</span>\n<span class="k">set</span> fenc<span class="p">=</span>utf<span class="m">-8</span>\n<span class="k">set</span> encoding<span class="p">=</span>utf<span class="m">-8</span>\n<span class="k">scriptencoding</span> utf<span class="m">-8</span>\n<span class="c">" 改行コードの自動判別</span>\n<span class="k">set</span> fileformat<span class="p">=</span>unix\n<span class="c">" □や○文字が崩れる問題を解決</span>\n<span class="k">set</span> ambiwidth<span class="p">=</span>double\n\n<span class="c">" ========== Base Config ==========</span>\n<span class="c">" バックアップファイルを作らない</span>\n<span class="k">set</span> nobackup\n\n<span class="c">" スワップファイルを作らない</span>\n<span class="k">set</span> <span class="k">noswapfile</span>\n\n<span class="c">" バッファが編集中でもその他のファイルを開けるように</span>\n<span class="k">set</span> hidden\n\n<span class="c">" ターミナル接続を高速化</span>\n<span class="k">set</span> ttyfast\n\n<span class="c">" 改行時自動インデント</span>\n<span class="k">set</span> smartindent\n\n<span class="c">" 行番号を表示</span>\n<span class="k">set</span> <span class="k">number</span>\n\n<span class="c">" 不可視文字を表示</span>\n<span class="c">"set list</span>\n\n<span class="c">" インクリメントサーチを有効にする</span>\n<span class="k">set</span> incsearch\n\n<span class="c">" ハイライトサーチを有効にする</span>\n<span class="k">set</span> hlsearch\n\n<span class="c">" 検索時大文字小文字を区別しない</span>\n<span class="k">set</span> ignorecase\n\n<span class="c">" 検索時に大文字を入力した場合ignorecaseが無効になる</span>\n<span class="k">set</span> smartcase\n\n<span class="c">" カーソルラインを表示する</span>\n<span class="k">set</span> cursorline\n\n<span class="c">" ファイル更新で自動で読み直す</span>\n<span class="c">"set autoread</span>\n\n<span class="c">" 補完ウィンドウの設定</span>\n<span class="k">set</span> completeopt<span class="p">=</span>menuone\n\n<span class="c">" ビープ音を可視化</span>\n<span class="c">"set visualbell</span>\n\n<span class="c">" 括弧入力時の対応する括弧を表示</span>\n<span class="k">set</span> showmatch\n\n<span class="c">" 対応括弧の表示秒数を3秒にする</span>\n<span class="c">"set matchtime=3</span>\n\n<span class="c">" ステータスラインを常に表示</span>\n<span class="k">set</span> laststatus<span class="p">=</span><span class="m">2</span>\n\n<span class="c">" 検索時に最後まで行ったら最初に戻る</span>\n<span class="k">set</span> wrapscan\n\n<span class="c">" タイトルを表示</span>\n<span class="k">set</span> title\n\n<span class="c">" カーソルの行数表示</span>\n<span class="k">set</span> cursorline\n\n<span class="c">" カーソルから相対的な行数を表示する</span>\n<span class="c">""set relativenumber</span>\n\n<span class="c">" マウス操作を有効にする</span>\n<span class="c">""set mouse=a</span>\n\n<span class="c">" 1 tab == 4 spaces</span>\n<span class="c">""set shiftwidth=4</span>\n<span class="c">""set tabstop=4</span>\n\n<span class="c">" タイムアウト時間設定</span>\n<span class="k">set</span> timeout timeoutlen<span class="p">=</span><span class="m">1000</span> ttimeoutlen<span class="p">=</span><span class="m">50</span>\n\n<span class="c">" wildmenuを有効にする</span>\n<span class="k">set</span> wildmenu\n<span class="k">set</span> wildmode<span class="p">=</span>full\n\n<span class="c">" 保存するコマンド履歴の数</span>\n<span class="k">set</span> <span class="k">history</span><span class="p">=</span><span class="m">500</span>\n\n<span class="c">" バックスペースキーの有効化</span>\n<span class="c">"set backspace=indent,eol,start</span>\n\n<span class="c">" 移動コマンドを使ったとき、行頭に移動しない</span>\n<span class="k">set</span> nostartofline\n\n<span class="c">" ========== Key Map ==============</span>\n\n<span class="c">" 入力モード中に素早くJJと入力した場合はESCとみなす</span>\ninoremap jj <span class="p">&lt;</span>Esc<span class="p">&gt;</span>\n\n<span class="c">" Escの2回押しでハイライト消去</span>\nnnoremap <span class="p">&lt;</span>Esc<span class="p">&gt;&lt;</span>Esc<span class="p">&gt;</span> <span class="p">:</span><span class="k">nohlsearch</span><span class="p">&lt;</span>CR<span class="p">&gt;&lt;</span>ESC<span class="p">&gt;</span>\n\n<span class="c">" 折り返しでも行単位で移動</span>\nnnoremap <span class="k">j</span> gj\nnnoremap <span class="k">k</span> gk\nvnoremap <span class="k">j</span> gj\nvnoremap <span class="k">k</span> gk\n\n<span class="c">"インサートモードでも移動</span>\ninoremap <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">d</span><span class="p">&gt;</span> <span class="p">&lt;</span>delete<span class="p">&gt;</span>\ninoremap <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">j</span><span class="p">&gt;</span> <span class="p">&lt;</span>down<span class="p">&gt;</span>\ninoremap <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">k</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">up</span><span class="p">&gt;</span>\ninoremap <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">h</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">left</span><span class="p">&gt;</span>\ninoremap <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">l</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">right</span><span class="p">&gt;</span>\n\n<span class="c">" Shift + 矢印でウィンドウサイズを変更</span>\nnnoremap <span class="p">&lt;</span>S<span class="p">-</span>Left<span class="p">&gt;</span>  <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;&lt;</span>CR<span class="p">&gt;</span>\nnnoremap <span class="p">&lt;</span>S<span class="p">-</span>Right<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span>CR<span class="p">&gt;</span>\nnnoremap <span class="p">&lt;</span>S<span class="p">-</span>Up<span class="p">&gt;</span>    <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;-&lt;</span>CR<span class="p">&gt;</span>\nnnoremap <span class="p">&lt;</span>S<span class="p">-</span>Down<span class="p">&gt;</span>  <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;+&lt;</span>CR<span class="p">&gt;</span>\n\n<span class="c">" NERDTree用バインド </span>\nnnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">e</span><span class="p">&gt;</span> <span class="p">:</span>NERDTreeToggle<span class="p">&lt;</span>CR<span class="p">&gt;</span>\n\n<span class="c">" w!! でスーパーユーザーとして保存</span>\ncmap <span class="k">w</span><span class="p">!!</span> <span class="k">w</span> <span class="p">!</span>sudo tee <span class="p">&gt;</span> <span class="sr">/dev/</span>null %\n\n<span class="c">" カーソルラインの位置を保存する</span>\n<span class="k">if</span> has<span class="p">(</span><span class="s2">"autocmd"</span><span class="p">)</span>\n    autocmd <span class="nb">BufReadPost</span> *\n<span class="se">    \\</span> <span class="k">if</span> line<span class="p">(</span><span class="s2">"\'\\""</span><span class="p">)</span> <span class="p">&gt;</span> <span class="m">0</span> &amp;&amp; line <span class="p">(</span><span class="s2">"\'\\""</span><span class="p">)</span> <span class="p">&lt;=</span> line<span class="p">(</span><span class="s2">"$"</span><span class="p">)</span> <span class="p">|</span>\n<span class="se">    \\</span>   exe <span class="s2">"normal! g\'\\""</span> <span class="p">|</span>\n<span class="se">    \\</span> <span class="k">endif</span>\n<span class="k">endif</span>\n\n<span class="c">" 挿入モードでクリップボードからペーストする時に自動でインデントさせないようにする</span>\n<span class="k">if</span> &amp;term <span class="p">=~</span> <span class="s2">"xterm"</span>\n    <span class="k">let</span> &amp;t_SI <span class="p">.=</span> <span class="s2">"\\e[?2004h"</span>\n    <span class="k">let</span> &amp;t_EI <span class="p">.=</span> <span class="s2">"\\e[?2004l"</span>\n    <span class="k">let</span> &amp;pastetoggle <span class="p">=</span> <span class="s2">"\\e[201~"</span>\n\n    <span class="k">function</span> XTermPasteBegin<span class="p">(</span><span class="k">ret</span><span class="p">)</span>\n        <span class="k">set</span> paste\n        <span class="k">return</span> <span class="nv">a:ret</span>\n    <span class="k">endfunction</span>\n\n    inoremap <span class="p">&lt;</span>special<span class="p">&gt;</span> <span class="p">&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>Esc<span class="p">&gt;[</span><span class="m">200</span><span class="p">~</span> XTermPasteBegin<span class="p">(</span><span class="s2">""</span><span class="p">)</span>\n<span class="k">endif</span>\n\n<span class="c">" マウスでカーソル移動とスクロール</span>\n<span class="c">"if has(\'mouse\')</span>\n<span class="c">"    set mouse=a</span>\n<span class="c">"    if has(\'mouse_sgr\')</span>\n<span class="c">"        set ttymouse=sgr</span>\n<span class="c">"    elseif v:version &gt; 703 || v:version is 703 &amp;&amp; has(\'patch632\')</span>\n<span class="c">"        set ttymouse=sgr</span>\n<span class="c">"    else</span>\n<span class="c">"        set ttymouse=xterm2</span>\n<span class="c">"    endif</span>\n<span class="c">"endif</span>\n\n</pre></div></div>\n\n<h2>\n<span id="vimrcの学習" class="fragment"></span><a href="#vimrc%E3%81%AE%E5%AD%A6%E7%BF%92"><i class="fa fa-link"></i></a>vimrcの学習</h2>\n\n<p>個人的にvimrcについて調べものするのはネットだが下記の読書会が為になることも多いのでお勧めです。<br>\n一番の勉強はやはり人のを読むに限ります。GitHubとかで公開されているdotfilesを読むのもいいですが<br>\n詳しい人が解説してくれたり、歴史的経緯などたくさんの学びがあるのでよいです。</p>\n\n<p><a href="https://vim-jp.org/reading-vimrc/" rel="nofollow noopener" target="_blank">vimrc読書会</a></p>\n\n<p>後はvimは公式ドキュメントやヘルプも充実しているのでそちらを読むのもお勧めします。</p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>個人的に使いやすい設定を列挙しただけの記事で一つでも参考になれば幸いです。<br>\n使い捨てマシンとかでプラグインとかインストール不可でササッとコピペする用のvimrcって意外と便利だったりします。<br>\n(そもそもvimすら入れれないことも多いのですが、、、)</p>\n', 'body': '![06.png](https://qiita-image-store.s3.amazonaws.com/0/258841/782d2400-a25c-09a2-38fc-58737824082e.png)\n\n## 背景\n\nプラグインがどうしても使えない環境でも比較的に使いやすくするためのvimrc\n最低限中の最低限を書いただけです。\n\n## 使い方\n\nhomeディレクトリ配下に.vimrcというファイルを作成してあとは好きなように設定を入れるだけです\n\n## vimrc\n\n``` vim\n" ========== Character code =======\n" 文字コードをUFT-8に設定\nset fenc=utf-8\nset encoding=utf-8\nscriptencoding utf-8\n" 改行コードの自動判別\nset fileformat=unix\n" □や○文字が崩れる問題を解決\nset ambiwidth=double\n\n" ========== Base Config ==========\n" バックアップファイルを作らない\nset nobackup\n\n" スワップファイルを作らない\nset noswapfile\n\n" バッファが編集中でもその他のファイルを開けるように\nset hidden\n\n" ターミナル接続を高速化\nset ttyfast\n\n" 改行時自動インデント\nset smartindent\n\n" 行番号を表示\nset number\n\n" 不可視文字を表示\n"set list\n\n" インクリメントサーチを有効にする\nset incsearch\n\n" ハイライトサーチを有効にする\nset hlsearch\n\n" 検索時大文字小文字を区別しない\nset ignorecase\n\n" 検索時に大文字を入力した場合ignorecaseが無効になる\nset smartcase\n\n" カーソルラインを表示する\nset cursorline\n\n" ファイル更新で自動で読み直す\n"set autoread\n\n" 補完ウィンドウの設定\nset completeopt=menuone\n\n" ビープ音を可視化\n"set visualbell\n\n" 括弧入力時の対応する括弧を表示\nset showmatch\n\n" 対応括弧の表示秒数を3秒にする\n"set matchtime=3\n\n" ステータスラインを常に表示\nset laststatus=2\n\n" 検索時に最後まで行ったら最初に戻る\nset wrapscan\n\n" タイトルを表示\nset title\n\n" カーソルの行数表示\nset cursorline\n\n" カーソルから相対的な行数を表示する\n""set relativenumber\n\n" マウス操作を有効にする\n""set mouse=a\n\n" 1 tab == 4 spaces\n""set shiftwidth=4\n""set tabstop=4\n\n" タイムアウト時間設定\nset timeout timeoutlen=1000 ttimeoutlen=50\n\n" wildmenuを有効にする\nset wildmenu\nset wildmode=full\n\n" 保存するコマンド履歴の数\nset history=500\n\n" バックスペースキーの有効化\n"set backspace=indent,eol,start\n\n" 移動コマンドを使ったとき、行頭に移動しない\nset nostartofline\n\n" ========== Key Map ==============\n\n" 入力モード中に素早くJJと入力した場合はESCとみなす\ninoremap jj <Esc>\n\n" Escの2回押しでハイライト消去\nnnoremap <Esc><Esc> :nohlsearch<CR><ESC>\n\n" 折り返しでも行単位で移動\nnnoremap j gj\nnnoremap k gk\nvnoremap j gj\nvnoremap k gk\n\n"インサートモードでも移動\ninoremap <c-d> <delete>\ninoremap <c-j> <down>\ninoremap <c-k> <up>\ninoremap <c-h> <left>\ninoremap <c-l> <right>\n\n" Shift + 矢印でウィンドウサイズを変更\nnnoremap <S-Left>  <C-w><<CR>\nnnoremap <S-Right> <C-w><CR>\nnnoremap <S-Up>    <C-w>-<CR>\nnnoremap <S-Down>  <C-w>+<CR>\n\n" NERDTree用バインド \nnnoremap <silent><C-e> :NERDTreeToggle<CR>\n\n" w!! でスーパーユーザーとして保存\ncmap w!! w !sudo tee > /dev/null %\n\n" カーソルラインの位置を保存する\nif has("autocmd")\n    autocmd BufReadPost *\n    \\ if line("\'\\"") > 0 && line ("\'\\"") <= line("$") |\n    \\   exe "normal! g\'\\"" |\n    \\ endif\nendif\n\n" 挿入モードでクリップボードからペーストする時に自動でインデントさせないようにする\nif &term =~ "xterm"\n    let &t_SI .= "\\e[?2004h"\n    let &t_EI .= "\\e[?2004l"\n    let &pastetoggle = "\\e[201~"\n\n    function XTermPasteBegin(ret)\n        set paste\n        return a:ret\n    endfunction\n\n    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")\nendif\n\n" マウスでカーソル移動とスクロール\n"if has(\'mouse\')\n"    set mouse=a\n"    if has(\'mouse_sgr\')\n"        set ttymouse=sgr\n"    elseif v:version > 703 || v:version is 703 && has(\'patch632\')\n"        set ttymouse=sgr\n"    else\n"        set ttymouse=xterm2\n"    endif\n"endif\n\n```\n\n## vimrcの学習\n\n個人的にvimrcについて調べものするのはネットだが下記の読書会が為になることも多いのでお勧めです。\n一番の勉強はやはり人のを読むに限ります。GitHubとかで公開されているdotfilesを読むのもいいですが\n詳しい人が解説してくれたり、歴史的経緯などたくさんの学びがあるのでよいです。\n\n[vimrc読書会](https://vim-jp.org/reading-vimrc/)\n\n後はvimは公式ドキュメントやヘルプも充実しているのでそちらを読むのもお勧めします。\n\n## まとめ\n\n個人的に使いやすい設定を列挙しただけの記事で一つでも参考になれば幸いです。\n使い捨てマシンとかでプラグインとかインストール不可でササッとコピペする用のvimrcって意外と便利だったりします。\n(そもそもvimすら入れれないことも多いのですが、、、)\n', 'coediting': False, 'comments_count': 1, 'created_at': '2019-03-20T23:38:22+09:00', 'group': None, 'id': '93fed5fca8bb7a86640e', 'likes_count': 135, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Vim', 'versions': []}], 'title': 'プラグインなしでvimを(比較的)気持ちよく使うvimrc', 'updated_at': '2019-03-22T19:35:43+09:00', 'url': 'https://qiita.com/ryuichi1208/items/93fed5fca8bb7a86640e', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>CanvaとSVGの違い</p>\n\n<h2>\n<span id="svg" class="fragment"></span><a href="#svg"><i class="fa fa-link"></i></a>SVG</h2>\n\n<ul>\n<li>ベクター形式で描画</li>\n<li>拡張子は「.svg」</li>\n<li>図形がDOM要素なのでJavaScriptとの相性がよい</li>\n<li>ベクター形式なので拡大、縮小で図形の劣化がない</li>\n<li>グラフィックスをXMLで表現する</li>\n<li>円を描く場合は白紙にコンパスで円を表現するといった描画</li>\n<li>高精細な円を表示できる</li>\n<li>SVGは単独で装飾や変形によるアニメーションが可能</li>\n</ul>\n\n<h2>\n<span id="canvas" class="fragment"></span><a href="#canvas"><i class="fa fa-link"></i></a>Canvas</h2>\n\n<ul>\n<li>HTML5の機能の一つ</li>\n<li>ラスター形式(ビットマップ形式)で描画</li>\n<li>要素で描画領域を確保してJavaScriptで描画する</li>\n<li>ビットマップ形式なのでピクセル単位での細かい描画が行える</li>\n</ul>\n', 'body': 'CanvaとSVGの違い\n\n## SVG\n\n* ベクター形式で描画\n* 拡張子は「.svg」\n* 図形がDOM要素なのでJavaScriptとの相性がよい\n* ベクター形式なので拡大、縮小で図形の劣化がない\n* グラフィックスをXMLで表現する\n* 円を描く場合は白紙にコンパスで円を表現するといった描画\n* 高精細な円を表示できる\n* SVGは単独で装飾や変形によるアニメーションが可能\n\n## Canvas\n\n* HTML5の機能の一つ\n* ラスター形式(ビットマップ形式)で描画\n* <canvas>要素で描画領域を確保してJavaScriptで描画する\n* ビットマップ形式なのでピクセル単位での細かい描画が行える\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-03-18T20:19:56+09:00', 'group': None, 'id': '95057c253844dc7d2454', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'HTML5', 'versions': []}, {'name': 'SVG', 'versions': []}, {'name': 'canvas', 'versions': []}], 'title': 'CanvasとSVGの違い', 'updated_at': '2019-03-19T08:47:45+09:00', 'url': 'https://qiita.com/ryuichi1208/items/95057c253844dc7d2454', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/248353f8a827a9ad6c9bef2255b3c79766ab7818/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64323565326564342d363639342d306262622d373533652d6237356162666661646335632e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/248353f8a827a9ad6c9bef2255b3c79766ab7818/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64323565326564342d363639342d306262622d373533652d6237356162666661646335632e6a706567" alt="20150307003237.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/d25e2ed4-6694-0bbb-753e-b75abffadc5c.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>Linuxカーネルのコンパイルを改めてやってみた時のログ<br>\n今回はビルドのみでインストールまでは行ってません。</p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-a</span>\nLinux Hades 4.15.0-46-generic <span class="c">#49-Ubuntu SMP Wed Feb 6 09:33:07 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span>\n\n<span class="nv">$ </span>gcc <span class="nt">--version</span>\ngcc <span class="o">(</span>GCC<span class="o">)</span> 4.8.5 20150623 <span class="o">(</span>Red Hat 4.8.5-36<span class="o">)</span>\nCopyright <span class="o">(</span>C<span class="o">)</span> 2015 Free Software Foundation, Inc.\nThis is free software<span class="p">;</span> see the <span class="nb">source </span><span class="k">for </span>copying conditions.  There is NO\nwarranty<span class="p">;</span> not even <span class="k">for </span>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</pre></div></div>\n\n<h2>\n<span id="カーネルソースを入手" class="fragment"></span><a href="#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%85%A5%E6%89%8B"><i class="fa fa-link"></i></a>カーネルソースを入手</h2>\n\n<p>下記サイトから対象となるカーネルソースをダウンロードし、解凍します。<br>\n<a href="https://www.kernel.org/" class="autolink" rel="nofollow noopener" target="_blank">https://www.kernel.org/</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">tar </span>xvf linux-5.1-rc1.tar.gz\n<span class="o">(</span>中略<span class="o">)</span>\nlinux-5.1-rc1/virt/lib/Kconfig\nlinux-5.1-rc1/virt/lib/Makefile\nlinux-5.1-rc1/virt/lib/irqbypass.c\n\n<span class="nv">$ </span><span class="nb">cd </span>linux-5.1-rc1/\n</pre></div></div>\n\n<h2>\n<span id="必要なモジュールをインストール" class="fragment"></span><a href="#%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>必要なモジュールをインストール</h2>\n\n<p>本環境で足りないものを下記でインストールしています。<br>\n現状の環境やカーネルバージョンで差分があるので適宜必要なものをインストールしてください。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>yum groupinstall <span class="s2">"Development Tools"</span>\n<span class="nv">$ </span>yum <span class="nb">install </span>kernel-devel\n<span class="nv">$ </span>yum <span class="nb">install </span>rpm-build redhat-rpm-config unifdef\n<span class="nv">$ </span>yum <span class="nb">install </span>ncurses ncurses-devel\n<span class="nv">$ </span>yum <span class="nb">install </span>openssl-devel\n</pre></div></div>\n\n<p>足りないと下記のようにmake時にエラーとなります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>make\n  HOSTCC  scripts/sign-file\nscripts/sign-file.c:25:30: fatal error: openssl/opensslv.h: No such file or directory\n <span class="c">#include &lt;openssl/opensslv.h&gt;</span>\n                              ^\ncompilation terminated.\nmake[2]: <span class="k">***</span> <span class="o">[</span>scripts/sign-file] Error 1\nmake[1]: <span class="k">***</span> <span class="o">[</span>scripts] Error 2\nmake: <span class="k">***</span> <span class="o">[</span>sub-make] Error 2\n</pre></div></div>\n\n<h2>\n<span id="ディレクトリ構成" class="fragment"></span><a href="#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90"><i class="fa fa-link"></i></a>ディレクトリ構成</h2>\n\n<p>ここでは簡単に各ディレクトリの構成について書きます。<br>\n詳細は別途ご参照ください。</p>\n\n<h5>\n<span id="arch" class="fragment"></span><a href="#arch"><i class="fa fa-link"></i></a>arch</h5>\n\n<p>arch サブディレクトリには、アーキテクチャ(architecture)固有の カーネルコードが含まれている。 さらに深いサブディレクトリがあり、たとえば、i386 や alpha と いったサポートするアーキテクチャごとに分かれている。</p>\n\n<h5>\n<span id="include" class="fragment"></span><a href="#include"><i class="fa fa-link"></i></a>include</h5>\n\n<p>include サブディレクトリには、カーネルコードをビルドするのに必要な インクルードファイル(include files)の大部分が含まれている。 さらに深いサブディレクトリもあり、サポートするアーキテクチャごとのファイルが含 まれている。include/asm サブディレクトリは、たとえば include/asm-i386 といったそのアーキテクチャに必要な実際の include ディレクトリへのソフトリンク(シンボリックリンク)となっている。 アーキテクチャを変更するには、カーネルの makefile を編集し、Linux カーネル 設定プログラムを再実行する必要がある。</p>\n\n<h5>\n<span id="init" class="fragment"></span><a href="#init"><i class="fa fa-link"></i></a>init</h5>\n\n<p>このディレクトリには、カーネルの初期化(initialization)コードが含まれているの で、カーネルの動作の仕組みをこれから見ようとする場合はよい出発点になる。</p>\n\n<h5>\n<span id="mm" class="fragment"></span><a href="#mm"><i class="fa fa-link"></i></a>mm</h5>\n\n<p>このディレクトリには、メモリ管理(memory management)コードのすべてが含まれてい る。アーキテクチャ固有のメモリ管理コードについては、arch/i386/mm/fault.c といった arch/*/mm ディレクトリ以下にある。</p>\n\n<h5>\n<span id="drivers" class="fragment"></span><a href="#drivers"><i class="fa fa-link"></i></a>drivers</h5>\n\n<p>システム上のデバイスドライバ(device drivers)は、すべてこのディレクトリに置かれ ている。 このディレクトリはさらに再分割され、block といったデバイスドライバ のクラスごとに分かれている。</p>\n\n<h5>\n<span id="ipc" class="fragment"></span><a href="#ipc"><i class="fa fa-link"></i></a>ipc</h5>\n\n<p>このディレクトリには、カーネルのプロセス間通信(inter-process communications)に 関するコードが含まれている。</p>\n\n<h5>\n<span id="modules" class="fragment"></span><a href="#modules"><i class="fa fa-link"></i></a>modules</h5>\n\n<p>このディレクトリは、ビルドされたモジュール(module)を保存するためだけに使用され ている。</p>\n\n<h5>\n<span id="fs" class="fragment"></span><a href="#fs"><i class="fa fa-link"></i></a>fs</h5>\n\n<p>ファイルシステム(file system)コードのすべてはここに置かれている。 このディレクトリはさらに再分割されていて、vfat や ext2 と いったサポートするファイルシステムごとに分かれている。</p>\n\n<h4>\n<span id="kernel" class="fragment"></span><a href="#kernel"><i class="fa fa-link"></i></a>kernel</h4>\n\n<p>主要なカーネル(kernel)コードが置かれている。ここでも、アーキテクチャ固有の カーネルコードは、arch/*/kernel にある。</p>\n\n<h5>\n<span id="net" class="fragment"></span><a href="#net"><i class="fa fa-link"></i></a>net</h5>\n\n<p>カーネルのネットワーク(network)関係のコードが置かれている。</p>\n\n<h5>\n<span id="lib" class="fragment"></span><a href="#lib"><i class="fa fa-link"></i></a>lib</h5>\n\n<p>このディレクトリには、カーネルのライブラリ(library)コードが含まれている。 アーキテクチャ固有のライブラリは、arch/*/lib で見つけることができる。</p>\n\n<h5>\n<span id="scripts" class="fragment"></span><a href="#scripts"><i class="fa fa-link"></i></a>scripts</h5>\n\n<p>このディレクトリには、カーネルを設定するときに使用されるスクリプト(script) (たとえば、awk や tk スクリプト)が含まれている。</p>\n\n<h2>\n<span id="menuconfig" class="fragment"></span><a href="#menuconfig"><i class="fa fa-link"></i></a>menuconfig</h2>\n\n<p>make configと異なりメニュー形式で表示され設定可能なモードです。<br>\n現在はmake configよりもこちらのほうが使われることが多いそうなので例によってmenuconfigを使います。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>make menuconfig\n</pre></div></div>\n\n<p><a href="https://camo.qiitausercontent.com/4905e0606af30a1ee7266e14dbb4cfc23d14138e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32663164323862392d333565362d656232342d616365662d6231656666386537323831652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/4905e0606af30a1ee7266e14dbb4cfc23d14138e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32663164323862392d333565362d656232342d616365662d6231656666386537323831652e706e67" alt="キャプチャ.PNG" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/2f1d28b9-35e6-eb24-acef-b1eff8e7281e.png"></a></p>\n\n<p>キーストローク</p>\n\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?</td>\n<td>Option description and tips/Help</td>\n</tr>\n<tr>\n<td>← → ↑ ↓ PgUp PgDn</td>\n<td>Navigate through the kernel features and menuconfig commands.</td>\n</tr>\n<tr>\n<td>Esc+Esc</td>\n<td>Exit menuconfig or cancel the command.</td>\n</tr>\n<tr>\n<td>Enter</td>\n<td>Activate a command, or expand a branch.</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Compile and include this feature inside of the kernel.</td>\n</tr>\n<tr>\n<td>m</td>\n<td>Compile this feature as a module, separate from the kernel.</td>\n</tr>\n<tr>\n<td>n</td>\n<td>Do not compile the feature.</td>\n</tr>\n<tr>\n<td>/</td>\n<td>Search configuration parameter.</td>\n</tr>\n</tbody>\n</table>\n\n<p>各パラメータについては下記が大変参考になります。詳しく知りたい方はご参照ください。<br>\n<a href="http://www.embedded.jp/article/linux_kernel_2-1.html" class="autolink" rel="nofollow noopener" target="_blank">http://www.embedded.jp/article/linux_kernel_2-1.html</a></p>\n\n<h2>\n<span id="ビルド" class="fragment"></span><a href="#%E3%83%93%E3%83%AB%E3%83%89"><i class="fa fa-link"></i></a>ビルド</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>make clena <span class="p">;</span> make\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>ビルド自体はそこまで難しくないことが分かりました。<br>\nじゃあ何が難しいのかはやはりmenuconfigで選べる設定を適切なものに変える判断何だと思います。<br>\n色々サイトを見て回りましたが正直難しいことだらけです。<br>\nここら辺を掘り下げて自分の言葉にして次は記事を書きたいと思います。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="http://hal0taso.hateblo.jp/entry/2017/06/08/%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%92%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8B%E3%82%89%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B" rel="nofollow noopener" target="_blank">カーネルをソースコードからビルドする</a><br>\n<a href="https://mongonta.com/f258-howto-build-linux-kernel/" rel="nofollow noopener" target="_blank">初心者向けKernelのビルド手順</a></p>\n', 'body': '![20150307003237.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/d25e2ed4-6694-0bbb-753e-b75abffadc5c.jpeg)\n\n## 背景\n\nLinuxカーネルのコンパイルを改めてやってみた時のログ\n今回はビルドのみでインストールまでは行ってません。\n\n## 環境\n\n``` bash\n$ uname -a\nLinux Hades 4.15.0-46-generic #49-Ubuntu SMP Wed Feb 6 09:33:07 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\n\n$ gcc --version\ngcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\n## カーネルソースを入手\n\n下記サイトから対象となるカーネルソースをダウンロードし、解凍します。\nhttps://www.kernel.org/\n\n``` bash\n$ tar xvf linux-5.1-rc1.tar.gz\n(中略)\nlinux-5.1-rc1/virt/lib/Kconfig\nlinux-5.1-rc1/virt/lib/Makefile\nlinux-5.1-rc1/virt/lib/irqbypass.c\n\n$ cd linux-5.1-rc1/\n```\n\n## 必要なモジュールをインストール\n\n本環境で足りないものを下記でインストールしています。\n現状の環境やカーネルバージョンで差分があるので適宜必要なものをインストールしてください。\n\n``` bash\n$ yum groupinstall "Development Tools"\n$ yum install kernel-devel\n$ yum install rpm-build redhat-rpm-config unifdef\n$ yum install ncurses ncurses-devel\n$ yum install openssl-devel\n```\n\n足りないと下記のようにmake時にエラーとなります。\n\n``` bash\n$ make\n  HOSTCC  scripts/sign-file\nscripts/sign-file.c:25:30: fatal error: openssl/opensslv.h: No such file or directory\n #include <openssl/opensslv.h>\n                              ^\ncompilation terminated.\nmake[2]: *** [scripts/sign-file] Error 1\nmake[1]: *** [scripts] Error 2\nmake: *** [sub-make] Error 2\n```\n\n## ディレクトリ構成\n\nここでは簡単に各ディレクトリの構成について書きます。\n詳細は別途ご参照ください。\n\n##### arch\narch サブディレクトリには、アーキテクチャ(architecture)固有の カーネルコードが含まれている。 さらに深いサブディレクトリがあり、たとえば、i386 や alpha と いったサポートするアーキテクチャごとに分かれている。\n\n##### include\ninclude サブディレクトリには、カーネルコードをビルドするのに必要な インクルードファイル(include files)の大部分が含まれている。 さらに深いサブディレクトリもあり、サポートするアーキテクチャごとのファイルが含 まれている。include/asm サブディレクトリは、たとえば include/asm-i386 といったそのアーキテクチャに必要な実際の include ディレクトリへのソフトリンク(シンボリックリンク)となっている。 アーキテクチャを変更するには、カーネルの makefile を編集し、Linux カーネル 設定プログラムを再実行する必要がある。\n\n##### init\nこのディレクトリには、カーネルの初期化(initialization)コードが含まれているの で、カーネルの動作の仕組みをこれから見ようとする場合はよい出発点になる。\n\n##### mm\nこのディレクトリには、メモリ管理(memory management)コードのすべてが含まれてい る。アーキテクチャ固有のメモリ管理コードについては、arch/i386/mm/fault.c といった arch/*/mm ディレクトリ以下にある。\n\n##### drivers\nシステム上のデバイスドライバ(device drivers)は、すべてこのディレクトリに置かれ ている。 このディレクトリはさらに再分割され、block といったデバイスドライバ のクラスごとに分かれている。\n\n##### ipc\nこのディレクトリには、カーネルのプロセス間通信(inter-process communications)に 関するコードが含まれている。\n\n##### modules\nこのディレクトリは、ビルドされたモジュール(module)を保存するためだけに使用され ている。\n\n##### fs\nファイルシステム(file system)コードのすべてはここに置かれている。 このディレクトリはさらに再分割されていて、vfat や ext2 と いったサポートするファイルシステムごとに分かれている。\n\n#### kernel\n主要なカーネル(kernel)コードが置かれている。ここでも、アーキテクチャ固有の カーネルコードは、arch/*/kernel にある。\n\n##### net\nカーネルのネットワーク(network)関係のコードが置かれている。\n\n##### lib\nこのディレクトリには、カーネルのライブラリ(library)コードが含まれている。 アーキテクチャ固有のライブラリは、arch/*/lib で見つけることができる。\n\n##### scripts\nこのディレクトリには、カーネルを設定するときに使用されるスクリプト(script) (たとえば、awk や tk スクリプト)が含まれている。\n\n## menuconfig\n\nmake configと異なりメニュー形式で表示され設定可能なモードです。\n現在はmake configよりもこちらのほうが使われることが多いそうなので例によってmenuconfigを使います。\n\n``` bash\n$ make menuconfig\n```\n\n![キャプチャ.PNG](https://qiita-image-store.s3.amazonaws.com/0/258841/2f1d28b9-35e6-eb24-acef-b1eff8e7281e.png)\n\nキーストローク\n\n|Key|Description|\n---|-----------\n?  |Option description and tips/Help\n|← → ↑ ↓ PgUp PgDn|Navigate through the kernel features and menuconfig commands.\n|Esc+Esc|Exit menuconfig or cancel the command.\n|Enter|Activate a command, or expand a branch.\n|y|Compile and include this feature inside of the kernel.\n|m|Compile this feature as a module, separate from the kernel.\n|n|Do not compile the feature.\n|/|Search configuration parameter.\n\n各パラメータについては下記が大変参考になります。詳しく知りたい方はご参照ください。\nhttp://www.embedded.jp/article/linux_kernel_2-1.html\n\n## ビルド\n\n``` bash\n$ make clena ; make\n```\n\n## まとめ\n\nビルド自体はそこまで難しくないことが分かりました。\nじゃあ何が難しいのかはやはりmenuconfigで選べる設定を適切なものに変える判断何だと思います。\n色々サイトを見て回りましたが正直難しいことだらけです。\nここら辺を掘り下げて自分の言葉にして次は記事を書きたいと思います。\n\n## 参考リンク\n\n[カーネルをソースコードからビルドする](http://hal0taso.hateblo.jp/entry/2017/06/08/%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%92%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8B%E3%82%89%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B)\n[初心者向けKernelのビルド手順](https://mongonta.com/f258-howto-build-linux-kernel/)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-03-16T23:31:02+09:00', 'group': None, 'id': '743fac28b29bf101832b', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'カーネル', 'versions': []}], 'title': 'Linux 5.1-rc1でカーネルコンパイル入門', 'updated_at': '2019-03-20T20:42:34+09:00', 'url': 'https://qiita.com/ryuichi1208/items/743fac28b29bf101832b', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/3ef17fdebc4573a24b758e3c18e5bbf6d7974b19/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34393736393163372d643734312d353636622d303437322d3162383035613833646430642e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/3ef17fdebc4573a24b758e3c18e5bbf6d7974b19/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34393736393163372d643734312d353636622d303437322d3162383035613833646430642e706e67" alt="computer_hub_loop_setsuzoku.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/497691c7-d741-566b-0472-1b805a83dd0d.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>ネットワーク関連の設定方法nmcli編<br>\n仮想マシン構築したりする際にぱっと出てこないのでチートシート</p>\n\n<h4>\n<span id="man" class="fragment"></span><a href="#man"><i class="fa fa-link"></i></a>man</h4>\n\n<p>何事もmanを読むとこから。<br>\nusageだけ参照。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>NAME\n       nmcli - command-line tool <span class="k">for </span>controlling NetworkManager\n\nSYNOPSIS\n       nmcli <span class="o">[</span>OPTIONS...] <span class="o">{</span><span class="nb">help</span> | general | networking | radio | connection | device | agent |\n             monitor<span class="o">}</span> <span class="o">[</span>COMMAND] <span class="o">[</span>ARGUMENTS...]\n</pre></div></div>\n\n<h4>\n<span id="nic繋いだらやること" class="fragment"></span><a href="#nic%E7%B9%8B%E3%81%84%E3%81%A0%E3%82%89%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8"><i class="fa fa-link"></i></a>NIC繋いだらやること</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>デバイスを確認\n<span class="nv">$ </span>nmcli device\n\nインターフェイスを有効化\n<span class="nv">$ </span>nmcli connection modify eth0 connection.autoconnect <span class="nb">yes</span>\n</pre></div></div>\n\n<h4>\n<span id="ipアドレス変更" class="fragment"></span><a href="#ip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>IPアドレス変更</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli connection modify ens1 ipv4.method manual ipv4.addresses 192.168.1.100/24 \n</pre></div></div>\n\n<p>再起動後も含めた恒久的な変更は「connection.autoconnect yes」を付与するだけです。<br>\nnmtuiでいう「autoconnect」がこれに当たります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli connection modify ens1 ipv4.method manual ipv4.addresses 192.168.1.100/24 connection.autoconnect <span class="nb">yes</span>\n</pre></div></div>\n\n<p>デフォルトゲートウェイやDNSも変更できる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>デフォルトゲートウェイを設定\n<span class="nv">$ </span>nmcli connection modify eth0 ipv4.gateway 172.16.0.1\n\nDNS設定\n<span class="nv">$ </span>nmcli connection modify eth0 ipv4.dns 172.16.0.1\n</pre></div></div>\n\n<h4>\n<span id="ホスト名変更" class="fragment"></span><a href="#%E3%83%9B%E3%82%B9%E3%83%88%E5%90%8D%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>ホスト名変更</h4>\n\n<p>hostnamectlとかでもいいですがnmcliでも変更できます。便利。<br>\n「systemd-hostnamed」</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli general <span class="nb">hostname </span>srv01\n<span class="nv">$ </span>systemctl restart systemd-hostnamed\n</pre></div></div>\n\n<h4>\n<span id="nic名変更" class="fragment"></span><a href="#nic%E5%90%8D%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>NIC名変更</h4>\n\n<p>NICの名前の変更も出来ます。<br>\nデフォルトで6系から命名規則が変わりましたが</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ nmcli c m ens0 connection.interface-name enp0s8 connection.id ens\n</pre></div></div>\n\n<h4>\n<span id="bondig" class="fragment"></span><a href="#bondig"><i class="fa fa-link"></i></a>Bondig</h4>\n\n<p>bondingデバイスを追加</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli connection add <span class="nb">type </span>bond autoconnect no con-name bond01 ifname bond01 mode active-backup\n</pre></div></div>\n\n<p>slaveを割り当てる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli connection add <span class="nb">type </span>bond-slave autoconnect no ifname enp8s0f1 master bond01\n</pre></div></div>\n\n<p>bondingデバイスへIPアドレスを割り当てる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli connection modify &lt;bond con-name&gt; ipv4.method manual ipv4.address &lt;ip address/suffix&gt; ipv4.gateway &lt;gateway address&gt; ipv6.method ignore\n\n<span class="nv">$ </span>nmcli  connection modify &lt;bond con-name&gt; ipv4.dns &lt;dns address&gt;\n</pre></div></div>\n\n<p>自動接続設定の無効化(元のNICの設定を変更)</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli connection modify &lt;slave con-name①&gt; connection.autoconnect no\n</pre></div></div>\n\n<p>自動接続設定</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>nmcli connection modify bond-slave-&lt;slave con-name①&gt; connection.autoconnect <span class="nb">yes</span>\n<span class="nv">$ </span>nmcli connection modify bond-slave-&lt;slave con-name②&gt; connection.autoconnect <span class="nb">yes</span>\n<span class="nv">$ </span>nmcli connection modify &lt;bond con-name&gt; connection.autoconnect <span class="nb">yes</span>\n<span class="nv">$ </span>nmcli connection modify &lt;bond con-name&gt; connection.autoconnect-slaves 1\n</pre></div></div>\n\n<p>Bondigモデルの説明</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>・balance-rr\n全スレーブを順繰り(ラウンドロビン)に使ってパケットを送信。\n送信のみ負荷分散。\n\n・active-backup\n1つのスレーブのみを active interfaceとしパケットを送信。\nactive interfaceに障害が発生した場合、他の backup slave を active interfaceに切り替え、冗長性を確保。\n\n・balance-xor\n送信元/先 MACアドレスを元に送信スレーブを決定しパケットを送信。\n送信のみ負荷分散。\n\n・802.3ad\nIEEE 802.3ad(LACP)に準拠したリンクアグリゲーション。\n\n・balance-tlb\nスレーブの負荷に応じて送信スレーブを決定しパケットを送信。\n送信のみ負荷分散\n\n・balance-alb\nbalance-tlbの機能に加え、受信も負荷分散。\n\n・balance-alb\nbalance-tlbの機能に加え、受信も負荷分散。\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>本業じゃないので雑な感じになってます。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://blog.lorentzca.me/configure-network-bonding-in-centos7-dont-forget-subnetmask/" class="autolink" rel="nofollow noopener" target="_blank">https://blog.lorentzca.me/configure-network-bonding-in-centos7-dont-forget-subnetmask/</a><br>\n<a href="https://qiita.com/yteraoka/items/e661c2a8c6e7617e64f9" class="autolink" id="reference-efad3521d11c44700d89">https://qiita.com/yteraoka/items/e661c2a8c6e7617e64f9</a></p>\n', 'body': '![computer_hub_loop_setsuzoku.png](https://qiita-image-store.s3.amazonaws.com/0/258841/497691c7-d741-566b-0472-1b805a83dd0d.png)\n\n## 背景\n\nネットワーク関連の設定方法nmcli編\n仮想マシン構築したりする際にぱっと出てこないのでチートシート\n\n#### man\n\n何事もmanを読むとこから。\nusageだけ参照。\n\n``` bash \nNAME\n       nmcli - command-line tool for controlling NetworkManager\n\nSYNOPSIS\n       nmcli [OPTIONS...] {help | general | networking | radio | connection | device | agent |\n             monitor} [COMMAND] [ARGUMENTS...]\n```\n\n#### NIC繋いだらやること\n\n``` bash\nデバイスを確認\n$ nmcli device\n\nインターフェイスを有効化\n$ nmcli connection modify eth0 connection.autoconnect yes\n```\n\n#### IPアドレス変更\n\n``` bash\n$ nmcli connection modify ens1 ipv4.method manual ipv4.addresses 192.168.1.100/24 \n```\n\n再起動後も含めた恒久的な変更は「connection.autoconnect yes」を付与するだけです。\nnmtuiでいう「autoconnect」がこれに当たります。\n\n``` bash\n$ nmcli connection modify ens1 ipv4.method manual ipv4.addresses 192.168.1.100/24 connection.autoconnect yes\n```\n\nデフォルトゲートウェイやDNSも変更できる\n\n``` bash\nデフォルトゲートウェイを設定\n$ nmcli connection modify eth0 ipv4.gateway 172.16.0.1\n\nDNS設定\n$ nmcli connection modify eth0 ipv4.dns 172.16.0.1\n```\n\n#### ホスト名変更\n\nhostnamectlとかでもいいですがnmcliでも変更できます。便利。\n「systemd-hostnamed」\n\n``` bash\n$ nmcli general hostname srv01\n$ systemctl restart systemd-hostnamed\n```\n\n#### NIC名変更\n\nNICの名前の変更も出来ます。\nデフォルトで6系から命名規則が変わりましたが\n\n```\n$ nmcli c m ens0 connection.interface-name enp0s8 connection.id ens\n```\n\n#### Bondig\n\nbondingデバイスを追加\n\n``` bash\n$ nmcli connection add type bond autoconnect no con-name bond01 ifname bond01 mode active-backup\n```\n\nslaveを割り当てる\n\n``` bash\n$ nmcli connection add type bond-slave autoconnect no ifname enp8s0f1 master bond01\n```\n\nbondingデバイスへIPアドレスを割り当てる\n\n``` bash\n$ nmcli connection modify <bond con-name> ipv4.method manual ipv4.address <ip address/suffix> ipv4.gateway <gateway address> ipv6.method ignore\n\n$ nmcli  connection modify <bond con-name> ipv4.dns <dns address>\n```\n\n自動接続設定の無効化(元のNICの設定を変更)\n\n``` bash\n$ nmcli connection modify <slave con-name①> connection.autoconnect no\n```\n\n自動接続設定\n\n``` bash\n$ nmcli connection modify bond-slave-<slave con-name①> connection.autoconnect yes\n$ nmcli connection modify bond-slave-<slave con-name②> connection.autoconnect yes\n$ nmcli connection modify <bond con-name> connection.autoconnect yes\n$ nmcli connection modify <bond con-name> connection.autoconnect-slaves 1\n```\n\nBondigモデルの説明\n\n```\n・balance-rr\n全スレーブを順繰り(ラウンドロビン)に使ってパケットを送信。\n送信のみ負荷分散。\n\n・active-backup\n1つのスレーブのみを active interfaceとしパケットを送信。\nactive interfaceに障害が発生した場合、他の backup slave を active interfaceに切り替え、冗長性を確保。\n\n・balance-xor\n送信元/先 MACアドレスを元に送信スレーブを決定しパケットを送信。\n送信のみ負荷分散。\n\n・802.3ad\nIEEE 802.3ad(LACP)に準拠したリンクアグリゲーション。\n\n・balance-tlb\nスレーブの負荷に応じて送信スレーブを決定しパケットを送信。\n送信のみ負荷分散\n\n・balance-alb\nbalance-tlbの機能に加え、受信も負荷分散。\n\n・balance-alb\nbalance-tlbの機能に加え、受信も負荷分散。\n```\n\n## まとめ\n\n本業じゃないので雑な感じになってます。\n\n## 参考リンク\n\nhttps://blog.lorentzca.me/configure-network-bonding-in-centos7-dont-forget-subnetmask/\nhttps://qiita.com/yteraoka/items/e661c2a8c6e7617e64f9\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-02-26T21:53:59+09:00', 'group': None, 'id': 'c9869b2bca3dcdbfafce', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'ネットワーク', 'versions': []}, {'name': 'nmcli', 'versions': []}], 'title': 'nmcliでネットワークの初期設定の実施', 'updated_at': '2019-02-26T21:53:59+09:00', 'url': 'https://qiita.com/ryuichi1208/items/c9869b2bca3dcdbfafce', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/871c10254dfad2dfe6c259d91c5295192d90e954/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38363064643933362d303334632d616135382d336338372d6464383937323438313338652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/871c10254dfad2dfe6c259d91c5295192d90e954/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38363064643933362d303334632d616135382d336338372d6464383937323438313338652e706e67" alt="RHEL.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/860dd936-034c-aa58-3c87-dd897248138e.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>Red Hatは2018年の11月15日にRHELの次世代バージョンRHEL8のベータバージョンを公開した。<br>\nダウンロードはしたもののインストールして試すまでには至らなかったが時間があったのでちょっと調べて使ってみました。</p>\n\n<p>製品リリースは2019年中とのこと。<br>\nコンセプトは「Application Streams」らしい。</p>\n\n<p>Fedora28がベースとなっていてカーネルも従来RHEL7の3系から4.18となっている。</p>\n\n<h2>\n<span id="リリース履歴" class="fragment"></span><a href="#%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E5%B1%A5%E6%AD%B4"><i class="fa fa-link"></i></a>リリース履歴</h2>\n\n<table>\n<thead>\n<tr>\n<th>リリース</th>\n<th>製品リリース日</th>\n<th>Red Hat がリリースするエラータ日</th>\n<th>カーネルのバージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RHEL 7.6</td>\n<td>2018-10-30</td>\n<td>2018-10-30 RHBA-2018:3014</td>\n<td>3.10.0-957</td>\n</tr>\n<tr>\n<td>RHEL 7.5</td>\n<td>2018-04-10</td>\n<td>2018-04-10 RHEA-2018:0700</td>\n<td>3.10.0-862</td>\n</tr>\n<tr>\n<td>RHEL 7.4</td>\n<td>2017-07-31</td>\n<td>2017-07-31 RHBA-2017:1850</td>\n<td>3.10.0-693</td>\n</tr>\n<tr>\n<td>RHEL 7.3</td>\n<td>2016-11-03</td>\n<td>2016-11-03 RHEA-2016-2544</td>\n<td>3.10.0-514</td>\n</tr>\n<tr>\n<td>RHEL 7.2</td>\n<td>2015-11-19</td>\n<td>2015-11-19 RHEA-2015:2461</td>\n<td>3.10.0-327</td>\n</tr>\n<tr>\n<td>RHEL 7.1</td>\n<td>2015-03-05</td>\n<td>2015-03-05 RHEA-2015:0524</td>\n<td>3.10.0-229</td>\n</tr>\n</tbody>\n</table>\n\n<p>自分の環境を確認するには以下のコマンドで見れます</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># リリース番号確認</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/redhat-release\n\n<span class="c"># カーネルバージョン確認</span>\n<span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-a</span>\n</pre></div></div>\n\n<h2>\n<span id="入手" class="fragment"></span><a href="#%E5%85%A5%E6%89%8B"><i class="fa fa-link"></i></a>入手</h2>\n\n<p>下記サイトからisoが入手できる。<br>\nダウンロードにはRed Hatユーザーアカウントが必要でない場合は新規作成で使えます。</p>\n\n<p><a href="https://developers.redhat.com/rhel8/getrhel8/" class="autolink" rel="nofollow noopener" target="_blank">https://developers.redhat.com/rhel8/getrhel8/</a></p>\n\n<h2>\n<span id="用意するもの" class="fragment"></span><a href="#%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>用意するもの</h2>\n\n<ul>\n<li>VMware Workstation 15 Player</li>\n<li>RHEL8 betaのiso</li>\n</ul>\n\n<h2>\n<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h2>\n\n<p>公式で大変わかりやすく説明されていました。<br>\nこちらは省略します。</p>\n\n<p>システム要件：</p>\n\n<ul>\n<li>A 64-bit x86 or ARM machine</li>\n<li>4 GB of RAM</li>\n<li>At least 20 GB of available disk space</li>\n</ul>\n\n<p>参考：<a href="https://developers.redhat.com/rhel8/install-rhel8/" class="autolink" rel="nofollow noopener" target="_blank">https://developers.redhat.com/rhel8/install-rhel8/</a></p>\n\n<p>この画面はほとんど変わりなし<br>\n分かりやすくて直感的に選べていい。</p>\n\n<p><a href="https://camo.qiitausercontent.com/7ba24c49a21f5bc16e787f292f57c011c31d5acb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f39613166326637382d376365342d306462312d366264302d6437393566616337356235332e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/7ba24c49a21f5bc16e787f292f57c011c31d5acb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f39613166326637382d376365342d306462312d366264302d6437393566616337356235332e6a706567" alt="Step-by-Step-Guide-To-Install-RHEL-8-Select-Language.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/9a1f2f78-7ce4-0db1-6bd0-d795fac75b53.jpeg"></a></p>\n\n<p>ログイン画面</p>\n\n<p><a href="https://camo.qiitausercontent.com/72cd6194fbba1cf1f5554ae46bb3987e650866d1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33383734626130652d356337392d343835642d386536312d3863333536306139373462622e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/72cd6194fbba1cf1f5554ae46bb3987e650866d1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33383734626130652d356337392d343835642d386536312d3863333536306139373462622e6a706567" alt="Step-by-Step-Guide-To-Install-RHEL-8-Login-Screen.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/3874ba0e-5c79-485d-8e61-8c3560a974bb.jpeg"></a></p>\n\n<h2>\n<span id="特徴" class="fragment"></span><a href="#%E7%89%B9%E5%BE%B4"><i class="fa fa-link"></i></a>特徴</h2>\n\n<h4>\n<span id="コンテナ管理ツール" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>コンテナ管理ツール</h4>\n\n<p>追記予定</p>\n\n<h4>\n<span id="chronyのみサポート" class="fragment"></span><a href="#chrony%E3%81%AE%E3%81%BF%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88"><i class="fa fa-link"></i></a>Chronyのみサポート</h4>\n\n<p>RHEL7でChronyが標準となったがntp関連のコマンドも使えたが8からはデフォルトでは使えない<br>\nntpd と chronyd の大きな違いの 1 つは、コンピューターのクロックを管理するために使われるアルゴリズム。</p>\n\n<h4>\n<span id="pythonコマンドがない" class="fragment"></span><a href="#python%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%8C%E3%81%AA%E3%81%84"><i class="fa fa-link"></i></a>pythonコマンドがない</h4>\n\n<p>RHEL8のデフォルトでは、pythonコマンドが無い。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>python\n<span class="nt">-bash</span>: python: <span class="nb">command </span>not found\n</pre></div></div>\n\n<p>詳しくは下記をご参照ください<br>\n<a href="https://rheb.hatenablog.com/entry/rhel8-python" class="autolink" rel="nofollow noopener" target="_blank">https://rheb.hatenablog.com/entry/rhel8-python</a></p>\n\n<h4>\n<span id="iptablesからnftablesへの置き換え" class="fragment"></span><a href="#iptables%E3%81%8B%E3%82%89nftables%E3%81%B8%E3%81%AE%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88"><i class="fa fa-link"></i></a>iptablesからnftablesへの置き換え</h4>\n\n<p>RHEL８からはパケットフィルタリングにnftablesを採用している<br>\niptablesの実態がnftablesへのシンボリックとなりiptablesはそのまま使えるようです。</p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>とりあえずbeta版を使ってみました。<br>\ncentOS8もリリース予定はあるとのことなのでリリースされたらこっちを試そうと思います。</p>\n\n<p>メインとしていじったコンテナ管理ツールについては別途追記します。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/html-single/8.0_beta_release_notes/index" rel="nofollow noopener" target="_blank">リリースノート</a><br>\n<a href="https://rheb.hatenablog.com/entry/rhel8-python" rel="nofollow noopener" target="_blank">Red Hat Enterprise Linux 8 のPython事情</a><br>\n<a href="https://qiita.com/go50/items/9d6f00851ca4e7f7a939" id="reference-09482137e38885989a4d">Python in RedHat Enterprise Linux 8</a><br>\n<a href="https://suzume8-vc.net/?p=1409" rel="nofollow noopener" target="_blank">CentOS8リリースに向けての準備(Road to 2024.06)</a></p>\n', 'body': '![RHEL.png](https://qiita-image-store.s3.amazonaws.com/0/258841/860dd936-034c-aa58-3c87-dd897248138e.png)\n\n## 背景\n\nRed Hatは2018年の11月15日にRHELの次世代バージョンRHEL8のベータバージョンを公開した。\nダウンロードはしたもののインストールして試すまでには至らなかったが時間があったのでちょっと調べて使ってみました。\n\n製品リリースは2019年中とのこと。\nコンセプトは「Application Streams」らしい。\n\nFedora28がベースとなっていてカーネルも従来RHEL7の3系から4.18となっている。\n\n## リリース履歴\n\nリリース|製品リリース日|Red Hat がリリースするエラータ日|カーネルのバージョン\n-------|-------------|------------------------------|------------------\nRHEL 7.6|2018-10-30|2018-10-30 RHBA-2018:3014|3.10.0-957\nRHEL 7.5|2018-04-10|2018-04-10 RHEA-2018:0700|3.10.0-862\nRHEL 7.4|2017-07-31|2017-07-31 RHBA-2017:1850|3.10.0-693\nRHEL 7.3|2016-11-03|2016-11-03 RHEA-2016-2544|3.10.0-514\nRHEL 7.2|2015-11-19|2015-11-19 RHEA-2015:2461|3.10.0-327\nRHEL 7.1|2015-03-05|2015-03-05 RHEA-2015:0524|3.10.0-229\n\n自分の環境を確認するには以下のコマンドで見れます\n\n``` bash\n# リリース番号確認\n$ cat /etc/redhat-release\n\n# カーネルバージョン確認\n$ uname -a\n```\n\n## 入手\n\n下記サイトからisoが入手できる。\nダウンロードにはRed Hatユーザーアカウントが必要でない場合は新規作成で使えます。\n\nhttps://developers.redhat.com/rhel8/getrhel8/\n\n## 用意するもの\n\n* VMware Workstation 15 Player\n* RHEL8 betaのiso\n\n## インストール\n\n公式で大変わかりやすく説明されていました。\nこちらは省略します。\n\nシステム要件：\n\n* A 64-bit x86 or ARM machine\n* 4 GB of RAM\n* At least 20 GB of available disk space\n\n参考：https://developers.redhat.com/rhel8/install-rhel8/\n\nこの画面はほとんど変わりなし\n分かりやすくて直感的に選べていい。\n\n![Step-by-Step-Guide-To-Install-RHEL-8-Select-Language.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/9a1f2f78-7ce4-0db1-6bd0-d795fac75b53.jpeg)\n\nログイン画面\n\n![Step-by-Step-Guide-To-Install-RHEL-8-Login-Screen.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/3874ba0e-5c79-485d-8e61-8c3560a974bb.jpeg)\n\n## 特徴\n\n#### コンテナ管理ツール\n\n追記予定\n\n#### Chronyのみサポート\n\nRHEL7でChronyが標準となったがntp関連のコマンドも使えたが8からはデフォルトでは使えない\nntpd と chronyd の大きな違いの 1 つは、コンピューターのクロックを管理するために使われるアルゴリズム。\n\n#### pythonコマンドがない\n\nRHEL8のデフォルトでは、pythonコマンドが無い。\n\n``` bash\n$ python\n-bash: python: command not found\n```\n\n詳しくは下記をご参照ください\nhttps://rheb.hatenablog.com/entry/rhel8-python\n\n#### iptablesからnftablesへの置き換え\n\nRHEL８からはパケットフィルタリングにnftablesを採用している\niptablesの実態がnftablesへのシンボリックとなりiptablesはそのまま使えるようです。\n\n## まとめ\n\nとりあえずbeta版を使ってみました。\ncentOS8もリリース予定はあるとのことなのでリリースされたらこっちを試そうと思います。\n\nメインとしていじったコンテナ管理ツールについては別途追記します。\n\n## 参考リンク\n\n[リリースノート](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/html-single/8.0_beta_release_notes/index)\n[Red Hat Enterprise Linux 8 のPython事情](https://rheb.hatenablog.com/entry/rhel8-python)\n[Python in RedHat Enterprise Linux 8](https://qiita.com/go50/items/9d6f00851ca4e7f7a939)\n[CentOS8リリースに向けての準備(Road to 2024.06)](https://suzume8-vc.net/?p=1409)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-02-21T21:50:26+09:00', 'group': None, 'id': '13be7070b8812e7f372a', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}], 'title': 'RHEL8 betaを使ってみる(podmanも使ってみる)', 'updated_at': '2019-02-22T16:35:27+09:00', 'url': 'https://qiita.com/ryuichi1208/items/13be7070b8812e7f372a', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/c77cfec7cde0999a9adfd20d2c02c9394837a25c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63363634623532312d363337342d333961382d373136362d3333626139303462383966382e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/c77cfec7cde0999a9adfd20d2c02c9394837a25c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63363634623532312d363337342d333961382d373136362d3333626139303462383966382e6a706567" alt="20150307003237.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/c664b521-6374-39a8-7166-33ba904b89f8.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p><a href="https://qiita.com/hogemax/items/9ef7850ad74de4aa4390" id="reference-b669f942c8f20589b4d3">Linuxのページキャッシュ攻撃対策の影響は大きく、長期化する見通し【翻訳】</a></p>\n\n<p>この記事を読んでページキャッシュについて色々調べてみようと思って書いてみました。<br>\nOSのメモリ管理機構に関連した内容となっています。</p>\n\n<h2>\n<span id="キャッシュとは" class="fragment"></span><a href="#%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>キャッシュとは</h2>\n\n<p>カーネルは、ディスク上のデータへのアクセスを高速に行うため、 read/writeの際にメモリ上にデータをキャッシュします。 <br>\nキャッシュするメモリ上の領域を「ディスクキャッシュ」と 呼びます。 </p>\n\n<p>ディスクキャッシュには種類が2種類があります。それが「バッファキャッシュ」と「ページキャッシュ」です。<br>\nそれぞれの概要は下記へ記します。<br>\nちなみに、空きメモリがある限り、基本的にキャッシュはどんどん増加します。</p>\n\n<p>今回は取り挙げませんがキャッシュと聞くとCPUでよく見る単語なのでそちらをイメージすることが多いと思います。<br>\nそちらに関しては他記事をご参照ください。<br>\nキャッシュヒットやキャッシュミスとかについての測定なんかについては下記がとても参考になりました。<br>\n<a href="http://int.main.jp/txt/perf.html" class="autolink" rel="nofollow noopener" target="_blank">http://int.main.jp/txt/perf.html</a></p>\n\n<h2>\n<span id="キャッシュの種類" class="fragment"></span><a href="#%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E7%A8%AE%E9%A1%9E"><i class="fa fa-link"></i></a>キャッシュの種類</h2>\n\n<h5>\n<span id="ページキャッシュ" class="fragment"></span><a href="#%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5"><i class="fa fa-link"></i></a>ページキャッシュ</h5>\n\n<p>ページというのは Linux の仮想メモリの最小単位。<br>\nページキャッシュは、ディスク上のデータをページ単位で一時的に 保存するために使用されるメモリでファイルの読み書きの高速化に 使用されます。</p>\n\n<h5>\n<span id="バッファキャッシュ" class="fragment"></span><a href="#%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5"><i class="fa fa-link"></i></a>バッファキャッシュ</h5>\n\n<p>バッファキャッシュは、プロセスがディスク上のデータに アクセスする際、アクセスすべきデータのブロックを高速に見つけるために使用されるメモリ </p>\n\n<h5>\n<span id="slabキャッシュ" class="fragment"></span><a href="#slab%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5"><i class="fa fa-link"></i></a>slabキャッシュ</h5>\n\n<p>Slabキャッシュはディレクトリのメタデータ情報を格納するdentryやファイルのメタデータ情報を格納するinode構造体などをキャッシュしているカーネル内のメモリ領域</p>\n\n<p>それぞれは/proc/meminfoで確認できる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat</span> /proc/meminfo  | <span class="nb">grep</span> ^Cached\nCached:           461708 kB\n\n<span class="nv">$ </span><span class="nb">cat</span> /proc/meminfo  | <span class="nb">grep </span>Slab\nSlab:             200076 kB\n</pre></div></div>\n\n<h2>\n<span id="mincore2" class="fragment"></span><a href="#mincore2"><i class="fa fa-link"></i></a>mincore(2)</h2>\n\n<p>mincore() は、呼び出し元プロセスの仮想メモリのページがコア (RAM) 内に存在し、 ページ参照時にディスクアクセス (ページフォールト) を起こさないか どうかを示すベクトルを返します。<br>\nカーネルは、アドレス addr から始まる length バイトの範囲のページに関する存在情報を返します。</p>\n\n<div class="code-frame" data-lang="manより引用"><div class="highlight"><pre>mincore - ページがメモリー内にあるかどうかを判定する\n\n書式\n#include &lt;unistd.h&gt;\n#include &lt;sys/mman.h&gt;\n\nint mincore(void *addr, size_t length, unsigned char *vec);\n</pre></div></div>\n\n<p>使用方法の例としてはファイルをプロセスの仮想メモリへマッピングして、そのアドレスを元にmincore(2)を実行。<br>\nその結果を見てファイルがページキャッシュにあるかを判断します。</p>\n\n<p>ちなみに実装はmm/mincore.cを確認することで見ることができます。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">mm/mincore.c</span></div>\n<div class="highlight"><pre><span class="k">static</span> <span class="kt">long</span> <span class="nf">do_mincore</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">pages</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">vec</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">struct</span> <span class="n">vm_area_struct</span> <span class="o">*</span><span class="n">vma</span><span class="p">;</span>\n    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span><span class="p">;</span>\n    <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">mm_walk</span> <span class="n">mincore_walk</span> <span class="o">=</span> <span class="p">{</span>\n        <span class="p">.</span><span class="n">pmd_entry</span> <span class="o">=</span> <span class="n">mincore_pte_range</span><span class="p">,</span>\n        <span class="p">.</span><span class="n">pte_hole</span> <span class="o">=</span> <span class="n">mincore_unmapped_range</span><span class="p">,</span>\n        <span class="p">.</span><span class="n">hugetlb_entry</span> <span class="o">=</span> <span class="n">mincore_hugetlb</span><span class="p">,</span>\n        <span class="p">.</span><span class="n">private</span> <span class="o">=</span> <span class="n">vec</span><span class="p">,</span>\n    <span class="p">};</span>\n\n    <span class="n">vma</span> <span class="o">=</span> <span class="n">find_vma</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">mm</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">vma</span> <span class="o">||</span> <span class="n">addr</span> <span class="o">&lt;</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">)</span>\n        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>\n    <span class="n">mincore_walk</span><span class="p">.</span><span class="n">mm</span> <span class="o">=</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_mm</span><span class="p">;</span>\n    <span class="n">end</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_end</span><span class="p">,</span> <span class="n">addr</span> <span class="o">+</span> <span class="p">(</span><span class="n">pages</span> <span class="o">&lt;&lt;</span> <span class="n">PAGE_SHIFT</span><span class="p">));</span>\n    <span class="n">err</span> <span class="o">=</span> <span class="n">walk_page_range</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mincore_walk</span><span class="p">);</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>\n        <span class="k">return</span> <span class="n">err</span><span class="p">;</span>\n    <span class="k">return</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">addr</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">PAGE_SHIFT</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="使用例" class="fragment"></span><a href="#%E4%BD%BF%E7%94%A8%E4%BE%8B"><i class="fa fa-link"></i></a>使用例</h2>\n\n<p><a href="https://code.google.com/archive/p/linux-ftools/" rel="nofollow noopener" target="_blank">linux-ftools</a></p>\n\n<p>ファイルがメモリ上にあるかどうかは上記のfincoreというコマンドを用いて調べることができる。<br>\nソースも公開されていて結構な人がforkして遊んでいるようです。<br>\nそこまで難しいわけでもないので簡単に作ってみました。<br>\n今回の検証では下記を使用してみます。</p>\n\n<div class="code-frame" data-lang="c"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;errno.h&gt;\n</span>\n<span class="kt">char</span> <span class="o">*</span><span class="n">file_path</span><span class="p">;</span>\n<span class="kt">size_t</span> <span class="n">page_size</span><span class="p">;</span>\n\n<span class="kt">long</span> <span class="nf">fincore</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kt">void</span> <span class="o">*</span><span class="n">file_mmap</span><span class="p">;</span>\n        <span class="kt">size_t</span> <span class="n">page_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n        <span class="kt">size_t</span> <span class="n">cached</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">vec</span><span class="p">;</span>\n        <span class="kt">size_t</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>\n\n        <span class="n">page_size</span> <span class="o">=</span> <span class="n">getpagesize</span><span class="p">();</span>\n\n        <span class="n">vec</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span><span class="o">+</span><span class="n">page_size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">page_size</span><span class="p">);</span>\n        <span class="k">if</span> <span class="p">(</span> <span class="n">mincore_vec</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">{</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"calloc"</span><span class="p">);</span>\n        <span class="p">}</span>\n\n        <span class="n">file_mmap</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>\n        <span class="k">if</span> <span class="p">(</span> <span class="n">file_mmap</span> <span class="o">==</span> <span class="n">MAP_FAILED</span> <span class="p">)</span> <span class="p">{</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"mmap"</span><span class="p">);</span>\n                <span class="k">goto</span> <span class="n">cleanup</span><span class="p">;</span>\n        <span class="p">}</span>\n\n        <span class="k">if</span> <span class="p">(</span> <span class="n">mincore</span><span class="p">(</span><span class="n">file_mmap</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">vec</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"mincore"</span><span class="p">);</span>\n                <span class="k">goto</span> <span class="n">cleanup</span><span class="p">;</span>\n        <span class="p">}</span>\n\n        <span class="k">for</span> <span class="p">(</span><span class="n">page_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">page_index</span> <span class="o">&lt;=</span> <span class="n">length</span><span class="o">/</span><span class="n">page_size</span><span class="p">;</span> <span class="n">page_index</span><span class="o">++</span><span class="p">)</span>\n                <span class="k">if</span> <span class="p">(</span><span class="n">vec</span><span class="p">[</span><span class="n">page_index</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>\n                        <span class="o">++</span><span class="n">cached</span><span class="p">;</span>\n        <span class="n">ret</span> <span class="o">=</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)((</span><span class="kt">long</span><span class="p">)</span><span class="n">cached</span> <span class="o">*</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">page_size</span><span class="p">);</span>\n\n<span class="nl">cleanup:</span>\n        <span class="k">if</span> <span class="p">(</span> <span class="n">file_mmap</span> <span class="o">!=</span> <span class="n">MAP_FAILED</span> <span class="p">)</span>\n                <span class="n">munmap</span><span class="p">(</span><span class="n">file_mmap</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>\n        <span class="k">if</span> <span class="p">(</span> <span class="n">vec</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>\n                <span class="n">free</span><span class="p">(</span><span class="n">mincore_vec</span><span class="p">);</span>\n\n        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kt">void</span> <span class="nf">print_date</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">s</span><span class="p">,</span> <span class="kt">long</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"------------------------------</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"FILE_NAME   : %s</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">file_path</span><span class="p">);</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"FILE_SIZE   : %ld</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"PAGE_SIZE   : %ld</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">page_size</span><span class="p">);</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"TOTAL_PAGES : %ld</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">c</span><span class="o">/</span><span class="n">page_size</span><span class="p">);</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"CACHE_SIZE  : %ld</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>\n<span class="p">{</span>\n        <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>\n        <span class="kt">long</span> <span class="n">cached</span><span class="p">;</span>\n        <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>\n        <span class="n">file_path</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>\n\n        <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>\n        <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"open"</span><span class="p">);</span>\n                <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="k">if</span> <span class="p">(</span><span class="n">fstat</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">))</span> <span class="p">{</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"fstat"</span><span class="p">);</span>\n                <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>\n                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>\n        <span class="p">}</span>\n\n        <span class="n">cached</span> <span class="o">=</span> <span class="n">fincore</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">);</span><span class="err">\u3000</span><span class="c1">// ①</span>\n        <span class="n">print_date</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">,</span> <span class="n">cached</span><span class="p">);</span>\n\n        <span class="c1">// ページキャッシュに乗せる為にread(2)</span>\n        <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">);</span>\n        <span class="kt">size_t</span> <span class="n">s</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">);</span>\n\n        <span class="n">cached</span> <span class="o">=</span> <span class="n">fincore</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">);</span> <span class="c1">// ②</span>\n        <span class="n">print_date</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">,</span> <span class="n">cached</span><span class="p">);</span>\n\n        <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>\n\n        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div></div>\n\n<p>上記を適当にビルドし、引数としてファイルのパスを与えます。<br>\nファイルについてはデータがない空ファイルだと面白みがないので適当にデータを書き込んでおきます。<br>\n下記例ではddを用いて4MBのファイルをディスクへ書き込んでいます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 4MBのファイル作成</span>\n<span class="nv">$ </span><span class="nb">dd </span><span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/home/fileA <span class="nv">bs</span><span class="o">=</span>4096 <span class="nv">count</span><span class="o">=</span>1000\n<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-lh</span> /home/fileA\n<span class="nt">-rw-r--r--</span> 1 root root 4.0M  2月 14 21:25 /home/fileA\n\n<span class="c"># ページキャッシュを解放</span>\n<span class="nv">$ </span><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/vm/drop_caches\n\n<span class="c"># 実行</span>\n<span class="nv">$ </span>./a.out /home/fileA\n<span class="nt">------------------------------</span>\nFILE_NAME   : /home/fileA\nFILE_SIZE   : 40960000\nPAGE_SIZE   : 4096\nTOTAL_PAGES : 0\nCACHE_SIZE  : 0\n<span class="nt">------------------------------</span>\nFILE_NAME   : /home/fileA\nFILE_SIZE   : 40960000\nPAGE_SIZE   : 4096\nTOTAL_PAGES : 10000\nCACHE_SIZE  : 40960000\n</pre></div></div>\n\n<p>fileを作成してページキャッシュを解放しmincore(2)を実行。<br>\nその後にプログラム内でread(2)し再度mincore(2)を実行しています。<br>\n①の結果よりmmap(2)しただけでは仮想メモリへマッピングしただけで実際にファイルへの操作がない限りは<br>\nページキャッシュに乗らないことが分かりました。<br>\nmmap(2)において、 ファイルの内容は、プロセスの仮想アドレス空間に直接リンクされるだけのようです。</p>\n\n<h2>\n<span id="キャッシュクリアの種類" class="fragment"></span><a href="#%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%82%AF%E3%83%AA%E3%82%A2%E3%81%AE%E7%A8%AE%E9%A1%9E"><i class="fa fa-link"></i></a>キャッシュクリアの種類</h2>\n\n<p>システムを再起動せずにメモリをクリアする方法は3つあります。<br>\n正直ここら辺の仕組みはよくわかっていません。。。<br>\nケースバイケースで使い分けましょう。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># ページキャッシュのみクリア</span>\n<span class="nv">$ </span><span class="nb">echo </span>1 <span class="o">&gt;</span> /proc/sys/vm/drop_caches\n\n<span class="c"># dentryとinodeのクリア</span>\n<span class="nv">$ </span><span class="nb">echo </span>2 <span class="o">&gt;</span> /proc/sys/vm/drop_caches\n\n<span class="c"># ページキャッシュとdentry、inodeのクリア</span>\n<span class="nv">$ </span><span class="nb">echo </span>3 <span class="o">&gt;</span> /proc/sys/vm/drop_caches\n</pre></div></div>\n\n<p>あたり前ですがtmpfs上に作成したファイルは上記を実行してもキャッシュがクリアされることはありません。</p>\n\n<h2>\n<span id="遅延書き込み" class="fragment"></span><a href="#%E9%81%85%E5%BB%B6%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF"><i class="fa fa-link"></i></a>遅延書き込み</h2>\n\n<p>Linux が write(2) なり何なりでプロセスから書き込み要求を受け取ったあとページにそのページは汚れてますとフラグを立てます。<br>\nフラグを立てたらすぐプロセスに処理は戻ります。このフラグは後でブロック型デバイスに書き出す必要があることを表しています。<br>\nカーネルスレッドの pdflush が定期的に汚れたページを検索して汚れたページとブロック型デバイスと同期を取っています。</p>\n\n<p>カーネルスレッドの検索間隔は下記で確認できます。自分の環境だとデフォルト5秒のようです。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>sysctl vm.dirty_writeback_centisecs\nvm.dirty_writeback_centisecs <span class="o">=</span> 500\n</pre></div></div>\n\n<p>汚れたページは/proc/meminfoを確認することで見れます。<br>\n以下はddで適当にファイルを書き込んだ状態からsync(1)で明示的にsyncさせています。<br>\n関係ないですがsync3回の伝承ってのがあるので面白いので見てみてください。<br>\n<a href="https://qiita.com/tboffice/items/9c6092278ccaab88e71e" id="reference-57471c50fcc6fd33ba5c">sync; sync; sync; haltの伝承</a></p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ grep "Dirty" /proc/meminfo\nDirty:               468 kB\n\n$ sync\n\n$ grep "Dirty" /proc/meminfo\nDirty:                 0 kB\n</pre></div></div>\n\n<p>この辺は調べ次第別記事で書きたいと思ってます。</p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>カーネル内でどのような動きで実装されているのか実際に見るまでは行っていないので次回あたりはそこらへんも踏まえて書こうと思ういます。dirtyページの話なんかも踏まえて。</p>\n\n<h2>\n<span id="使用例-1" class="fragment"></span><a href="#%E4%BD%BF%E7%94%A8%E4%BE%8B-1"><i class="fa fa-link"></i></a>使用例</h2>\n\n<p><a href="http://www.linux-beginner.com/linux_kihon224.html" rel="nofollow noopener" target="_blank">Linux初心者の基礎知識 224.メモリ管理(4)</a><br>\n<a href="http://d.hatena.ne.jp/naoya/20070521/1179754203" rel="nofollow noopener" target="_blank">naoyaのはてなダイアリー Linux のページキャッシュ</a><br>\n<a href="https://seesaawiki.jp/kernelreading/d/%A5%DA%A1%BC%A5%B8%A5%AD%A5%E3%A5%C3%A5%B7%A5%E5%A4%CB%A4%C4%A4%A4%A4%C6" rel="nofollow noopener" target="_blank">Linuxカーネル@wiki ページキャッシュについて</a><br>\n<a href="https://wiki.bit-hive.com/north/pg/%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC%E3%83%9E%E3%83%83%E3%83%97" rel="nofollow noopener" target="_blank">Linuxの備忘録とか・・・ メモリーマップ</a></p>\n', 'body': '![20150307003237.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/c664b521-6374-39a8-7166-33ba904b89f8.jpeg)\n\n## 背景\n\n[Linuxのページキャッシュ攻撃対策の影響は大きく、長期化する見通し【翻訳】](https://qiita.com/hogemax/items/9ef7850ad74de4aa4390)\n\nこの記事を読んでページキャッシュについて色々調べてみようと思って書いてみました。\nOSのメモリ管理機構に関連した内容となっています。\n\n## キャッシュとは\n\nカーネルは、ディスク上のデータへのアクセスを高速に行うため、 read/writeの際にメモリ上にデータをキャッシュします。 \nキャッシュするメモリ上の領域を「ディスクキャッシュ」と 呼びます。 \n\nディスクキャッシュには種類が2種類があります。それが「バッファキャッシュ」と「ページキャッシュ」です。\nそれぞれの概要は下記へ記します。\nちなみに、空きメモリがある限り、基本的にキャッシュはどんどん増加します。\n\n今回は取り挙げませんがキャッシュと聞くとCPUでよく見る単語なのでそちらをイメージすることが多いと思います。\nそちらに関しては他記事をご参照ください。\nキャッシュヒットやキャッシュミスとかについての測定なんかについては下記がとても参考になりました。\nhttp://int.main.jp/txt/perf.html\n\n## キャッシュの種類\n\n##### ページキャッシュ\n\nページというのは Linux の仮想メモリの最小単位。\nページキャッシュは、ディスク上のデータをページ単位で一時的に 保存するために使用されるメモリでファイルの読み書きの高速化に 使用されます。\n\n##### バッファキャッシュ\n\nバッファキャッシュは、プロセスがディスク上のデータに アクセスする際、アクセスすべきデータのブロックを高速に見つけるために使用されるメモリ \n\n##### slabキャッシュ\n\nSlabキャッシュはディレクトリのメタデータ情報を格納するdentryやファイルのメタデータ情報を格納するinode構造体などをキャッシュしているカーネル内のメモリ領域\n\nそれぞれは/proc/meminfoで確認できる\n\n``` bash\n$ cat /proc/meminfo  | grep ^Cached\nCached:           461708 kB\n\n$ cat /proc/meminfo  | grep Slab\nSlab:             200076 kB\n```\n\n## mincore(2)\n\nmincore() は、呼び出し元プロセスの仮想メモリのページがコア (RAM) 内に存在し、 ページ参照時にディスクアクセス (ページフォールト) を起こさないか どうかを示すベクトルを返します。\nカーネルは、アドレス addr から始まる length バイトの範囲のページに関する存在情報を返します。\n\n``` manより引用\nmincore - ページがメモリー内にあるかどうかを判定する\n\n書式\n#include <unistd.h>\n#include <sys/mman.h>\n\nint mincore(void *addr, size_t length, unsigned char *vec);\n```\n\n使用方法の例としてはファイルをプロセスの仮想メモリへマッピングして、そのアドレスを元にmincore(2)を実行。\nその結果を見てファイルがページキャッシュにあるかを判断します。\n\nちなみに実装はmm/mincore.cを確認することで見ることができます。\n\n``` c:mm/mincore.c\nstatic long do_mincore(unsigned long addr, unsigned long pages, unsigned char *vec)\n{\n\tstruct vm_area_struct *vma;\n\tunsigned long end;\n\tint err;\n\tstruct mm_walk mincore_walk = {\n\t\t.pmd_entry = mincore_pte_range,\n\t\t.pte_hole = mincore_unmapped_range,\n\t\t.hugetlb_entry = mincore_hugetlb,\n\t\t.private = vec,\n\t};\n\n\tvma = find_vma(current->mm, addr);\n\tif (!vma || addr < vma->vm_start)\n\t\treturn -ENOMEM;\n\tmincore_walk.mm = vma->vm_mm;\n\tend = min(vma->vm_end, addr + (pages << PAGE_SHIFT));\n\terr = walk_page_range(addr, end, &mincore_walk);\n\tif (err < 0)\n\t\treturn err;\n\treturn (end - addr) >> PAGE_SHIFT;\n}\n```\n\n## 使用例\n\n[linux-ftools](https://code.google.com/archive/p/linux-ftools/)\n\nファイルがメモリ上にあるかどうかは上記のfincoreというコマンドを用いて調べることができる。\nソースも公開されていて結構な人がforkして遊んでいるようです。\nそこまで難しいわけでもないので簡単に作ってみました。\n今回の検証では下記を使用してみます。\n\n``` c\n#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <sys/mman.h>\n#include <errno.h>\n\nchar *file_path;\nsize_t page_size;\n\nlong fincore(int fd, size_t length) {\n        void *file_mmap;\n        size_t page_index = 0;\n        size_t cached = 0;\n        unsigned char *vec;\n        size_t ret = -1;\n\n        page_size = getpagesize();\n\n        vec = calloc(1, (length+page_size-1)/page_size);\n        if ( mincore_vec == NULL ) {\n                perror("calloc");\n        }\n\n        file_mmap = mmap((void *)0, length, PROT_NONE, MAP_SHARED, fd, 0 );\n        if ( file_mmap == MAP_FAILED ) {\n                perror("mmap");\n                goto cleanup;\n        }\n\n        if ( mincore(file_mmap, length, vec) != 0 ) {\n                perror("mincore");\n                goto cleanup;\n        }\n\n        for (page_index = 0; page_index <= length/page_size; page_index++)\n                if (vec[page_index]&1)\n                        ++cached;\n        ret = (size_t)((long)cached * (long)page_size);\n\ncleanup:\n        if ( file_mmap != MAP_FAILED )\n                munmap(file_mmap, length);\n        if ( vec != NULL )\n                free(mincore_vec);\n\n        return ret;\n}\n\nvoid print_date(size_t s, long c) {\n        fprintf(stdout, "------------------------------\\n");\n        fprintf(stdout, "FILE_NAME   : %s\\n", file_path);\n        fprintf(stdout, "FILE_SIZE   : %ld\\n", s);\n        fprintf(stdout, "PAGE_SIZE   : %ld\\n", page_size);\n        fprintf(stdout, "TOTAL_PAGES : %ld\\n", c/page_size);\n        fprintf(stdout, "CACHE_SIZE  : %ld\\n", c);\n}\n\nint main(int argc, char **argv)\n{\n        int fd;\n        long cached;\n        struct stat st;\n        file_path = argv[1];\n\n        fd = open(file_path, O_RDONLY);\n        if (fd < 0) {\n                perror("open");\n                return fd;\n        }\n        if (fstat(fd, &st)) {\n                perror("fstat");\n                close(fd);\n                return -1;\n        }\n\n        cached = fincore(fd, st.st_size);\u3000// ①\n        print_date(st.st_size, cached);\n\n        // ページキャッシュに乗せる為にread(2)\n        char *buf = malloc(st.st_size);\n        size_t s = read(fd, buf, st.st_size);\n\n        cached = fincore(fd, st.st_size); // ②\n        print_date(st.st_size, cached);\n\n        close(fd);\n\n        return 0;\n}\n```\n\n上記を適当にビルドし、引数としてファイルのパスを与えます。\nファイルについてはデータがない空ファイルだと面白みがないので適当にデータを書き込んでおきます。\n下記例ではddを用いて4MBのファイルをディスクへ書き込んでいます。\n\n``` bash\n# 4MBのファイル作成\n$ dd if=/dev/zero of=/home/fileA bs=4096 count=1000\n$ ls -lh /home/fileA\n-rw-r--r-- 1 root root 4.0M  2月 14 21:25 /home/fileA\n\n# ページキャッシュを解放\n$ echo 1 > /proc/sys/vm/drop_caches\n\n# 実行\n$ ./a.out /home/fileA\n------------------------------\nFILE_NAME   : /home/fileA\nFILE_SIZE   : 40960000\nPAGE_SIZE   : 4096\nTOTAL_PAGES : 0\nCACHE_SIZE  : 0\n------------------------------\nFILE_NAME   : /home/fileA\nFILE_SIZE   : 40960000\nPAGE_SIZE   : 4096\nTOTAL_PAGES : 10000\nCACHE_SIZE  : 40960000\n```\n\nfileを作成してページキャッシュを解放しmincore(2)を実行。\nその後にプログラム内でread(2)し再度mincore(2)を実行しています。\n①の結果よりmmap(2)しただけでは仮想メモリへマッピングしただけで実際にファイルへの操作がない限りは\nページキャッシュに乗らないことが分かりました。\nmmap(2)において、 ファイルの内容は、プロセスの仮想アドレス空間に直接リンクされるだけのようです。\n\n\n## キャッシュクリアの種類\n\nシステムを再起動せずにメモリをクリアする方法は3つあります。\n正直ここら辺の仕組みはよくわかっていません。。。\nケースバイケースで使い分けましょう。\n\n``` bash\n# ページキャッシュのみクリア\n$ echo 1 > /proc/sys/vm/drop_caches\n\n# dentryとinodeのクリア\n$ echo 2 > /proc/sys/vm/drop_caches\n\n# ページキャッシュとdentry、inodeのクリア\n$ echo 3 > /proc/sys/vm/drop_caches\n```\n\nあたり前ですがtmpfs上に作成したファイルは上記を実行してもキャッシュがクリアされることはありません。\n\n## 遅延書き込み\n\nLinux が write(2) なり何なりでプロセスから書き込み要求を受け取ったあとページにそのページは汚れてますとフラグを立てます。\nフラグを立てたらすぐプロセスに処理は戻ります。このフラグは後でブロック型デバイスに書き出す必要があることを表しています。\nカーネルスレッドの pdflush が定期的に汚れたページを検索して汚れたページとブロック型デバイスと同期を取っています。\n\nカーネルスレッドの検索間隔は下記で確認できます。自分の環境だとデフォルト5秒のようです。\n\n``` bash\n$ sysctl vm.dirty_writeback_centisecs\nvm.dirty_writeback_centisecs = 500\n```\n\n汚れたページは/proc/meminfoを確認することで見れます。\n以下はddで適当にファイルを書き込んだ状態からsync(1)で明示的にsyncさせています。\n関係ないですがsync3回の伝承ってのがあるので面白いので見てみてください。\n[sync; sync; sync; haltの伝承](https://qiita.com/tboffice/items/9c6092278ccaab88e71e)\n\n```\n$ grep "Dirty" /proc/meminfo\nDirty:               468 kB\n\n$ sync\n\n$ grep "Dirty" /proc/meminfo\nDirty:                 0 kB\n```\n\nこの辺は調べ次第別記事で書きたいと思ってます。\n\n## まとめ\n\nカーネル内でどのような動きで実装されているのか実際に見るまでは行っていないので次回あたりはそこらへんも踏まえて書こうと思ういます。dirtyページの話なんかも踏まえて。\n\n## 使用例\n\n[Linux初心者の基礎知識 224.メモリ管理(4)](http://www.linux-beginner.com/linux_kihon224.html)\n[naoyaのはてなダイアリー Linux のページキャッシュ](http://d.hatena.ne.jp/naoya/20070521/1179754203)\n[Linuxカーネル@wiki ページキャッシュについて](https://seesaawiki.jp/kernelreading/d/%A5%DA%A1%BC%A5%B8%A5%AD%A5%E3%A5%C3%A5%B7%A5%E5%A4%CB%A4%C4%A4%A4%A4%C6)\n[Linuxの備忘録とか・・・ メモリーマップ](https://wiki.bit-hive.com/north/pg/%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC%E3%83%9E%E3%83%83%E3%83%97)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-02-16T17:30:04+09:00', 'group': None, 'id': 'bbf221ab66562e1426ca', 'likes_count': 5, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'キャッシュ', 'versions': []}, {'name': 'システムコール', 'versions': []}], 'title': 'ファイルがページキャッシュに乗っているかを調べる', 'updated_at': '2019-02-16T17:30:04+09:00', 'url': 'https://qiita.com/ryuichi1208/items/bbf221ab66562e1426ca', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>2019年に個人的に気になるカンファレンスとかイベントとかのまとめ<br>\n基本的に東京がメイン。<br>\n修正/追記などは編集リクエストをください。</p>\n\n<h2>\n<span id="2月" class="fragment"></span><a href="#2%E6%9C%88"><i class="fa fa-link"></i></a>2月</h2>\n\n<h5>\n<span id="droidkaigi" class="fragment"></span><a href="#droidkaigi"><i class="fa fa-link"></i></a><a href="https://droidkaigi.jp/2019/" rel="nofollow noopener" target="_blank">DroidKaigi</a>\n</h5>\n\n<p>日時：2/7~8<br>\n場所：住友不動産新宿グランドタワー</p>\n\n<h5>\n<span id="developers-summit" class="fragment"></span><a href="#developers-summit"><i class="fa fa-link"></i></a><a href="https://event.shoeisha.jp/devsumi/20190214/" rel="nofollow noopener" target="_blank">Developers Summit</a>\n</h5>\n\n<p>日時：2/14~15<br>\n場所：ホテル雅叙園東京</p>\n\n<h5>\n<span id="laravel-jp-conference" class="fragment"></span><a href="#laravel-jp-conference"><i class="fa fa-link"></i></a><a href="https://conference2019.laravel.jp/" rel="nofollow noopener" target="_blank">Laravel JP Conference</a>\n</h5>\n\n<p>日時：2/16<br>\n場所：田町グランパーク</p>\n\n<h5>\n<span id="オープンソースカンファレンス" class="fragment"></span><a href="#%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9"><i class="fa fa-link"></i></a><a href="https://www.ospn.jp/osc2019-spring/" rel="nofollow noopener" target="_blank">オープンソースカンファレンス</a>\n</h5>\n\n<p>日時：2/22~23<br>\n場所：明星大学</p>\n\n<h5>\n<span id="jaws-days" class="fragment"></span><a href="#jaws-days"><i class="fa fa-link"></i></a><a href="https://jawsdays2019.jaws-ug.jp/" rel="nofollow noopener" target="_blank">JAWS DAYS</a>\n</h5>\n\n<p>日時：2/23<br>\n場所：TOC五反田メッセ </p>\n\n<h5>\n<span id="cookpad-techconf" class="fragment"></span><a href="#cookpad-techconf"><i class="fa fa-link"></i></a><a href="https://techconf.cookpad.com/2019/" rel="nofollow noopener" target="_blank">Cookpad TechConf</a>\n</h5>\n\n<p>日時：2/27<br>\n場所：恵比寿ガーデンプレイス ザ・ガーデンホール</p>\n\n<h5>\n<span id="セキュリティマネジメントカンファレンス" class="fragment"></span><a href="#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9"><i class="fa fa-link"></i></a><a href="https://www.sbbit.jp/eventinfo/48697/" rel="nofollow noopener" target="_blank">セキュリティマネジメントカンファレンス</a>\n</h5>\n\n<p>日時：2/27<br>\n場所：東京コンファレンスセンター・品川</p>\n\n<h2>\n<span id="3月" class="fragment"></span><a href="#3%E6%9C%88"><i class="fa fa-link"></i></a>3月</h2>\n\n<h5>\n<span id="try-swift-conference" class="fragment"></span><a href="#try-swift-conference"><i class="fa fa-link"></i></a><a href="https://www.tryswift.co/events/2019/tokyo/en/" rel="nofollow noopener" target="_blank">try! Swift Conference</a>\n</h5>\n\n<p>日時：3/21~22<br>\n場所：住友不動産渋谷ファーストタワー</p>\n\n<h5>\n<span id="phperkaigi" class="fragment"></span><a href="#phperkaigi"><i class="fa fa-link"></i></a><a href="https://phperkaigi.jp/2019/" rel="nofollow noopener" target="_blank">PHPerKaigi</a>\n</h5>\n\n<p>日時：3/29~3/31<br>\n場所：練馬区立区民・産業プラザ Coconeriホール</p>\n\n<h2>\n<span id="4月" class="fragment"></span><a href="#4%E6%9C%88"><i class="fa fa-link"></i></a>4月</h2>\n\n<h5>\n<span id="japan-it-week-春-前期" class="fragment"></span><a href="#japan-it-week-%E6%98%A5-%E5%89%8D%E6%9C%9F"><i class="fa fa-link"></i></a><a href="https://www.japan-it-spring.jp/ja-jp.html" rel="nofollow noopener" target="_blank">Japan IT Week 春 前期</a>\n</h5>\n\n<p>日時：4/10~12<br>\n場所：東京ビッグサイト</p>\n\n<h5>\n<span id="技術書典" class="fragment"></span><a href="#%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8"><i class="fa fa-link"></i></a><a href="https://techbookfest.org/event/tbf06" rel="nofollow noopener" target="_blank">技術書典</a>\n</h5>\n\n<p>日時：4/14<br>\n場所：池袋サンシャインシティ</p>\n\n<h2>\n<span id="5月" class="fragment"></span><a href="#5%E6%9C%88"><i class="fa fa-link"></i></a>5月</h2>\n\n<h5>\n<span id="japan-it-week-春-後期" class="fragment"></span><a href="#japan-it-week-%E6%98%A5-%E5%BE%8C%E6%9C%9F"><i class="fa fa-link"></i></a><a href="https://spring.japan-it.jp/ja-jp.html" rel="nofollow noopener" target="_blank">Japan IT Week 春 後期</a>\n</h5>\n\n<p>日時：5/8~10<br>\n場所：東京ビッグサイト</p>\n\n<h5>\n<span id="jjug" class="fragment"></span><a href="#jjug"><i class="fa fa-link"></i></a><a href="http://www.java-users.jp/" rel="nofollow noopener" target="_blank">JJUG</a>\n</h5>\n\n<p>日時：5/18<br>\n場所：ベルサール新宿グランド</p>\n\n<h5>\n<span id="djangocongressjp" class="fragment"></span><a href="#djangocongressjp"><i class="fa fa-link"></i></a><a href="https://djangocongress.jp/" rel="nofollow noopener" target="_blank">DjangoCongressJP</a>\n</h5>\n\n<p>日時：5/18~19<br>\n場所：東京日本橋タワー</p>\n\n<h2>\n<span id="6月" class="fragment"></span><a href="#6%E6%9C%88"><i class="fa fa-link"></i></a>6月</h2>\n\n<h5>\n<span id="aws-summit" class="fragment"></span><a href="#aws-summit"><i class="fa fa-link"></i></a><a href="https://aws.amazon.com/jp/events/summits/?awsm.page=4" rel="nofollow noopener" target="_blank">AWS Summit</a>\n</h5>\n\n<p>日時：6/12~13<br>\n場所：東京</p>\n\n<h5>\n<span id="scalamatsuri" class="fragment"></span><a href="#scalamatsuri"><i class="fa fa-link"></i></a><a href="https://2019.scalamatsuri.org/" rel="nofollow noopener" target="_blank">ScalaMatsuri</a>\n</h5>\n\n<p>日時：6/27~29<br>\n場所：東京国際交流館 プラザ平成</p>\n\n<h2>\n<span id="7月" class="fragment"></span><a href="#7%E6%9C%88"><i class="fa fa-link"></i></a>7月</h2>\n\n<h5>\n<span id="open-source-summit-japan" class="fragment"></span><a href="#open-source-summit-japan"><i class="fa fa-link"></i></a><a href="https://events.linuxfoundation.jp/events/open-source-summit-japan-2018/" rel="nofollow noopener" target="_blank">Open Source Summit Japan</a>\n</h5>\n\n<p>日時：7/17~19<br>\n場所：虎ノ門ヒルズフォーラム</p>\n\n<h5>\n<span id="cloudnativedays" class="fragment"></span><a href="#cloudnativedays"><i class="fa fa-link"></i></a><a href="https://twitter.com/search?f=tweets&amp;q=CNDT2019&amp;src=typd" rel="nofollow noopener" target="_blank">CloudNativeDays</a>\n</h5>\n\n<p>日時：7月/22~23<br>\n場所：虎ノ門ヒルズフォーラム</p>\n\n<h2>\n<span id="8月" class="fragment"></span><a href="#8%E6%9C%88"><i class="fa fa-link"></i></a>8月</h2>\n\n<h5>\n<span id="builderscon" class="fragment"></span><a href="#builderscon"><i class="fa fa-link"></i></a><a href="http://2019.tokyo.builderscon.io/" rel="nofollow noopener" target="_blank">builderscon</a>\n</h5>\n\n<p>日時：8/29~31<br>\n場所：東京電機大学</p>\n\n<h2>\n<span id="9月" class="fragment"></span><a href="#9%E6%9C%88"><i class="fa fa-link"></i></a>9月</h2>\n\n<h5>\n<span id="pycon-jp" class="fragment"></span><a href="#pycon-jp"><i class="fa fa-link"></i></a><a href="https://pyconjp.blogspot.com/search/label/pyconjp2019" rel="nofollow noopener" target="_blank">PyCon JP</a>\n</h5>\n\n<p>日時：9/16~17<br>\n場所：大田区産業プラザPiO</p>\n\n<h2>\n<span id="10月" class="fragment"></span><a href="#10%E6%9C%88"><i class="fa fa-link"></i></a>10月</h2>\n\n<h5>\n<span id="vue-fes-japan-2019" class="fragment"></span><a href="#vue-fes-japan-2019"><i class="fa fa-link"></i></a><a href="https://vuefes.jp/2019/" rel="nofollow noopener" target="_blank">Vue Fes Japan 2019</a>\n</h5>\n\n<p>日時：10/12<br>\n場所：TOC五反田メッセ</p>\n\n<h5>\n<span id="ceatec-japan" class="fragment"></span><a href="#ceatec-japan"><i class="fa fa-link"></i></a><a href="https://www.ceatec.com/ja/application/" rel="nofollow noopener" target="_blank">CEATEC JAPAN</a>\n</h5>\n\n<p>日時：10/15~18<br>\n場所：幕張メッセ</p>\n\n<h5>\n<span id="japan-it-week-秋" class="fragment"></span><a href="#japan-it-week-%E7%A7%8B"><i class="fa fa-link"></i></a><a href="https://www.japan-it-autumn.jp/ja-jp.html" rel="nofollow noopener" target="_blank">Japan IT Week 秋</a>\n</h5>\n\n<p>日時：10/23~25<br>\n場所：幕張メッセ</p>\n\n<h2>\n<span id="11月" class="fragment"></span><a href="#11%E6%9C%88"><i class="fa fa-link"></i></a>11月</h2>\n\n<h5>\n<span id="adtech-tokyo" class="fragment"></span><a href="#adtech-tokyo"><i class="fa fa-link"></i></a><a href="http://adtech-tokyo.com/ja/" rel="nofollow noopener" target="_blank">ad:tech tokyo</a>\n</h5>\n\n<p>日時：11/27~28<br>\n場所：東京国際フォーラム</p>\n\n<h2>\n<span id="12月" class="fragment"></span><a href="#12%E6%9C%88"><i class="fa fa-link"></i></a>12月</h2>\n\n<h5>\n<span id="japan-php-conference" class="fragment"></span><a href="#japan-php-conference"><i class="fa fa-link"></i></a><a href="http://phpcon.php.gr.jp/2019/" rel="nofollow noopener" target="_blank">Japan PHP Conference</a>\n</h5>\n\n<p>日時：12/1<br>\n場所：東京</p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>東京って楽しそうだなと思う地方民でした。</p>\n', 'body': '## 概要\n\n2019年に個人的に気になるカンファレンスとかイベントとかのまとめ\n基本的に東京がメイン。\n修正/追記などは編集リクエストをください。\n\n## 2月\n\n##### [DroidKaigi](https://droidkaigi.jp/2019/)\n日時：2/7~8\n場所：住友不動産新宿グランドタワー\n\n##### [Developers Summit](https://event.shoeisha.jp/devsumi/20190214/)\n日時：2/14~15\n場所：ホテル雅叙園東京\n\n##### [Laravel JP Conference](https://conference2019.laravel.jp/) \n日時：2/16\n場所：田町グランパーク\n\n##### [オープンソースカンファレンス](https://www.ospn.jp/osc2019-spring/)\n日時：2/22~23\n場所：明星大学\n\n##### [JAWS DAYS](https://jawsdays2019.jaws-ug.jp/)\n日時：2/23\n場所：TOC五反田メッセ \n\n##### [Cookpad TechConf](https://techconf.cookpad.com/2019/)\n日時：2/27\n場所：恵比寿ガーデンプレイス ザ・ガーデンホール\n\n##### [セキュリティマネジメントカンファレンス](https://www.sbbit.jp/eventinfo/48697/) \n日時：2/27\n場所：東京コンファレンスセンター・品川\n\n## 3月\n\n##### [try! Swift Conference](https://www.tryswift.co/events/2019/tokyo/en/)\n日時：3/21~22\n場所：住友不動産渋谷ファーストタワー\n\n##### [PHPerKaigi](https://phperkaigi.jp/2019/) \n日時：3/29~3/31\n場所：練馬区立区民・産業プラザ Coconeriホール\n\n## 4月\n\n##### [Japan IT Week 春 前期](https://www.japan-it-spring.jp/ja-jp.html)\n日時：4/10~12\n場所：東京ビッグサイト\n\n##### [技術書典](https://techbookfest.org/event/tbf06) \n日時：4/14\n場所：池袋サンシャインシティ\n\n## 5月\n\n##### [Japan IT Week 春 後期](https://spring.japan-it.jp/ja-jp.html)\n日時：5/8~10\n場所：東京ビッグサイト\n\n##### [JJUG](http://www.java-users.jp/)\n日時：5/18\n場所：ベルサール新宿グランド\n\n##### [DjangoCongressJP](https://djangocongress.jp/)\n日時：5/18~19\n場所：東京日本橋タワー\n\n## 6月\n\n##### [AWS Summit](https://aws.amazon.com/jp/events/summits/?awsm.page=4)\n日時：6/12~13\n場所：東京\n\n##### [ScalaMatsuri](https://2019.scalamatsuri.org/)\n日時：6/27~29\n場所：東京国際交流館 プラザ平成\n\n## 7月\n\n##### [Open Source Summit Japan](https://events.linuxfoundation.jp/events/open-source-summit-japan-2018/)\n日時：7/17~19\n場所：虎ノ門ヒルズフォーラム\n\n##### [CloudNativeDays](https://twitter.com/search?f=tweets&q=CNDT2019&src=typd)\n日時：7月/22~23\n場所：虎ノ門ヒルズフォーラム\n\n## 8月\n\n##### [builderscon](http://2019.tokyo.builderscon.io/)\n日時：8/29~31\n場所：東京電機大学\n\n## 9月\n\n##### [PyCon JP](https://pyconjp.blogspot.com/search/label/pyconjp2019)\n日時：9/16~17\n場所：大田区産業プラザPiO\n\n## 10月\n\n##### [Vue Fes Japan 2019](https://vuefes.jp/2019/)\n日時：10/12\n場所：TOC五反田メッセ\n\n##### [CEATEC JAPAN](https://www.ceatec.com/ja/application/)\n日時：10/15~18\n場所：幕張メッセ\n\n##### [Japan IT Week 秋](https://www.japan-it-autumn.jp/ja-jp.html)\n日時：10/23~25\n場所：幕張メッセ\n\n## 11月\n\n##### [ad:tech tokyo](http://adtech-tokyo.com/ja/)\n日時：11/27~28\n場所：東京国際フォーラム\n\n## 12月\n\n##### [Japan PHP Conference](http://phpcon.php.gr.jp/2019/)\n日時：12/1\n場所：東京\n\n## まとめ\n\n東京って楽しそうだなと思う地方民でした。\n', 'coediting': False, 'comments_count': 4, 'created_at': '2019-02-13T18:54:32+09:00', 'group': None, 'id': 'ed6031b18c6b7160e385', 'likes_count': 150, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'IT業界', 'versions': []}], 'title': '2019年のIT関連カンファレンスとかイベントとか', 'updated_at': '2019-05-22T00:35:51+09:00', 'url': 'https://qiita.com/ryuichi1208/items/ed6031b18c6b7160e385', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/80109674c7a75e61bbefd19ebadf2e13f989841e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62643363366632352d666630612d353962662d386331372d3362323638343565663861302e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/80109674c7a75e61bbefd19ebadf2e13f989841e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62643363366632352d666630612d353962662d386331372d3362323638343565663861302e706e67" alt="1_QVFjsW8gyIXeCUJucmK4XA.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/bd3c6f25-ff0a-59bf-8c17-3b26845ef8a0.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>docker-composeを雰囲気で使っているのでコマンドの意味を再確認する意味もかねて記事を作成</p>\n\n<h2>\n<span id="docker-composeとは" class="fragment"></span><a href="#docker-compose%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>docker-composeとは</h2>\n\n<p>yaml形式の設定ファイルで複数コンテナを実行を一括で管理できるツール<br>\nインストールなどは別記事をご参照ください。<br>\n<a href="http://docs.docker.jp/compose/install.html" rel="nofollow noopener" target="_blank">Docker Compose のインストール</a></p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> docker <span class="nt">--version</span>\n<span class="go">Docker version 18.09.1, build 4c52b90\n\n</span><span class="gp">$</span> docker-compose <span class="nt">--version</span>\n<span class="go">docker-compose version 1.22.0, build f46880f\n</span></pre></div></div>\n\n<h2>\n<span id="とりあえずhelp" class="fragment"></span><a href="#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9Ahelp"><i class="fa fa-link"></i></a>とりあえずhelp</h2>\n\n<p>buildやup,down等の基本コマンド以外を打つときはまずhelp見ます。<br>\nこれでもわからなければネットなどで調べてます。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose <span class="nb">help</span>\n<span class="go">Define and run multi-container applications with Docker.\n\nUsage:\n</span><span class="gp">  docker-compose [-f &lt;arg&gt;</span>...] <span class="o">[</span>options] <span class="o">[</span>COMMAND] <span class="o">[</span>ARGS...]\n<span class="go">  docker-compose -h|--help\n\nOptions:\n  -f, --file FILE             Specify an alternate compose file\n                              (default: docker-compose.yml)\n  -p, --project-name NAME     Specify an alternate project name\n                              (default: directory name)\n  --verbose                   Show more output\n  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n  --no-ansi                   Do not print ANSI control characters\n  -v, --version               Print version and exit\n  -H, --host HOST             Daemon socket to connect to\n\n</span><span class="gp">  --tls                       Use TLS;</span> implied by <span class="nt">--tlsverify</span>\n<span class="go">  --tlscacert CA_PATH         Trust certs signed only by this CA\n  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file\n  --tlskey TLS_KEY_PATH       Path to TLS key file\n  --tlsverify                 Use TLS and verify the remote\n  --skip-hostname-check       Don\'t check the daemon\'s hostname against the\n                              name specified in the client certificate\n  --project-directory PATH    Specify an alternate working directory\n                              (default: the path of the Compose file)\n  --compatibility             If set, Compose will attempt to convert deploy\n                              keys in v3 files to their non-Swarm equivalent\n\nCommands:\n  build              Build or rebuild services\n  bundle             Generate a Docker bundle from the Compose file\n  config             Validate and view the Compose file\n  create             Create services\n  down               Stop and remove containers, networks, images, and volumes\n  events             Receive real time events from containers\n  exec               Execute a command in a running container\n  help               Get help on a command\n  images             List images\n  kill               Kill containers\n  logs               View output from containers\n  pause              Pause services\n  port               Print the public port for a port binding\n  ps                 List containers\n  pull               Pull service images\n  push               Push service images\n  restart            Restart services\n  rm                 Remove stopped containers\n  run                Run a one-off command\n  scale              Set number of containers for a service\n  start              Start services\n  stop               Stop services\n  top                Display the running processes\n  unpause            Unpause services\n  up                 Create and start containers\n  version            Show the Docker-Compose version information\n</span></pre></div></div>\n\n<h2>\n<span id="ビルド" class="fragment"></span><a href="#%E3%83%93%E3%83%AB%E3%83%89"><i class="fa fa-link"></i></a>ビルド</h2>\n\n<p>サービスをビルドします。<br>\nサービス名を指定してビルドすることもできます。<br>\n「--no-cache」等も指定できます。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose build\n<span class="go">\n</span><span class="gp">#</span><span class="c"># サービスを指定してビルド</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose build nginx\n<span class="go">\n</span><span class="gp">#</span><span class="c"># Usage</span>\n<span class="go">Usage: build [options] [--build-arg key=val...] [SERVICE...]\n\nOptions:\n    --compress              Compress the build context using gzip.\n    --force-rm              Always remove intermediate containers.\n    --no-cache              Do not use cache when building the image.\n    --pull                  Always attempt to pull a newer version of the image.\n    -m, --memory MEM        Sets memory limit for the build container.\n    --build-arg key=val     Set build-time variables for services.\n</span></pre></div></div>\n\n<h2>\n<span id="起動停止再起動" class="fragment"></span><a href="#%E8%B5%B7%E5%8B%95%E5%81%9C%E6%AD%A2%E5%86%8D%E8%B5%B7%E5%8B%95"><i class="fa fa-link"></i></a>起動/停止/再起動</h2>\n\n<p>up,downでサービスの起動停止を行います。</p>\n\n<p>downとstopの違いは公式より下記のように記載されています。<br>\ndownは「コンテナ・ネットワーク・イメージ・ボリュームの停止と削除」<br>\nstopは「サービスの停止」</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">#</span> 起動\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose up\n<span class="gp">#</span><span class="c"># バックグラウンド実行なら「-d」を付けてup</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose up <span class="nt">-d</span>\n<span class="gp">#</span><span class="c"># サービスを指定して起動するなら</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose up nginx\n<span class="go">\n</span><span class="gp">#</span> 停止\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose stop\n<span class="gp">#</span><span class="c"># 停止かつコンテナを削除</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose down\n<span class="gp">#</span><span class="c"># イメージも合わせて削除</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose down <span class="nt">--rmi</span> all\n<span class="go">\n</span><span class="gp">#</span> 再起動\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose restart\n</pre></div></div>\n\n<h2>\n<span id="yamlの確認" class="fragment"></span><a href="#yaml%E3%81%AE%E7%A2%BA%E8%AA%8D"><i class="fa fa-link"></i></a>yamlの確認</h2>\n\n<p>docker-compose.ymlで書かれてる内容が表示されます。<br>\nどのようなサービスで構成されているか確認するオプション「--service」もあります。<br>\n書き方に誤りがあるときはエラーを出力してくれます。<br>\nup前に確認したりするのに使ってます。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose config\n<span class="go">services:\n  db:\n    image: postgres\n  web:\n    build:\n      context: /root/work/docker-compose\n    command: python manage.py runserver 0.0.0.0:8000\n    depends_on:\n    - db\n    ports:\n    - 8000:8000/tcp\n    volumes:\n    - /root/work/docker-compose:/code:rw\nversion: \'2.0\'\n\n</span><span class="gp">#</span><span class="c"># サービス名だけ取得</span>\n<span class="gp">$</span> docker-compose config <span class="nt">--service</span>\n<span class="go">db\nweb\n\n</span><span class="gp">#</span><span class="c"># エラーがあるとき</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose config\n<span class="go">ERROR: yaml.scanner.ScannerError: while scanning a simple key\n  in "./docker-compose.yml", line 14, column 3\ncould not find expected \':\'\n  in "./docker-compose.yml", line 15, column 1\n</span></pre></div></div>\n\n<h2>\n<span id="create" class="fragment"></span><a href="#create"><i class="fa fa-link"></i></a>create</h2>\n\n<p>構築されたサービスを参考にそのコンテナを作ります。<br>\nここで作られたコンテナは起動している状態ではありません。<br>\nこれもまた引数にサービス名を指定して、特定のサービスだけのコンテナを作ることも可能です。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> docker-compose create\n<span class="go">Creating db_1\nCreating web_1\n\n</span><span class="gp">#</span><span class="c"># サービス名を指定</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose create db\n</pre></div></div>\n\n<h2>\n<span id="events" class="fragment"></span><a href="#events"><i class="fa fa-link"></i></a>events</h2>\n\n<p>コンテナからのイベントを受信します。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> docker-compose events\n<span class="go">\n</span><span class="gp">#</span><span class="c"># Usage</span>\n<span class="go">Usage: exec [options] [-e KEY=VAL...] SERVICE COMMAND [ARGS...]\n\nOptions:\n    -d, --detach      Detached mode: Run command in the background.\n    --privileged      Give extended privileges to the process.\n    -u, --user USER   Run the command as this user.\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n    --index=index     index of the container if there are multiple\n                      instances of a service [default: 1]\n    -e, --env KEY=VAL Set environment variables (can be used multiple times,\n                      not supported in API &lt; 1.25)\n    -w, --workdir DIR Path to workdir directory for this command.\n</span></pre></div></div>\n\n<h2>\n<span id="exec" class="fragment"></span><a href="#exec"><i class="fa fa-link"></i></a>exec</h2>\n\n<p><code>docker exec</code>コマンドと同等のことができます。<br>\n引数にサービス名と実行するコマンドを指定して実行します。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> docker-compose <span class="nb">exec </span>web /bin/bash\n</pre></div></div>\n\n<h2>\n<span id="images" class="fragment"></span><a href="#images"><i class="fa fa-link"></i></a>images</h2>\n\n<p>対象のイメージの情報を表示します。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose images\n<span class="go">     Container             Repository        Tag       Image Id      Size\n--------------------------------------------------------------------------\ndocker-compose_db_1    postgres             latest   5a02f920193b   298 MB\ndocker-compose_web_1   docker-compose_web   latest   1b7d48087d77   870 MB\n</span></pre></div></div>\n\n<h2>\n<span id="kill" class="fragment"></span><a href="#kill"><i class="fa fa-link"></i></a>kill</h2>\n\n<p>コンテナを強制停止します。<br>\nシグナルを指定して送ることも可能です。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">#</span><span class="c"># usage</span>\n<span class="go">Force stop service containers.\nUsage: kill [options] [SERVICE...]\nOptions:\n    -s SIGNAL         SIGNAL to send to the container.\n                      Default signal is SIGKILL.\n\n</span><span class="gp">$</span> <span class="nb">sudo </span>docker-compose <span class="nb">kill</span>\n<span class="go">Killing rails5product_web_1 ... done\nKilling rails5product_db_1 ... done\n</span></pre></div></div>\n\n<h2>\n<span id="logs" class="fragment"></span><a href="#logs"><i class="fa fa-link"></i></a>logs</h2>\n\n<p>サービスのログを出力します。<br>\nまた引数でサービス名を指定できるので、そうするとサービスごとにログを出力してくれます。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> docker-compose logs\n<span class="go">\n</span><span class="gp">#</span><span class="c"># ログをリアルタイム追跡(tailfのように出力「-t」で時間も)</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose logs <span class="nt">-ft</span>\n<span class="go">db_1   | 2019-02-11T02:21:46.417460752Z The database cluster will be initialized with locale "en_US.utf8".\ndb_1   | 2019-02-11T02:21:46.417466610Z The default database encoding has accordingly been set to "UTF8".\ndb_1   | 2019-02-11T02:21:46.417487267Z The default text search configuration will be set to "english".\n</span></pre></div></div>\n\n<h2>\n<span id="pause" class="fragment"></span><a href="#pause"><i class="fa fa-link"></i></a>pause</h2>\n\n<p>サービスを一旦停止します。<br>\n勿論サービスごとに一時停止も可能です。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> docker-compose pause\n<span class="go">Pausing db_1 ... done\nPausing web_1 ... done\n</span></pre></div></div>\n\n<h2>\n<span id="port" class="fragment"></span><a href="#port"><i class="fa fa-link"></i></a>port</h2>\n\n<p>割り当てているポートを表示します。引数でサービス名とポート番号が必要になります。<br>\ntcp,udpでプロトコルの指定も可能です。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">#</span><span class="c"># usage</span>\n<span class="go">Usage: port [options] SERVICE PRIVATE_PORT\n\nOptions:\n    --protocol=proto  tcp or udp [default: tcp]\n    --index=index     index of the container if there are multiple\n                      instances of a service [default: 1]\n\n</span><span class="gp">$</span> <span class="nb">sudo </span>docker-compose port web 3000\n<span class="go">0.0.0.0:3000\n</span></pre></div></div>\n\n<h2>\n<span id="ps" class="fragment"></span><a href="#ps"><i class="fa fa-link"></i></a>ps</h2>\n\n<p>コンテナの一覧を表示します。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose ps\n<span class="go">        Name                      Command               State     Ports\n-------------------------------------------------------------------------\ndocker-compose_db_1    docker-entrypoint.sh postgres    Up       5432/tcp\ndocker-compose_db_2    docker-entrypoint.sh postgres    Up       5432/tcp\ndocker-compose_web_1   python manage.py runserver ...   Exit 2\n\n</span><span class="gp">#</span><span class="c"># サービス名でも確認できます</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose ps web\n<span class="go">        Name                      Command               State    Ports\n----------------------------------------------------------------------\ndocker-compose_web_1   python manage.py runserver ...   Exit 2\n</span></pre></div></div>\n\n<h2>\n<span id="pull" class="fragment"></span><a href="#pull"><i class="fa fa-link"></i></a>pull</h2>\n\n<p>サービスのイメージをプルしてきます。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose pull\n<span class="go">\n</span><span class="gp">#</span><span class="c"># Usage</span>\n<span class="go">Usage: pull [options] [SERVICE...]\n\nOptions:\n    --ignore-pull-failures  Pull what it can and ignores images with pull failures.\n    --parallel              Deprecated, pull multiple images in parallel (enabled by default).\n    --no-parallel           Disable parallel pulling.\n    -q, --quiet             Pull without printing progress information\n    --include-deps          Also pull services declared as dependencies\n</span></pre></div></div>\n\n<h2>\n<span id="rm" class="fragment"></span><a href="#rm"><i class="fa fa-link"></i></a>rm</h2>\n\n<p>停止中のコンテナを削除します。<br>\n起動中のコンテナも削除するならば「-f」を指定してください</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose <span class="nb">rm</span> \n<span class="go">\n</span><span class="gp">#</span><span class="c"># 強制削除</span>\n<span class="gp">$</span> <span class="nb">sudo </span>docker-compose <span class="nb">rm</span> <span class="nt">-f</span>\n</pre></div></div>\n\n<h2>\n<span id="scale" class="fragment"></span><a href="#scale"><i class="fa fa-link"></i></a>scale</h2>\n\n<p>サービスを実行するコンテナ数を指定します</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose scale <span class="nv">db</span><span class="o">=</span>2\n<span class="go">WARNING: The scale command is deprecated. Use the up command with the --scale flag instead.\nStarting docker-compose_db_1 ... done\nCreating docker-compose_db_2 ... done\n</span></pre></div></div>\n\n<p>こちらは現在は非推奨とのこと。コメントありがとうございます。<br>\n<a href="https://kazuhira-r.hatenablog.com/entry/20170714/1500048645" rel="nofollow noopener" target="_blank">Docker Compose 1.13.0から「scale」が非推奨になり、「up --scale」に</a></p>\n\n<h2>\n<span id="top" class="fragment"></span><a href="#top"><i class="fa fa-link"></i></a>top</h2>\n\n<p>各コンテナのプロセス情報を表示します。</p>\n\n<div class="code-frame" data-lang="console"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">sudo </span>docker-compose top\n<span class="go">docker-compose_db_1\n  UID       PID    PPID    C   STIME   TTY     TIME                      CMD\n----------------------------------------------------------------------------------------------\nlogstash   15251   14858   0   11:21   ?     00:00:00   postgres: stats collector\nlogstash   15252   14858   0   11:21   ?     00:00:00   postgres: logical replication launcher\n\ndocker-compose_db_2\n  UID       PID    PPID    C   STIME   TTY     TIME                      CMD\n----------------------------------------------------------------------------------------------\nlogstash   28206   28009   0   11:46   ?     00:00:00   postgres: stats collector\nlogstash   28207   28009   0   11:46   ?     00:00:00   postgres: logical replication launcher\n</span></pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>とりあえずこれ使えれば問題あっても調査の足掛かりにはなると思う。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://docs.docker.com/compose/" rel="nofollow noopener" target="_blank">公式リファレンス</a><br>\n<a href="https://qiita.com/y_hokkey/items/d51e69c6ff4015e85fce" id="reference-2ce074807c076d8bcb44">docker-composeを使うと複数コンテナの管理が便利に</a><br>\n<a href="https://qiita.com/wasanx25/items/d47caf37b79e855af95f" id="reference-ffc9c0d7965bcde9ac4d">docker-compose コマンドまとめ</a></p>\n', 'body': '![1_QVFjsW8gyIXeCUJucmK4XA.png](https://qiita-image-store.s3.amazonaws.com/0/258841/bd3c6f25-ff0a-59bf-8c17-3b26845ef8a0.png)\n\n## 背景\n\ndocker-composeを雰囲気で使っているのでコマンドの意味を再確認する意味もかねて記事を作成\n\n## docker-composeとは\n\nyaml形式の設定ファイルで複数コンテナを実行を一括で管理できるツール\nインストールなどは別記事をご参照ください。\n[Docker Compose のインストール](http://docs.docker.jp/compose/install.html)\n\n## 環境\n\n``` console\n$ docker --version\nDocker version 18.09.1, build 4c52b90\n\n$ docker-compose --version\ndocker-compose version 1.22.0, build f46880f\n```\n\n## とりあえずhelp\n\nbuildやup,down等の基本コマンド以外を打つときはまずhelp見ます。\nこれでもわからなければネットなどで調べてます。\n\n``` console\n$ sudo docker-compose help\nDefine and run multi-container applications with Docker.\n\nUsage:\n  docker-compose [-f <arg>...] [options] [COMMAND] [ARGS...]\n  docker-compose -h|--help\n\nOptions:\n  -f, --file FILE             Specify an alternate compose file\n                              (default: docker-compose.yml)\n  -p, --project-name NAME     Specify an alternate project name\n                              (default: directory name)\n  --verbose                   Show more output\n  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n  --no-ansi                   Do not print ANSI control characters\n  -v, --version               Print version and exit\n  -H, --host HOST             Daemon socket to connect to\n\n  --tls                       Use TLS; implied by --tlsverify\n  --tlscacert CA_PATH         Trust certs signed only by this CA\n  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file\n  --tlskey TLS_KEY_PATH       Path to TLS key file\n  --tlsverify                 Use TLS and verify the remote\n  --skip-hostname-check       Don\'t check the daemon\'s hostname against the\n                              name specified in the client certificate\n  --project-directory PATH    Specify an alternate working directory\n                              (default: the path of the Compose file)\n  --compatibility             If set, Compose will attempt to convert deploy\n                              keys in v3 files to their non-Swarm equivalent\n\nCommands:\n  build              Build or rebuild services\n  bundle             Generate a Docker bundle from the Compose file\n  config             Validate and view the Compose file\n  create             Create services\n  down               Stop and remove containers, networks, images, and volumes\n  events             Receive real time events from containers\n  exec               Execute a command in a running container\n  help               Get help on a command\n  images             List images\n  kill               Kill containers\n  logs               View output from containers\n  pause              Pause services\n  port               Print the public port for a port binding\n  ps                 List containers\n  pull               Pull service images\n  push               Push service images\n  restart            Restart services\n  rm                 Remove stopped containers\n  run                Run a one-off command\n  scale              Set number of containers for a service\n  start              Start services\n  stop               Stop services\n  top                Display the running processes\n  unpause            Unpause services\n  up                 Create and start containers\n  version            Show the Docker-Compose version information\n```\n\n## ビルド\n\nサービスをビルドします。\nサービス名を指定してビルドすることもできます。\n「--no-cache」等も指定できます。\n\n``` console\n$ sudo docker-compose build\n\n## サービスを指定してビルド\n$ sudo docker-compose build nginx\n\n## Usage\nUsage: build [options] [--build-arg key=val...] [SERVICE...]\n\nOptions:\n    --compress              Compress the build context using gzip.\n    --force-rm              Always remove intermediate containers.\n    --no-cache              Do not use cache when building the image.\n    --pull                  Always attempt to pull a newer version of the image.\n    -m, --memory MEM        Sets memory limit for the build container.\n    --build-arg key=val     Set build-time variables for services.\n```\n\n## 起動/停止/再起動\n\nup,downでサービスの起動停止を行います。\n\ndownとstopの違いは公式より下記のように記載されています。\ndownは「コンテナ・ネットワーク・イメージ・ボリュームの停止と削除」\nstopは「サービスの停止」\n\n``` console\n# 起動\n$ sudo docker-compose up\n## バックグラウンド実行なら「-d」を付けてup\n$ sudo docker-compose up -d\n## サービスを指定して起動するなら\n$ sudo docker-compose up nginx\n\n# 停止\n$ sudo docker-compose stop\n## 停止かつコンテナを削除\n$ sudo docker-compose down\n## イメージも合わせて削除\n$ sudo docker-compose down --rmi all\n\n# 再起動\n$ sudo docker-compose restart\n```\n\n## yamlの確認\n\ndocker-compose.ymlで書かれてる内容が表示されます。\nどのようなサービスで構成されているか確認するオプション「--service」もあります。\n書き方に誤りがあるときはエラーを出力してくれます。\nup前に確認したりするのに使ってます。\n\n``` console\n$ sudo docker-compose config\nservices:\n  db:\n    image: postgres\n  web:\n    build:\n      context: /root/work/docker-compose\n    command: python manage.py runserver 0.0.0.0:8000\n    depends_on:\n    - db\n    ports:\n    - 8000:8000/tcp\n    volumes:\n    - /root/work/docker-compose:/code:rw\nversion: \'2.0\'\n\n## サービス名だけ取得\n$ docker-compose config --service\ndb\nweb\n\n## エラーがあるとき\n$ sudo docker-compose config\nERROR: yaml.scanner.ScannerError: while scanning a simple key\n  in "./docker-compose.yml", line 14, column 3\ncould not find expected \':\'\n  in "./docker-compose.yml", line 15, column 1\n```\n\n\n## create\n\n構築されたサービスを参考にそのコンテナを作ります。\nここで作られたコンテナは起動している状態ではありません。\nこれもまた引数にサービス名を指定して、特定のサービスだけのコンテナを作ることも可能です。\n\n``` console\n$ docker-compose create\nCreating db_1\nCreating web_1\n\n## サービス名を指定\n$ sudo docker-compose create db\n```\n\n## events\n\nコンテナからのイベントを受信します。\n\n``` console\n$ docker-compose events\n\n## Usage\nUsage: exec [options] [-e KEY=VAL...] SERVICE COMMAND [ARGS...]\n\nOptions:\n    -d, --detach      Detached mode: Run command in the background.\n    --privileged      Give extended privileges to the process.\n    -u, --user USER   Run the command as this user.\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n    --index=index     index of the container if there are multiple\n                      instances of a service [default: 1]\n    -e, --env KEY=VAL Set environment variables (can be used multiple times,\n                      not supported in API < 1.25)\n    -w, --workdir DIR Path to workdir directory for this command.\n```\n\n## exec\n`docker exec`コマンドと同等のことができます。\n引数にサービス名と実行するコマンドを指定して実行します。\n\n``` console\n$ docker-compose exec web /bin/bash\n```\n\n## images\n対象のイメージの情報を表示します。\n\n``` console\n$ sudo docker-compose images\n     Container             Repository        Tag       Image Id      Size\n--------------------------------------------------------------------------\ndocker-compose_db_1    postgres             latest   5a02f920193b   298 MB\ndocker-compose_web_1   docker-compose_web   latest   1b7d48087d77   870 MB\n```\n\n\n## kill\n\nコンテナを強制停止します。\nシグナルを指定して送ることも可能です。\n\n``` console\n## usage\nForce stop service containers.\nUsage: kill [options] [SERVICE...]\nOptions:\n    -s SIGNAL         SIGNAL to send to the container.\n                      Default signal is SIGKILL.\n\n$ sudo docker-compose kill\nKilling rails5product_web_1 ... done\nKilling rails5product_db_1 ... done\n```\n\n## logs\nサービスのログを出力します。\nまた引数でサービス名を指定できるので、そうするとサービスごとにログを出力してくれます。\n\n``` console\n$ docker-compose logs\n\n## ログをリアルタイム追跡(tailfのように出力「-t」で時間も)\n$ sudo docker-compose logs -ft\ndb_1   | 2019-02-11T02:21:46.417460752Z The database cluster will be initialized with locale "en_US.utf8".\ndb_1   | 2019-02-11T02:21:46.417466610Z The default database encoding has accordingly been set to "UTF8".\ndb_1   | 2019-02-11T02:21:46.417487267Z The default text search configuration will be set to "english".\n```\n\n## pause\n\nサービスを一旦停止します。\n勿論サービスごとに一時停止も可能です。\n\n``` console\n$ docker-compose pause\nPausing db_1 ... done\nPausing web_1 ... done\n```\n\n## port\n\n割り当てているポートを表示します。引数でサービス名とポート番号が必要になります。\ntcp,udpでプロトコルの指定も可能です。\n\n``` console \n## usage\nUsage: port [options] SERVICE PRIVATE_PORT\n\nOptions:\n    --protocol=proto  tcp or udp [default: tcp]\n    --index=index     index of the container if there are multiple\n                      instances of a service [default: 1]\n\n$ sudo docker-compose port web 3000\n0.0.0.0:3000\n```\n\n## ps\n\nコンテナの一覧を表示します。\n\n``` console\n$ sudo docker-compose ps\n        Name                      Command               State     Ports\n-------------------------------------------------------------------------\ndocker-compose_db_1    docker-entrypoint.sh postgres    Up       5432/tcp\ndocker-compose_db_2    docker-entrypoint.sh postgres    Up       5432/tcp\ndocker-compose_web_1   python manage.py runserver ...   Exit 2\n\n## サービス名でも確認できます\n$ sudo docker-compose ps web\n        Name                      Command               State    Ports\n----------------------------------------------------------------------\ndocker-compose_web_1   python manage.py runserver ...   Exit 2\n```\n\n## pull\nサービスのイメージをプルしてきます。\n\n``` console\n$ sudo docker-compose pull\n\n## Usage\nUsage: pull [options] [SERVICE...]\n\nOptions:\n    --ignore-pull-failures  Pull what it can and ignores images with pull failures.\n    --parallel              Deprecated, pull multiple images in parallel (enabled by default).\n    --no-parallel           Disable parallel pulling.\n    -q, --quiet             Pull without printing progress information\n    --include-deps          Also pull services declared as dependencies\n```\n\n## rm\n\n停止中のコンテナを削除します。\n起動中のコンテナも削除するならば「-f」を指定してください\n\n``` console\n$ sudo docker-compose rm \n\n## 強制削除\n$ sudo docker-compose rm -f\n```\n\n## scale\n\nサービスを実行するコンテナ数を指定します\n\n```console\n$ sudo docker-compose scale db=2\nWARNING: The scale command is deprecated. Use the up command with the --scale flag instead.\nStarting docker-compose_db_1 ... done\nCreating docker-compose_db_2 ... done\n```\n\nこちらは現在は非推奨とのこと。コメントありがとうございます。\n[Docker Compose 1.13.0から「scale」が非推奨になり、「up --scale」に](https://kazuhira-r.hatenablog.com/entry/20170714/1500048645)\n\n## top\n各コンテナのプロセス情報を表示します。\n\n``` console\n$ sudo docker-compose top\ndocker-compose_db_1\n  UID       PID    PPID    C   STIME   TTY     TIME                      CMD\n----------------------------------------------------------------------------------------------\nlogstash   15251   14858   0   11:21   ?     00:00:00   postgres: stats collector\nlogstash   15252   14858   0   11:21   ?     00:00:00   postgres: logical replication launcher\n\ndocker-compose_db_2\n  UID       PID    PPID    C   STIME   TTY     TIME                      CMD\n----------------------------------------------------------------------------------------------\nlogstash   28206   28009   0   11:46   ?     00:00:00   postgres: stats collector\nlogstash   28207   28009   0   11:46   ?     00:00:00   postgres: logical replication launcher\n```\n\n## まとめ\n\nとりあえずこれ使えれば問題あっても調査の足掛かりにはなると思う。\n\n## 参考リンク\n\n[公式リファレンス](https://docs.docker.com/compose/)\n[docker-composeを使うと複数コンテナの管理が便利に](https://qiita.com/y_hokkey/items/d51e69c6ff4015e85fce)\n[docker-compose コマンドまとめ](https://qiita.com/wasanx25/items/d47caf37b79e855af95f)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-02-11T12:54:31+09:00', 'group': None, 'id': '8b5adc88a93319cb76a2', 'likes_count': 107, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'docker-compose', 'versions': []}], 'title': 'docker-composeでよく使うコマンド', 'updated_at': '2019-02-12T15:09:27+09:00', 'url': 'https://qiita.com/ryuichi1208/items/8b5adc88a93319cb76a2', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/110913323ef1a59bf3fa6381b5f190c230694b36/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66626134383366612d323163652d666363382d316566382d3065336534623339313863382e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/110913323ef1a59bf3fa6381b5f190c230694b36/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66626134383366612d323163652d666363382d316566382d3065336534623339313863382e706e67" alt="vertical.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/fba483fa-21ce-fcc8-1ef8-0e3e4b3918c8.png"></a></p>\n\n<p>情報処理において共有メモリ（きょうゆう-）とは、複数のプログラムが同時並行的にアクセスするメモリである。</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>コンテナ⇔ホスト間やコンテナ⇔コンテナ間で共有メモリを使用できるって話を聞いたので試してみた記事<br>\n今の自分には用途は分からないけど面白そうだったので書いてみました。</p>\n\n<h2>\n<span id="共有メモリとは" class="fragment"></span><a href="#%E5%85%B1%E6%9C%89%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>共有メモリとは</h2>\n\n<p>共有メモリとはプロセス間で同じメモリを共有します。<br>\n1つのプロセスがメモリ上に他のプロセスからもアクセスできる領域を作成することで共有を可能にします。<br>\n共有メモリ以外にもソケット通信やセマフォを利用してプロセス間で通信を行えますが、共有メモリのメリットは処理速度が高速な点です。<br>\n共有メモリは一度作成してしまえばカーネルを通さずにプロセス内のメモリアクセスと同等の速さで行えます。<br>\n勿論デメリットもあります。それは排他制御の機能がない点で、自前で排他処理が必要となりプログラムが複雑化する点です。</p>\n\n<h2>\n<span id="共有メモリの仕組み" class="fragment"></span><a href="#%E5%85%B1%E6%9C%89%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF"><i class="fa fa-link"></i></a>共有メモリの仕組み</h2>\n\n<p>仕組み的には仮想メモリの仕組みを使って実現しています。<br>\nプロセスがメモリへアクセスする際は全てページテーブル経由でのアクセスとなっています。<br>\nこのプロセステーブルはプロセスごとに独立して衝突することはありませんが、共有メモリの場合は、<br>\n2プロセスがそれぞれ物理ページフレーム番号を参照するといった仕組みです。</p>\n\n<p>プロセスAの仮想ページフレーム1が参照している物理ページフレームが2のとき<br>\nプロセスBの仮想ページフレーム4が参照している物理ページフレームも2となります。<br>\n物理ページフレーム番号を同一のものを2プロセスで共有しているイメージです。<br>\n(ここら辺は実装までは読んでいないので<a href="http://archive.linux.or.jp/JF/JFdocs/The-Linux-Kernel-4.html" rel="nofollow noopener" target="_blank">こちら</a>をご参照ください！)</p>\n\n<h2>\n<span id="関連するシステムコール" class="fragment"></span><a href="#%E9%96%A2%E9%80%A3%E3%81%99%E3%82%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%B3%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>関連するシステムコール</h2>\n\n<p>共有メモリの操作には下記のシステムコールを利用します。</p>\n\n<p>shmget(2) : 共有メモリ・セグメント識別子を獲得する<br>\nshmat(2) : 自プロセスのデータセグメントにマップする<br>\nshmdt(2) : 共有メモリをアンマップする<br>\nshmctl(2) : 共有メモリをシステム上から削除する</p>\n\n<p>共有メモリが存在している間はipcsコマンドで確認することができます。</p>\n\n<p>以下の例ではshmid=360457でバイトが512Bの共有メモリが作成されていることが確認できます。 <br>\nまた、nattchが1であることから共有メモリへアタッチしているプロセスが1つあることも確認できます。<br>\nちなみに、共有メモリを作成しただけでは物理メモリの使用量は変わりません。<br>\n実際にメモリを操作しない限りはRSSの値は変わりません。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ipcs <span class="nt">-m</span>\n\n<span class="nt">------</span> 共有メモリセグメント <span class="nt">--------</span>\nキー       shmid      所有者      権限      バイト  nattch     状態\n0x00000000 65536      root       666        512        0\n0x00000000 98305      root       666        512        0\n0x00000000 131074     root       666        512        0\n0x00000000 163843     root       666        512        0\n0x00000000 196612     root       666        512        0\n0x00000000 229381     root       666        512        0\n0x00000000 262150     root       666        512        0\n0x00000000 294919     root       666        512        0\n0x00000000 327688     root       666        512        0\n0x00000000 360457     root       666        512        1 <span class="c">#これ</span>\n</pre></div></div>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">-m</td>\n<td style="text-align: left">シェアードメモリセグメントを指定する。</td>\n</tr>\n<tr>\n<td style="text-align: left">-q</td>\n<td style="text-align: left">メッセージキューを指定する。</td>\n</tr>\n<tr>\n<td style="text-align: left">-s</td>\n<td style="text-align: left">セマフォを指定する。</td>\n</tr>\n<tr>\n<td style="text-align: left">-a</td>\n<td style="text-align: left">すべてのリソースの情報が出力される(これは、省略時の動作である)。</td>\n</tr>\n<tr>\n<td style="text-align: left">-t</td>\n<td style="text-align: left">リソースが最後に変更された時間を出力する。</td>\n</tr>\n<tr>\n<td style="text-align: left">-p</td>\n<td style="text-align: left">リソースの所有、作成、最終変更を示すプロセスIDを出力する。</td>\n</tr>\n<tr>\n<td style="text-align: left">-c</td>\n<td style="text-align: left">リソースの作成ユーザーおよびグループの情報を出力する。</td>\n</tr>\n<tr>\n<td style="text-align: left">-l</td>\n<td style="text-align: left">各リソースの上限値を出力する。</td>\n</tr>\n<tr>\n<td style="text-align: left">-u</td>\n<td style="text-align: left">各リソースの使用状況を示すサマリが出力される.</td>\n</tr>\n</tbody>\n</table>\n\n<p>作成された共有メモリエリアはshmid_ds構造体で表されます。<br>\n共有メモリのサイズや使用しているプロセス数と所有者などが確認できます。</p>\n\n<p>作成された共有メモリエリアはshmid_ds構造体で表されます。<br>\n共有メモリのサイズや使用しているプロセス数と所有者などが確認できます。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">include/linux/shm.h</span></div>\n<div class="highlight"><pre><span class="k">struct</span> <span class="n">shmid_ds</span> <span class="p">{</span>\n    <span class="k">struct</span> <span class="n">ipc_perm</span> <span class="n">shm_perm</span><span class="p">;</span>   <span class="cm">/* operation perms */</span>\n    <span class="kt">int</span> <span class="n">shm_segsz</span><span class="p">;</span>      <span class="cm">/* size of segment (bytes) */</span>\n    <span class="kt">time_t</span>  <span class="n">shm_atime</span><span class="p">;</span>      <span class="cm">/* last attach time */</span>\n    <span class="kt">time_t</span>  <span class="n">shm_dtime</span><span class="p">;</span>      <span class="cm">/* last detach time */</span>\n    <span class="kt">time_t</span>  <span class="n">shm_ctime</span><span class="p">;</span>      <span class="cm">/* last change time */</span>\n    <span class="kt">unsigned</span> <span class="kt">short</span>  <span class="n">shm_cpid</span><span class="p">;</span>   <span class="cm">/* pid of creator */</span>\n    <span class="kt">unsigned</span> <span class="kt">short</span>  <span class="n">shm_lpid</span><span class="p">;</span>   <span class="cm">/* pid of last operator */</span>\n    <span class="kt">short</span>   <span class="n">shm_nattch</span><span class="p">;</span>     <span class="cm">/* no. of current attaches */</span>\n    <span class="cm">/* the following are private */</span>\n    <span class="kt">unsigned</span> <span class="kt">short</span>   <span class="n">shm_npages</span><span class="p">;</span>    <span class="cm">/* size of segment (pages) */</span>\n    <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="o">*</span><span class="n">shm_pages</span><span class="p">;</span> <span class="cm">/* array of ptrs to frames -&gt; SHMMAX */</span> \n    <span class="k">struct</span> <span class="n">vm_area_struct</span> <span class="o">*</span><span class="n">attaches</span><span class="p">;</span> <span class="cm">/* descriptors for attaches */</span>\n<span class="p">};</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="dockerと共有メモリ" class="fragment"></span><a href="#docker%E3%81%A8%E5%85%B1%E6%9C%89%E3%83%A1%E3%83%A2%E3%83%AA"><i class="fa fa-link"></i></a>Dockerと共有メモリ</h2>\n\n<p>コンテナ間でプロセス間通信に利用される、セマフォ、メッセージキュー、共有メモリといった機構は分離されています。これは"namespace"というカーネルの機能の一つを使用して実装しています。<br>\n異なる名前空間の共有メモリやセマフォにアクセスできないようになっている為コンテナ間やコンテナ⇔ホスト間ではこの空間は衝突することがありません。<br>\n今回の記事ではこのIPC namespaceを分離しないコンテナを作成し共有メモリを使っていきます。</p>\n\n<p>ちなみにIPCのnamespaceに関してのカーネルでの実装は下記で見れます。<br>\n<a href="https://github.com/torvalds/linux/blob/master/ipc/namespace.c" rel="nofollow noopener" target="_blank">linux/ipc/namespace.c</a></p>\n\n<h2>\n<span id="共有メモリを使用するための簡易プログラム" class="fragment"></span><a href="#%E5%85%B1%E6%9C%89%E3%83%A1%E3%83%A2%E3%83%AA%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E7%B0%A1%E6%98%93%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0"><i class="fa fa-link"></i></a>共有メモリを使用するための簡易プログラム</h2>\n\n<p>共有メモリを操作するための簡単なプログラムを下記へ記載します。<br>\nrecv.cでは共有メモリの作成とshmidを表示します。<br>\n表示した後はその領域を5秒ごとに表示し続けます。<br>\nsend.cではshmidをキーとしてその領域へ文字列を書き込みます。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">recv.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/ipc.h&gt;\n#include &lt;sys/shm.h&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>\n<span class="p">{</span>\n        <span class="kt">int</span>  <span class="n">memid</span><span class="p">;</span>\n        <span class="kt">char</span> <span class="o">*</span><span class="n">adr</span><span class="p">;</span>\n\n        <span class="c1">// 共有メモリの作成</span>\n        <span class="k">if</span><span class="p">((</span><span class="n">memid</span> <span class="o">=</span> <span class="n">shmget</span><span class="p">(</span><span class="n">IPC_PRIVATE</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="n">IPC_CREAT</span><span class="o">|</span><span class="mo">0666</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"shmget"</span><span class="p">);</span>\n                <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>\n        <span class="p">}</span>\n\n        <span class="n">printf</span><span class="p">(</span><span class="s">"Share Memory ID = %d</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span><span class="n">memid</span><span class="p">);</span>\n\n        <span class="k">if</span><span class="p">((</span> <span class="n">adr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">shmat</span><span class="p">(</span><span class="n">memid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"shmat"</span><span class="p">);</span>\n        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n                <span class="n">strcpy</span><span class="p">(</span><span class="n">adr</span><span class="p">,</span><span class="s">"Initial"</span><span class="p">);</span>\n                <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>\n                        <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span><span class="n">adr</span><span class="p">);</span>\n                        <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">adr</span><span class="p">,</span> <span class="s">"end"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n                                <span class="k">break</span><span class="p">;</span>\n                        <span class="p">}</span>\n                        <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>\n                <span class="p">}</span>\n                <span class="k">if</span><span class="p">(</span><span class="n">shmdt</span><span class="p">(</span><span class="n">adr</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n                        <span class="n">perror</span><span class="p">(</span><span class="s">"shmdt"</span><span class="p">);</span>\n                <span class="p">}</span>\n        <span class="p">}</span>\n        <span class="k">if</span><span class="p">(</span><span class="n">shmctl</span><span class="p">(</span><span class="n">memid</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"shmctl"</span><span class="p">);</span>\n                <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>\n        <span class="p">}</span>\n        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>shmgetの第一引数には共有メモリ・セグメントに対するキーを指定しています。<br>\nSystem V 共有メモリーセグメントの識別子を返します。 key の値が IPC_PRIVATE の場合、<br>\nもしくは key に対応する共有メモリーセグメントが存在せず、 <br>\nshmflg に IPC_CREAT が指定されていた場合、 新しい共有メモリセグメントを作成します。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">send.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/ipc.h&gt;\n#include &lt;sys/shm.h&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>\n<span class="p">{</span>\n        <span class="kt">int</span>   <span class="n">memid</span><span class="p">;</span>\n        <span class="kt">char</span>  <span class="o">*</span><span class="n">adr</span><span class="p">;</span>\n\n        <span class="k">if</span><span class="p">(</span> <span class="n">argc</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>\n                <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Usage: shm_writer shm_id string</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n                <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>\n        <span class="p">}</span>\n        <span class="n">memid</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>\n        <span class="k">if</span><span class="p">((</span> <span class="n">adr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">shmat</span><span class="p">(</span><span class="n">memid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n                <span class="n">perror</span><span class="p">(</span><span class="s">"shmat"</span><span class="p">);</span>\n        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n                <span class="n">strcpy</span><span class="p">(</span><span class="n">adr</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>\n                <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="n">Operation</span> <span class="n">completion</span><span class="p">.</span><span class="s">"</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n                <span class="k">if</span><span class="p">(</span> <span class="n">shmdt</span><span class="p">(</span><span class="n">adr</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n                        <span class="n">perror</span><span class="p">(</span><span class="s">"shmdt"</span><span class="p">);</span>\n                <span class="p">}</span>\n        <span class="p">}</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>※上記サンプルで使用しているshmget等はC言語のライブラリ関数では無いのでコンパイラにより使えない場合はあります</p>\n\n<h2>\n<span id="ホストコンテナ" class="fragment"></span><a href="#%E3%83%9B%E3%82%B9%E3%83%88%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A"><i class="fa fa-link"></i></a>ホスト⇔コンテナ</h2>\n\n<p>ここではコンテナ内で共有メモリを作成し、そのメモリ操作をホストで行う例を記載します。<br>\nコンテナではCをビルドして実行するだけでよいのでとりあえずビルド環境のみが入ったコンテナを用意します。</p>\n\n<div class="code-frame" data-lang="">\n<div class="code-lang"><span class="bold">dockerfile</span></div>\n<div class="highlight"><pre>FROM ubuntu:18.04\n\nRUN apt-get update &amp;&amp; apt-get install -y build-essential\nRUN mkdir -p /myapp\n</pre></div>\n</div>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>docker build <span class="nt">-t</span> recv <span class="nb">.</span>\n<span class="nv">$ </span><span class="nb">sudo </span>docker container run <span class="nt">--ipc</span><span class="o">=</span>host <span class="nt">-it</span> recv /bin/bash <span class="nt">-v</span> src:/myapp\n\n<span class="c"># コンテナ内</span>\nroot@29ebf4acb91c:~# gcc recv.c\u3000-o recv\nroot@29ebf4acb91c:~# ./recv\nShare Memory ID <span class="o">=</span> 327688 <span class="c"># これをホスト側プログラムのsend.cの引数へ与えます</span>\n</pre></div></div>\n\n<p>各プロセスには/proc/${PID}/nsサブディレクトリがありここを確認することで各namespace</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># ホストで実行</span>\n<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /proc/<span class="nv">$$</span>/ns\n合計 0\nlrwxrwxrwx 1 root root 0  2月  4 19:12 cgroup -&gt; <span class="s1">\'cgroup:[4026531835]\'</span>\nlrwxrwxrwx 1 root root 0  2月  4 19:12 ipc -&gt; <span class="s1">\'ipc:[4026531839]\'</span> <span class="c">#コンテナ内のbashプロセスのipc namespaceの情報</span>\nlrwxrwxrwx 1 root root 0  2月  4 19:12 mnt -&gt; <span class="s1">\'mnt:[4026531840]\'</span>\nlrwxrwxrwx 1 root root 0  2月  4 19:12 net -&gt; <span class="s1">\'net:[4026531993]\'</span>\nlrwxrwxrwx 1 root root 0  2月  4 19:12 pid -&gt; <span class="s1">\'pid:[4026531836]\'</span>\nlrwxrwxrwx 1 root root 0  2月  4 19:12 pid_for_children -&gt; <span class="s1">\'pid:[4026531836]\'</span>\nlrwxrwxrwx 1 root root 0  2月  4 19:12 user -&gt; <span class="s1">\'user:[4026531837]\'</span>\nlrwxrwxrwx 1 root root 0  2月  4 19:12 uts -&gt; <span class="s1">\'uts:[4026531838]\'</span>\n\n<span class="c"># コンテナ内で実行</span>\n<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /proc/<span class="nv">$$</span>/ns\ntotal 0\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 cgroup -&gt; <span class="s1">\'cgroup:[4026531835]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 ipc -&gt; <span class="s1">\'ipc:[4026531839]\'</span> <span class="c">#★</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 mnt -&gt; <span class="s1">\'mnt:[4026532210]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 net -&gt; <span class="s1">\'net:[4026532214]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 pid -&gt; <span class="s1">\'pid:[4026532212]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 pid_for_children -&gt; <span class="s1">\'pid:[4026532212]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 user -&gt; <span class="s1">\'user:[4026531837]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 uts -&gt; <span class="s1">\'uts:[4026532211]\'</span>\n</pre></div></div>\n\n<h2>\n<span id="コンテナコンテナ" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A"><i class="fa fa-link"></i></a>コンテナ⇔コンテナ</h2>\n\n<p>コンテナ間でも同様に共有メモリを扱えます。<br>\nホストと共有するコンテナを起動したら別プロンプトで下記を実行します。<br>\n--ipcのオプションがホストではなくcontainerとコンテナIDを指定します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>docker run <span class="nt">--ipc</span><span class="o">=</span>container:&lt;<span class="nb">id</span><span class="o">&gt;</span> &lt;image&gt; \n</pre></div></div>\n\n<h4>\n<span id="共有してみる" class="fragment"></span><a href="#%E5%85%B1%E6%9C%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>共有してみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>docker run <span class="nt">--ipc</span><span class="o">=</span>container:2cec60912f85 <span class="nt">-it</span> recv /bin/bash\n<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /proc/<span class="nv">$$</span>/ns\ntotal 0\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 cgroup -&gt; <span class="s1">\'cgroup:[4026531835]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 ipc -&gt; <span class="s1">\'ipc:[4026531839]\'</span> <span class="c">#上と値が一致している</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 mnt -&gt; <span class="s1">\'mnt:[4026532384]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 net -&gt; <span class="s1">\'net:[4026532388]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 pid -&gt; <span class="s1">\'pid:[4026532386]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 pid_for_children -&gt; <span class="s1">\'pid:[4026532386]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 user -&gt; <span class="s1">\'user:[4026531837]\'</span>\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 uts -&gt; <span class="s1">\'uts:[4026532385]\'</span>\n</pre></div></div>\n\n<h2>\n<span id="余談-セマフォとは" class="fragment"></span><a href="#%E4%BD%99%E8%AB%87-%E3%82%BB%E3%83%9E%E3%83%95%E3%82%A9%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>余談 セマフォとは</h2>\n\n<p>セマフォとは複数プロセスによるアクセス制御に使われる仕組みのこと。<br>\nよく使われるバイナリセマフォは、0と1の状態を持ち、プロセスが処理を続行可能であるか否かの判断を行うために用いられる。<br>\n似たような排他制御にミューテックスがあるが違いはミューテックスはロックと非ロックの管理だけだだがセマフォでは<br>\n回数の管理を行える。つまりセマフォは個数カウンタ付きのミューテックス。<br>\n他にスピンロックというのがあります。スピンロックはロックを獲得（変数のチェック）するまで、ビジーウエイトと言ってループで待ちますが、<br>\nセマフォを他のタスクに実行を譲ります。</p>\n\n<div class="code-frame" data-lang="c"><div class="highlight"><pre><span class="k">struct</span> <span class="n">semaphore</span> <span class="p">{</span>\n    <span class="n">raw_spinlock_t</span>      <span class="n">lock</span><span class="p">;</span>\n    <span class="kt">unsigned</span> <span class="kt">int</span>        <span class="n">count</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">list_head</span>    <span class="n">wait_list</span><span class="p">;</span>\n<span class="p">};</span>\n</pre></div></div>\n\n<h2>\n<span id="あとがき" class="fragment"></span><a href="#%E3%81%82%E3%81%A8%E3%81%8C%E3%81%8D"><i class="fa fa-link"></i></a>あとがき</h2>\n\n<p>IPCについて触れるのがメインの記事でした。<br>\n色々調べているとIPC使わなくてもコンテナそれぞれで同一のボリュームをマウントし、ファイルをmmapすることで<br>\n似たような通信が行えるといった記事をみました。なるほど、、、って感じですね。<br>\n面白そうなので一回やってみようと思います。<br>\n誤り等あれば教えてください！</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://linuxjm.osdn.jp/html/LDP_man-pages/man2/shmget.2.html" rel="nofollow noopener" target="_blank">SHMGET</a><br>\n<a href="http://archive.linux.or.jp/JF/JFdocs/The-Linux-Kernel-6.html" rel="nofollow noopener" target="_blank">プロセス間通信の仕組み</a><br>\n<a href="https://qiita.com/kakinooootane/items/643352e3db855b8a3d31" id="reference-aef8d9a4a2353b0ed59f">プロセス間通信 ~共有メモリ~</a></p>\n', 'body': '![vertical.png](https://qiita-image-store.s3.amazonaws.com/0/258841/fba483fa-21ce-fcc8-1ef8-0e3e4b3918c8.png)\n\n\n情報処理において共有メモリ（きょうゆう-）とは、複数のプログラムが同時並行的にアクセスするメモリである。\n\n## 背景\n\nコンテナ⇔ホスト間やコンテナ⇔コンテナ間で共有メモリを使用できるって話を聞いたので試してみた記事\n今の自分には用途は分からないけど面白そうだったので書いてみました。\n\n## 共有メモリとは\n\n共有メモリとはプロセス間で同じメモリを共有します。\n1つのプロセスがメモリ上に他のプロセスからもアクセスできる領域を作成することで共有を可能にします。\n共有メモリ以外にもソケット通信やセマフォを利用してプロセス間で通信を行えますが、共有メモリのメリットは処理速度が高速な点です。\n共有メモリは一度作成してしまえばカーネルを通さずにプロセス内のメモリアクセスと同等の速さで行えます。\n勿論デメリットもあります。それは排他制御の機能がない点で、自前で排他処理が必要となりプログラムが複雑化する点です。\n\n## 共有メモリの仕組み\n\n仕組み的には仮想メモリの仕組みを使って実現しています。\nプロセスがメモリへアクセスする際は全てページテーブル経由でのアクセスとなっています。\nこのプロセステーブルはプロセスごとに独立して衝突することはありませんが、共有メモリの場合は、\n2プロセスがそれぞれ物理ページフレーム番号を参照するといった仕組みです。\n\nプロセスAの仮想ページフレーム1が参照している物理ページフレームが2のとき\nプロセスBの仮想ページフレーム4が参照している物理ページフレームも2となります。\n物理ページフレーム番号を同一のものを2プロセスで共有しているイメージです。\n(ここら辺は実装までは読んでいないので[こちら](http://archive.linux.or.jp/JF/JFdocs/The-Linux-Kernel-4.html)をご参照ください！)\n\n## 関連するシステムコール\n\n共有メモリの操作には下記のシステムコールを利用します。\n\nshmget(2) : 共有メモリ・セグメント識別子を獲得する\nshmat(2) : 自プロセスのデータセグメントにマップする\nshmdt(2) : 共有メモリをアンマップする\nshmctl(2) : 共有メモリをシステム上から削除する\n\n共有メモリが存在している間はipcsコマンドで確認することができます。\n\n以下の例ではshmid=360457でバイトが512Bの共有メモリが作成されていることが確認できます。 \nまた、nattchが1であることから共有メモリへアタッチしているプロセスが1つあることも確認できます。\nちなみに、共有メモリを作成しただけでは物理メモリの使用量は変わりません。\n実際にメモリを操作しない限りはRSSの値は変わりません。\n\n``` bash\n$ ipcs -m\n\n------ 共有メモリセグメント --------\nキー       shmid      所有者      権限      バイト  nattch     状態\n0x00000000 65536      root       666        512        0\n0x00000000 98305      root       666        512        0\n0x00000000 131074     root       666        512        0\n0x00000000 163843     root       666        512        0\n0x00000000 196612     root       666        512        0\n0x00000000 229381     root       666        512        0\n0x00000000 262150     root       666        512        0\n0x00000000 294919     root       666        512        0\n0x00000000 327688     root       666        512        0\n0x00000000 360457     root       666        512        1 #これ\n```\n\n|オプション|説明|\n|:--|:------------------------------|\n-m|シェアードメモリセグメントを指定する。\n-q|メッセージキューを指定する。\n-s|セマフォを指定する。\n-a|すべてのリソースの情報が出力される(これは、省略時の動作である)。\n-t|リソースが最後に変更された時間を出力する。\n-p|リソースの所有、作成、最終変更を示すプロセスIDを出力する。\n-c|リソースの作成ユーザーおよびグループの情報を出力する。\n-l|各リソースの上限値を出力する。\n-u|各リソースの使用状況を示すサマリが出力される.\n\n作成された共有メモリエリアはshmid_ds構造体で表されます。\n共有メモリのサイズや使用しているプロセス数と所有者などが確認できます。\n\n\n作成された共有メモリエリアはshmid_ds構造体で表されます。\n共有メモリのサイズや使用しているプロセス数と所有者などが確認できます。\n\n``` c:include/linux/shm.h\nstruct shmid_ds {\n\tstruct ipc_perm shm_perm;\t/* operation perms */\n\tint\tshm_segsz;\t\t/* size of segment (bytes) */\n\ttime_t\tshm_atime;\t\t/* last attach time */\n\ttime_t\tshm_dtime;\t\t/* last detach time */\n\ttime_t\tshm_ctime;\t\t/* last change time */\n\tunsigned short\tshm_cpid;\t/* pid of creator */\n\tunsigned short\tshm_lpid;\t/* pid of last operator */\n\tshort\tshm_nattch;\t\t/* no. of current attaches */\n\t/* the following are private */\n\tunsigned short   shm_npages;\t/* size of segment (pages) */\n\tunsigned long   *shm_pages;\t/* array of ptrs to frames -> SHMMAX */ \n\tstruct vm_area_struct *attaches; /* descriptors for attaches */\n};\n```\n\n## Dockerと共有メモリ\n\nコンテナ間でプロセス間通信に利用される、セマフォ、メッセージキュー、共有メモリといった機構は分離されています。これは"namespace"というカーネルの機能の一つを使用して実装しています。\n異なる名前空間の共有メモリやセマフォにアクセスできないようになっている為コンテナ間やコンテナ⇔ホスト間ではこの空間は衝突することがありません。\n今回の記事ではこのIPC namespaceを分離しないコンテナを作成し共有メモリを使っていきます。\n\nちなみにIPCのnamespaceに関してのカーネルでの実装は下記で見れます。\n[linux/ipc/namespace.c](https://github.com/torvalds/linux/blob/master/ipc/namespace.c)\n\n## 共有メモリを使用するための簡易プログラム\n\n共有メモリを操作するための簡単なプログラムを下記へ記載します。\nrecv.cでは共有メモリの作成とshmidを表示します。\n表示した後はその領域を5秒ごとに表示し続けます。\nsend.cではshmidをキーとしてその領域へ文字列を書き込みます。\n\n``` c:recv.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n\nint main(int argc, char **argv)\n{\n        int  memid;\n        char *adr;\n\n        // 共有メモリの作成\n        if((memid = shmget(IPC_PRIVATE, 512, IPC_CREAT|0666)) == -1){\n                perror("shmget");\n                exit(-1);\n        }\n\n        printf("Share Memory ID = %d\\n",memid);\n\n        if(( adr = (char *)shmat(memid, NULL, 0)) == (void *)-1){\n                perror("shmat");\n        } else {\n                strcpy(adr,"Initial");\n                while(1){\n                        printf("%s\\n",adr);\n                        if (strcmp(adr, "end") == 0) {\n                                break;\n                        }\n                        sleep(1);\n                }\n                if(shmdt(adr) == -1) {\n                        perror("shmdt");\n                }\n        }\n        if(shmctl(memid, IPC_RMID, 0) == -1){\n                perror("shmctl");\n                exit(EXIT_FAILURE);\n        }\n        return 0;\n}\n```\n\nshmgetの第一引数には共有メモリ・セグメントに対するキーを指定しています。\nSystem V 共有メモリーセグメントの識別子を返します。 key の値が IPC_PRIVATE の場合、\nもしくは key に対応する共有メモリーセグメントが存在せず、 \nshmflg に IPC_CREAT が指定されていた場合、 新しい共有メモリセグメントを作成します。\n\n\n``` c:send.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n\nint main(int argc, char **argv)\n{\n        int   memid;\n        char  *adr;\n\n        if( argc <= 2) {\n                fprintf(stderr, "Usage: shm_writer shm_id string\\n");\n                exit(EXIT_FAILURE);\n        }\n        memid = atoi(argv[1]);\n        if(( adr = (char *)shmat(memid, 0, 0)) == (void *)-1) {\n                perror("shmat");\n        } else {\n                strcpy(adr, argv[2]);\n                fprintf(stderr, Operation completion."\\n");\n                if( shmdt(adr) == -1) {\n                        perror("shmdt");\n                }\n        }\n}\n```\n\n※上記サンプルで使用しているshmget等はC言語のライブラリ関数では無いのでコンパイラにより使えない場合はあります\n\n## ホスト⇔コンテナ\n\nここではコンテナ内で共有メモリを作成し、そのメモリ操作をホストで行う例を記載します。\nコンテナではCをビルドして実行するだけでよいのでとりあえずビルド環境のみが入ったコンテナを用意します。\n\n``` :dockerfile\nFROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y build-essential\nRUN mkdir -p /myapp\n```\n\n``` bash\n$ sudo docker build -t recv .\n$ sudo docker container run --ipc=host -it recv /bin/bash -v src:/myapp\n\n# コンテナ内\nroot@29ebf4acb91c:~# gcc recv.c\u3000-o recv\nroot@29ebf4acb91c:~# ./recv\nShare Memory ID = 327688 # これをホスト側プログラムのsend.cの引数へ与えます\n```\n\n各プロセスには/proc/${PID}/nsサブディレクトリがありここを確認することで各namespace\n\n``` bash\n# ホストで実行\n$ ls -l /proc/$$/ns\n合計 0\nlrwxrwxrwx 1 root root 0  2月  4 19:12 cgroup -> \'cgroup:[4026531835]\'\nlrwxrwxrwx 1 root root 0  2月  4 19:12 ipc -> \'ipc:[4026531839]\' #コンテナ内のbashプロセスのipc namespaceの情報\nlrwxrwxrwx 1 root root 0  2月  4 19:12 mnt -> \'mnt:[4026531840]\'\nlrwxrwxrwx 1 root root 0  2月  4 19:12 net -> \'net:[4026531993]\'\nlrwxrwxrwx 1 root root 0  2月  4 19:12 pid -> \'pid:[4026531836]\'\nlrwxrwxrwx 1 root root 0  2月  4 19:12 pid_for_children -> \'pid:[4026531836]\'\nlrwxrwxrwx 1 root root 0  2月  4 19:12 user -> \'user:[4026531837]\'\nlrwxrwxrwx 1 root root 0  2月  4 19:12 uts -> \'uts:[4026531838]\'\n\n# コンテナ内で実行\n$ ls -l /proc/$$/ns\ntotal 0\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 cgroup -> \'cgroup:[4026531835]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 ipc -> \'ipc:[4026531839]\' #★\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 mnt -> \'mnt:[4026532210]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 net -> \'net:[4026532214]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 pid -> \'pid:[4026532212]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 pid_for_children -> \'pid:[4026532212]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 user -> \'user:[4026531837]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:12 uts -> \'uts:[4026532211]\'\n```\n\n## コンテナ⇔コンテナ\n\nコンテナ間でも同様に共有メモリを扱えます。\nホストと共有するコンテナを起動したら別プロンプトで下記を実行します。\n--ipcのオプションがホストではなくcontainerとコンテナIDを指定します。\n\n``` bash\n$ sudo docker run --ipc=container:<id> <image> \n```\n\n#### 共有してみる\n\n``` bash\n$ sudo docker run --ipc=container:2cec60912f85 -it recv /bin/bash\n$ ls -l /proc/$$/ns\ntotal 0\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 cgroup -> \'cgroup:[4026531835]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 ipc -> \'ipc:[4026531839]\' #上と値が一致している\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 mnt -> \'mnt:[4026532384]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 net -> \'net:[4026532388]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 pid -> \'pid:[4026532386]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 pid_for_children -> \'pid:[4026532386]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 user -> \'user:[4026531837]\'\nlrwxrwxrwx 1 root root 0 Feb  4 10:14 uts -> \'uts:[4026532385]\'\n```\n\n## 余談 セマフォとは\n\nセマフォとは複数プロセスによるアクセス制御に使われる仕組みのこと。\nよく使われるバイナリセマフォは、0と1の状態を持ち、プロセスが処理を続行可能であるか否かの判断を行うために用いられる。\n似たような排他制御にミューテックスがあるが違いはミューテックスはロックと非ロックの管理だけだだがセマフォでは\n回数の管理を行える。つまりセマフォは個数カウンタ付きのミューテックス。\n他にスピンロックというのがあります。スピンロックはロックを獲得（変数のチェック）するまで、ビジーウエイトと言ってループで待ちますが、\nセマフォを他のタスクに実行を譲ります。\n\n``` c\nstruct semaphore {\n    raw_spinlock_t      lock;\n    unsigned int        count;\n    struct list_head    wait_list;\n};\n```\n\n## あとがき\n\nIPCについて触れるのがメインの記事でした。\n色々調べているとIPC使わなくてもコンテナそれぞれで同一のボリュームをマウントし、ファイルをmmapすることで\n似たような通信が行えるといった記事をみました。なるほど、、、って感じですね。\n面白そうなので一回やってみようと思います。\n誤り等あれば教えてください！\n\n## 参考リンク\n\n[SHMGET](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/shmget.2.html)\n[プロセス間通信の仕組み](http://archive.linux.or.jp/JF/JFdocs/The-Linux-Kernel-6.html)\n[プロセス間通信 ~共有メモリ~](https://qiita.com/kakinooootane/items/643352e3db855b8a3d31)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-02-04T19:16:38+09:00', 'group': None, 'id': '65949c2527834d436bc6', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': '共有メモリ', 'versions': []}], 'title': 'Dockerコンテナ間で共有メモリを使う', 'updated_at': '2019-05-20T15:38:18+09:00', 'url': 'https://qiita.com/ryuichi1208/items/65949c2527834d436bc6', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/d8f1c551dda22e6c7109aec10eb09fbfdb034692/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65666235393939662d363661632d656439312d303864362d6663356566653462386632352e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/d8f1c551dda22e6c7109aec10eb09fbfdb034692/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65666235393939662d363661632d656439312d303864362d6663356566653462386632352e6a706567" alt="Bash-Final.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/efb5999f-66ac-ed91-08d6-fc5efe4b8f25.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>シェルスクリプトを書くことが結構あるのでその備忘録代わりに記事を書いてみました。</p>\n\n<h2>\n<span id="特殊変数とは" class="fragment"></span><a href="#%E7%89%B9%E6%AE%8A%E5%A4%89%E6%95%B0%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>特殊変数とは</h2>\n\n<p>特殊変数とは<br>\nシェルによって自動的に値が設定される特殊な変数がいくつかあり、それら特殊な変数を参照することにより、様々な情報を取得することができる。</p>\n\n<table>\n<thead>\n<tr>\n<th>変数名</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$$</td>\n<td>実行シェルのプロセス番号(自分のPID)を格納する変数。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>コマンドの戻り値</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>最後に呼び出されたバックグラウンドプロセスのプロセス番号を格納する変数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>setで設定されたオプション</td>\n</tr>\n<tr>\n<td>$1</td>\n<td>シェルスクリプト実行時に指定された引数を格納する変数。</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>引数の個数</td>\n</tr>\n<tr>\n<td>$0</td>\n<td>シェルスクリプト自身のファイル名フルパス</td>\n</tr>\n<tr>\n<td>$n</td>\n<td>シェルスクリプトに与えられた引数を格納する変数。nは1,2,3…と指定できる。</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>実行時のコマンド名</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>シェルスクリプト実行時に指定された全引数が設定される変数を格納する変数。<br> 出力に関してはデリミタを格納する環境変数 IFS の影響を受けない。</td>\n</tr>\n<tr>\n<td>${@:X:Y}</td>\n<td>複数のパラメータのうち、X番目以降のY個のデータを取得するための変数を格納する変数。</td>\n</tr>\n<tr>\n<td>!$</td>\n<td>最後に実行されたコマンドに指定していた引数を格納する変数。</td>\n</tr>\n<tr>\n<td>$PIPESTATUS</td>\n<td>パイプで連結した各コマンドの終了ステータスが設定される変数。</td>\n</tr>\n<tr>\n<td>$LINENO</td>\n<td>この変数を使用している行の行番号が設定される変数。</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="基本機能" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E6%A9%9F%E8%83%BD"><i class="fa fa-link"></i></a>基本機能</h2>\n\n<p>bashの基本機能で使いやすい機能をご紹介</p>\n\n<h4>\n<span id="文法チェックをしたい--noexec" class="fragment"></span><a href="#%E6%96%87%E6%B3%95%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%92%E3%81%97%E3%81%9F%E3%81%84--noexec"><i class="fa fa-link"></i></a>文法チェックをしたい : noexec</h4>\n\n<p>「-n」をつけて実行することでスクリプト内のコマンドは実行されずに文法のみをチェックしてくれる。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 文法エラーありパターン</span>\n<span class="nv">$ </span>bash <span class="nt">-n</span> test.sh \ntest.sh: 行 5: 予期しないトークン <span class="sb">`</span><span class="k">done</span><span class="s1">\' 周辺に構文エラーがあります\ntest.sh: 行 5: `done\'</span>\n\n<span class="c"># 文法エラーなしパターン</span>\n<span class="nv">$ </span>bash <span class="nt">-n</span> test.sh\n<span class="nv">$ </span>\n</pre></div></div>\n\n<h4>\n<span id="実行内容のトレース--xtrace" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E5%86%85%E5%AE%B9%E3%81%AE%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B9--xtrace"><i class="fa fa-link"></i></a>実行内容のトレース : xtrace</h4>\n\n<p>「-x」をつけることでスクリプトの実行内容を出力できる<br>\nどのコマンドまで処理が行われたかどういった処理でエラーとなったのかを検出するときに使えます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>bash <span class="nt">-x</span> test.sh \n+ <span class="nv">LOOP_COUNT</span><span class="o">=</span>3\n++ <span class="nb">seq </span>0 3\n+ <span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span><span class="nb">seq </span>0 <span class="k">${</span><span class="nv">LOOP_COUNT</span><span class="k">}</span><span class="sb">`</span>\n+ <span class="nb">ls</span> <span class="nt">-la</span>\n++ <span class="nb">date</span>\n+ <span class="nb">echo</span>\n\n+ <span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span><span class="nb">seq </span>0 <span class="k">${</span><span class="nv">LOOP_COUNT</span><span class="k">}</span><span class="sb">`</span>\n+ <span class="nb">ls</span> <span class="nt">-la</span>\n++ <span class="nb">date</span>\n+ <span class="nb">echo</span>\n\n+ <span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span><span class="nb">seq </span>0 <span class="k">${</span><span class="nv">LOOP_COUNT</span><span class="k">}</span><span class="sb">`</span>\n+ <span class="nb">ls</span> <span class="nt">-la</span>\n++ <span class="nb">date</span>\n+ <span class="nb">echo</span>\n\n+ <span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span><span class="nb">seq </span>0 <span class="k">${</span><span class="nv">LOOP_COUNT</span><span class="k">}</span><span class="sb">`</span>\n+ <span class="nb">ls</span> <span class="nt">-la</span>\n++ <span class="nb">date</span>\n+ <span class="nb">echo</span>\n</pre></div></div>\n\n<h4>\n<span id="未定義変数を検出--nounset" class="fragment"></span><a href="#%E6%9C%AA%E5%AE%9A%E7%BE%A9%E5%A4%89%E6%95%B0%E3%82%92%E6%A4%9C%E5%87%BA--nounset"><i class="fa fa-link"></i></a>未定義変数を検出 : nounset</h4>\n\n<p>「-u」を指定することで未定義の変数を検出してくれます。未定義変数を許可したい場合には使えないので注意が必要。<br>\n都度ifで判定とかが回避策になるのでしょうか？</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>bash <span class="nt">-u</span> test.sh \ntest.sh: 行 5: LOOP_COUNT: 未割り当ての変数です\n</pre></div></div>\n\n<h4>\n<span id="等によるパス名展開の無効化--noglob" class="fragment"></span><a href="#%E7%AD%89%E3%81%AB%E3%82%88%E3%82%8B%E3%83%91%E3%82%B9%E5%90%8D%E5%B1%95%E9%96%8B%E3%81%AE%E7%84%A1%E5%8A%B9%E5%8C%96--noglob"><i class="fa fa-link"></i></a>「*」等によるパス名展開の無効化 : noglob</h4>\n\n<p>「-f」を指定するとパス名展開を無効化できる。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>bash <span class="nt">-f</span> test.sh \n<span class="nb">ls</span>: <span class="s1">\'/*\'</span> にアクセスできません: そのようなファイルやディレクトリはありません\n</pre></div></div>\n\n<h4>\n<span id="終了ステータスが0以外のものが検出した時点でスクリプトを終了" class="fragment"></span><a href="#%E7%B5%82%E4%BA%86%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%8C0%E4%BB%A5%E5%A4%96%E3%81%AE%E3%82%82%E3%81%AE%E3%81%8C%E6%A4%9C%E5%87%BA%E3%81%97%E3%81%9F%E6%99%82%E7%82%B9%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E7%B5%82%E4%BA%86"><i class="fa fa-link"></i></a>終了ステータスが0以外のものが検出した時点でスクリプトを終了</h4>\n\n<p>「-e」でコマンドの終了ステータスが「0」以外のときに後続のスクリプトを実行せずに終了します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>bash <span class="nt">-e</span> test.sh \n<span class="nb">ls</span>: <span class="s1">\'aa\'</span> にアクセスできません: そのようなファイルやディレクトリはありませ\n</pre></div></div>\n\n<h4>\n<span id="trapコマンドでシグナルをハンドル" class="fragment"></span><a href="#trap%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E3%82%92%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AB"><i class="fa fa-link"></i></a>trapコマンドでシグナルをハンドル</h4>\n\n<p>シグナルハンドラも設定できます。<br>\n下記を例にします。</p>\n\n<p>なんかしらの処理中にその処理を停止したい時があるとします。<br>\nその際に既に生成されているtmpファイルがCtrl + Cで止めるだけだと残っていまい自分で消す必要があります。<br>\ntrapコマンドを使用すればCtrl + Cで止めたあとの処理を記述することでその処理が行われます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat </span>test.sh \n<span class="c">#/bin/bash</span>\n\n<span class="nb">trap</span> <span class="s1">\'rm -f *.tmp\'</span> 1 2\n\n<span class="nb">touch </span>test1.tmp\n<span class="nb">touch </span>test2.tmp\n\n<span class="c"># なんかしらの処理</span>\n<span class="nb">sleep </span>30\n\n<span class="c"># その後にtmpを削除</span>\n<span class="nb">rm</span> <span class="nt">-f</span> <span class="k">*</span>.tmp\n</pre></div></div>\n\n<p>ちなみにtrapコマンドで指定できるシグナル一覧は「trap -l」で確認できます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">trap</span> <span class="nt">-l</span>\n 1<span class="o">)</span> SIGHUP       2<span class="o">)</span> SIGINT       3<span class="o">)</span> SIGQUIT      4<span class="o">)</span> SIGILL       5<span class="o">)</span> SIGTRAP\n 6<span class="o">)</span> SIGABRT      7<span class="o">)</span> SIGBUS       8<span class="o">)</span> SIGFPE       9<span class="o">)</span> SIGKILL     10<span class="o">)</span> SIGUSR1\n11<span class="o">)</span> SIGSEGV     12<span class="o">)</span> SIGUSR2     13<span class="o">)</span> SIGPIPE     14<span class="o">)</span> SIGALRM     15<span class="o">)</span> SIGTERM\n16<span class="o">)</span> SIGSTKFLT   17<span class="o">)</span> SIGCHLD     18<span class="o">)</span> SIGCONT     19<span class="o">)</span> SIGSTOP     20<span class="o">)</span> SIGTSTP\n21<span class="o">)</span> SIGTTIN     22<span class="o">)</span> SIGTTOU     23<span class="o">)</span> SIGURG      24<span class="o">)</span> SIGXCPU     25<span class="o">)</span> SIGXFSZ\n26<span class="o">)</span> SIGVTALRM   27<span class="o">)</span> SIGPROF     28<span class="o">)</span> SIGWINCH    29<span class="o">)</span> SIGIO       30<span class="o">)</span> SIGPWR\n31<span class="o">)</span> SIGSYS      34<span class="o">)</span> SIGRTMIN    35<span class="o">)</span> SIGRTMIN+1  36<span class="o">)</span> SIGRTMIN+2  37<span class="o">)</span> SIGRTMIN+3\n38<span class="o">)</span> SIGRTMIN+4  39<span class="o">)</span> SIGRTMIN+5  40<span class="o">)</span> SIGRTMIN+6  41<span class="o">)</span> SIGRTMIN+7  42<span class="o">)</span> SIGRTMIN+8\n43<span class="o">)</span> SIGRTMIN+9  44<span class="o">)</span> SIGRTMIN+10 45<span class="o">)</span> SIGRTMIN+11 46<span class="o">)</span> SIGRTMIN+12 47<span class="o">)</span> SIGRTMIN+13\n48<span class="o">)</span> SIGRTMIN+14 49<span class="o">)</span> SIGRTMIN+15 50<span class="o">)</span> SIGRTMAX-14 51<span class="o">)</span> SIGRTMAX-13 52<span class="o">)</span> SIGRTMAX-12\n53<span class="o">)</span> SIGRTMAX-11 54<span class="o">)</span> SIGRTMAX-10 55<span class="o">)</span> SIGRTMAX-9  56<span class="o">)</span> SIGRTMAX-8  57<span class="o">)</span> SIGRTMAX-7\n58<span class="o">)</span> SIGRTMAX-6  59<span class="o">)</span> SIGRTMAX-5  60<span class="o">)</span> SIGRTMAX-4  61<span class="o">)</span> SIGRTMAX-3  62<span class="o">)</span> SIGRTMAX-2\n63<span class="o">)</span> SIGRTMAX-1  64<span class="o">)</span> SIGRTMAX\n\n<span class="c"># ちなみにtrapコマンドの書式は下記</span>\n<span class="nb">trap</span> <span class="s1">\'コマンド\'</span> <span class="o">[</span>シグナル番号|シグナル名]\n</pre></div></div>\n\n<h4>\n<span id="パイプで渡したコマンドの終了ステータスを見る" class="fragment"></span><a href="#%E3%83%91%E3%82%A4%E3%83%97%E3%81%A7%E6%B8%A1%E3%81%97%E3%81%9F%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E7%B5%82%E4%BA%86%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%82%92%E8%A6%8B%E3%82%8B"><i class="fa fa-link"></i></a>パイプで渡したコマンドの終了ステータスを見る</h4>\n\n<p>変数PIPESTATUSを確認すれば各コマンドの終了ステータスが確認できます。<br>\n以下はgrepコマンドが検索に失敗しているので終了ステータスが1となっています。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">ls</span> | <span class="nb">grep</span> <span class="s2">"a"</span> | <span class="nb">wc</span> <span class="p">;</span> <span class="nb">echo</span> <span class="k">${</span><span class="nv">PIPESTATUS</span><span class="p">[@]</span><span class="k">}</span>\n      0       0       0\n0 1 0 <span class="c"># 終了ステータスを表示</span>\n\n</pre></div></div>\n\n<h4>\n<span id="デフォルトのシェルを変えたい" class="fragment"></span><a href="#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%AE%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%92%E5%A4%89%E3%81%88%E3%81%9F%E3%81%84"><i class="fa fa-link"></i></a>デフォルトのシェルを変えたい</h4>\n\n<p>使用できるシェルの種類を調べるには、/etc/shells を参照するか、もしくは、chsh -l コマンドを実行します。<br>\nシェルを変更するには、chsh コマンドを使用します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat</span> /etc/shells \n<span class="c"># /etc/shells: valid login shells</span>\n/bin/sh\n/bin/bash\n/bin/rbash\n/bin/dash\n</pre></div></div>\n\n<h2>\n<span id="組み込みコマンド" class="fragment"></span><a href="#%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>組み込みコマンド</h2>\n\n<p>組み込みコマンドは「help」と打てば見れます<br>\nその中でもよく使うものだけピックアップ</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">help\n</span>GNU bash, バージョン 4.4.19<span class="o">(</span>1<span class="o">)</span><span class="nt">-release</span> <span class="o">(</span>x86_64-pc-linux-gnu<span class="o">)</span>\nこれらのシェルコマンドは内部で定義されています。<span class="sb">`</span><span class="nb">help</span><span class="s1">\' と入力して一覧を参照してください。\n`help 名前\'</span> と入力すると <span class="sb">`</span>名前<span class="s1">\' という関数のより詳しい説明が得られます。\n\'</span>info bash<span class="s1">\' を使用するとシェル全般のより詳しい説明が得られます。\n`man -k\'</span> または info を使用すると一覧にないコマンドのより詳しい説明が得られます。\n\n名前の後にアスタリスク <span class="o">(</span><span class="k">*</span><span class="o">)</span> がある場合はそのコマンドが無効になっていることを意味します。\n\n job_spec <span class="o">[</span>&amp;]                                                     <span class="nb">history</span> <span class="o">[</span><span class="nt">-c</span><span class="o">]</span> <span class="o">[</span><span class="nt">-d</span> offset] <span class="o">[</span>n] または <span class="nb">history</span> <span class="nt">-anrw</span> <span class="o">[</span>filename]&gt;\n <span class="o">((</span> expression <span class="o">))</span>                                                 <span class="k">if </span>COMMANDS<span class="p">;</span> <span class="k">then </span>COMMANDS<span class="p">;</span> <span class="o">[</span> <span class="k">elif </span>COMMANDS<span class="p">;</span> <span class="k">then </span>COMMANDS<span class="p">;</span> <span class="o">]&gt;</span>\n <span class="nb">.</span> filename <span class="o">[</span>arguments]                                           <span class="nb">jobs</span> <span class="o">[</span><span class="nt">-lnprs</span><span class="o">]</span> <span class="o">[</span>jobspec ...] または <span class="nb">jobs</span> <span class="nt">-x</span> <span class="nb">command</span> <span class="o">[</span>args]\n :                                                                <span class="nb">kill</span> <span class="o">[</span><span class="nt">-s</span> sigspec | <span class="nt">-n</span> \n<span class="o">(</span>省略<span class="o">)</span>\n</pre></div></div>\n\n<h4>\n<span id="子プロセスの終了を待つwait" class="fragment"></span><a href="#%E5%AD%90%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E7%B5%82%E4%BA%86%E3%82%92%E5%BE%85%E3%81%A4wait"><i class="fa fa-link"></i></a>子プロセスの終了を待つ:wait</h4>\n\n<p>シェルから起動しているプログラムが終了するのを待つ。PIDを指定すればそのプロセスが終了するのを待ち、引数を指定しなかった場合はバックグラウンドで起動したすべてのプロセスの終了を待ち、終了ステータスとして0を返す。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c">#!/bin/bash</span>\ncommand1 &amp;\n<span class="nv">pid1</span><span class="o">=</span><span class="nv">$!</span>           <span class="c"># command1のプロセスIDを変数pid1に格納</span>\ncommand2 &amp;\n<span class="nv">pid2</span><span class="o">=</span><span class="nv">$!</span>           <span class="c"># command2のプロセスIDを変数pid2に格納</span>\ncommand3 &amp;\n<span class="nb">wait</span> <span class="nv">$pid1</span> <span class="nv">$pid2</span>  <span class="c"># command1、command2の終了を待つ</span>\ncommand4\n</pre></div></div>\n\n<h4>\n<span id="代入不可の変数readonly" class="fragment"></span><a href="#%E4%BB%A3%E5%85%A5%E4%B8%8D%E5%8F%AF%E3%81%AE%E5%A4%89%E6%95%B0readonly"><i class="fa fa-link"></i></a>代入不可の変数:readonly</h4>\n\n<p>変数の属性を読み込み専用に変更する</p>\n\n<h4>\n<span id="変数のスコープを指定local" class="fragment"></span><a href="#%E5%A4%89%E6%95%B0%E3%81%AE%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%82%92%E6%8C%87%E5%AE%9Alocal"><i class="fa fa-link"></i></a>変数のスコープを指定:local</h4>\n\n<p>シェル関数内において、そのシェル関数とその子関数内でのみ有効な変数を生成する。<br>\n変数のスコープ（有効範囲）が関数内であることを除けば、コマンドの意味や書式はdeclareと同じ。</p>\n\n<h4>\n<span id="オプション解析をしたいgetopts" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E8%A7%A3%E6%9E%90%E3%82%92%E3%81%97%E3%81%9F%E3%81%84getopts"><i class="fa fa-link"></i></a>オプション解析をしたい:getopts</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="k">while </span><span class="nb">getopts </span>a:h OPT\n<span class="k">do\n    case</span> <span class="nv">$OPT</span> <span class="k">in\n        </span>a<span class="p">)</span> <span class="nv">SOMEVAL</span><span class="o">=</span><span class="nv">$OPTARG</span>\n            <span class="p">;;</span>\n        h<span class="p">)</span> <span class="nb">help</span>\n            <span class="p">;;</span>\n        <span class="k">*</span><span class="p">)</span> <span class="nb">help</span>\n            <span class="p">;;</span>\n    <span class="k">esac</span>\n<span class="k">done\n\n</span><span class="nb">shift</span> <span class="k">$((</span> <span class="nv">$OPTIND</span> <span class="o">-</span> <span class="m">1</span> <span class="k">))</span>\n<span class="nv">TARGET</span><span class="o">=</span><span class="nv">$1</span>\n</pre></div></div>\n\n<h4>\n<span id="ファイルの種別判定" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%A8%AE%E5%88%A5%E5%88%A4%E5%AE%9A"><i class="fa fa-link"></i></a>ファイルの種別判定</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">alias </span><span class="nv">aliasname</span><span class="o">=</span><span class="s1">\'echo foo\'</span>\n<span class="nv">$ </span><span class="nb">type </span>aliasname\naliasname は <span class="sb">`</span><span class="nb">echo </span>foo<span class="s1">\' のエイリアスです\n$ function functionname { echo foo; }\n$ type functionname\n</span></pre></div></div>\n\n<h4>\n<span id="ヒアドキュメントで行頭のタブを無視" class="fragment"></span><a href="#%E3%83%92%E3%82%A2%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%A7%E8%A1%8C%E9%A0%AD%E3%81%AE%E3%82%BF%E3%83%96%E3%82%92%E7%84%A1%E8%A6%96"><i class="fa fa-link"></i></a>ヒアドキュメントで行頭のタブを無視</h4>\n\n<p>ヒアドキュメントを書くときにインデントでタブを入れるが表示には不要なときに使える<br>\n「&lt;&lt;」ではなく「&lt;&lt;-」にするだけで使える。<br>\nスペースは取ってくれないので注意</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat </span>test.sh \n<span class="c">#!/bin/bash</span>\n\nusage<span class="o">()</span>\n<span class="o">{</span>\n    <span class="nb">cat</span> <span class="o">&lt;&lt;-</span> <span class="no">_EOF</span><span class="sh">\n    aaa\n    bbb\n c # これはスペースなのでだめ\n</span><span class="no">    _EOF\n\n</span>    <span class="nb">exit </span>1\n<span class="o">}</span>\n\nusage\n\n<span class="nv">$ </span>bash test.sh \naaa\nbbb\n c\n</pre></div></div>\n\n<h4>\n<span id="余談組み込みコマンドって何" class="fragment"></span><a href="#%E4%BD%99%E8%AB%87%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A3%E3%81%A6%E4%BD%95"><i class="fa fa-link"></i></a>余談：組み込みコマンドって何？</h4>\n\n<p>組み込みコマンドとはbash自体に実装されているコマンドであり、bashの振る舞いを変更したり、制御構文として機能したりするコマンドが用意されている。<br>\n組み込みコマンドと外部コマンドどちらにも存在するコマンドとして有名なのがechoです。基本的にシェルスクリプト内でechoを実行すると組み込みコマンドが呼ばれる仕組みとなっています。これは高速化が目的です。<br>\n以下のように外部コマンドと組み込みコマンドの差を見てみました。結果は一目瞭然。組み込みコマンドの方が高速ですね。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 組み込みコマンド</span>\n<span class="nv">$ </span><span class="nb">time</span> <span class="o">(</span><span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>0<span class="p">;</span>i&lt;10000<span class="p">;</span>i++<span class="o">))</span> <span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="s2">"aaa bbb ccc"</span> <span class="o">&gt;</span>/dev/null<span class="p">;</span> <span class="k">done</span><span class="o">)</span>\nreal    0m0.095s\nuser    0m0.054s\nsys 0m0.039s\n\n<span class="c"># 外部コマンド</span>\n<span class="nv">$ </span><span class="nb">time</span> <span class="o">(</span><span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>0<span class="p">;</span>i&lt;10000<span class="p">;</span>i++<span class="o">))</span> <span class="p">;</span> <span class="k">do</span> /bin/echo <span class="s2">"aaa bbb ccc"</span> <span class="o">&gt;</span>/dev/null<span class="p">;</span> <span class="k">done</span><span class="o">)</span>\nreal    0m13.287s\nuser    0m7.575s\nsys 0m2.242s\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>意外と忘れがちなことを列挙してみた。<br>\n便利な機能はまだまだたくさんあると思うのでぜひとも教えてください</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://qiita.com/rsooo/items/ef1d036bcc7282a66d7d" id="reference-bf48200a1e42e5e2c4e8">検索ではあんまり出ないbashの便利技</a><br>\n<a href="https://laboradian.com/use-set-in-bash-shell-scripts/" rel="nofollow noopener" target="_blank">シェルスクリプト (Bash) では組み込みコマンド set を活用しましょう</a><br>\n<a href="http://d.hatena.ne.jp/anmino/20090805/1249502378" rel="nofollow noopener" target="_blank">bash - 組み込みコマンド</a></p>\n', 'body': '![Bash-Final.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/efb5999f-66ac-ed91-08d6-fc5efe4b8f25.jpeg)\n\n## 背景\n\nシェルスクリプトを書くことが結構あるのでその備忘録代わりに記事を書いてみました。\n\n## 特殊変数とは\n\n特殊変数とは\nシェルによって自動的に値が設定される特殊な変数がいくつかあり、それら特殊な変数を参照することにより、様々な情報を取得することができる。\n\n| 変数名 | 説明 |\n|---|---|\n| $$ | 実行シェルのプロセス番号(自分のPID)を格納する変数。 |\n| $? | コマンドの戻り値|\n| $! | 最後に呼び出されたバックグラウンドプロセスのプロセス番号を格納する変数。 |\n| $- | setで設定されたオプション |\n| $1 | シェルスクリプト実行時に指定された引数を格納する変数。 |\n| $# | 引数の個数 |\n| $0 | シェルスクリプト自身のファイル名フルパス |\n| $n | シェルスクリプトに与えられた引数を格納する変数。nは1,2,3…と指定できる。 |\n| $@ | 実行時のコマンド名 |\n| $* | シェルスクリプト実行時に指定された全引数が設定される変数を格納する変数。<br /> 出力に関してはデリミタを格納する環境変数 IFS の影響を受けない。 |\n| ${@:X:Y} | 複数のパラメータのうち、X番目以降のY個のデータを取得するための変数を格納する変数。 |\n| !$ | 最後に実行されたコマンドに指定していた引数を格納する変数。 |\n| $PIPESTATUS | パイプで連結した各コマンドの終了ステータスが設定される変数。 |\n| $LINENO | この変数を使用している行の行番号が設定される変数。  |\n\n## 基本機能\n\nbashの基本機能で使いやすい機能をご紹介\n\n#### 文法チェックをしたい : noexec\n\n「-n」をつけて実行することでスクリプト内のコマンドは実行されずに文法のみをチェックしてくれる。\n\n``` bash \n# 文法エラーありパターン\n$ bash -n test.sh \ntest.sh: 行 5: 予期しないトークン `done\' 周辺に構文エラーがあります\ntest.sh: 行 5: `done\'\n\n# 文法エラーなしパターン\n$ bash -n test.sh\n$ \n```\n\n#### 実行内容のトレース : xtrace\n\n「-x」をつけることでスクリプトの実行内容を出力できる\nどのコマンドまで処理が行われたかどういった処理でエラーとなったのかを検出するときに使えます。\n\n``` bash\nbash -x test.sh \n+ LOOP_COUNT=3\n++ seq 0 3\n+ for i in `seq 0 ${LOOP_COUNT}`\n+ ls -la\n++ date\n+ echo\n\n+ for i in `seq 0 ${LOOP_COUNT}`\n+ ls -la\n++ date\n+ echo\n\n+ for i in `seq 0 ${LOOP_COUNT}`\n+ ls -la\n++ date\n+ echo\n\n+ for i in `seq 0 ${LOOP_COUNT}`\n+ ls -la\n++ date\n+ echo\n```\n\n#### 未定義変数を検出 : nounset\n\n「-u」を指定することで未定義の変数を検出してくれます。未定義変数を許可したい場合には使えないので注意が必要。\n都度ifで判定とかが回避策になるのでしょうか？\n\n``` bash\n$ bash -u test.sh \ntest.sh: 行 5: LOOP_COUNT: 未割り当ての変数です\n```\n\n#### 「*」等によるパス名展開の無効化 : noglob\n\n「-f」を指定するとパス名展開を無効化できる。\n\n``` bash\n$ bash -f test.sh \nls: \'/*\' にアクセスできません: そのようなファイルやディレクトリはありません\n```\n\n#### 終了ステータスが0以外のものが検出した時点でスクリプトを終了\n\n「-e」でコマンドの終了ステータスが「0」以外のときに後続のスクリプトを実行せずに終了します。\n\n``` bash\nbash -e test.sh \nls: \'aa\' にアクセスできません: そのようなファイルやディレクトリはありませ\n```\n\n#### trapコマンドでシグナルをハンドル\n\nシグナルハンドラも設定できます。\n下記を例にします。\n\nなんかしらの処理中にその処理を停止したい時があるとします。\nその際に既に生成されているtmpファイルがCtrl + Cで止めるだけだと残っていまい自分で消す必要があります。\ntrapコマンドを使用すればCtrl + Cで止めたあとの処理を記述することでその処理が行われます。\n\n``` bash\n$ cat test.sh \n#/bin/bash\n\ntrap \'rm -f *.tmp\' 1 2\n\ntouch test1.tmp\ntouch test2.tmp\n\n# なんかしらの処理\nsleep 30\n\n# その後にtmpを削除\nrm -f *.tmp\n```\n\nちなみにtrapコマンドで指定できるシグナル一覧は「trap -l」で確認できます。\n\n``` bash\n$ trap -l\n 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP\n 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1\n11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM\n16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP\n21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ\n26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR\n31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3\n38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8\n43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13\n48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12\n53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7\n58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2\n63) SIGRTMAX-1  64) SIGRTMAX\n\n# ちなみにtrapコマンドの書式は下記\ntrap \'コマンド\' [シグナル番号|シグナル名]\n```\n\n#### パイプで渡したコマンドの終了ステータスを見る\n\n変数PIPESTATUSを確認すれば各コマンドの終了ステータスが確認できます。\n以下はgrepコマンドが検索に失敗しているので終了ステータスが1となっています。\n\n``` bash\n$ ls | grep "a" | wc ; echo ${PIPESTATUS[@]}\n      0       0       0\n0 1 0 # 終了ステータスを表示\n\n```\n\n#### デフォルトのシェルを変えたい\n\n使用できるシェルの種類を調べるには、/etc/shells を参照するか、もしくは、chsh -l コマンドを実行します。\nシェルを変更するには、chsh コマンドを使用します。\n\n``` bash\n$ cat /etc/shells \n# /etc/shells: valid login shells\n/bin/sh\n/bin/bash\n/bin/rbash\n/bin/dash\n```\n\n## 組み込みコマンド\n\n組み込みコマンドは「help」と打てば見れます\nその中でもよく使うものだけピックアップ\n\n``` bash\n$ help\nGNU bash, バージョン 4.4.19(1)-release (x86_64-pc-linux-gnu)\nこれらのシェルコマンドは内部で定義されています。`help\' と入力して一覧を参照してください。\n`help 名前\' と入力すると `名前\' という関数のより詳しい説明が得られます。\n\'info bash\' を使用するとシェル全般のより詳しい説明が得られます。\n`man -k\' または info を使用すると一覧にないコマンドのより詳しい説明が得られます。\n\n名前の後にアスタリスク (*) がある場合はそのコマンドが無効になっていることを意味します。\n\n job_spec [&]                                                     history [-c] [-d offset] [n] または history -anrw [filename]>\n (( expression ))                                                 if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]>\n . filename [arguments]                                           jobs [-lnprs] [jobspec ...] または jobs -x command [args]\n :                                                                kill [-s sigspec | -n \n(省略)\n```\n\n#### 子プロセスの終了を待つ:wait\n\nシェルから起動しているプログラムが終了するのを待つ。PIDを指定すればそのプロセスが終了するのを待ち、引数を指定しなかった場合はバックグラウンドで起動したすべてのプロセスの終了を待ち、終了ステータスとして0を返す。\n\n``` bash\n#!/bin/bash\ncommand1 &\npid1=$!           # command1のプロセスIDを変数pid1に格納\ncommand2 &\npid2=$!           # command2のプロセスIDを変数pid2に格納\ncommand3 &\nwait $pid1 $pid2  # command1、command2の終了を待つ\ncommand4\n```\n\n#### 代入不可の変数:readonly\n\n変数の属性を読み込み専用に変更する\n\n#### 変数のスコープを指定:local\n\nシェル関数内において、そのシェル関数とその子関数内でのみ有効な変数を生成する。\n変数のスコープ（有効範囲）が関数内であることを除けば、コマンドの意味や書式はdeclareと同じ。\n\n#### オプション解析をしたい:getopts\n\n``` bash\nwhile getopts a:h OPT\ndo\n    case $OPT in\n        a) SOMEVAL=$OPTARG\n            ;;\n        h) help\n            ;;\n        *) help\n            ;;\n    esac\ndone\n\nshift $(( $OPTIND - 1 ))\nTARGET=$1\n```\n\n#### ファイルの種別判定\n\n``` bash\n$ alias aliasname=\'echo foo\'\n$ type aliasname\naliasname は `echo foo\' のエイリアスです\n$ function functionname { echo foo; }\n$ type functionname\n```\n\n#### ヒアドキュメントで行頭のタブを無視\n\nヒアドキュメントを書くときにインデントでタブを入れるが表示には不要なときに使える\n「<<」ではなく「<<-」にするだけで使える。\nスペースは取ってくれないので注意\n\n``` bash\n$ cat test.sh \n#!/bin/bash\n\nusage()\n{\n\tcat <<- _EOF\n\taaa\n\tbbb\n c # これはスペースなのでだめ\n\t_EOF\n\n\texit 1\n}\n\nusage\n\n$ bash test.sh \naaa\nbbb\n c\n```\n\n#### 余談：組み込みコマンドって何？\n\n組み込みコマンドとはbash自体に実装されているコマンドであり、bashの振る舞いを変更したり、制御構文として機能したりするコマンドが用意されている。\n組み込みコマンドと外部コマンドどちらにも存在するコマンドとして有名なのがechoです。基本的にシェルスクリプト内でechoを実行すると組み込みコマンドが呼ばれる仕組みとなっています。これは高速化が目的です。\n以下のように外部コマンドと組み込みコマンドの差を見てみました。結果は一目瞭然。組み込みコマンドの方が高速ですね。\n\n``` bash\n# 組み込みコマンド\n$ time (for ((i=0;i<10000;i++)) ; do echo "aaa bbb ccc" >/dev/null; done)\nreal\t0m0.095s\nuser\t0m0.054s\nsys\t0m0.039s\n\n# 外部コマンド\n$ time (for ((i=0;i<10000;i++)) ; do /bin/echo "aaa bbb ccc" >/dev/null; done)\nreal\t0m13.287s\nuser\t0m7.575s\nsys\t0m2.242s\n```\n\n## まとめ\n\n意外と忘れがちなことを列挙してみた。\n便利な機能はまだまだたくさんあると思うのでぜひとも教えてください\n\n## 参考リンク\n\n[検索ではあんまり出ないbashの便利技](https://qiita.com/rsooo/items/ef1d036bcc7282a66d7d)\n[シェルスクリプト (Bash) では組み込みコマンド set を活用しましょう](https://laboradian.com/use-set-in-bash-shell-scripts/)\n[bash - 組み込みコマンド](http://d.hatena.ne.jp/anmino/20090805/1249502378)\n', 'coediting': False, 'comments_count': 8, 'created_at': '2019-02-02T22:35:03+09:00', 'group': None, 'id': '3354322b5d57e7215e18', 'likes_count': 596, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Bash', 'versions': []}, {'name': 'Linux', 'versions': []}], 'title': 'bashで忘れがちな機能とかいろいろの備忘録', 'updated_at': '2019-02-05T16:53:35+09:00', 'url': 'https://qiita.com/ryuichi1208/items/3354322b5d57e7215e18', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/4ee38bed1da32a2617469e1e42c2a046ef949a92/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36663934613832342d646666322d363764632d303730382d3466366533326162633464342e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/4ee38bed1da32a2617469e1e42c2a046ef949a92/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36663934613832342d646666322d363764632d303730382d3466366533326162633464342e6a706567" alt="hi_md01.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/6f94a824-dff2-67dc-0708-4f6e32abc4d4.jpeg"></a></p>\n\n<p>統一モデリング言語</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>UMLについて雰囲気で読んだり都度意味を調べたりして読んでいました。<br>\n書く機会には恵まれず自分で書いたことは無いのですが、今後は書く機会があるかもしれないと思い一旦知識の整理としてそれぞれの意味について調べたので記事にします。</p>\n\n<h2>\n<span id="umlとは" class="fragment"></span><a href="#uml%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>UMLとは</h2>\n\n<p>UML(Unified Modeling Language)は統一モデリング言語と言われ。ソフトウェアの成果物を仕様化、図式化するときに使用する。UMLとして表記法は統一されているが開発プロセスについては統一されていない</p>\n\n<p>UMLを使用した開発では反復型開発プロセスが用いられる。<br>\n「要求分析」「分析」「設計」「実装」「テスト」の各工程を繰り返しながら開発を進める。<br>\nリスクが高いものや優先度が高いものは初期の繰り返しに計画し実施する</p>\n\n<p>メリットは以下4点</p>\n\n<ul>\n<li>システムのリスクを早期に発見し回避できる</li>\n<li>仕様変更に対する柔軟な対応ができる</li>\n<li>繰り返し行うことにより品質が向上する</li>\n<li>分割で1つの作業単位が小さくなるので複雑さが低減する</li>\n</ul>\n\n<p>各工程それぞれで使用する図のまとめは下記</p>\n\n<ul>\n<li>要求分析\n\n<ul>\n<li>ユースケース図</li>\n<li>アクティビティ図</li>\n</ul>\n</li>\n<li>分析\n\n<ul>\n<li>クラス図</li>\n<li>シーケンス図</li>\n<li>コミュニケーション図</li>\n<li>ステートマシン図</li>\n<li>オブジェクト図</li>\n<li>相互作用概要図</li>\n</ul>\n</li>\n<li>設計\n\n<ul>\n<li>クラス図</li>\n<li>シーケンス図</li>\n<li>コミュニケーション図</li>\n<li>ステートマシン図</li>\n<li>オブジェクト図</li>\n<li>相互作用概要図</li>\n<li>アクティビティ図</li>\n<li>コンポーネント図</li>\n<li>配置図</li>\n<li>合成構成図</li>\n<li>タイミング図</li>\n<li>パッケージ図</li>\n</ul>\n</li>\n<li>実装</li>\n<li>テスト</li>\n</ul>\n\n<p>モデリングとは、抽象化された概念をもとに分析領域の全体像をビジュアル化し、わかりやすく表現すること。<br>\nモデリングを行うことで対象領域を誰もが理解できるように目に見える形に作り上げることができる。</p>\n\n<h2>\n<span id="ユースケース図" class="fragment"></span><a href="#%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E5%9B%B3"><i class="fa fa-link"></i></a>ユースケース図</h2>\n\n<p>ユーザの視点から、システムに対して要求する機能を表現する。<br>\nシステム開発者から見た場合はシステムが提供すべき機能を表現する。<br>\nまた、ユースケース図はシステム開発の初期段階で使用する。</p>\n\n<p>ユースケース図を用いる目的は3点</p>\n\n<ul>\n<li>開発対象システムの主要機能を明確にする</li>\n<li>開発対象範囲を明確にする</li>\n<li>開発対象システムと外部との関係を明確にする</li>\n</ul>\n\n<p>ユースケースのサイズはアクターからみて、1つのユースケースを終了すれば目的が達成されており、かつ1つのユースケースの中では中断が行われないことを目安にする。</p>\n\n<h4>\n<span id="イベントフロー" class="fragment"></span><a href="#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%95%E3%83%AD%E3%83%BC"><i class="fa fa-link"></i></a>イベントフロー</h4>\n\n<p>イベントフローでは1つのユースケースにおけるすべての流れを、汎用的に記述します。<br>\nイベントフローでは次の項目ごとに記述します。</p>\n\n<ul>\n<li>事前条件・・・ユースケースを開始するための制約や条件</li>\n<li>事後条件・・・ユースケースが終了した後の制約や条件</li>\n<li>基本フロー・・・イベントフローのもっとも一般的な流れ</li>\n<li>代替フロー・・・基本フローより頻度が少ない正常な流れ</li>\n<li>例外フロー・・・正常終了しない流れ</li>\n</ul>\n\n<h2>\n<span id="クラス図" class="fragment"></span><a href="#%E3%82%AF%E3%83%A9%E3%82%B9%E5%9B%B3"><i class="fa fa-link"></i></a>クラス図</h2>\n\n<p>クラスとクラスの静的な関係を表現する。<br>\nユースケース図ではユーザから見たシステムの機能を考えたが分析段階のクラス図では、ユースケース図の時と同様にユーザ視点に立ち、どのような物や概念があるかを考える。</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>属性名 : 属性の型 = 初期値\n操作名(引数名 : 引数の型) : 戻り値の型\n</pre></div></div>\n\n<p>クラス間に依存関係は次の場合に使用する</p>\n\n<ul>\n<li>引数として参照するとき</li>\n<li>ローカル変数として参照するとき</li>\n<li>グローバル変数として参照するとき</li>\n</ul>\n\n<h4>\n<span id="可視性" class="fragment"></span><a href="#%E5%8F%AF%E8%A6%96%E6%80%A7"><i class="fa fa-link"></i></a>可視性</h4>\n\n<ul>\n<li>+  public ： 全てにおいて参照可能</li>\n<li>-  private ： 自クラスでのみ参照可能</li>\n<li>#  protected ： 自クラス及びその派生クラスにおいて参照可能</li>\n<li>~  package ： 同パッケージ内で参照可能</li>\n</ul>\n\n<h2>\n<span id="シーケンス図" class="fragment"></span><a href="#%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E5%9B%B3"><i class="fa fa-link"></i></a>シーケンス図</h2>\n\n<p>シーケンス図はライフライン同士のメッセージを上から下に、順番に配置する。<br>\n処理の順番が明確な場合に時系列に沿って処理の流れを表現するのに適している。<br>\nビジネス系のシステムでは一般的に処理の順番が明確な場合が多いのでシーケンス図がよく利用される。</p>\n\n<p>矢印の先端を塗りつぶすと同期メッセージ、普通の矢印の場合は非同期メッセージ、点線矢印で同期メッセージの戻りを表現します。</p>\n\n<p>あるライフラインが自分自身に対してメッセージを送信する場合、再帰呼び出しで表現することができる。<br>\n再帰呼び出しは、ライフラインの点線から出たメッセージを折り曲げて表記する。</p>\n\n<h2>\n<span id="コミュニケーション図" class="fragment"></span><a href="#%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%B3"><i class="fa fa-link"></i></a>コミュニケーション図</h2>\n\n<p>コミュニケーション図は、シーケンス図と同じ相互作用図の一つです。シーケンス図では処理の順番を考え、それに従いメッセージを上から下へ配置したが、そコミュニケーション図ではライフラインを中心にメッセージの送信を考えます。</p>\n\n<p>コミュニケーション図はライフラインを中心に、ライフライン同士の関係を明確にした上で、メッセージのやり取りを表現します。シーケンス図の場合は上から下へでしたがコミュニケーション図の場合はそのようなルールがありません、なのでシーケンス番号で代用します。</p>\n\n<h2>\n<span id="ステートマシン図" class="fragment"></span><a href="#%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%9E%E3%82%B7%E3%83%B3%E5%9B%B3"><i class="fa fa-link"></i></a>ステートマシン図</h2>\n\n<p>相互作用図ではライフライン同士におけるメッセージのやり取りで、システムの動的な振る舞いを表現してきました。それに対してステートマシン図では。1つのオブジェクトの生成から消滅までに時間の経過に伴って変化する状態について表現します。<br>\n主に組み込み系の開発においては必須となっています。</p>\n\n<h2>\n<span id="アクティビティ図" class="fragment"></span><a href="#%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3%E5%9B%B3"><i class="fa fa-link"></i></a>アクティビティ図</h2>\n\n<p>アクティビティ図はシステムや業務の流れを表現するのに使用します。</p>\n\n<h4>\n<span id="アクティビティ図のモデリング" class="fragment"></span><a href="#%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3%E5%9B%B3%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>アクティビティ図のモデリング</h4>\n\n<p>処理を順番に並べて矢印で接続していきます。処理の流れを最初に開始状態、処理の流れの最後に終了状態を配置します。<br>\n処理の分岐にはデンジョンノードを用いて表現する。</p>\n\n<h2>\n<span id="コンポーネント図" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%9B%B3"><i class="fa fa-link"></i></a>コンポーネント図</h2>\n\n<p>コンポーネント図はソフトウェアコンポーネント構成を表現します。ソフトウェアコンポーネントとは、あらかじめ決められたインターフェースを持った再利用部品です。それぞれの再利用部品をコンポーネントで表記し、ファイル関係はコンポーネント依存関係で接続して表現します。</p>\n\n<h2>\n<span id="配置図" class="fragment"></span><a href="#%E9%85%8D%E7%BD%AE%E5%9B%B3"><i class="fa fa-link"></i></a>配置図</h2>\n\n<p>コンポーネント図ではシステムを構成しているソフトウェアコンポーネントを表現しました。しかし、実行時にその物理的なファイルを配置するハードウェア構成についても表現する必要があります。配置図はコンピュータやプリンタといった機器やネットワーク接続関係など、システムのハードウェア構成を表現します。</p>\n\n<p>一般的にノードにはコンピュータやプリンタなどハードウェアを表現する装置と、OS等のソフトウェアを表現する実行環境があります。ノードは立方体で表現し、ノード名を中に記述します。ノードが装置の場合はステレオタイプ&lt;&gt;のをノード名の上につけます。</p>\n\n<h2>\n<span id="umlのデメリット" class="fragment"></span><a href="#uml%E3%81%AE%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88"><i class="fa fa-link"></i></a>UMLのデメリット</h2>\n\n<p>UMLには以下のようなデメリットが挙げられています。<br>\nこれらをうまく理解し利用していく必要があります。特に学習コストに関し、UMLのバージョンが上がるにつれて複雑化していくので問題視されていることが多いようです。</p>\n\n<ul>\n<li>言語肥大</li>\n<li>学習と採用に関する問題</li>\n<li>コードとの同期問題</li>\n<li>インピーダンス不整合</li>\n<li>見た目の不統一感</li>\n<li>八方美人</li>\n</ul>\n\n<p>これらの詳細についてはwikiをご参照ください。<br>\n<a href="https://ja.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E" rel="nofollow noopener" target="_blank">統一モデリング言語</a></p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>とりあえずメインどころを調べて記載してみました。<br>\n雰囲気で読んで勘違いとかする可能性がこれで少しでも減るといいなって甘い考えです（笑）</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="http://www.itsenka.com/contents/development/uml/" rel="nofollow noopener" target="_blank">UML入門</a><br>\n<a href="https://qiita.com/github129/items/80d39f2f043489033076" id="reference-c1243253a60510b7ca39">よく聞くUMLって何？</a></p>\n', 'body': '![hi_md01.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/6f94a824-dff2-67dc-0708-4f6e32abc4d4.jpeg)\n\n統一モデリング言語\n\n## 背景\n\nUMLについて雰囲気で読んだり都度意味を調べたりして読んでいました。\n書く機会には恵まれず自分で書いたことは無いのですが、今後は書く機会があるかもしれないと思い一旦知識の整理としてそれぞれの意味について調べたので記事にします。\n\n## UMLとは\n\nUML(Unified Modeling Language)は統一モデリング言語と言われ。ソフトウェアの成果物を仕様化、図式化するときに使用する。UMLとして表記法は統一されているが開発プロセスについては統一されていない\n\nUMLを使用した開発では反復型開発プロセスが用いられる。\n「要求分析」「分析」「設計」「実装」「テスト」の各工程を繰り返しながら開発を進める。\nリスクが高いものや優先度が高いものは初期の繰り返しに計画し実施する\n\nメリットは以下4点\n\n* システムのリスクを早期に発見し回避できる\n* 仕様変更に対する柔軟な対応ができる\n* 繰り返し行うことにより品質が向上する\n* 分割で1つの作業単位が小さくなるので複雑さが低減する\n\n各工程それぞれで使用する図のまとめは下記\n\n- 要求分析\n  - ユースケース図\n  - アクティビティ図\n- 分析\n  - クラス図\n  - シーケンス図\n  - コミュニケーション図\n  - ステートマシン図\n  - オブジェクト図\n  - 相互作用概要図\n- 設計\n  - クラス図\n  - シーケンス図\n  - コミュニケーション図\n  - ステートマシン図\n  - オブジェクト図\n  - 相互作用概要図\n  - アクティビティ図\n  - コンポーネント図\n  - 配置図\n  - 合成構成図\n  - タイミング図\n  - パッケージ図\n- 実装\n- テスト\n\nモデリングとは、抽象化された概念をもとに分析領域の全体像をビジュアル化し、わかりやすく表現すること。\nモデリングを行うことで対象領域を誰もが理解できるように目に見える形に作り上げることができる。\n\n## ユースケース図\n\nユーザの視点から、システムに対して要求する機能を表現する。\nシステム開発者から見た場合はシステムが提供すべき機能を表現する。\nまた、ユースケース図はシステム開発の初期段階で使用する。\n\nユースケース図を用いる目的は3点\n\n* 開発対象システムの主要機能を明確にする\n* 開発対象範囲を明確にする\n* 開発対象システムと外部との関係を明確にする\n\nユースケースのサイズはアクターからみて、1つのユースケースを終了すれば目的が達成されており、かつ1つのユースケースの中では中断が行われないことを目安にする。\n\n#### イベントフロー\n\nイベントフローでは1つのユースケースにおけるすべての流れを、汎用的に記述します。\nイベントフローでは次の項目ごとに記述します。\n\n* 事前条件・・・ユースケースを開始するための制約や条件\n* 事後条件・・・ユースケースが終了した後の制約や条件\n* 基本フロー・・・イベントフローのもっとも一般的な流れ\n* 代替フロー・・・基本フローより頻度が少ない正常な流れ\n* 例外フロー・・・正常終了しない流れ\n\n## クラス図\n\nクラスとクラスの静的な関係を表現する。\nユースケース図ではユーザから見たシステムの機能を考えたが分析段階のクラス図では、ユースケース図の時と同様にユーザ視点に立ち、どのような物や概念があるかを考える。\n\n```\n属性名 : 属性の型 = 初期値\n操作名(引数名 : 引数の型) : 戻り値の型\n```\n\nクラス間に依存関係は次の場合に使用する\n\n* 引数として参照するとき\n* ローカル変数として参照するとき\n* グローバル変数として参照するとき\n\n#### 可視性\n- +\t public ： 全てにおいて参照可能\n- -\t private ： 自クラスでのみ参照可能\n- #\t protected ： 自クラス及びその派生クラスにおいて参照可能\n- ~\t package ： 同パッケージ内で参照可能\n\n## シーケンス図\n\nシーケンス図はライフライン同士のメッセージを上から下に、順番に配置する。\n処理の順番が明確な場合に時系列に沿って処理の流れを表現するのに適している。\nビジネス系のシステムでは一般的に処理の順番が明確な場合が多いのでシーケンス図がよく利用される。\n\n矢印の先端を塗りつぶすと同期メッセージ、普通の矢印の場合は非同期メッセージ、点線矢印で同期メッセージの戻りを表現します。\n\nあるライフラインが自分自身に対してメッセージを送信する場合、再帰呼び出しで表現することができる。\n再帰呼び出しは、ライフラインの点線から出たメッセージを折り曲げて表記する。\n\n## コミュニケーション図\n\nコミュニケーション図は、シーケンス図と同じ相互作用図の一つです。シーケンス図では処理の順番を考え、それに従いメッセージを上から下へ配置したが、そコミュニケーション図ではライフラインを中心にメッセージの送信を考えます。\n\nコミュニケーション図はライフラインを中心に、ライフライン同士の関係を明確にした上で、メッセージのやり取りを表現します。シーケンス図の場合は上から下へでしたがコミュニケーション図の場合はそのようなルールがありません、なのでシーケンス番号で代用します。\n\n## ステートマシン図\n\n相互作用図ではライフライン同士におけるメッセージのやり取りで、システムの動的な振る舞いを表現してきました。それに対してステートマシン図では。1つのオブジェクトの生成から消滅までに時間の経過に伴って変化する状態について表現します。\n主に組み込み系の開発においては必須となっています。\n\n## アクティビティ図\n\nアクティビティ図はシステムや業務の流れを表現するのに使用します。\n\n#### アクティビティ図のモデリング\n\n処理を順番に並べて矢印で接続していきます。処理の流れを最初に開始状態、処理の流れの最後に終了状態を配置します。\n処理の分岐にはデンジョンノードを用いて表現する。\n\n## コンポーネント図\n\nコンポーネント図はソフトウェアコンポーネント構成を表現します。ソフトウェアコンポーネントとは、あらかじめ決められたインターフェースを持った再利用部品です。それぞれの再利用部品をコンポーネントで表記し、ファイル関係はコンポーネント依存関係で接続して表現します。\n\n## 配置図\n\nコンポーネント図ではシステムを構成しているソフトウェアコンポーネントを表現しました。しかし、実行時にその物理的なファイルを配置するハードウェア構成についても表現する必要があります。配置図はコンピュータやプリンタといった機器やネットワーク接続関係など、システムのハードウェア構成を表現します。\n\n一般的にノードにはコンピュータやプリンタなどハードウェアを表現する装置と、OS等のソフトウェアを表現する実行環境があります。ノードは立方体で表現し、ノード名を中に記述します。ノードが装置の場合はステレオタイプ<<device>>のをノード名の上につけます。\n\n## UMLのデメリット\n\nUMLには以下のようなデメリットが挙げられています。\nこれらをうまく理解し利用していく必要があります。特に学習コストに関し、UMLのバージョンが上がるにつれて複雑化していくので問題視されていることが多いようです。\n\n- 言語肥大\n- 学習と採用に関する問題\n- コードとの同期問題\n- インピーダンス不整合\n- 見た目の不統一感\n- 八方美人\n\nこれらの詳細についてはwikiをご参照ください。\n[統一モデリング言語](https://ja.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)\n\n## まとめ\n\nとりあえずメインどころを調べて記載してみました。\n雰囲気で読んで勘違いとかする可能性がこれで少しでも減るといいなって甘い考えです（笑）\n\n## 参考リンク\n\n[UML入門](http://www.itsenka.com/contents/development/uml/)\n[よく聞くUMLって何？](https://qiita.com/github129/items/80d39f2f043489033076)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-01-30T23:17:00+09:00', 'group': None, 'id': 'e69028193baca5643fe4', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': '開発環境', 'versions': []}, {'name': 'uml', 'versions': []}, {'name': '開発プロセス', 'versions': []}], 'title': 'UMLってなんだろう「UMLに入門するための前提知識」', 'updated_at': '2019-01-30T23:17:49+09:00', 'url': 'https://qiita.com/ryuichi1208/items/e69028193baca5643fe4', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/f0bec63e621b277a320eb3d0c137c9593bb170ff/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65616161336237352d396565312d663438632d653137342d3161633935383935336536302e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/f0bec63e621b277a320eb3d0c137c9593bb170ff/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65616161336237352d396565312d663438632d653137342d3161633935383935336536302e706e67" alt="timthumb.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/eaaa3b75-9ee1-f48c-e174-1ac958953e60.png"></a></p>\n\n<p>dstat - versatile tool for generating system resource statistics</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>mpstatやらvmstatやらでリソース監視をやっていたらターミナルの数が無限に増えていくのに嫌気がさした。<br>\nちょっと調べてみるとdstatというコマンドがいろいろ見れて便利って聞いたので紹介してみます。</p>\n\n<h2>\n<span id="dstatとは" class="fragment"></span><a href="#dstat%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>dstatとは</h2>\n\n<p>dstatとは簡単に説明するとCPU負荷をコアごと、IO負荷をディスクごと、ネットワーク転送量をインターフェイスごとに表示できるコマンド。<br>\ntopやiostat,netstatを使って監視しているリソースがコマンド一つで監視できます。</p>\n\n<p>GitHubにてソースは公開されています。言語はPython<br>\n<a href="https://github.com/dagwieers/dstat" rel="nofollow noopener" target="_blank">dagwieers/dstat</a></p>\n\n<p>公式サイト<br>\n<a href="http://dag.wiee.rs/home-made/dstat/" class="autolink" rel="nofollow noopener" target="_blank">http://dag.wiee.rs/home-made/dstat/</a></p>\n\n<h2>\n<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> dstat\n<span class="nv">$ </span><span class="nb">sudo </span>yum istall <span class="nt">-y</span> dstat\n\n<span class="c"># GitHubからも取ってこれます(Pythonの必要なパッケージは自前で用意する必要あり)。</span>\n<span class="nv">$ </span>git clone https://github.com/dagwieers/dstat.git\n<span class="nv">$ </span><span class="nb">cd </span>dstat/\n<span class="nv">$ </span>./dstat\n\n<span class="c"># バージョン確認</span>\n<span class="nv">$ </span>dstat <span class="nt">-V</span>\nDstat 0.7.3\nWritten by Dag Wieers &lt;dag@wieers.com&gt;\nHomepage at http://dag.wieers.com/home-made/dstat/\n</pre></div></div>\n\n<h2>\n<span id="使ってみる" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>使ってみる</h2>\n\n<p>インストールしたら何も考えずにdstatと打つだけでvmstatのようにリソース使用量が表示されます。<br>\n出力を停止するにはCtrl+Cを押します。</p>\n\n<p><a href="https://camo.qiitausercontent.com/d995ec139a6c40a05001c3c9c1ec8b3a8207f7a1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36326139393566392d356234612d306133382d336531342d3763373765346364303336312e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/d995ec139a6c40a05001c3c9c1ec8b3a8207f7a1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36326139393566392d356234612d306133382d336531342d3763373765346364303336312e706e67" alt="スクリーンショット 2019-01-29 19.13.21.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/62a995f9-5b4a-0a38-3e14-7c77e4cd0361.png"></a></p>\n\n<h2>\n<span id="オプション概要" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>オプション概要</h2>\n\n<ul>\n<li><p>-t … 時間を表示</p></li>\n<li>\n<p>-c … CPU使用時間の割合を表示</p>\n\n<ul>\n<li>usr … ユーザ空間で使われたCPU使用時間の割合</li>\n<li>sys … システム空間で使われたCPU仕様時間の割合</li>\n<li>idl … アイドル状態のCPU時間の割合</li>\n<li>wai … 応答の待ち状態にあったCPU時間の割合</li>\n<li>hiq … ハードウェア割り込み処理に使われたCPU時間の割合</li>\n<li>siq … ソフトウェア割り込み処理に使われたCPU時間の割合</li>\n</ul>\n</li>\n<li>\n<p>-m … メモリの状態を表示</p>\n\n<ul>\n<li>used … 物理メモリ全体での使用容量</li>\n<li>buff … バッファキャッシュで使っているメモリ使用容量</li>\n<li>cach … ページキャッシュからバッファキャッシュを引いたメモリ使用容量</li>\n<li>free … 未使用のメモリ使用容量</li>\n</ul>\n</li>\n<li>\n<p>–vm … バーチャルメモリの利用状態を表示</p>\n\n<ul>\n<li>majpf … 物理メモリ上に該当データがロードされなかった回数</li>\n<li>minpf … 物理メモリに該当データがロードされた回数</li>\n<li>alloc … 空きメモリを探して割り当てた回数</li>\n<li>free … メモリを解放した回数</li>\n</ul>\n</li>\n<li>\n<p>-s … スワップの利用状態を表示</p>\n\n<ul>\n<li>used … スワップ全体での使用容量</li>\n<li>free … 未使用のスワップ容量</li>\n</ul>\n</li>\n<li>\n<p>-g … ページの入出力数を表示</p>\n\n<ul>\n<li>in … ディスクからメモリに読み込んだバイト数</li>\n<li>out … メモリ不足時にディスクに書き出したバイト数</li>\n</ul>\n</li>\n<li>\n<p>-d … ディスクの状態を表示</p>\n\n<ul>\n<li>read … ディスクの読み込みバイト数</li>\n<li>writ … ディスクの書き込みバイト数</li>\n</ul>\n</li>\n<li>\n<p>-r … ディスクへの読み書きリクエスト数(IOPS)</p>\n\n<ul>\n<li>read … ディスクの読み込みリクエスト数</li>\n<li>writ … ディスクの書き込みリクエスト数</li>\n</ul>\n</li>\n<li>\n<p>-i … 割り込み処理の状態を表示</p>\n\n<ul>\n<li>interrupts … 実行待ちのプロセス数</li>\n</ul>\n</li>\n<li>\n<p>-l … ロードアベレージの状態を表示</p>\n\n<ul>\n<li>1m … 1分平均でのCPU時間の利用割合</li>\n<li>5m … 5分平均でのCPU時間の利用割合</li>\n<li>15m … 15分平均でのCPU時間の利用割合</li>\n</ul>\n</li>\n<li>\n<p>-p … プロセスの状態を表示</p>\n\n<ul>\n<li>run … 実行中プロセス数</li>\n<li>blk … ブロック中のプロセス数</li>\n<li>new … 新しく実行されたプロセス数</li>\n</ul>\n</li>\n<li>\n<p>-y … システム状態を表示</p>\n\n<ul>\n<li>int … 割り込み回数</li>\n<li>csw … コンテキストスイッチの回数</li>\n</ul>\n</li>\n<li>\n<p>–lock … ファイルロックの状態を表示</p>\n\n<ul>\n<li>pos … posixロック数</li>\n<li>lck … flockロック数</li>\n<li>rea … 読み込みロック数</li>\n<li>wri … 書き込みロック数</li>\n</ul>\n</li>\n<li>\n<p>-n … ネットワーク状態を表示</p>\n\n<ul>\n<li>recv … ネットワーク全体の受信データ量</li>\n<li>send … ネットワーク全体の送信データ量</li>\n</ul>\n</li>\n<li>\n<p>–ipc … プロセス間通信の状態を表示</p>\n\n<ul>\n<li>msg … メッセージキュー</li>\n<li>sem … セマフォ</li>\n<li>shm … 共有メモリセグメント</li>\n</ul>\n</li>\n<li>\n<p>–unix … UNIXドメインソケットの状態を表示</p>\n\n<ul>\n<li>dgm … Datagram通信の件数</li>\n<li>str … Stream通信の件数</li>\n<li>lis … listenな通信の件数</li>\n<li>act … activeな通信の件数</li>\n</ul>\n</li>\n<li>\n<p>–tcp … TCP通信のバイト数を表示</p>\n\n<ul>\n<li>lis … 待ちうけ状態の数</li>\n<li>act … ACTIVE状態の数</li>\n<li>syn … SYN状態の数</li>\n<li>tim … TIME_WAIT状態の数</li>\n<li>clo … CLOSE状態の数</li>\n</ul>\n</li>\n<li>\n<p>–udp … UDP通信のバイト数を表示</p>\n\n<ul>\n<li>lis … 待ちうけ状態の数</li>\n<li>act … ACTIVE状態の数</li>\n</ul>\n</li>\n<li><p>--float 小数点も含めて表示する</p></li>\n<li><p>--noheaders ヘッダ表示を一回だけにします</p></li>\n</ul>\n\n<p>自分で使いたいものをオプションで指定した順番で表示されます。<br>\n以下に使用例を記載します。</p>\n\n<h4>\n<span id="ネットワークやディスク状態いろいろ" class="fragment"></span><a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%84%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E7%8A%B6%E6%85%8B%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D"><i class="fa fa-link"></i></a>ネットワークやディスク状態いろいろ</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>dstat <span class="nt">-Tclmdrn</span>\n<span class="nt">--epoch---</span> <span class="nt">--total-cpu-usage--</span> <span class="nt">---load-avg---</span> <span class="nt">------memory-usage-----</span> <span class="nt">-dsk</span>/total- <span class="nt">--io</span>/total- <span class="nt">-net</span>/total-\n  epoch   |usr sys idl wai stl| 1m   5m  15m | used  free  buff  cach| <span class="nb">read  </span>writ| <span class="nb">read  </span>writ| recv  send\n1548760630|  2   3  93   3   0|0.92 1.91 2.14|1613M 71.1M 13.4M  180M|1178k  415k|97.8  46.6 |   0     0\n1548760631|  2   7  86   5   0|0.92 1.91 2.14|1613M 69.4M 13.7M  182M|2304k  140k| 313  22.0 |   0     0\n1548760632|  5   4  90   1   0|0.92 1.91 2.14|1613M 69.3M 13.7M  182M|  20k   64k|5.00  11.0 |2628B 1490\n</pre></div></div>\n\n<h4>\n<span id="cpuとメモリ関連をとりあえず" class="fragment"></span><a href="#cpu%E3%81%A8%E3%83%A1%E3%83%A2%E3%83%AA%E9%96%A2%E9%80%A3%E3%82%92%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A"><i class="fa fa-link"></i></a>CPUとメモリ関連をとりあえず</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>dstat <span class="nt">-Tclm</span>\n<span class="nt">--epoch---</span> <span class="nt">--total-cpu-usage--</span> <span class="nt">---load-avg---</span> <span class="nt">------memory-usage-----</span>\n  epoch   |usr sys idl wai stl| 1m   5m  15m | used  free  buff  cach\n1548760014|  2   3  93   3   0|0.95 2.01 2.11|1618M 61.9M 12.3M  181M\n1548760015|  3  13  82   2   0|0.95 2.01 2.11|1616M 81.6M 12.0M  167M\n</pre></div></div>\n\n<h4>\n<span id="cpuの使用率をコアごとに見る" class="fragment"></span><a href="#cpu%E3%81%AE%E4%BD%BF%E7%94%A8%E7%8E%87%E3%82%92%E3%82%B3%E3%82%A2%E3%81%94%E3%81%A8%E3%81%AB%E8%A6%8B%E3%82%8B"><i class="fa fa-link"></i></a>CPUの使用率をコアごとに見る</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>dstat <span class="nt">-c</span> <span class="nt">-C</span> 0,1,total\n<span class="nt">-----cpu0-usage----------cpu1-usage-------total-cpu-usage--</span>\nusr sys idl wai stl:usr sys idl wai stl:usr sys idl wai stl\n  1   3  93   3   0:  2   3  92   3   0:  2   3  93   3   0\n 10  30   3  56   0: 20  25   0  56   0: 15  27   2  56   0\n</pre></div></div>\n\n<h4>\n<span id="実行結果をログをファイルへ出力する" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AD%E3%82%B0%E3%82%92%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%B8%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>実行結果をログをファイルへ出力する</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>dstat <span class="nt">--output</span> dstat.csv\n</pre></div></div>\n\n<h2>\n<span id="プラグイン" class="fragment"></span><a href="#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3"><i class="fa fa-link"></i></a>プラグイン</h2>\n\n<p>dstatパッケージをインストールすると、「/usr/share/dstat」ディレクトリに大量のPythonスクリプトがコピーされます。このスクリプトがdstatのプラグインです。<br>\nこのディレクトリに自分でプラグインを追加することもできます。<br>\nまた<code>--list</code>オプションを指定することでも見ることができます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> /usr/share/dstat\n<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.py\ndstat.py                 dstat_gpfs.py                 dstat_nfs3.py        dstat_snmp_net_err.py     dstat_top_oom.py\ndstat_battery.py         dstat_gpfs_ops.py             dstat_nfs3_ops.py    dstat_snmp_sys.py         dstat_utmp.py\ndstat_battery_remain.py  dstat_helloworld.py           dstat_nfsd3.py       dstat_snooze.py           dstat_vm_cpu.py\ndstat_condor_queue.py    dstat_innodb_buffer.py        dstat_nfsd3_ops.py   dstat_squid.py            dstat_vm_mem.py\ndstat_cpufreq.py         dstat_innodb_io.py            dstat_nfsd4_ops.py   dstat_test.py             dstat_vm_mem_adv.py\ndstat_dbus.py            dstat_innodb_ops.py           dstat_nfsstat4.py    dstat_thermal.py          dstat_vmk_hba.py\ndstat_disk_avgqu.py      dstat_lustre.py               dstat_ntp.py         dstat_top_bio.py          dstat_vmk_int.py\ndstat_disk_avgrq.py      dstat_md_status.py            dstat_postfix.py     dstat_top_bio_adv.py      dstat_vmk_nic.py\ndstat_disk_svctm.py      dstat_memcache_hits.py        dstat_power.py       dstat_top_childwait.py    dstat_vz_cpu.py\ndstat_disk_tps.py        dstat_mysql5_cmds.py          dstat_proc_count.py  dstat_top_cpu.py          dstat_vz_io.py\ndstat_disk_util.py       dstat_mysql5_conn.py          dstat_qmail.py       dstat_top_cpu_adv.py      dstat_vz_ubc.py\ndstat_disk_wait.py       dstat_mysql5_innodb.py        dstat_redis.py       dstat_top_cputime.py      dstat_wifi.py\ndstat_dstat.py           dstat_mysql5_innodb_basic.py  dstat_rpc.py         dstat_top_cputime_avg.py  dstat_zfs_arc.py\ndstat_dstat_cpu.py       dstat_mysql5_innodb_extra.py  dstat_rpcd.py        dstat_top_int.py          dstat_zfs_l2arc.py\ndstat_dstat_ctxt.py      dstat_mysql5_io.py            dstat_sendmail.py    dstat_top_io.py           dstat_zfs_zil.py\ndstat_dstat_mem.py       dstat_mysql5_keys.py          dstat_snmp_cpu.py    dstat_top_io_adv.py\ndstat_fan.py             dstat_mysql_io.py             dstat_snmp_load.py   dstat_top_latency.py\ndstat_freespace.py       dstat_mysql_keys.py           dstat_snmp_mem.py    dstat_top_latency_avg.py\ndstat_fuse.py            dstat_net_packets.py          dstat_snmp_net.py    dstat_top_mem.py\n</pre></div></div>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>dstat <span class="nt">--list</span>\ninternal:\n        aio, cpu, cpu-adv, cpu-use, cpu24, disk, disk24, disk24-old, epoch, fs, int, int24, io, ipc, load, lock, mem, mem-adv, net, page, page24,\n        proc, raw, socket, swap, swap-old, sys, tcp, <span class="nb">time</span>, udp, unix, vm, vm-adv, zones\n/usr/share/dstat:\n        battery, battery-remain, condor-queue, cpufreq, dbus, disk-avgqu, disk-avgrq, disk-svctm, disk-tps, disk-util, disk-wait, dstat,\n        dstat-cpu, dstat-ctxt, dstat-mem, fan, freespace, fuse, gpfs, gpfs-ops, helloworld, innodb-buffer, innodb-io, innodb-ops, lustre,\n        md-status, memcache-hits, mysql-io, mysql-keys, mysql5-cmds, mysql5-conn, mysql5-innodb, mysql5-innodb-basic, mysql5-innodb-extra,\n        mysql5-io, mysql5-keys, net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, nfsd4-ops, nfsstat4, ntp, postfix, power, proc-count, qmail,\n        redis, rpc, rpcd, sendmail, snmp-cpu, snmp-load, snmp-mem, snmp-net, snmp-net-err, snmp-sys, snooze, squid, <span class="nb">test</span>, thermal, top-bio,\n        top-bio-adv, top-childwait, top-cpu, top-cpu-adv, top-cputime, top-cputime-avg, top-int, top-io, top-io-adv, top-latency,\n        top-latency-avg, top-mem, top-oom, utmp, vm-cpu, vm-mem, vm-mem-adv, vmk-hba, vmk-int, vmk-nic, vz-cpu, vz-io, vz-ubc, wifi, zfs-arc,\n        zfs-l2arc, zfs-zil\n</pre></div></div>\n\n<p>以下はプラグインの使用例です。</p>\n\n<h4>\n<span id="oom-killerになる可能性の高いプロセスを出力" class="fragment"></span><a href="#oom-killer%E3%81%AB%E3%81%AA%E3%82%8B%E5%8F%AF%E8%83%BD%E6%80%A7%E3%81%AE%E9%AB%98%E3%81%84%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%82%92%E5%87%BA%E5%8A%9B"><i class="fa fa-link"></i></a>OOM-Killerになる可能性の高いプロセスを出力</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>dstat <span class="nt">--top-oom</span>\n<span class="nt">--out-of-memory---</span>\n    <span class="nb">kill </span>score\nrancher       133\n</pre></div></div>\n\n<h4>\n<span id="最もcpu使用率の高いプロセスを特定する" class="fragment"></span><a href="#%E6%9C%80%E3%82%82cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E3%81%AE%E9%AB%98%E3%81%84%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%82%92%E7%89%B9%E5%AE%9A%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>最もCPU使用率の高いプロセスを特定する</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>dstat <span class="nt">-ta</span> <span class="nt">--top-cpu</span>\n<span class="nt">----system----</span> <span class="nt">--total-cpu-usage--</span> <span class="nt">-dsk</span>/total- <span class="nt">-net</span>/total- <span class="nt">---paging--</span> <span class="nt">---system--</span> <span class="nt">-most-expensive-</span>\n     <span class="nb">time</span>     |usr sys idl wai stl| <span class="nb">read  </span>writ| recv  send|  <span class="k">in   </span>out | int   csw |  cpu process\n29-01 11:34:36|  2   3  93   3   0|1195k  421k|   0     0 | 369k  335k|1417  4216 |rancher      1.3\n29-01 11:34:37| 12   9  71   8   0|1992k   11M| 898B  229B| 300k   10M|5285    12k|rancher      4.0^\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>dstatの素晴らしさは一つのコマンドで多彩な情報を取得できる点だと思います。<br>\nバックグラウンドでCSVへ出力させ可視化するのもいいと思います。<br>\nプラグインとか書くのも勉強にはよさそうですね</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://nsmr.tk/dstat.html" class="autolink" rel="nofollow noopener" target="_blank">https://nsmr.tk/dstat.html</a><br>\n<a href="http://hirose31.hatenablog.jp/entry/20120229/1330501968" class="autolink" rel="nofollow noopener" target="_blank">http://hirose31.hatenablog.jp/entry/20120229/1330501968</a><br>\n<a href="https://qiita.com/harukasan/items/b18e484662943d834901" class="autolink" id="reference-71a75712d6b20fa38a79">https://qiita.com/harukasan/items/b18e484662943d834901</a></p>\n', 'body': '![timthumb.png](https://qiita-image-store.s3.amazonaws.com/0/258841/eaaa3b75-9ee1-f48c-e174-1ac958953e60.png)\n\ndstat - versatile tool for generating system resource statistics\n\n## 背景\n\nmpstatやらvmstatやらでリソース監視をやっていたらターミナルの数が無限に増えていくのに嫌気がさした。\nちょっと調べてみるとdstatというコマンドがいろいろ見れて便利って聞いたので紹介してみます。\n\n## dstatとは\n\ndstatとは簡単に説明するとCPU負荷をコアごと、IO負荷をディスクごと、ネットワーク転送量をインターフェイスごとに表示できるコマンド。\ntopやiostat,netstatを使って監視しているリソースがコマンド一つで監視できます。\n\nGitHubにてソースは公開されています。言語はPython\n[dagwieers/dstat](https://github.com/dagwieers/dstat)\n\n公式サイト\nhttp://dag.wiee.rs/home-made/dstat/\n\n## インストール\n\n``` bash\n$ sudo apt install -y dstat\n$ sudo yum istall -y dstat\n\n# GitHubからも取ってこれます(Pythonの必要なパッケージは自前で用意する必要あり)。\n$ git clone https://github.com/dagwieers/dstat.git\n$ cd dstat/\n$ ./dstat\n\n# バージョン確認\n$ dstat -V\nDstat 0.7.3\nWritten by Dag Wieers <dag@wieers.com>\nHomepage at http://dag.wieers.com/home-made/dstat/\n```\n\n## 使ってみる\n\nインストールしたら何も考えずにdstatと打つだけでvmstatのようにリソース使用量が表示されます。\n出力を停止するにはCtrl+Cを押します。\n\n![スクリーンショット 2019-01-29 19.13.21.png](https://qiita-image-store.s3.amazonaws.com/0/258841/62a995f9-5b4a-0a38-3e14-7c77e4cd0361.png)\n\n\n## オプション概要\n\n- -t … 時間を表示\n\n- -c … CPU使用時間の割合を表示\n  - usr … ユーザ空間で使われたCPU使用時間の割合\n  - sys … システム空間で使われたCPU仕様時間の割合\n  - idl … アイドル状態のCPU時間の割合\n  - wai … 応答の待ち状態にあったCPU時間の割合\n  - hiq … ハードウェア割り込み処理に使われたCPU時間の割合\n  - siq … ソフトウェア割り込み処理に使われたCPU時間の割合\n\n- -m … メモリの状態を表示\n  - used … 物理メモリ全体での使用容量\n  - buff … バッファキャッシュで使っているメモリ使用容量\n  - cach … ページキャッシュからバッファキャッシュを引いたメモリ使用容量\n  - free … 未使用のメモリ使用容量\n\n- –vm … バーチャルメモリの利用状態を表示\n  - majpf … 物理メモリ上に該当データがロードされなかった回数\n  - minpf … 物理メモリに該当データがロードされた回数\n  - alloc … 空きメモリを探して割り当てた回数\n  - free … メモリを解放した回数\n\n- -s … スワップの利用状態を表示\n  - used … スワップ全体での使用容量\n  - free … 未使用のスワップ容量\n\n- -g … ページの入出力数を表示\n  - in … ディスクからメモリに読み込んだバイト数\n  - out … メモリ不足時にディスクに書き出したバイト数\n\n- -d … ディスクの状態を表示\n  - read … ディスクの読み込みバイト数\n  - writ … ディスクの書き込みバイト数\n\n- -r … ディスクへの読み書きリクエスト数(IOPS)\n  - read … ディスクの読み込みリクエスト数\n  - writ … ディスクの書き込みリクエスト数\n\n- -i … 割り込み処理の状態を表示\n  - interrupts … 実行待ちのプロセス数\n\n- -l … ロードアベレージの状態を表示\n  - 1m … 1分平均でのCPU時間の利用割合\n  - 5m … 5分平均でのCPU時間の利用割合\n  - 15m … 15分平均でのCPU時間の利用割合\n\n- -p … プロセスの状態を表示\n  - run … 実行中プロセス数\n  - blk … ブロック中のプロセス数\n  - new … 新しく実行されたプロセス数\n\n- -y … システム状態を表示\n  - int … 割り込み回数\n  - csw … コンテキストスイッチの回数\n\n- –lock … ファイルロックの状態を表示\n  - pos … posixロック数\n  - lck … flockロック数\n  - rea … 読み込みロック数\n  - wri … 書き込みロック数\n\n- -n … ネットワーク状態を表示\n  - recv … ネットワーク全体の受信データ量\n  - send … ネットワーク全体の送信データ量\n\n- –ipc … プロセス間通信の状態を表示\n  - msg … メッセージキュー\n  - sem … セマフォ\n  - shm … 共有メモリセグメント\n\n- –unix … UNIXドメインソケットの状態を表示\n  - dgm … Datagram通信の件数\n  - str … Stream通信の件数\n  - lis … listenな通信の件数\n  - act … activeな通信の件数\n\n- –tcp … TCP通信のバイト数を表示\n  - lis … 待ちうけ状態の数\n  - act … ACTIVE状態の数\n  - syn … SYN状態の数\n  - tim … TIME_WAIT状態の数\n  - clo … CLOSE状態の数\n\n- –udp … UDP通信のバイト数を表示\n  - lis … 待ちうけ状態の数\n  - act … ACTIVE状態の数\n\n- --float 小数点も含めて表示する\n- --noheaders ヘッダ表示を一回だけにします\n\n自分で使いたいものをオプションで指定した順番で表示されます。\n以下に使用例を記載します。\n\n#### ネットワークやディスク状態いろいろ\n\n``` bash\n$ dstat -Tclmdrn\n--epoch--- --total-cpu-usage-- ---load-avg--- ------memory-usage----- -dsk/total- --io/total- -net/total-\n  epoch   |usr sys idl wai stl| 1m   5m  15m | used  free  buff  cach| read  writ| read  writ| recv  send\n1548760630|  2   3  93   3   0|0.92 1.91 2.14|1613M 71.1M 13.4M  180M|1178k  415k|97.8  46.6 |   0     0\n1548760631|  2   7  86   5   0|0.92 1.91 2.14|1613M 69.4M 13.7M  182M|2304k  140k| 313  22.0 |   0     0\n1548760632|  5   4  90   1   0|0.92 1.91 2.14|1613M 69.3M 13.7M  182M|  20k   64k|5.00  11.0 |2628B 1490\n```\n\n#### CPUとメモリ関連をとりあえず\n\n``` bash\n$ dstat -Tclm\n--epoch--- --total-cpu-usage-- ---load-avg--- ------memory-usage-----\n  epoch   |usr sys idl wai stl| 1m   5m  15m | used  free  buff  cach\n1548760014|  2   3  93   3   0|0.95 2.01 2.11|1618M 61.9M 12.3M  181M\n1548760015|  3  13  82   2   0|0.95 2.01 2.11|1616M 81.6M 12.0M  167M\n```\n\n#### CPUの使用率をコアごとに見る\n\n``` bash\n$ dstat -c -C 0,1,total\n-----cpu0-usage----------cpu1-usage-------total-cpu-usage--\nusr sys idl wai stl:usr sys idl wai stl:usr sys idl wai stl\n  1   3  93   3   0:  2   3  92   3   0:  2   3  93   3   0\n 10  30   3  56   0: 20  25   0  56   0: 15  27   2  56   0\n```\n\n#### 実行結果をログをファイルへ出力する\n\n``` bash\n$ dstat --output dstat.csv\n``` \n\n## プラグイン\n\ndstatパッケージをインストールすると、「/usr/share/dstat」ディレクトリに大量のPythonスクリプトがコピーされます。このスクリプトがdstatのプラグインです。\nこのディレクトリに自分でプラグインを追加することもできます。\nまた```--list```オプションを指定することでも見ることができます。\n\n``` bash\n$ cd /usr/share/dstat\n$ ls *.py\ndstat.py                 dstat_gpfs.py                 dstat_nfs3.py        dstat_snmp_net_err.py     dstat_top_oom.py\ndstat_battery.py         dstat_gpfs_ops.py             dstat_nfs3_ops.py    dstat_snmp_sys.py         dstat_utmp.py\ndstat_battery_remain.py  dstat_helloworld.py           dstat_nfsd3.py       dstat_snooze.py           dstat_vm_cpu.py\ndstat_condor_queue.py    dstat_innodb_buffer.py        dstat_nfsd3_ops.py   dstat_squid.py            dstat_vm_mem.py\ndstat_cpufreq.py         dstat_innodb_io.py            dstat_nfsd4_ops.py   dstat_test.py             dstat_vm_mem_adv.py\ndstat_dbus.py            dstat_innodb_ops.py           dstat_nfsstat4.py    dstat_thermal.py          dstat_vmk_hba.py\ndstat_disk_avgqu.py      dstat_lustre.py               dstat_ntp.py         dstat_top_bio.py          dstat_vmk_int.py\ndstat_disk_avgrq.py      dstat_md_status.py            dstat_postfix.py     dstat_top_bio_adv.py      dstat_vmk_nic.py\ndstat_disk_svctm.py      dstat_memcache_hits.py        dstat_power.py       dstat_top_childwait.py    dstat_vz_cpu.py\ndstat_disk_tps.py        dstat_mysql5_cmds.py          dstat_proc_count.py  dstat_top_cpu.py          dstat_vz_io.py\ndstat_disk_util.py       dstat_mysql5_conn.py          dstat_qmail.py       dstat_top_cpu_adv.py      dstat_vz_ubc.py\ndstat_disk_wait.py       dstat_mysql5_innodb.py        dstat_redis.py       dstat_top_cputime.py      dstat_wifi.py\ndstat_dstat.py           dstat_mysql5_innodb_basic.py  dstat_rpc.py         dstat_top_cputime_avg.py  dstat_zfs_arc.py\ndstat_dstat_cpu.py       dstat_mysql5_innodb_extra.py  dstat_rpcd.py        dstat_top_int.py          dstat_zfs_l2arc.py\ndstat_dstat_ctxt.py      dstat_mysql5_io.py            dstat_sendmail.py    dstat_top_io.py           dstat_zfs_zil.py\ndstat_dstat_mem.py       dstat_mysql5_keys.py          dstat_snmp_cpu.py    dstat_top_io_adv.py\ndstat_fan.py             dstat_mysql_io.py             dstat_snmp_load.py   dstat_top_latency.py\ndstat_freespace.py       dstat_mysql_keys.py           dstat_snmp_mem.py    dstat_top_latency_avg.py\ndstat_fuse.py            dstat_net_packets.py          dstat_snmp_net.py    dstat_top_mem.py\n```\n\n``` bash\ndstat --list\ninternal:\n        aio, cpu, cpu-adv, cpu-use, cpu24, disk, disk24, disk24-old, epoch, fs, int, int24, io, ipc, load, lock, mem, mem-adv, net, page, page24,\n        proc, raw, socket, swap, swap-old, sys, tcp, time, udp, unix, vm, vm-adv, zones\n/usr/share/dstat:\n        battery, battery-remain, condor-queue, cpufreq, dbus, disk-avgqu, disk-avgrq, disk-svctm, disk-tps, disk-util, disk-wait, dstat,\n        dstat-cpu, dstat-ctxt, dstat-mem, fan, freespace, fuse, gpfs, gpfs-ops, helloworld, innodb-buffer, innodb-io, innodb-ops, lustre,\n        md-status, memcache-hits, mysql-io, mysql-keys, mysql5-cmds, mysql5-conn, mysql5-innodb, mysql5-innodb-basic, mysql5-innodb-extra,\n        mysql5-io, mysql5-keys, net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, nfsd4-ops, nfsstat4, ntp, postfix, power, proc-count, qmail,\n        redis, rpc, rpcd, sendmail, snmp-cpu, snmp-load, snmp-mem, snmp-net, snmp-net-err, snmp-sys, snooze, squid, test, thermal, top-bio,\n        top-bio-adv, top-childwait, top-cpu, top-cpu-adv, top-cputime, top-cputime-avg, top-int, top-io, top-io-adv, top-latency,\n        top-latency-avg, top-mem, top-oom, utmp, vm-cpu, vm-mem, vm-mem-adv, vmk-hba, vmk-int, vmk-nic, vz-cpu, vz-io, vz-ubc, wifi, zfs-arc,\n        zfs-l2arc, zfs-zil\n```\n\n以下はプラグインの使用例です。\n\n#### OOM-Killerになる可能性の高いプロセスを出力\n\n``` bash\ndstat --top-oom\n--out-of-memory---\n    kill score\nrancher       133\n```\n\n#### 最もCPU使用率の高いプロセスを特定する\n\n``` bash\n$ dstat -ta --top-cpu\n----system---- --total-cpu-usage-- -dsk/total- -net/total- ---paging-- ---system-- -most-expensive-\n     time     |usr sys idl wai stl| read  writ| recv  send|  in   out | int   csw |  cpu process\n29-01 11:34:36|  2   3  93   3   0|1195k  421k|   0     0 | 369k  335k|1417  4216 |rancher      1.3\n29-01 11:34:37| 12   9  71   8   0|1992k   11M| 898B  229B| 300k   10M|5285    12k|rancher      4.0^\n```\n\n## まとめ\n\ndstatの素晴らしさは一つのコマンドで多彩な情報を取得できる点だと思います。\nバックグラウンドでCSVへ出力させ可視化するのもいいと思います。\nプラグインとか書くのも勉強にはよさそうですね\n\n## 参考リンク\n\nhttps://nsmr.tk/dstat.html\nhttp://hirose31.hatenablog.jp/entry/20120229/1330501968\nhttps://qiita.com/harukasan/items/b18e484662943d834901\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-01-29T20:39:32+09:00', 'group': None, 'id': '387fa1cba44690c3db9b', 'likes_count': 29, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'dstat', 'versions': []}, {'name': 'Linuxコマンド', 'versions': []}], 'title': 'dstatコマンドでサーバリソースをリアルタイム監視', 'updated_at': '2019-01-29T20:39:32+09:00', 'url': 'https://qiita.com/ryuichi1208/items/387fa1cba44690c3db9b', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/c2762e5bc564c3260971900c5cf046018fd4cc2e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31333534666639342d353736622d373430392d663432332d3237396566363231353066642e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/c2762e5bc564c3260971900c5cf046018fd4cc2e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31333534666639342d353736622d373430392d663432332d3237396566363231353066642e6a706567" alt="20150307003237.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/1354ff94-576b-7409-f423-279ef62150fd.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>仕事で使えそうだったりしたコマンドをまとめた記事を2つ書いた。<br>\n今回は仕事で使えないLinuxの面白コマンド(プログラム)の紹介記事です。</p>\n\n<p>ネタ話くらいにはなるかもしれませんが特に役立つ知識ではないのでお暇な方のみご覧ください。</p>\n\n<p>前に書いた記事はこちら</p>\n\n<p><a href="https://qiita.com/ryuichi1208/items/55b73d8ae75993dc10c1" id="reference-057faa1c8793b55a8905">仕事で使えるLinux ワンライナー集</a><br>\n<a href="https://qiita.com/ryuichi1208/items/4bf20f702176101a3ecf" id="reference-4cdcaa038a3020cbf8ac">仕事で使えるかも知れないWindows コマンド＆ワンライナー集 + バッチファイル</a></p>\n\n<p>暇で暇で仕方ない方以外は読まないほうがいいと思います！笑</p>\n\n<h2>\n<span id="汽車を走らせるsl" class="fragment"></span><a href="#%E6%B1%BD%E8%BB%8A%E3%82%92%E8%B5%B0%E3%82%89%E3%81%9B%E3%82%8Bsl"><i class="fa fa-link"></i></a>汽車を走らせる！：sl</h2>\n\n<p>とても有名なジョークコマンドですね。<br>\nLinux関連の本のコラムなどでもたまに見たりします（笑）<br>\n疲れてるときlsと間違えてslと打った時は少し休む目安になるとかならないとか。</p>\n\n<h4>\n<span id="使ってみる" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>使ってみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> sl\n\n<span class="nv">$ </span>/usr/games/sl\n\n</pre></div></div>\n\n<p><a href="https://camo.qiitausercontent.com/d2572fd25c5babaf13a16149a858d8a93c3c2808/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f61393130376666642d616238312d383535612d366636392d3061366438376437376263302e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/d2572fd25c5babaf13a16149a858d8a93c3c2808/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f61393130376666642d616238312d383535612d366636392d3061366438376437376263302e706e67" alt="68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f33323138302f36663434313537322d633531372d616563382d356438392d3034386130663132386631642e706e67.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/a9107ffd-ab81-855a-6f69-0a6d87d77bc0.png"></a></p>\n\n<p>古くからあるコマンドですがいまだに開発が行われているらしいです。<br>\n<a href="https://gist.github.com/poochin/1423262" rel="nofollow noopener" target="_blank">sl コマンドに京急AAを追加するパッチ</a>とかも面白いので是非とも試してみてください（笑）<br>\nちなみに標準オプションで「-l」を指定すると汽車が小さくなります。</p>\n\n<p>manもあります</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>SL<span class="o">(</span>6<span class="o">)</span>                                  Games Manual                                  SL<span class="o">(</span>6<span class="o">)</span>\n\n名称\n       sl - キータイプを矯正します。\n\n形式\n       sl <span class="o">[</span> <span class="nt">-alFe</span> <span class="o">]</span>\n\n解説\n       sl は、高度に発展した、キータイプ矯正を目的とするアニメーションプログラムです。SLは\n       蒸気機関車のことです。\n\n       次のようなオプションがあります。\n\n       <span class="nt">-a</span>     なにかアクシデントがあったようですね。助けを求める人々が悲痛です。\n\n       <span class="nt">-l</span>     小さくなります。\n\n       <span class="nt">-F</span>     飛びます。\n\n       <span class="nt">-e</span>     Ctrl+C で途中で止めることを許します。\n\n関連事項\n       <span class="nb">ls</span><span class="o">(</span>1<span class="o">)</span>\n\nバグ\n       カレントディレクトリの内容が表示されることがあります。\n\n著者\n       豊田 正史&lt;toyoda@isea.is.titech.ac.jp&gt;\n</pre></div></div>\n\n<p>下記のようなバグがあるらしいです。<br>\n<code>alias ls=sl</code>と打つと回避できるらしいです(大嘘)</p>\n\n<blockquote>\n<p>カレントディレクトリの内容が表示されることがあります。</p>\n</blockquote>\n\n<h2>\n<span id="名言を読もうfortune" class="fragment"></span><a href="#%E5%90%8D%E8%A8%80%E3%82%92%E8%AA%AD%E3%82%82%E3%81%86fortune"><i class="fa fa-link"></i></a>名言を読もう：fortune</h2>\n\n<p>fortuneとは、Unix系OSのコマンドの一つ。フォーチュン・クッキーを模したプログラムであり、歴史上の偉人の名言や有名人の発言などを一部引用したメッセージを無作為に表示するコマンド<br>\nbashrcとかに書いとくと毎回見れて面白いかもしれませんね(多分面白くない)</p>\n\n<p>wikipediaによれば、Unix Version 7 (1979年頃)でには存在していたようです。<br>\n歴史がすごいですね。。。</p>\n\n<h4>\n<span id="使ってみる-1" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-1"><i class="fa fa-link"></i></a>使ってみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> fortune\n\n<span class="nv">$ </span>/usr/games/fortune fortunes\nYou will be the victim of a bizarre joke.\n</pre></div></div>\n\n<h2>\n<span id="アスキーアートを出力" class="fragment"></span><a href="#%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%88%E3%82%92%E5%87%BA%E5%8A%9B"><i class="fa fa-link"></i></a>アスキーアートを出力</h2>\n\n<p>メッセージをつぶやくウシのアスキーアートを生成するプログラム<br>\nオプションも多彩でウシの目がooから==にしたり死体モードとかいろいろあって暇つぶしには良いかもしれませんね（笑）</p>\n\n<h4>\n<span id="使ってみる-2" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-2"><i class="fa fa-link"></i></a>使ってみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>git clone https://github.com/schacon/cowsay.git\n<span class="nv">$ </span><span class="nb">cd </span>cowsay/\n<span class="nv">$ </span>./install.sh\n\n<span class="nv">$ </span>cowsay <span class="s2">"Hello World"</span>\n _____________\n&lt; Hello World <span class="o">&gt;</span>\n <span class="nt">-------------</span>\n        <span class="se">\\ </span>  ^__^\n         <span class="se">\\ </span> <span class="o">(</span>oo<span class="o">)</span><span class="se">\\_</span>______\n            <span class="o">(</span>__<span class="o">)</span><span class="se">\\ </span>      <span class="o">)</span><span class="se">\\/\\</span>\n                <span class="o">||</span><span class="nt">----w</span> |\n                <span class="o">||</span>     <span class="o">||</span>\n\n<span class="nv">$ </span>cowsay <span class="nt">-b</span> <span class="s2">"zZZ.."</span>\n _______\n&lt; zZZ.. <span class="o">&gt;</span>\n <span class="nt">-------</span>\n        <span class="se">\\ </span>  ^__^\n         <span class="se">\\ </span> <span class="o">(==)</span><span class="se">\\_</span>______\n            <span class="o">(</span>__<span class="o">)</span><span class="se">\\ </span>      <span class="o">)</span><span class="se">\\/\\</span>\n                <span class="o">||</span><span class="nt">----w</span> |\n                <span class="o">||</span>     <span class="o">||</span>\n\n<span class="nv">$ </span>cowsay <span class="nt">-f</span> tux <span class="s2">"Hello World"</span>\n _____________\n&lt; Hello World <span class="o">&gt;</span>\n <span class="nt">-------------</span>\n   <span class="se">\\</span>\n    <span class="se">\\</span>\n        .--.\n       |o_o |\n       |:_/ |\n      //   <span class="se">\\ \\</span>\n     <span class="o">(</span>|     | <span class="o">)</span>\n    /<span class="s1">\'\\_   _/`\\\n    \\___)=(___/\n\n</span></pre></div></div>\n\n<h2>\n<span id="文字列をaaにfiglet" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E3%82%92aa%E3%81%ABfiglet"><i class="fa fa-link"></i></a>文字列をAAに:figlet</h2>\n\n<p>文字列ががいい感じにAAに変換されて出力されます。</p>\n\n<h4>\n<span id="使ってみる-3" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-3"><i class="fa fa-link"></i></a>使ってみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> figlet \n\n<span class="nv">$ </span>figlet <span class="s2">"Hello World"</span>\n _   _      _ _        __        __         _     _\n| | | | ___| | | ___   <span class="se">\\ \\ </span>     / /__  _ __| | __| |\n| |_| |/ _ <span class="se">\\ </span>| |/ _ <span class="se">\\ </span>  <span class="se">\\ \\ </span>/<span class="se">\\ </span>/ / _ <span class="se">\\|</span> <span class="s1">\'__| |/ _` |\n|  _  |  __/ | | (_) |   \\ V  V / (_) | |  | | (_| |\n|_| |_|\\___|_|_|\\___/     \\_/\\_/ \\___/|_|  |_|\\__,_|\n</span></pre></div></div>\n\n<p>似たようなコマンドにtoiletコマンドもあります<br>\n名前通りあるものに見えるAAを作ってくれます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>apt <span class="nb">install </span>toilet\n\n<span class="nv">$ </span>toilet <span class="s2">"Hello World"</span>\n\n m    m        <span class="s2">""</span><span class="c">#    ""#                 m     m               ""#        #</span>\n <span class="c">#    #  mmm     #      #     mmm         #  #  #  mmm    m mm    #     mmm#</span>\n <span class="c">#mmmm# #"  #    #      #    #" "#        " #"# # #" "#   #"  "   #    #" "#</span>\n <span class="c">#    # #""""    #      #    #   #         ## ##" #   #   #       #    #   #</span>\n <span class="c">#    # "#mm"    "mm    "mm  "#m#"         #   #  "#m#"   #       "mm  "#m##</span>\n</pre></div></div>\n\n<h2>\n<span id="aaでスターウォーズを見る" class="fragment"></span><a href="#aa%E3%81%A7%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%BA%E3%82%92%E8%A6%8B%E3%82%8B"><i class="fa fa-link"></i></a>AAでスターウォーズを見る</h2>\n\n<p>telnetでtowel.blinkenlights.nlを指定するとAAでスターウォーズが見れます。<br>\nC3POとR2-D2がAAで見れる</p>\n\n<h4>\n<span id="使ってみる-4" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-4"><i class="fa fa-link"></i></a>使ってみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>telnet towel.blinkenlights.nl\n\n              ...........      @@@@@    @@@@@               ...........\n                ..........    @     @  @     @              ..........\n                .........        @@@   @     @              .........\n                 ........      @@      @     @              ........\n                 ......       @@@@@@@   @@@@@  th          ........\n                 .....      <span class="nt">-----------------------</span>        .......\n                  ....        C  E  N  T  U  R  Y          .....\n                  ...       <span class="nt">-----------------------</span>        ....\n                  ..        @@@@@ @@@@@ @   @ @@@@@        ...\n                  <span class="o">==</span>          @   @      @ @    @          <span class="o">==</span>\n                __||__        @   @@@@    @     @        __||__\n               |      |       @   @      @ @    @       |      |\n      _________|______|_____  @   @@@@@ @   @   @  _____|______|_________\n\n                                     /~<span class="se">\\</span>\n         He tricked me into         |oo <span class="o">)</span>\n           going this way.          _<span class="se">\\=</span>/_\n                                   /  _  <span class="se">\\ </span>                ______________\n                                  //|/.<span class="se">\\|\\\\</span>              /\n                                 <span class="o">||</span>_ <span class="se">\\_</span>/ _||__________ /\n       ______                   /|| |<span class="se">\\ </span>/| <span class="o">||</span>\n              <span class="se">\\_</span>______________/   <span class="c"># \\_ _/ #</span>\n                                    | | |\n                                    | | |\n                                    <span class="o">[]</span>|[]\n                                    | | |\n      _____________________________/_]_[_<span class="se">\\_</span>______________________________\n</pre></div></div>\n\n<p>スターウォーズ以外にもtelnetで囲碁やチェスの観戦だったり天気情報を取得したりすることもできます。<br>\n以下は東京の天気を取得しています。気温や降水量をグラフで表示してくれるサービス。<br>\n詳しくは下記をご参照ください<br>\n<a href="https://orebibou.com/2015/04/%E3%81%93%E3%82%8C%E3%81%AF%E3%81%99%E3%81%94%E3%81%84%EF%BC%81telnet%E3%81%A7%E5%88%A9%E7%94%A8%E5%87%BA%E6%9D%A5%E3%82%8B%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B94%E5%80%8B/#2Telnet" rel="nofollow noopener" target="_blank">これはすごい！telnetで利用出来るサービス4個</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>telnet graph.no 79\ntokyo\n                     -<span class="o">=</span> Meteogram <span class="k">for </span>japan/tokyo/tokyo <span class="o">=</span>-\n <span class="s1">\'C                                                                   Rain\n  7                                                ^^^^^^\n  6                                             ^^^\n  5                                       ^^^^^^         ^^^\n  4^^^^^^                              ^^^                  ^^^\n  3      ^^^^^^                                                ---\n  2            =--                  ^^^                           ---\n  1               =--\n  0                  =--=--      ^^^\n -1                        =--=--\n -2\n    21 22 23 00 01 02 03 04 05 06_07_08_09_10_11_12_13_14_15_16 17 18 Hour\n\n     W NW NE NE NE  N  N NW NW NW NW NW NW  N  N NW NW NW NW NW NW NW Wind dir.\n     1  0  1  2  2  3  4  4  4  5  7  6  8  9  8  7  8 11 12 12 12 11 Wind(mps)\n\nLegend left axis:   - Sunny   ^ Scattered   = Clouded   =V= Thunder   # Fog\nLegend right axis:  | Rain    ! Sleet       * Snow\n[Weather forecast from yr.no, delivered by the Norwegian Meteorological Institute and the NRK.]\nConnection closed by foreign host.\n</span></pre></div></div>\n\n<h2>\n<span id="ランダムなプロフィールを作成rig" class="fragment"></span><a href="#%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AA%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90rig"><i class="fa fa-link"></i></a>ランダムなプロフィールを作成:rig</h2>\n\n<p>用途は全く分かりません。詳しい人教えてください（笑）</p>\n\n<h4>\n<span id="使ってみる-5" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-5"><i class="fa fa-link"></i></a>使ってみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> rig\n\n<span class="nv">$ </span>rig\nMaria Fitzgerald\n579 Henly Dr\nVancouver, WA  98661\n<span class="o">(</span>206<span class="o">)</span> xxx-xxxx\n\n<span class="nv">$ </span>rig\nLincoln Kennedy\n485 Tomkins Blcd\nMiami, FL  33152\n<span class="o">(</span>305<span class="o">)</span> xxx-xxxx\n</pre></div></div>\n\n<h2>\n<span id="いろんなゲームを遊ぼうbsd-games" class="fragment"></span><a href="#%E3%81%84%E3%82%8D%E3%82%93%E3%81%AA%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E9%81%8A%E3%81%BC%E3%81%86bsd-games"><i class="fa fa-link"></i></a>いろんなゲームを遊ぼう：BSD-Games</h2>\n\n<p>UNIXの古典的なゲームをまとめたパッケージ。<br>\nいろんなゲームがあります。詳細は下記をご参照ください。<br>\n<a href="http://wiki.linuxquestions.org/wiki/BSD_games" class="autolink" rel="nofollow noopener" target="_blank">http://wiki.linuxquestions.org/wiki/BSD_games</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> bsdgames\n\n<span class="nv">$ </span>/usr/games/worm\n Worm\nl<span class="k">*</span>k\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                    8   <span class="k">*</span>\n<span class="k">*</span> ooooooooooooooooooooo@                                 <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n<span class="k">*</span>                                                        <span class="k">*</span>\n</pre></div></div>\n\n<h2>\n<span id="流れる文字で気分良くcmatrix" class="fragment"></span><a href="#%E6%B5%81%E3%82%8C%E3%82%8B%E6%96%87%E5%AD%97%E3%81%A7%E6%B0%97%E5%88%86%E8%89%AF%E3%81%8Fcmatrix"><i class="fa fa-link"></i></a>流れる文字で気分良く：cmatrix</h2>\n\n<p>Matrixで出てくるあの画面を再現するコマンド</p>\n\n<h4>\n<span id="使ってみる-6" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-6"><i class="fa fa-link"></i></a>使ってみる</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>apt <span class="nb">install </span>cmatrix\n</pre></div></div>\n\n<p>コーヒー休憩とかする時にスクリーンセーバとして流しておくと中二感満載で好きです。<br>\nターミナルのリサイズもサポートされています。</p>\n\n<p><a href="https://camo.qiitausercontent.com/af65eb962c42f829fb7d0c583fc9ea55bc04e250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62393431666435332d633766662d303464372d383265362d3337353065643731313335612e676966" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/af65eb962c42f829fb7d0c583fc9ea55bc04e250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62393431666435332d633766662d303464372d383265362d3337353065643731313335612e676966" alt="linux-toy-cmatrix-animated.gif" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/b941fd53-c7ff-04d7-82e6-3750ed71135a.gif"></a></p>\n\n<p>カタカナ入りもあるようです。お好みで使い分けましょう<br>\n<a href="https://github.com/will8211/unimatrix" rel="nofollow noopener" target="_blank">will8211/unimatrix</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>curl <span class="nt">-L</span> https://raw.githubusercontent.com/will8211/unimatrix/master/unimatrix.py <span class="nt">-o</span> /usr/local/bin/unimatrix\n<span class="nv">$ </span><span class="nb">sudo chmod </span>a+rx /usr/local/bin/unimatrix\n<span class="nv">$ </span>unimatrix\n</pre></div></div>\n\n<h2>\n<span id="emacsで遊べるテトリス" class="fragment"></span><a href="#emacs%E3%81%A7%E9%81%8A%E3%81%B9%E3%82%8B%E3%83%86%E3%83%88%E3%83%AA%E3%82%B9"><i class="fa fa-link"></i></a>Emacsで遊べる:テトリス</h2>\n\n<p>ネタでは無いですが仕事で豆知識的にemacsでテトリスを遊ぶ方法<br>\nemacsとは有名なエディタですがゲームがデフォルトで入っているらしいです。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>emacs\n<span class="c"># ESC + X を入力後にtetrisと入力</span>\n</pre></div></div>\n\n<p><a href="https://camo.qiitausercontent.com/6ba52cc2be8038b6dad79201768e67107bc9cba6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34326536313734342d636338372d326665322d376364362d3533393131366532313165652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/6ba52cc2be8038b6dad79201768e67107bc9cba6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34326536313734342d636338372d326665322d376364362d3533393131366532313165652e706e67" alt="無題.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/42e61744-cc87-2fe2-7cd6-539116e211ee.png"></a></p>\n\n<p>他にも下記のようなゲームが標準で搭載されている。<br>\nvim以外認めん！って人も試してみてもよさそう。</p>\n\n<ul>\n<li>ハノイの塔：hanoi</li>\n<li>五目並べ：gomoku</li>\n<li>スネーク：snake</li>\n</ul>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>仕事で日の目を見ることはないと思いますが個人用のマシンへ入れて暇つぶしに使うのはいいのかなって思います。<br>\nおススメのジョークコマンドとかあれば教えてください！</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="http://opensourcetech.hatenablog.jp/entry/2017/10/26/%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%AF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%BE%E3%81%A8%E3%82%81" rel="nofollow noopener" target="_blank">ジョークコマンドまとめ</a><br>\n<a href="https://orebibou.com/2014/06/linux%E3%81%AE%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%AF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%8911%E5%80%8B%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F/" rel="nofollow noopener" target="_blank">Linuxのジョークコマンド11個をまとめてみた</a></p>\n', 'body': '![20150307003237.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/1354ff94-576b-7409-f423-279ef62150fd.jpeg)\n\n## 背景\n\n仕事で使えそうだったりしたコマンドをまとめた記事を2つ書いた。\n今回は仕事で使えないLinuxの面白コマンド(プログラム)の紹介記事です。\n\nネタ話くらいにはなるかもしれませんが特に役立つ知識ではないのでお暇な方のみご覧ください。\n\n前に書いた記事はこちら\n\n[仕事で使えるLinux ワンライナー集](https://qiita.com/ryuichi1208/items/55b73d8ae75993dc10c1)\n[仕事で使えるかも知れないWindows コマンド＆ワンライナー集 + バッチファイル](https://qiita.com/ryuichi1208/items/4bf20f702176101a3ecf)\n\n暇で暇で仕方ない方以外は読まないほうがいいと思います！笑\n\n## 汽車を走らせる！：sl\n\nとても有名なジョークコマンドですね。\nLinux関連の本のコラムなどでもたまに見たりします（笑）\n疲れてるときlsと間違えてslと打った時は少し休む目安になるとかならないとか。\n\n#### 使ってみる\n\n``` bash\n$ sudo apt install -y sl\n\n$ /usr/games/sl\n\n```\n\n![68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f33323138302f36663434313537322d633531372d616563382d356438392d3034386130663132386631642e706e67.png](https://qiita-image-store.s3.amazonaws.com/0/258841/a9107ffd-ab81-855a-6f69-0a6d87d77bc0.png)\n\n\n古くからあるコマンドですがいまだに開発が行われているらしいです。\n[sl コマンドに京急AAを追加するパッチ](https://gist.github.com/poochin/1423262)とかも面白いので是非とも試してみてください（笑）\nちなみに標準オプションで「-l」を指定すると汽車が小さくなります。\n\nmanもあります\n\n``` bash\nSL(6)                                  Games Manual                                  SL(6)\n\n名称\n       sl - キータイプを矯正します。\n\n形式\n       sl [ -alFe ]\n\n解説\n       sl は、高度に発展した、キータイプ矯正を目的とするアニメーションプログラムです。SLは\n       蒸気機関車のことです。\n\n       次のようなオプションがあります。\n\n       -a     なにかアクシデントがあったようですね。助けを求める人々が悲痛です。\n\n       -l     小さくなります。\n\n       -F     飛びます。\n\n       -e     Ctrl+C で途中で止めることを許します。\n\n関連事項\n       ls(1)\n\nバグ\n       カレントディレクトリの内容が表示されることがあります。\n\n著者\n       豊田 正史<toyoda@isea.is.titech.ac.jp>\n```\n\n下記のようなバグがあるらしいです。\n``` alias ls=sl```と打つと回避できるらしいです(大嘘)\n\n> カレントディレクトリの内容が表示されることがあります。\n\n## 名言を読もう：fortune\n\nfortuneとは、Unix系OSのコマンドの一つ。フォーチュン・クッキーを模したプログラムであり、歴史上の偉人の名言や有名人の発言などを一部引用したメッセージを無作為に表示するコマンド\nbashrcとかに書いとくと毎回見れて面白いかもしれませんね(多分面白くない)\n\nwikipediaによれば、Unix Version 7 (1979年頃)でには存在していたようです。\n歴史がすごいですね。。。\n\n#### 使ってみる\n\n``` bash\n$ sudo apt install -y fortune\n\n$ /usr/games/fortune fortunes\nYou will be the victim of a bizarre joke.\n```\n\n## アスキーアートを出力\n\nメッセージをつぶやくウシのアスキーアートを生成するプログラム\nオプションも多彩でウシの目がooから==にしたり死体モードとかいろいろあって暇つぶしには良いかもしれませんね（笑）\n\n#### 使ってみる\n\n``` bash\n$ git clone https://github.com/schacon/cowsay.git\n$ cd cowsay/\n$ ./install.sh\n\n$ cowsay "Hello World"\n _____________\n< Hello World >\n -------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n$ cowsay -b "zZZ.."\n _______\n< zZZ.. >\n -------\n        \\   ^__^\n         \\  (==)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n$ cowsay -f tux "Hello World"\n _____________\n< Hello World >\n -------------\n   \\\n    \\\n        .--.\n       |o_o |\n       |:_/ |\n      //   \\ \\\n     (|     | )\n    /\'\\_   _/`\\\n    \\___)=(___/\n\n```\n\n## 文字列をAAに:figlet \n\n文字列ががいい感じにAAに変換されて出力されます。\n\n#### 使ってみる\n\n``` bash\n$ sudo apt install -y figlet \n\n$ figlet "Hello World"\n _   _      _ _        __        __         _     _\n| | | | ___| | | ___   \\ \\      / /__  _ __| | __| |\n| |_| |/ _ \\ | |/ _ \\   \\ \\ /\\ / / _ \\| \'__| |/ _` |\n|  _  |  __/ | | (_) |   \\ V  V / (_) | |  | | (_| |\n|_| |_|\\___|_|_|\\___/     \\_/\\_/ \\___/|_|  |_|\\__,_|\n```\n\n似たようなコマンドにtoiletコマンドもあります\n名前通りあるものに見えるAAを作ってくれます。\n\n``` bash\n$ apt install toilet\n\n$ toilet "Hello World"\n\n m    m        ""#    ""#                 m     m               ""#        #\n #    #  mmm     #      #     mmm         #  #  #  mmm    m mm    #     mmm#\n #mmmm# #"  #    #      #    #" "#        " #"# # #" "#   #"  "   #    #" "#\n #    # #""""    #      #    #   #         ## ##" #   #   #       #    #   #\n #    # "#mm"    "mm    "mm  "#m#"         #   #  "#m#"   #       "mm  "#m##\n```\n\n## AAでスターウォーズを見る\n\ntelnetでtowel.blinkenlights.nlを指定するとAAでスターウォーズが見れます。\nC3POとR2-D2がAAで見れる\n\n#### 使ってみる\n\n``` bash\n$ telnet towel.blinkenlights.nl\n\n              ...........      @@@@@    @@@@@               ...........\n                ..........    @     @  @     @              ..........\n                .........        @@@   @     @              .........\n                 ........      @@      @     @              ........\n                 ......       @@@@@@@   @@@@@  th          ........\n                 .....      -----------------------        .......\n                  ....        C  E  N  T  U  R  Y          .....\n                  ...       -----------------------        ....\n                  ..        @@@@@ @@@@@ @   @ @@@@@        ...\n                  ==          @   @      @ @    @          ==\n                __||__        @   @@@@    @     @        __||__\n               |      |       @   @      @ @    @       |      |\n      _________|______|_____  @   @@@@@ @   @   @  _____|______|_________\n\n                                     /~\\\n         He tricked me into         |oo )\n           going this way.          _\\=/_\n                                   /  _  \\                 ______________\n                                  //|/.\\|\\\\              /\n                                 ||_ \\_/ _||__________ /\n       ______                   /|| |\\ /| ||\n              \\_______________/   # \\_ _/ #\n                                    | | |\n                                    | | |\n                                    []|[]\n                                    | | |\n      _____________________________/_]_[_\\_______________________________\n```\n\nスターウォーズ以外にもtelnetで囲碁やチェスの観戦だったり天気情報を取得したりすることもできます。\n以下は東京の天気を取得しています。気温や降水量をグラフで表示してくれるサービス。\n詳しくは下記をご参照ください\n[これはすごい！telnetで利用出来るサービス4個](https://orebibou.com/2015/04/%E3%81%93%E3%82%8C%E3%81%AF%E3%81%99%E3%81%94%E3%81%84%EF%BC%81telnet%E3%81%A7%E5%88%A9%E7%94%A8%E5%87%BA%E6%9D%A5%E3%82%8B%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B94%E5%80%8B/#2Telnet)\n\n``` bash\n$ telnet graph.no 79\ntokyo\n                     -= Meteogram for japan/tokyo/tokyo =-\n \'C                                                                   Rain\n  7                                                ^^^^^^\n  6                                             ^^^\n  5                                       ^^^^^^         ^^^\n  4^^^^^^                              ^^^                  ^^^\n  3      ^^^^^^                                                ---\n  2            =--                  ^^^                           ---\n  1               =--\n  0                  =--=--      ^^^\n -1                        =--=--\n -2\n    21 22 23 00 01 02 03 04 05 06_07_08_09_10_11_12_13_14_15_16 17 18 Hour\n\n     W NW NE NE NE  N  N NW NW NW NW NW NW  N  N NW NW NW NW NW NW NW Wind dir.\n     1  0  1  2  2  3  4  4  4  5  7  6  8  9  8  7  8 11 12 12 12 11 Wind(mps)\n\nLegend left axis:   - Sunny   ^ Scattered   = Clouded   =V= Thunder   # Fog\nLegend right axis:  | Rain    ! Sleet       * Snow\n[Weather forecast from yr.no, delivered by the Norwegian Meteorological Institute and the NRK.]\nConnection closed by foreign host.\n```\n\n## ランダムなプロフィールを作成:rig\n\n用途は全く分かりません。詳しい人教えてください（笑）\n\n#### 使ってみる\n\n``` bash\n$ sudo apt install -y rig\n\n$ rig\nMaria Fitzgerald\n579 Henly Dr\nVancouver, WA  98661\n(206) xxx-xxxx\n\n$ rig\nLincoln Kennedy\n485 Tomkins Blcd\nMiami, FL  33152\n(305) xxx-xxxx\n```\n## いろんなゲームを遊ぼう：BSD-Games\n\nUNIXの古典的なゲームをまとめたパッケージ。\nいろんなゲームがあります。詳細は下記をご参照ください。\nhttp://wiki.linuxquestions.org/wiki/BSD_games\n\n``` bash\n$ sudo apt install -y bsdgames\n\n$ /usr/games/worm\n Worm\nl*k\n*                                                        *\n*                                                        *\n*                                                        *\n*                                                        *\n*                                                        *\n*                                                    8   *\n* ooooooooooooooooooooo@                                 *\n*                                                        *\n*                                                        *\n*                                                        *\n*                                                        *\n```\n\n## 流れる文字で気分良く：cmatrix \n\nMatrixで出てくるあの画面を再現するコマンド\n\n#### 使ってみる\n\n``` bash\n$ apt install cmatrix\n```\n\nコーヒー休憩とかする時にスクリーンセーバとして流しておくと中二感満載で好きです。\nターミナルのリサイズもサポートされています。\n\n![linux-toy-cmatrix-animated.gif](https://qiita-image-store.s3.amazonaws.com/0/258841/b941fd53-c7ff-04d7-82e6-3750ed71135a.gif)\n\nカタカナ入りもあるようです。お好みで使い分けましょう\n[will8211/unimatrix](https://github.com/will8211/unimatrix)\n\n``` bash\n$ sudo curl -L https://raw.githubusercontent.com/will8211/unimatrix/master/unimatrix.py -o /usr/local/bin/unimatrix\n$ sudo chmod a+rx /usr/local/bin/unimatrix\n$ unimatrix\n```\n\n## Emacsで遊べる:テトリス\n\nネタでは無いですが仕事で豆知識的にemacsでテトリスを遊ぶ方法\nemacsとは有名なエディタですがゲームがデフォルトで入っているらしいです。\n\n\n``` bash\n$ emacs\n# ESC + X を入力後にtetrisと入力\n```\n\n![無題.png](https://qiita-image-store.s3.amazonaws.com/0/258841/42e61744-cc87-2fe2-7cd6-539116e211ee.png)\n\n\n他にも下記のようなゲームが標準で搭載されている。\nvim以外認めん！って人も試してみてもよさそう。\n\n* ハノイの塔：hanoi\n* 五目並べ：gomoku\n* スネーク：snake\n\n## まとめ\n\n仕事で日の目を見ることはないと思いますが個人用のマシンへ入れて暇つぶしに使うのはいいのかなって思います。\nおススメのジョークコマンドとかあれば教えてください！\n\n## 参考リンク\n\n[ジョークコマンドまとめ](http://opensourcetech.hatenablog.jp/entry/2017/10/26/%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%AF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%BE%E3%81%A8%E3%82%81)\n[Linuxのジョークコマンド11個をまとめてみた](https://orebibou.com/2014/06/linux%E3%81%AE%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%AF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%8911%E5%80%8B%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F/)\n', 'coediting': False, 'comments_count': 9, 'created_at': '2019-01-25T21:00:37+09:00', 'group': None, 'id': '598cb0571a2576ecd0e1', 'likes_count': 530, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'コマンド', 'versions': []}, {'name': 'ネタ', 'versions': []}], 'title': '仕事で役に立たない！Linuxネタコマンド集', 'updated_at': '2019-02-11T22:17:35+09:00', 'url': 'https://qiita.com/ryuichi1208/items/598cb0571a2576ecd0e1', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/b9d155f1c0a52d07d913c42bf74c1d21b99b24c7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34653365353436352d336436332d383463662d616461342d3234643131303638313439652e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/b9d155f1c0a52d07d913c42bf74c1d21b99b24c7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34653365353436352d336436332d383463662d616461342d3234643131303638313439652e6a706567" alt="20150307003237.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/4e3e5465-3d63-84cf-ada4-24d11068149e.jpeg"></a></p>\n\n<p>システム全体の実行待ちプロセス数の平均値</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>CPU使用率だったりAverageLoadだったりを見てサーバの負荷度だったりを調査する必要があってそれについていろいろ疑問だった点をまとめました。<br>\n間違い等あればご指摘お願いします。</p>\n\n<p>ボトルネック調査の順で言うととりあえず最初にやるかなって所を書いてます</p>\n\n<p>1.CPU使用率 ★対象<br>\n2.メモリ使用量<br>\n3.ディスクI/O<br>\n4.TCPコネクション数</p>\n\n<p><a href="https://github.com/torvalds/linux" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/torvalds/linux</a></p>\n\n<h2>\n<span id="load-averageって" class="fragment"></span><a href="#load-average%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>Load Averageって？</h2>\n\n<p>ロードアベレージはシステム全体の負荷状況を表す指標。<br>\n「1CPUにおける単位時間あたりの実行待ちとディスクI/O待ちのプロセスの数」で表される。</p>\n\n<p>Linuxカーネルはプロセス１つごとにプロセスディスクリプタを持っている。<br>\nLinuxでのプロセスディスクリプタはtask_struct構造体という名前になっていて、プロセスに関する全ての情報が入っています。</p>\n\n<p>以下はtask_structの実装の一部です。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">include/linux/sched.h</span></div>\n<div class="highlight"><pre><span class="k">struct</span> <span class="n">task_struct</span> <span class="p">{</span>\n\n    <span class="c1">// コンテキストスイッチ時にスタックポインタ、インストラクションポインタなどを保存する領域</span>\n    <span class="k">struct</span> <span class="n">thread_info</span>      <span class="n">thread_info</span><span class="p">;</span>\n    <span class="c1">// プロセスの状態</span>\n    <span class="k">volatile</span> <span class="kt">long</span>           <span class="n">state</span><span class="p">;</span>\n    <span class="c1">// 優先度</span>\n    <span class="kt">int</span>             <span class="n">prio</span><span class="p">;</span>\n    <span class="c1">// プロセスの仮想メモリ空間に関する情報(ページテーブルなど)を記録</span>\n    <span class="k">struct</span> <span class="n">mm_struct</span>        <span class="o">*</span><span class="n">mm</span><span class="p">;</span>\n\n    <span class="c1">// 他にもいろいろとプロセスに関する情報を保持している</span>\n    <span class="kt">int</span>             <span class="n">static_prio</span><span class="p">;</span>\n    <span class="kt">int</span>             <span class="n">normal_prio</span><span class="p">;</span>\n    <span class="kt">unsigned</span> <span class="kt">int</span>            <span class="n">rt_priority</span><span class="p">;</span>\n    <span class="kt">int</span>             <span class="n">exit_state</span><span class="p">;</span>\n    <span class="kt">int</span>             <span class="n">exit_code</span><span class="p">;</span>\n    <span class="kt">int</span>             <span class="n">exit_signal</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>システムで実行中のプロセスは、IO待ちなどにより一時的に実行を中断している状態などがあります。<br>\n以下はプロセスの状態です。</p>\n\n<ul>\n<li>TASK_RUNNING: 実行中・実行待ちの状態</li>\n<li>TASK_STOPPED: 実行中断になった状態</li>\n<li>TASK_ZOMBIE: ゾンビプロセス</li>\n<li>TASK_UNINTERRUPTABLE: 割り込み不能な待ち状態</li>\n<li>TASK_INTERRUPTABLE: 割り込み可能な待ち状態。ハードウェア割り込み、システム資源の解放、シグナルなどの要因により起床</li>\n</ul>\n\n<p>今回取り上げるLoad Averageは上記のうちRUNNINGとUNINTERRUPTABLEの和がLoad Averageとなっています。<br>\nアクティブなプロセス数の算出をしている処理。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">kernel/sched/loadavg.c</span></div>\n<div class="highlight"><pre><span class="kt">long</span> <span class="nf">calc_load_fold_active</span><span class="p">(</span><span class="k">struct</span> <span class="n">rq</span> <span class="o">*</span><span class="n">this_rq</span><span class="p">,</span> <span class="kt">long</span> <span class="n">adjust</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="kt">long</span> <span class="n">nr_active</span><span class="p">,</span> <span class="n">delta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n\n    <span class="n">nr_active</span> <span class="o">=</span> <span class="n">this_rq</span><span class="o">-&gt;</span><span class="n">nr_running</span> <span class="o">-</span> <span class="n">adjust</span><span class="p">;</span>\n    <span class="n">nr_active</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">this_rq</span><span class="o">-&gt;</span><span class="n">nr_uninterruptible</span><span class="p">;</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="n">nr_active</span> <span class="o">!=</span> <span class="n">this_rq</span><span class="o">-&gt;</span><span class="n">calc_load_active</span><span class="p">)</span> <span class="p">{</span>\n        <span class="n">delta</span> <span class="o">=</span> <span class="n">nr_active</span> <span class="o">-</span> <span class="n">this_rq</span><span class="o">-&gt;</span><span class="n">calc_load_active</span><span class="p">;</span>\n        <span class="n">this_rq</span><span class="o">-&gt;</span><span class="n">calc_load_active</span> <span class="o">=</span> <span class="n">nr_active</span><span class="p">;</span>\n    <span class="p">}</span>\n\n    <span class="k">return</span> <span class="n">delta</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>構造体rqはCPU毎のrunqueueデータ構造を表している<br>\n上記で述べた状態のプロセス数などもこの構造体を参照して引っ張り出しています。<br>\n※task_struct同様巨大な構造体なので使いそうなのだけ抜き出してます</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">kernel/sched/sched.h</span></div>\n<div class="highlight"><pre><span class="k">struct</span> <span class="n">rq</span> <span class="p">{</span>\n    <span class="cm">/* runqueue lock: */</span>\n    <span class="n">raw_spinlock_t</span>      <span class="n">lock</span><span class="p">;</span>\n\n    <span class="kt">unsigned</span> <span class="kt">int</span>        <span class="n">nr_running</span><span class="p">;</span>\n    <span class="kt">unsigned</span> <span class="kt">long</span>       <span class="n">nr_uninterruptible</span><span class="p">;</span>\n\n    <span class="k">struct</span> <span class="n">task_struct</span>  <span class="o">*</span><span class="n">curr</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">task_struct</span>  <span class="o">*</span><span class="n">idle</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">task_struct</span>  <span class="o">*</span><span class="n">stop</span><span class="p">;</span>\n</pre></div>\n</div>\n\n<p>PSコマンドで見えるプロセスの状態を表すアルファベットはそれぞれ下記の意味を持つ<br>\nこの中でもロードアベレージに影響をもたらすのはDとRです。</p>\n\n<ul>\n<li>D Uninterruptible sleep (usually IO)</li>\n<li>R Running or runnable (on run queue)</li>\n<li>S Interruptible sleep (waiting for an event to complete)</li>\n<li>T Stopped, either by a job control signal or because it is being traced.</li>\n<li>W paging (not valid since the 2.6.xx kernel)</li>\n<li>X dead (should never be seen)</li>\n<li>Z Defunct ("zombie") process, terminated but not reaped by its parent.</li>\n</ul>\n\n<h2>\n<span id="cpu使用率とloadaverageの違い" class="fragment"></span><a href="#cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E3%81%A8loadaverage%E3%81%AE%E9%81%95%E3%81%84"><i class="fa fa-link"></i></a>CPU使用率とLoadAverageの違い</h2>\n\n<p>LoadAverageとCPU使用率はすごく混同しがちで現に自分も調べるまで同じニュアンスで使っていた。<br>\n実際に調べてみる厳密に違うことが分かった。</p>\n\n<p>LoadAverageは実行状態 + 実行可能状態のプロセス数の平均を示す<br>\nそれに対しCPU使用率とはプログラムが効率的にCPUを使えているかの値であり<br>\n所与の時間に対してどれだけCPUが稼働したかを占める割合を指します。</p>\n\n<h2>\n<span id="load-averageを確認する" class="fragment"></span><a href="#load-average%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>Load Averageを確認する</h2>\n\n<p>Load Averageは以下のコマンドで確認できます</p>\n\n<ul>\n<li>uptime</li>\n<li>w</li>\n<li>top</li>\n<li>sar</li>\n</ul>\n\n<h4>\n<span id="uptimeコマンド" class="fragment"></span><a href="#uptime%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>uptimeコマンド</h4>\n\n<p>システムの稼働時間を見るコマンド<br>\nLoadAverageと現在のログインユーザ数も確認できます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">uptime\n </span>05:01:16 up 12:52,  2 <span class="nb">users</span>,  load average: 0.09, 0.09, 0.04\n</pre></div></div>\n\n<h4>\n<span id="wコマンド" class="fragment"></span><a href="#w%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>wコマンド</h4>\n\n<p>システムに誰がログインしていて何をしているかを表すコマンド<br>\nログイン夕のほかユーザの端末や実行中のプログラムなんかも見れます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>w\n 05:00:53 up 12:52,  2 <span class="nb">users</span>,  load average: 0.13, 0.10, 0.04\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nryu      :0       :0               Sat06   ?xdm?   4:59   0.05s /usr/lib/gdm3/gdm-x-session <span class="nt">--run-script</span> <span class="nb">env </span>GNOME\nryu      pts/1    192.168.1.117    04:59    1.00s  0.10s  0.06s w\n</pre></div></div>\n\n<h4>\n<span id="topコマンド" class="fragment"></span><a href="#top%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>topコマンド</h4>\n\n<p>システムの様々な統計を同時に表示し変化を監視することができるコマンド<br>\ntopコマンドについては下記記事が詳細を分かりやすく説明してくれてるのでおススメです。<br>\n<a href="https://qiita.com/k0kubun/items/7368c323d90f24a00c2f" id="reference-a8683468b8240a4bf80f">topコマンドの使い方</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>top\ntop - 04:59:28 up 12:50,  2 <span class="nb">users</span>,  load average: 0.43, 0.12, 0.04\nTasks: 250 total,   2 running, 248 sleeping,   0 stopped,   0 zombie\n%Cpu<span class="o">(</span>s<span class="o">)</span>: 10.0 us, 22.0 sy,  0.0 ni, 30.0 <span class="nb">id</span>, 18.0 wa,  0.0 hi, 20.0 si,  0.0 st\nMiB Mem :   1969.9 total,    265.8 free,    962.5 used,    741.6 buff/cache\nMiB Swap:   1425.6 total,   1416.0 free,      9.6 used.    804.2 avail Mem\n\n   PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n  2391 ryu       20   0 2770156 164156  67796 R  31.8   8.1   0:34.09 gnome-shell\n 12645 ryu       20   0   35784   3944   3212 R   4.5   0.2   0:00.08 top\n</pre></div></div>\n\n<h4>\n<span id="sarコマンド" class="fragment"></span><a href="#sar%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>sarコマンド</h4>\n\n<p>sysstatパッケージに含まれている、システムの統計情報を取得するコマンド<br>\nロードアベレージ以外にも多彩な情報を取得できる。<br>\nsarコマンドについては下記記事が詳細を分かりやすく説明してくれてるのでおススメです。<br>\n<a href="https://qiita.com/makaaso/items/6e27a2f0948241891667" id="reference-e350442cf3415a7ea66f">Linux - sarコマンドについて</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>sar <span class="nt">-q</span> <span class="nt">-s</span> 21:00:00\n21時00分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15\n21時05分01秒         1       203      0.19      0.20      0.16\n21時10分01秒         0       203      0.21      0.18      0.17\n21時15分01秒         2       209      0.11      0.18      0.17\n21時20分01秒         1       208      0.38      0.20      0.18\n21時25分01秒         0       210      0.10      0.20      0.18\n平均値:          1       207      0.20      0.19      0.17\n</pre></div></div>\n\n<p>簡単に見方を書くと以下のようになっている。</p>\n\n<ul>\n<li>runq-sz CPUを実行する為のメモリー内で待機中のカーネルスレッド数。通常、この値は 2 未満になる。</li>\n<li>plist-sz プロセスリストのプロセスとスレッド数</li>\n<li>ldavg-1 過去1分間のロードアベレージ</li>\n<li>ldavg-5 過去5分間のロードアベレージ</li>\n<li>ldavg-15 過去15分間のロードアベレージ</li>\n</ul>\n\n<h2>\n<span id="算出方法" class="fragment"></span><a href="#%E7%AE%97%E5%87%BA%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>算出方法</h2>\n\n<p>Active なプロセス数は calc_load_tasks 変数で管理されていて、activeなプロセスを算出している。<br>\navenrun[] に保持されています。これは要素数 3 の配列で、それぞれ 1, 5, 15分間の平均値を格納しています。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">kernel/sched/loadavg.c</span></div>\n<div class="highlight"><pre><span class="kt">void</span> <span class="nf">calc_global_load</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ticks</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">sample_window</span><span class="p">;</span>\n    <span class="kt">long</span> <span class="n">active</span><span class="p">,</span> <span class="n">delta</span><span class="p">;</span>\n\n    <span class="n">sample_window</span> <span class="o">=</span> <span class="n">READ_ONCE</span><span class="p">(</span><span class="n">calc_load_update</span><span class="p">);</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">time_before</span><span class="p">(</span><span class="n">jiffies</span><span class="p">,</span> <span class="n">sample_window</span> <span class="o">+</span> <span class="mi">10</span><span class="p">))</span>\n        <span class="k">return</span><span class="p">;</span>\n\n    <span class="n">delta</span> <span class="o">=</span> <span class="n">calc_load_nohz_fold</span><span class="p">();</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">delta</span><span class="p">)</span>\n        <span class="n">atomic_long_add</span><span class="p">(</span><span class="n">delta</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">calc_load_tasks</span><span class="p">);</span>\n\n    <span class="c1">// 現在アクティブなプロセス数を算出</span>\n    <span class="n">active</span> <span class="o">=</span> <span class="n">atomic_long_read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">calc_load_tasks</span><span class="p">);</span>\n    <span class="n">active</span> <span class="o">=</span> <span class="n">active</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">active</span> <span class="o">*</span> <span class="n">FIXED_1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>\n\n    <span class="c1">// それぞれ 1, 5, 15分間の平均値を格納</span>\n    <span class="c1">// 実際の計算はcalc_load 関数内で行っている</span>\n    <span class="n">avenrun</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">calc_load</span><span class="p">(</span><span class="n">avenrun</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">EXP_1</span><span class="p">,</span> <span class="n">active</span><span class="p">);</span>\n    <span class="n">avenrun</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">calc_load</span><span class="p">(</span><span class="n">avenrun</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">EXP_5</span><span class="p">,</span> <span class="n">active</span><span class="p">);</span>\n    <span class="n">avenrun</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">calc_load</span><span class="p">(</span><span class="n">avenrun</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">EXP_15</span><span class="p">,</span> <span class="n">active</span><span class="p">);</span>\n\n    <span class="n">WRITE_ONCE</span><span class="p">(</span><span class="n">calc_load_update</span><span class="p">,</span> <span class="n">sample_window</span> <span class="o">+</span> <span class="n">LOAD_FREQ</span><span class="p">);</span>\n\n    <span class="n">calc_global_nohz</span><span class="p">();</span>\n<span class="p">}</span>\n\n<span class="cm">/*\n* @param load 前回の Load Average\n* @param exp 平均をとる期間ごとに定められた定数\n* @param active 現在の Active なプロセス数\n*/</span>\n<span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">long</span>\n<span class="nf">calc_load</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">load</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">exp</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">active</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="n">load</span> <span class="o">*=</span> <span class="n">exp</span><span class="p">;</span>\n    <span class="n">load</span> <span class="o">+=</span> <span class="n">active</span> <span class="o">*</span> <span class="p">(</span><span class="n">FIXED_1</span> <span class="o">-</span> <span class="n">exp</span><span class="p">);</span>\n    <span class="k">return</span> <span class="n">load</span> <span class="o">&gt;&gt;</span> <span class="n">FSHIFT</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="余談--カーネルスレッドとは" class="fragment"></span><a href="#%E4%BD%99%E8%AB%87--%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>余談① : カーネルスレッドとは</h2>\n\n<p>カーネルの補助的な処理を行うもの。特定のカーネル関数を実行したりする。<br>\nカーネルスレッドを生成する際はexecはしていない。ユーザーモードにならずカーネルスレッドとして生成される。<br>\n代表的ななものとして、プロセスIDが1のすべての親となるinitがある。</p>\n\n<p>大きな特徴としてカーネルスレッドはカーネルモードのみでしか実行されない点。<br>\n(通常のプロセスはカーネルモードとユーザモードが交互に入れ替わる)</p>\n\n<p>以下はカーネルスレッド生成の実装部分。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">arch/x86/kernel/process.c</span></div>\n<div class="highlight"><pre><span class="kt">int</span> <span class="nf">kernel_thread</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">fn</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">flags</span><span class="p">)</span>\n<span class="p">{</span>\n        <span class="k">struct</span> <span class="n">pt_regs</span> <span class="n">regs</span><span class="p">;</span>\n\n        <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">regs</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">regs</span><span class="p">));</span>\n\n        <span class="n">regs</span><span class="p">.</span><span class="n">si</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">fn</span><span class="p">;</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">di</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">arg</span><span class="p">;</span>\n\n<span class="cp">#ifdef CONFIG_X86_32\n</span>        <span class="n">regs</span><span class="p">.</span><span class="n">ds</span> <span class="o">=</span> <span class="n">__USER_DS</span><span class="p">;</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">es</span> <span class="o">=</span> <span class="n">__USER_DS</span><span class="p">;</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">__KERNEL_PERCPU</span><span class="p">;</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">gs</span> <span class="o">=</span> <span class="n">__KERNEL_STACK_CANARY</span><span class="p">;</span>\n<span class="cp">#else\n</span>        <span class="n">regs</span><span class="p">.</span><span class="n">ss</span> <span class="o">=</span> <span class="n">__KERNEL_DS</span><span class="p">;</span>\n<span class="cp">#endif\n</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">orig_ax</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">ip</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">kernel_thread_helper</span><span class="p">;</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">cs</span> <span class="o">=</span> <span class="n">__KERNEL_CS</span> <span class="o">|</span> <span class="n">get_kernel_rpl</span><span class="p">();</span>\n        <span class="n">regs</span><span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="n">X86_EFLAGS_IF</span> <span class="o">|</span> <span class="n">X86_EFLAGS_BIT1</span><span class="p">;</span>\n\n        <span class="cm">/* Ok, create the new process.. */</span>\n        <span class="k">return</span> <span class="n">do_fork</span><span class="p">(</span><span class="n">flags</span> <span class="o">|</span> <span class="n">CLONE_VM</span> <span class="o">|</span> <span class="n">CLONE_UNTRACED</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">regs</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="余談スピンロックについて" class="fragment"></span><a href="#%E4%BD%99%E8%AB%87%E3%82%B9%E3%83%94%E3%83%B3%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>余談②：スピンロックについて</h2>\n\n<p>何度か出てくる用語スピンロックについて。</p>\n\n<p>マルチプロセッサ環境において，各CPUが同じリソースに同時アクセスする際に用いられる排他制御の仕組み。<br>\n1つのリソースに対して1つのロック用の変数をメモリー上に展開します。ロック変数を取得できたCPUだけがリソースへアクセスできる。</p>\n\n<p>スレッドが短時間だけブロックされるなら、スピンロックは効率的<br>\nただし，他のCPUがアクセス中は他のCPUは処理が実行できずにwait状態になります。故にEBUSYが頻繁に発生すると処理効率が悪くなるためリソース管理も別途必要になる(細かく分けるなど)。<br>\nロックの同時アクセスの可能性を考慮するのは難しい。</p>\n\n<p>参考：<a href="https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%94%E3%83%B3%E3%83%AD%E3%83%83%E3%82%AF" class="autolink" rel="nofollow noopener" target="_blank">https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%94%E3%83%B3%E3%83%AD%E3%83%83%E3%82%AF</a></p>\n\n<h2>\n<span id="感想" class="fragment"></span><a href="#%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>感想</h2>\n\n<p>サーバ側の負荷情報が実際どのように算出されれているのかの実装が分かった。<br>\nプロセスの状態だったりは意識したりすることが少ないのでこれからも読み進めていきたい。</p>\n\n<h2>\n<span id="まとめ的なの" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81%E7%9A%84%E3%81%AA%E3%81%AE"><i class="fa fa-link"></i></a>まとめ(的なの)</h2>\n\n<p>ロードアベレージは、CPUの負荷を表しているわけではなく、<br>\n以下の状態のプロセスの数を集計したものです。</p>\n\n<p>①実行中または実行待ちのプロセス<br>\npsコマンドで表示した場合に"R"となっているプロセス</p>\n\n<p>②割り込み不可でスリープしているプロセス<br>\npsコマンドで表示した場合に"D"となっているプロセス<br>\nスリープ状態のため、システムへの負荷はありません。</p>\n\n<p>何で割り込み負荷プロセスもLoadAverage？って思った方は下記を読むことをおススメします。<br>\nLinuxが何故このような実装を行ったのか歴史的経緯を説明してくれている記事です。<br>\n<a href="http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html" rel="nofollow noopener" target="_blank">Linux Load Averages: Solving the Mystery</a></p>\n\n<h2>\n<span id="参考サイト" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88"><i class="fa fa-link"></i></a>参考サイト</h2>\n\n<p><a href="http://d.hatena.ne.jp/naoya/20070518/1179492085" rel="nofollow noopener" target="_blank">マルチコア時代のロードアベレージの見方</a><br>\n<a href="https://www.techscore.com/blog/2017/12/08/how_is_load_average_calculated/" rel="nofollow noopener" target="_blank">Load Average はどうやって算出されているのか</a><br>\n<a href="https://qiita.com/toshihirock/items/c121400dd58c5d77f85a" id="reference-16645c95f10c36fa64c0">LoadAverage(ロードアベレージ)について</a><br>\n<a href="https://github.com/torvalds/linux" rel="nofollow noopener" target="_blank">torvalds/linux</a></p>\n', 'body': '![20150307003237.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/4e3e5465-3d63-84cf-ada4-24d11068149e.jpeg)\n\nシステム全体の実行待ちプロセス数の平均値\n\n## 背景\n\nCPU使用率だったりAverageLoadだったりを見てサーバの負荷度だったりを調査する必要があってそれについていろいろ疑問だった点をまとめました。\n間違い等あればご指摘お願いします。\n\nボトルネック調査の順で言うととりあえず最初にやるかなって所を書いてます\n\n1.CPU使用率 ★対象\n2.メモリ使用量\n3.ディスクI/O\n4.TCPコネクション数\n\nhttps://github.com/torvalds/linux\n\n## Load Averageって？\n\nロードアベレージはシステム全体の負荷状況を表す指標。\n「1CPUにおける単位時間あたりの実行待ちとディスクI/O待ちのプロセスの数」で表される。\n\nLinuxカーネルはプロセス１つごとにプロセスディスクリプタを持っている。\nLinuxでのプロセスディスクリプタはtask_struct構造体という名前になっていて、プロセスに関する全ての情報が入っています。\n\n以下はtask_structの実装の一部です。\n\n``` c:include/linux/sched.h\nstruct task_struct {\n\n\t// コンテキストスイッチ時にスタックポインタ、インストラクションポインタなどを保存する領域\n\tstruct thread_info\t\tthread_info;\n\t// プロセスの状態\n\tvolatile long\t\t\tstate;\n\t// 優先度\n\tint\t\t\t\tprio;\n\t// プロセスの仮想メモリ空間に関する情報(ページテーブルなど)を記録\n\tstruct mm_struct\t\t*mm;\n\n\t// 他にもいろいろとプロセスに関する情報を保持している\n\tint\t\t\t\tstatic_prio;\n\tint\t\t\t\tnormal_prio;\n\tunsigned int\t\t\trt_priority;\n\tint\t\t\t\texit_state;\n\tint\t\t\t\texit_code;\n\tint\t\t\t\texit_signal;\n}\n```\n\nシステムで実行中のプロセスは、IO待ちなどにより一時的に実行を中断している状態などがあります。\n以下はプロセスの状態です。\n\n* TASK_RUNNING: 実行中・実行待ちの状態\n* TASK_STOPPED: 実行中断になった状態\n* TASK_ZOMBIE: ゾンビプロセス\n* TASK_UNINTERRUPTABLE: 割り込み不能な待ち状態\n* TASK_INTERRUPTABLE: 割り込み可能な待ち状態。ハードウェア割り込み、システム資源の解放、シグナルなどの要因により起床\n\n今回取り上げるLoad Averageは上記のうちRUNNINGとUNINTERRUPTABLEの和がLoad Averageとなっています。\nアクティブなプロセス数の算出をしている処理。\n\n``` c:kernel/sched/loadavg.c\nlong calc_load_fold_active(struct rq *this_rq, long adjust)\n{\n\tlong nr_active, delta = 0;\n\n\tnr_active = this_rq->nr_running - adjust;\n\tnr_active += (long)this_rq->nr_uninterruptible;\n\n\tif (nr_active != this_rq->calc_load_active) {\n\t\tdelta = nr_active - this_rq->calc_load_active;\n\t\tthis_rq->calc_load_active = nr_active;\n\t}\n\n\treturn delta;\n}\n```\n\n構造体rqはCPU毎のrunqueueデータ構造を表している\n上記で述べた状態のプロセス数などもこの構造体を参照して引っ張り出しています。\n※task_struct同様巨大な構造体なので使いそうなのだけ抜き出してます\n\n``` c:kernel/sched/sched.h\nstruct rq {\n\t/* runqueue lock: */\n\traw_spinlock_t\t\tlock;\n\n\tunsigned int\t\tnr_running;\n\tunsigned long\t\tnr_uninterruptible;\n\n\tstruct task_struct\t*curr;\n\tstruct task_struct\t*idle;\n\tstruct task_struct\t*stop;\n```\n\nPSコマンドで見えるプロセスの状態を表すアルファベットはそれぞれ下記の意味を持つ\nこの中でもロードアベレージに影響をもたらすのはDとRです。\n\n* D Uninterruptible sleep (usually IO)\n* R Running or runnable (on run queue)\n* S Interruptible sleep (waiting for an event to complete)\n* T Stopped, either by a job control signal or because it is being traced.\n* W paging (not valid since the 2.6.xx kernel)\n* X dead (should never be seen)\n* Z Defunct ("zombie") process, terminated but not reaped by its parent.\n\n## CPU使用率とLoadAverageの違い\n\nLoadAverageとCPU使用率はすごく混同しがちで現に自分も調べるまで同じニュアンスで使っていた。\n実際に調べてみる厳密に違うことが分かった。\n\nLoadAverageは実行状態 + 実行可能状態のプロセス数の平均を示す\nそれに対しCPU使用率とはプログラムが効率的にCPUを使えているかの値であり\n所与の時間に対してどれだけCPUが稼働したかを占める割合を指します。\n\n\n\n## Load Averageを確認する\n\nLoad Averageは以下のコマンドで確認できます\n\n* uptime\n* w\n* top\n* sar\n\n#### uptimeコマンド\n\nシステムの稼働時間を見るコマンド\nLoadAverageと現在のログインユーザ数も確認できます。\n\n``` bash\n$ uptime\n 05:01:16 up 12:52,  2 users,  load average: 0.09, 0.09, 0.04\n```\n\n#### wコマンド\n\nシステムに誰がログインしていて何をしているかを表すコマンド\nログイン夕のほかユーザの端末や実行中のプログラムなんかも見れます。\n\n``` bash\n$ w\n 05:00:53 up 12:52,  2 users,  load average: 0.13, 0.10, 0.04\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nryu      :0       :0               Sat06   ?xdm?   4:59   0.05s /usr/lib/gdm3/gdm-x-session --run-script env GNOME\nryu      pts/1    192.168.1.117    04:59    1.00s  0.10s  0.06s w\n```\n\n#### topコマンド\n\nシステムの様々な統計を同時に表示し変化を監視することができるコマンド\ntopコマンドについては下記記事が詳細を分かりやすく説明してくれてるのでおススメです。\n[topコマンドの使い方](https://qiita.com/k0kubun/items/7368c323d90f24a00c2f)\n\n``` bash\n$ top\ntop - 04:59:28 up 12:50,  2 users,  load average: 0.43, 0.12, 0.04\nTasks: 250 total,   2 running, 248 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 10.0 us, 22.0 sy,  0.0 ni, 30.0 id, 18.0 wa,  0.0 hi, 20.0 si,  0.0 st\nMiB Mem :   1969.9 total,    265.8 free,    962.5 used,    741.6 buff/cache\nMiB Swap:   1425.6 total,   1416.0 free,      9.6 used.    804.2 avail Mem\n\n   PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n  2391 ryu       20   0 2770156 164156  67796 R  31.8   8.1   0:34.09 gnome-shell\n 12645 ryu       20   0   35784   3944   3212 R   4.5   0.2   0:00.08 top\n```\n\n#### sarコマンド\n\nsysstatパッケージに含まれている、システムの統計情報を取得するコマンド\nロードアベレージ以外にも多彩な情報を取得できる。\nsarコマンドについては下記記事が詳細を分かりやすく説明してくれてるのでおススメです。\n[Linux - sarコマンドについて](https://qiita.com/makaaso/items/6e27a2f0948241891667)\n\n``` bash\n$ sar -q -s 21:00:00\n21時00分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15\n21時05分01秒         1       203      0.19      0.20      0.16\n21時10分01秒         0       203      0.21      0.18      0.17\n21時15分01秒         2       209      0.11      0.18      0.17\n21時20分01秒         1       208      0.38      0.20      0.18\n21時25分01秒         0       210      0.10      0.20      0.18\n平均値:          1       207      0.20      0.19      0.17\n```\n\n簡単に見方を書くと以下のようになっている。\n\n* runq-sz CPUを実行する為のメモリー内で待機中のカーネルスレッド数。通常、この値は 2 未満になる。\n* plist-sz プロセスリストのプロセスとスレッド数\n* ldavg-1 過去1分間のロードアベレージ\n* ldavg-5 過去5分間のロードアベレージ\n* ldavg-15 過去15分間のロードアベレージ\n\n## 算出方法\n\nActive なプロセス数は calc_load_tasks 変数で管理されていて、activeなプロセスを算出している。\navenrun[] に保持されています。これは要素数 3 の配列で、それぞれ 1, 5, 15分間の平均値を格納しています。\n\n\n``` c:kernel/sched/loadavg.c\nvoid calc_global_load(unsigned long ticks)\n{\n\tunsigned long sample_window;\n\tlong active, delta;\n\n\tsample_window = READ_ONCE(calc_load_update);\n\tif (time_before(jiffies, sample_window + 10))\n\t\treturn;\n\n\tdelta = calc_load_nohz_fold();\n\tif (delta)\n\t\tatomic_long_add(delta, &calc_load_tasks);\n\n\t// 現在アクティブなプロセス数を算出\n\tactive = atomic_long_read(&calc_load_tasks);\n\tactive = active > 0 ? active * FIXED_1 : 0;\n\n\t// それぞれ 1, 5, 15分間の平均値を格納\n\t// 実際の計算はcalc_load 関数内で行っている\n\tavenrun[0] = calc_load(avenrun[0], EXP_1, active);\n\tavenrun[1] = calc_load(avenrun[1], EXP_5, active);\n\tavenrun[2] = calc_load(avenrun[2], EXP_15, active);\n\n\tWRITE_ONCE(calc_load_update, sample_window + LOAD_FREQ);\n\n\tcalc_global_nohz();\n}\n\n/*\n* @param load 前回の Load Average\n* @param exp 平均をとる期間ごとに定められた定数\n* @param active 現在の Active なプロセス数\n*/\nstatic unsigned long\ncalc_load(unsigned long load, unsigned long exp, unsigned long active)\n{\n\tload *= exp;\n\tload += active * (FIXED_1 - exp);\n\treturn load >> FSHIFT;\n}\n```\n\n## 余談① : カーネルスレッドとは\n\nカーネルの補助的な処理を行うもの。特定のカーネル関数を実行したりする。\nカーネルスレッドを生成する際はexecはしていない。ユーザーモードにならずカーネルスレッドとして生成される。\n代表的ななものとして、プロセスIDが1のすべての親となるinitがある。\n\n大きな特徴としてカーネルスレッドはカーネルモードのみでしか実行されない点。\n(通常のプロセスはカーネルモードとユーザモードが交互に入れ替わる)\n\n以下はカーネルスレッド生成の実装部分。\n\n``` c:arch/x86/kernel/process.c\nint kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)\n{\n        struct pt_regs regs;\n\n        memset(&regs, 0, sizeof(regs));\n\n        regs.si = (unsigned long) fn;\n        regs.di = (unsigned long) arg;\n\n#ifdef CONFIG_X86_32\n        regs.ds = __USER_DS;\n        regs.es = __USER_DS;\n        regs.fs = __KERNEL_PERCPU;\n        regs.gs = __KERNEL_STACK_CANARY;\n#else\n        regs.ss = __KERNEL_DS;\n#endif\n\n        regs.orig_ax = -1;\n        regs.ip = (unsigned long) kernel_thread_helper;\n        regs.cs = __KERNEL_CS | get_kernel_rpl();\n        regs.flags = X86_EFLAGS_IF | X86_EFLAGS_BIT1;\n\n        /* Ok, create the new process.. */\n        return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);\n}\n```\n\n## 余談②：スピンロックについて\n\n何度か出てくる用語スピンロックについて。\n\nマルチプロセッサ環境において，各CPUが同じリソースに同時アクセスする際に用いられる排他制御の仕組み。\n1つのリソースに対して1つのロック用の変数をメモリー上に展開します。ロック変数を取得できたCPUだけがリソースへアクセスできる。\n\nスレッドが短時間だけブロックされるなら、スピンロックは効率的\nただし，他のCPUがアクセス中は他のCPUは処理が実行できずにwait状態になります。故にEBUSYが頻繁に発生すると処理効率が悪くなるためリソース管理も別途必要になる(細かく分けるなど)。\nロックの同時アクセスの可能性を考慮するのは難しい。\n\n参考：https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%94%E3%83%B3%E3%83%AD%E3%83%83%E3%82%AF\n\n## 感想\n\nサーバ側の負荷情報が実際どのように算出されれているのかの実装が分かった。\nプロセスの状態だったりは意識したりすることが少ないのでこれからも読み進めていきたい。\n\n## まとめ(的なの)\n\nロードアベレージは、CPUの負荷を表しているわけではなく、\n以下の状態のプロセスの数を集計したものです。\n\n①実行中または実行待ちのプロセス\npsコマンドで表示した場合に"R"となっているプロセス\n\n②割り込み不可でスリープしているプロセス\npsコマンドで表示した場合に"D"となっているプロセス\nスリープ状態のため、システムへの負荷はありません。\n\n何で割り込み負荷プロセスもLoadAverage？って思った方は下記を読むことをおススメします。\nLinuxが何故このような実装を行ったのか歴史的経緯を説明してくれている記事です。\n[Linux Load Averages: Solving the Mystery](http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html)\n\n## 参考サイト\n\n[マルチコア時代のロードアベレージの見方](http://d.hatena.ne.jp/naoya/20070518/1179492085)\n[Load Average はどうやって算出されているのか](https://www.techscore.com/blog/2017/12/08/how_is_load_average_calculated/)\n[LoadAverage(ロードアベレージ)について](https://qiita.com/toshihirock/items/c121400dd58c5d77f85a)\n[torvalds/linux](https://github.com/torvalds/linux)\n', 'coediting': False, 'comments_count': 2, 'created_at': '2019-01-23T20:51:31+09:00', 'group': None, 'id': '3b21aee6c38bcfdb12b1', 'likes_count': 63, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}], 'title': '【Linux】Load Averageに関するいろは', 'updated_at': '2019-01-27T13:04:55+09:00', 'url': 'https://qiita.com/ryuichi1208/items/3b21aee6c38bcfdb12b1', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/5b30fb1639127988cc73e8802dcacd295f52399a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63343163633430392d313463382d613637302d623938362d3465383330613466396530382e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/5b30fb1639127988cc73e8802dcacd295f52399a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63343163633430392d313463382d613637302d623938362d3465383330613466396530382e6a706567" alt="ダウンロード (3).jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/c41cc409-14c8-a670-b986-4e830a4f9e08.jpeg"></a></p>\n\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>サーバにSSHで入ろうとして失敗するときの原因特定までの流れを書いた記事。<br>\n失敗の原因はデバッグモードで起動することでなんとなく見えてくる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ssh <span class="nt">-vvv</span> <span class="o">{</span><span class="nb">hostname</span><span class="o">}</span>\n</pre></div></div>\n\n<p>後はログを見て解決しましょう。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>less /var/log/auth.log\n</pre></div></div>\n\n<h2>\n<span id="opensshとは" class="fragment"></span><a href="#openssh%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>OpenSSHとは</h2>\n\n<p>OpenSSH (Open Secure Shell) は、SSHプロトコルを利用するためのソフトウェア<br>\n以下は主要なコマンド。原因調査というよりは問題解決に使うコマンドですね。</p>\n\n<ul>\n<li>ssh-keygen</li>\n<li>ssh-copy-id</li>\n</ul>\n\n<p>日本語のマニュアルは下記<br>\n<a href="https://euske.github.io/openssh-jman/" class="autolink" rel="nofollow noopener" target="_blank">https://euske.github.io/openssh-jman/</a></p>\n\n<h2>\n<span id="失敗したときにとりあえず試すこと" class="fragment"></span><a href="#%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E8%A9%A6%E3%81%99%E3%81%93%E3%81%A8"><i class="fa fa-link"></i></a>失敗したときにとりあえず試すこと</h2>\n\n<p>失敗したらログ見る前にとりあえず以下を試してます。<br>\nサーバ構築直後だったりすると設定ミスとかを疑います。</p>\n\n<ul>\n<li>Pingが通ること</li>\n<li>ユーザ名・パスワード</li>\n<li>sshdサービスが起動していること</li>\n<li>SSHで利用するポートが開いていること</li>\n<li>ログインの認証方式が正しいこと</li>\n</ul>\n\n<h2>\n<span id="エラーメッセージが出力される場合" class="fragment"></span><a href="#%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%8C%E5%87%BA%E5%8A%9B%E3%81%95%E3%82%8C%E3%82%8B%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>エラーメッセージが出力される場合</h2>\n\n<p>TeraTermとかで直接入るわけではなくサーバを経由して入る場合はエラーメッセージが見れます。<br>\nそれをヒントに調査していきます。<br>\n以下はよくあるメッセージと対処法です。</p>\n\n<h4>\n<span id="temporary-failure-in-name-resolution" class="fragment"></span><a href="#temporary-failure-in-name-resolution"><i class="fa fa-link"></i></a>Temporary failure in name resolution</h4>\n\n<p>名前解決に失敗しているときに出るメッセージ<br>\nDNSや「/etc/hosts」の設定を疑ってみましょう。</p>\n\n<h4>\n<span id="no-route-to-host" class="fragment"></span><a href="#no-route-to-host"><i class="fa fa-link"></i></a>No route to host</h4>\n\n<p>サーバー側の SSH ポートと合っていない場合に出力される<br>\n以下2点を疑いましょう。</p>\n\n<ul>\n<li>サーバー側の SSH サービスのポート設定</li>\n<li>サーバー側のファイアーウォールの許可設定で SSH のポートが上記と同じポート番号であるか</li>\n</ul>\n\n<div class="code-frame" data-lang="/etc/ssh/sshd_config"><div class="highlight"><pre>#Port 22 \n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n\n# 書き換えたらリスタート\n$ sudo systemctl restart ssh\n</pre></div></div>\n\n<p>設定ファイルではPORTでSSHのポートが設定できる。<br>\nこれが22以外になっている場合はSSHクライアント側でポートの指定が必要<br>\n「-p PORT番号」で指定できます。</p>\n\n<p>ファイアウォールの場合はSSHを許可する<br>\n閉じた環境ならそもそもfirewalldを停止させてもいい気がする()</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># sshのデフォルトポートを許可</span>\n<span class="nv">$ </span><span class="nb">sudo </span>ufw allow ssh\n\n<span class="c"># 指定したポートを許可。ついでにデフォルトポートを閉じる</span>\n<span class="nv">$ </span><span class="nb">sudo </span>ufw deny ssh\n<span class="nv">$ </span><span class="nb">sudo </span>ufw allow 2222\n<span class="nv">$ </span><span class="nb">sudo </span>ufw <span class="nb">enable</span>\n\n<span class="c"># 書き換えたらリスタート</span>\n<span class="nv">$ </span><span class="nb">sudo </span>systemctl restart ssh\n</pre></div></div>\n\n<h4>\n<span id="remote-host-identification-has-changed" class="fragment"></span><a href="#remote-host-identification-has-changed"><i class="fa fa-link"></i></a>REMOTE HOST IDENTIFICATION HAS CHANGED!</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now <span class="o">(</span>man-in-the-middle attack<span class="o">)!</span>\nIt is also possible that the RSA host key has just been changed.\nThe fingerprint <span class="k">for </span>the RSA key sent by the remote host is\n29:24:c2:69:a3:b0:dc:4d:23:fc:9d:85:9f:ea:01:9b.\nPlease contact your system administrator.\nAdd correct host key <span class="k">in</span> /home/grgrjnjn/.ssh/known_hosts to get rid of this message.\nOffending key <span class="k">in</span> /home/grgrjnjn/.ssh/known_hosts:3\nRSA host key <span class="k">for </span>remote_host has changed and you have requested strict checking.\nHost key verification failed.\n</pre></div></div>\n\n<p>SSHでは、安全な接続を行うために接続先サーバのRSA公開鍵のフィンガープリントを、クライアントは保存する。SSH接続時には、以前保存したこの情報と、いままさに接続しようとしているサーバの情報が一致しているかを確認する。この時にサーバ情報が一致しないと上みたいなメッセージが出る。<br>\nOS入れ替えとか鍵の再生成とかするとIPは同じでも出力されるメッセージ<br>\n下記で対応できる</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ ssh-keygen -R hostname\n</pre></div></div>\n\n<p>やってることは~/.ssh/known_hostsから該当するサーバの情報を削除している。<br>\nこれによりサーバ情報をいったん削除し新たにSSHを行う。</p>\n\n<h4>\n<span id="permission-denied" class="fragment"></span><a href="#permission-denied"><i class="fa fa-link"></i></a>Permission denied</h4>\n\n<p>ユーザ名/パスワードの確認は必須としてあとは鍵関連のパーミッションだったりを疑う<br>\n前に一回あったのがユーザ名/パスワードはあってるのにだめで原因を探るとユーザがロックされているパターン</p>\n\n<p>■サーバー側</p>\n\n<ul>\n<li>ホームディレクトリのパーミッションが755かそれより厳しくなってる</li>\n<li>.sshディレクトリのパーミッションが0700になっている</li>\n<li>.ssh/authorized_keysのパーミッションが0600になっている</li>\n</ul>\n\n<p>■クライアント側</p>\n\n<ul>\n<li>ホームディレクトリのパーミッションが755かそれより厳しくなってる</li>\n<li>.sshディレクトリのパーミッションが0700になっている</li>\n<li>秘密鍵のパーミッションが0600になっている</li>\n</ul>\n\n<h4>\n<span id="warning-identity-file--not-accessible" class="fragment"></span><a href="#warning-identity-file--not-accessible"><i class="fa fa-link"></i></a>Warning: Identity file /* not accessible</h4>\n\n<p>-iなどで鍵ファイルを指定した際に読込みに失敗したか、その指定ディレクトリに該当の鍵がないという警告です。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ssh <span class="nt">-i</span> 鍵のパス remote_host\nWarning: Identity file /<span class="k">*</span> not accessible: No such file or directory.\n</pre></div></div>\n\n<h4>\n<span id="received-disconnect-from--" class="fragment"></span><a href="#received-disconnect-from--"><i class="fa fa-link"></i></a>Received disconnect from * ~</h4>\n\n<p>ユーザー名での認証をした回数が制限を超えてしまったとき出る<br>\nサーバ側でユーザロック解除が必要。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>Received disconnect from <span class="o">[</span><span class="k">*</span>IPアドレス]: 2: Too many authentication failures <span class="k">for</span> <span class="o">[</span><span class="k">*</span>username]\n</pre></div></div>\n\n<h4>\n<span id="ssh-protocol-v1-is-no-longer-supported" class="fragment"></span><a href="#ssh-protocol-v1-is-no-longer-supported"><i class="fa fa-link"></i></a>SSH protocol v.1 is no longer supported</h4>\n\n<p>古いルータや機器だとsshのバージョンが古いときに出るメッセージ<br>\nsshクライアントがmacOSだと出るらしいです。<br>\nどのバージョンからサポートが切れたのかは不明ですがEl Capitan時代はv1も使えたとのこと。自前で昔のopensshのインストールする必要があるらしい(未検証)</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ssh <span class="nt">-V</span>\nOpenSSH_7.8p1, LibreSSL 2.7.3\n</pre></div></div>\n\n<h2>\n<span id="sshのちょっとした小技" class="fragment"></span><a href="#ssh%E3%81%AE%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%97%E3%81%9F%E5%B0%8F%E6%8A%80"><i class="fa fa-link"></i></a>sshのちょっとした小技</h2>\n\n<h4>\n<span id="パスなしログインの設定を簡略化" class="fragment"></span><a href="#%E3%83%91%E3%82%B9%E3%81%AA%E3%81%97%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E7%B0%A1%E7%95%A5%E5%8C%96"><i class="fa fa-link"></i></a>パスなしログインの設定を簡略化</h4>\n\n<p>鍵認証による ssh を行おうとすると ssh する元のサーバで公開鍵を生成してそれを ssh 先のサーバに持って行って.ssh/authorized_keysに追記しないといけない。<br>\nこれを毎回手動でやってたがssh-copy-idというコマンドで一発でできる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ssh-copy-id <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>@<span class="k">${</span><span class="nv">remote_host</span><span class="k">}</span>\n\n<span class="c"># -iオプションで任意の公開鍵を指定することもできる</span>\n<span class="nv">$ </span>ssh-copy-id <span class="nt">-i</span> <span class="k">${</span><span class="nv">identity_file</span><span class="k">}</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>@<span class="k">${</span><span class="nv">remote_host</span><span class="k">}</span>\n</pre></div></div>\n\n<h4>\n<span id="ユーザ指定がめんどくさいとき" class="fragment"></span><a href="#%E3%83%A6%E3%83%BC%E3%82%B6%E6%8C%87%E5%AE%9A%E3%81%8C%E3%82%81%E3%82%93%E3%81%A9%E3%81%8F%E3%81%95%E3%81%84%E3%81%A8%E3%81%8D"><i class="fa fa-link"></i></a>ユーザ指定がめんどくさいとき</h4>\n\n<p>複数ホストへ特定のユーザで入る必要があるときユーザ名をsshで毎回打つのがめんどくさいときは~/.ssh/configに設定を行えばユーザ指定なしで特定のユーザで接続を行ってくれる。</p>\n\n<div class="code-frame" data-lang="text">\n<div class="code-lang"><span class="bold">~/.ssh/config</span></div>\n<div class="highlight"><pre>Host 任意の接続名(hoge)\n# Host HOST_??のように書けばHOST_01,HOST02などを一括で認識する\nHostName ホスト名\nUser ユーザー名\nPort ポート番号\n</pre></div>\n</div>\n\n<p>上記のように設定しておけばあとはssh remoteホストで指定ポート/ユーザで接続してくれる。</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">項目</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">Host</td>\n<td style="text-align: left">SSH 接続する際に利用する名前</td>\n</tr>\n<tr>\n<td style="text-align: left">Hostname</td>\n<td style="text-align: left">接続先ホストのアドレス、または FQDN を指定</td>\n</tr>\n<tr>\n<td style="text-align: left">Port</td>\n<td style="text-align: left">接続先ホストで sshd が Listen しているポートを指定</td>\n</tr>\n<tr>\n<td style="text-align: left">IdentityFile</td>\n<td style="text-align: left">秘密鍵のパスを指定</td>\n</tr>\n<tr>\n<td style="text-align: left">User</td>\n<td style="text-align: left">SSH 接続する際に利用するユーザ名を指定</td>\n</tr>\n<tr>\n<td style="text-align: left">ProxyCommand</td>\n<td style="text-align: left">接続先ホストで実行するコマンドを指定</td>\n</tr>\n</tbody>\n</table>\n\n<p>ProxyCommandを設定しておけば多段接続が必要なマシンへのログインもとても楽になる<br>\n<a href="https://rcmdnk.com/blog/2014/06/08/comptuer-linux-windows-putty/" rel="nofollow noopener" target="_blank">多段ssh設定のまとめ</a></p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>以上がSSHできないときの個人的な調査観点でした。<br>\nとりあえず-vvvオプションとauth.log見とけば解決することが多いです。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://orebibou.com/2014/12/ssh%E3%82%B5%E3%83%BC%E3%83%90%E3%81%B8%E6%8E%A5%E7%B6%9A%E5%87%BA%E6%9D%A5%E3%81%AA%E3%81%84%E3%83%BB%E9%81%85%E3%81%84%E6%99%82%E3%81%AE%E5%8E%9F%E5%9B%A0%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95/" rel="nofollow noopener" target="_blank">SSHサーバへ接続出来ない・遅い時の原因と対処法</a><br>\n<a href="https://qiita.com/tag1216/items/5d06bad7468f731f590e" id="reference-81ec23a3608efd3f7ab1">インフラエンジニアじゃなくても押さえておきたいSSHの基礎知識</a></p>\n', 'body': '![ダウンロード (3).jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/c41cc409-14c8-a670-b986-4e830a4f9e08.jpeg)\n\n## 概要\n\nサーバにSSHで入ろうとして失敗するときの原因特定までの流れを書いた記事。\n失敗の原因はデバッグモードで起動することでなんとなく見えてくる\n\n``` bash\n$ ssh -vvv {hostname}\n```\n\n後はログを見て解決しましょう。\n\n``` bash\n$ less /var/log/auth.log\n```\n\n## OpenSSHとは\n\nOpenSSH (Open Secure Shell) は、SSHプロトコルを利用するためのソフトウェア\n以下は主要なコマンド。原因調査というよりは問題解決に使うコマンドですね。\n\n* ssh-keygen\n* ssh-copy-id\n\n日本語のマニュアルは下記\nhttps://euske.github.io/openssh-jman/\n\n## 失敗したときにとりあえず試すこと\n\n失敗したらログ見る前にとりあえず以下を試してます。\nサーバ構築直後だったりすると設定ミスとかを疑います。\n\n* Pingが通ること\n* ユーザ名・パスワード\n* sshdサービスが起動していること\n* SSHで利用するポートが開いていること\n* ログインの認証方式が正しいこと\n\n## エラーメッセージが出力される場合\n\nTeraTermとかで直接入るわけではなくサーバを経由して入る場合はエラーメッセージが見れます。\nそれをヒントに調査していきます。\n以下はよくあるメッセージと対処法です。\n\n#### Temporary failure in name resolution\n\n名前解決に失敗しているときに出るメッセージ\nDNSや「/etc/hosts」の設定を疑ってみましょう。\n\n#### No route to host\n\nサーバー側の SSH ポートと合っていない場合に出力される\n以下2点を疑いましょう。\n\n* サーバー側の SSH サービスのポート設定\n* サーバー側のファイアーウォールの許可設定で SSH のポートが上記と同じポート番号であるか\n\n``` /etc/ssh/sshd_config\n#Port 22 \n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n\n# 書き換えたらリスタート\n$ sudo systemctl restart ssh\n```\n\n設定ファイルではPORTでSSHのポートが設定できる。\nこれが22以外になっている場合はSSHクライアント側でポートの指定が必要\n「-p PORT番号」で指定できます。\n\nファイアウォールの場合はSSHを許可する\n閉じた環境ならそもそもfirewalldを停止させてもいい気がする()\n\n``` bash\n# sshのデフォルトポートを許可\n$ sudo ufw allow ssh\n\n# 指定したポートを許可。ついでにデフォルトポートを閉じる\n$ sudo ufw deny ssh\n$ sudo ufw allow 2222\n$ sudo ufw enable\n\n# 書き換えたらリスタート\n$ sudo systemctl restart ssh\n```\n\n#### REMOTE HOST IDENTIFICATION HAS CHANGED!\n\n``` bash\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that the RSA host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\n29:24:c2:69:a3:b0:dc:4d:23:fc:9d:85:9f:ea:01:9b.\nPlease contact your system administrator.\nAdd correct host key in /home/grgrjnjn/.ssh/known_hosts to get rid of this message.\nOffending key in /home/grgrjnjn/.ssh/known_hosts:3\nRSA host key for remote_host has changed and you have requested strict checking.\nHost key verification failed.\n```\n\nSSHでは、安全な接続を行うために接続先サーバのRSA公開鍵のフィンガープリントを、クライアントは保存する。SSH接続時には、以前保存したこの情報と、いままさに接続しようとしているサーバの情報が一致しているかを確認する。この時にサーバ情報が一致しないと上みたいなメッセージが出る。\nOS入れ替えとか鍵の再生成とかするとIPは同じでも出力されるメッセージ\n下記で対応できる\n\n```\n$ ssh-keygen -R hostname\n```\n\nやってることは~/.ssh/known_hostsから該当するサーバの情報を削除している。\nこれによりサーバ情報をいったん削除し新たにSSHを行う。\n\n#### Permission denied\n\nユーザ名/パスワードの確認は必須としてあとは鍵関連のパーミッションだったりを疑う\n前に一回あったのがユーザ名/パスワードはあってるのにだめで原因を探るとユーザがロックされているパターン\n\n\n■サーバー側\n\n* ホームディレクトリのパーミッションが755かそれより厳しくなってる\n* .sshディレクトリのパーミッションが0700になっている\n* .ssh/authorized_keysのパーミッションが0600になっている\n\n■クライアント側\n\n* ホームディレクトリのパーミッションが755かそれより厳しくなってる\n* .sshディレクトリのパーミッションが0700になっている\n* 秘密鍵のパーミッションが0600になっている\n\n#### Warning: Identity file /* not accessible\n\n-iなどで鍵ファイルを指定した際に読込みに失敗したか、その指定ディレクトリに該当の鍵がないという警告です。\n\n``` bash\n$ ssh -i 鍵のパス remote_host\nWarning: Identity file /* not accessible: No such file or directory.\n```\n\n#### Received disconnect from * ~\n\nユーザー名での認証をした回数が制限を超えてしまったとき出る\nサーバ側でユーザロック解除が必要。\n\n``` bash\nReceived disconnect from [*IPアドレス]: 2: Too many authentication failures for [*username]\n```\n\n#### SSH protocol v.1 is no longer supported\n\n古いルータや機器だとsshのバージョンが古いときに出るメッセージ\nsshクライアントがmacOSだと出るらしいです。\nどのバージョンからサポートが切れたのかは不明ですがEl Capitan時代はv1も使えたとのこと。自前で昔のopensshのインストールする必要があるらしい(未検証)\n\n``` bash\n$ ssh -V\nOpenSSH_7.8p1, LibreSSL 2.7.3\n```\n\n## sshのちょっとした小技\n\n#### パスなしログインの設定を簡略化\n\n鍵認証による ssh を行おうとすると ssh する元のサーバで公開鍵を生成してそれを ssh 先のサーバに持って行って.ssh/authorized_keysに追記しないといけない。\nこれを毎回手動でやってたがssh-copy-idというコマンドで一発でできる\n\n``` bash\n$ ssh-copy-id ${USER}@${remote_host}\n\n# -iオプションで任意の公開鍵を指定することもできる\n$ ssh-copy-id -i ${identity_file} ${USER}@${remote_host}\n```\n\n#### ユーザ指定がめんどくさいとき\n\n複数ホストへ特定のユーザで入る必要があるときユーザ名をsshで毎回打つのがめんどくさいときは~/.ssh/configに設定を行えばユーザ指定なしで特定のユーザで接続を行ってくれる。\n\n``` ~/.ssh/config\nHost 任意の接続名(hoge)\n# Host HOST_??のように書けばHOST_01,HOST02などを一括で認識する\nHostName ホスト名\nUser ユーザー名\nPort ポート番号\n```\n\n上記のように設定しておけばあとはssh remoteホストで指定ポート/ユーザで接続してくれる。\n\n| 項目 | 説明 |\n|:--|:--|\n| Host | SSH 接続する際に利用する名前 |\n| Hostname | 接続先ホストのアドレス、または FQDN を指定 |\n| Port | 接続先ホストで sshd が Listen しているポートを指定 |\n| IdentityFile | 秘密鍵のパスを指定 |\n| User | SSH 接続する際に利用するユーザ名を指定 |\n| ProxyCommand | 接続先ホストで実行するコマンドを指定 |\n\nProxyCommandを設定しておけば多段接続が必要なマシンへのログインもとても楽になる\n[多段ssh設定のまとめ](https://rcmdnk.com/blog/2014/06/08/comptuer-linux-windows-putty/)\n\n## まとめ\n\n以上がSSHできないときの個人的な調査観点でした。\nとりあえず-vvvオプションとauth.log見とけば解決することが多いです。\n\n## 参考リンク\n\n[SSHサーバへ接続出来ない・遅い時の原因と対処法](https://orebibou.com/2014/12/ssh%E3%82%B5%E3%83%BC%E3%83%90%E3%81%B8%E6%8E%A5%E7%B6%9A%E5%87%BA%E6%9D%A5%E3%81%AA%E3%81%84%E3%83%BB%E9%81%85%E3%81%84%E6%99%82%E3%81%AE%E5%8E%9F%E5%9B%A0%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95/)\n[インフラエンジニアじゃなくても押さえておきたいSSHの基礎知識](https://qiita.com/tag1216/items/5d06bad7468f731f590e)\n', 'coediting': False, 'comments_count': 1, 'created_at': '2019-01-20T14:39:14+09:00', 'group': None, 'id': '4151110327584c971f11', 'likes_count': 77, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'SSH', 'versions': []}], 'title': 'SSHできないときのトラブルシューティング', 'updated_at': '2019-01-20T14:52:46+09:00', 'url': 'https://qiita.com/ryuichi1208/items/4151110327584c971f11', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/1ec236fbaa36d8d277c7961b01a23b5350adec01/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62663563613432332d653638302d336265312d653734382d3364666431643063633665612e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/1ec236fbaa36d8d277c7961b01a23b5350adec01/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62663563613432332d653638302d336265312d653734382d3364666431643063633665612e6a706567" alt="RE2EbDL.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/bf5ca423-e680-3be1-e748-3dfd1d0cc6ea.jpeg"></a></p>\n\n<p>コマンドプロンプトはとりあえず 「winキー + R」って打ってcmdで開こう</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>PowerShellとかWSLとか一切無いような環境で作業する機会が発生しました。<br>\nコマンドプロンプトはcdとdirぐらいしか使ったこと無いから嫌だとか言ってる場合でも無いので<br>\nとりあえず備忘録的にまとめました。</p>\n\n<p>特に目新しいものでもなくホントの初心者の初心者用の記事です。<br>\nワンライナーとか便利コマンドあれば是非コメントください。</p>\n\n<h2>\n<span id="基本コマンド" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>基本コマンド</h2>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>内容</th>\n<th>使いそうなオプション</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dir</td>\n<td>現在のフォルダ内にある、ファイル、フォルダの一覧を示す</td>\n<td></td>\n</tr>\n<tr>\n<td>cd</td>\n<td>フォルダの移動。cdの後にパスを指定します</td>\n<td></td>\n</tr>\n<tr>\n<td>tree</td>\n<td>ディレクトリをツリー形式で表示</td>\n<td>/F 配下のファイルも全て表示</td>\n</tr>\n<tr>\n<td>xcopy</td>\n<td>ファイルをディレクトリ構造ごとコピーする</td>\n<td>/H 隠しファイルも全てコピー /Y 上書き確認無し</td>\n</tr>\n<tr>\n<td>copy</td>\n<td>ファイルをコピーする</td>\n<td></td>\n</tr>\n<tr>\n<td>del</td>\n<td>ファイルの削除</td>\n<td>/P 確認メッセージ入れる</td>\n</tr>\n<tr>\n<td>md</td>\n<td>ディレクトリの作成</td>\n<td></td>\n</tr>\n<tr>\n<td>rm</td>\n<td>ディレクトリの削除</td>\n<td></td>\n</tr>\n<tr>\n<td>ren</td>\n<td>ファイルやディレクトリのリネーム</td>\n<td></td>\n</tr>\n<tr>\n<td>cls</td>\n<td>画面のクリア</td>\n<td></td>\n</tr>\n<tr>\n<td>type</td>\n<td>ファイルの内容を表示</td>\n<td></td>\n</tr>\n<tr>\n<td>more</td>\n<td>ページャ。なぜかlessは無い。。。</td>\n<td>/e 拡張機能有効</td>\n</tr>\n<tr>\n<td>fc</td>\n<td>2ファイルを比較</td>\n<td></td>\n</tr>\n<tr>\n<td>find</td>\n<td>ファイル内の文字列を検索</td>\n<td>/V 検索結果を含まない行だけ /C検索文字列の行数</td>\n</tr>\n<tr>\n<td>findstr</td>\n<td>ファイル内の文字列を正規表現を使って検索</td>\n<td></td>\n</tr>\n<tr>\n<td>exit</td>\n<td>コマンドプロンプトを終了する</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="ネットワーク系" class="fragment"></span><a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E7%B3%BB"><i class="fa fa-link"></i></a>ネットワーク系</h2>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>内容</th>\n<th>使いそうなオプション</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ipconfig</td>\n<td>TCP/IPネットワーク設定を確認</td>\n<td>/all 詳細な設定を全て表示</td>\n</tr>\n<tr>\n<td>ping</td>\n<td>目的のIPアドレスまでパケットが正常に到達するか確認</td>\n<td>-L パケットサイズ指定 -N 送信回数指定</td>\n</tr>\n<tr>\n<td>tracert</td>\n<td>データの転送ルートを確認</td>\n<td></td>\n</tr>\n<tr>\n<td>netstat</td>\n<td>ネットワーク統計情報の表示</td>\n<td></td>\n</tr>\n<tr>\n<td>route</td>\n<td>IPルーティング・テーブルの表示</td>\n<td></td>\n</tr>\n<tr>\n<td>pathping</td>\n<td>ネットワーク転送の追跡</td>\n<td></td>\n</tr>\n<tr>\n<td>nslookup</td>\n<td>DNSネーム・サーバー情報の表示</td>\n<td></td>\n</tr>\n<tr>\n<td>arp</td>\n<td>ARPキャッシュの表示および変更</td>\n<td></td>\n</tr>\n<tr>\n<td>ftp</td>\n<td>FTPサーバーとの通信</td>\n<td></td>\n</tr>\n<tr>\n<td>rcp</td>\n<td>ファイルのリモート・コピー</td>\n<td></td>\n</tr>\n<tr>\n<td>rsh</td>\n<td>コマンドのリモート実行</td>\n<td></td>\n</tr>\n<tr>\n<td>schtasks</td>\n<td>スケジュールされているタスクを表示</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="システム系" class="fragment"></span><a href="#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%B3%BB"><i class="fa fa-link"></i></a>システム系</h2>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>内容</th>\n<th>使いそうなオプション</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>systeminfo</td>\n<td>システム構成やOS・ネットワークなどの設定情報を確認</td>\n<td>/fo csv csv形式で表示する</td>\n</tr>\n<tr>\n<td>shutdown</td>\n<td>シャットダウンだったり再起動を行う</td>\n<td>-r 再起動 -a シャットダウン中止</td>\n</tr>\n<tr>\n<td>eventcreate</td>\n<td>カスタムイベントを作成する</td>\n<td></td>\n</tr>\n<tr>\n<td>ver</td>\n<td>Windowsのバージョン表示</td>\n<td></td>\n</tr>\n<tr>\n<td>chkdsk</td>\n<td>ディスクの状態をチェックし、エラーを修復</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="その他" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96"><i class="fa fa-link"></i></a>その他</h2>\n\n<h4>\n<span id="コマンドのman的なのを見る" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AEman%E7%9A%84%E3%81%AA%E3%81%AE%E3%82%92%E8%A6%8B%E3%82%8B"><i class="fa fa-link"></i></a>コマンドのman的なのを見る</h4>\n\n<p>基本的にコマンド + /? でコマンドの使い方が見れる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">dir</span> /?\nディレクトリ中のファイルとサブディレクトリを一覧表示します。\n\nDIR <span class="o">[</span>ドライブ:][パス][ファイル名] <span class="o">[</span>/A[[:]属性]] <span class="o">[</span>/B] <span class="o">[</span>/C] <span class="o">[</span>/D] <span class="o">[</span>/L] <span class="o">[</span>/N]\n  <span class="o">[</span>/O[[:]ソート順]] <span class="o">[</span>/P] <span class="o">[</span>/Q] <span class="o">[</span>/R] <span class="o">[</span>/S] <span class="o">[</span>/T[[:]タイムフィールド]] <span class="o">[</span>/W] <span class="o">[</span>/X] <span class="o">[</span>/4]\n\n\n  <span class="o">[</span>ドライブ:][パス][ファイル名]\n              一覧表示するドライブ、ディレクトリ、またはファイルを指定します。\n\n  /A          指定された属性のファイルを表示します。\n  属性        D  ディレクトリ                R  読み取り専用\n              H  隠しファイル                A  アーカイブ\n              S  システム ファイル           I  非インデックス対象ファイル\n               L  再解析ポイント             -  その属性以外\n  /B          ファイル名のみを表示します <span class="o">(</span>見出しや要約が付きません<span class="o">)</span>。\n  /C          ファイル サイズを桁区切り表示します。これは\n              既定の設定です。/-C とすると桁区切り表示されません。\n  /D          /W と同じですが、ファイルを列で並べ替えた一覧を表示します。\n  /L          小文字で表示します。\n  /N          ファイル名を右端に表示する一覧形式を使用します。\n  /O          ファイルを並べ替えて表示します。\n  ソート順    N  名前順 <span class="o">(</span>アルファベット<span class="o">)</span>     S  サイズ順 <span class="o">(</span>小さい方から<span class="o">)</span>\n              E  拡張子順 <span class="o">(</span>アルファベット<span class="o">)</span>   D  日時順 <span class="o">(</span>古い方から<span class="o">)</span>\n              G  グループ <span class="o">(</span>ディレクトリから<span class="o">)</span> -  降順\n続行するには何かキーを押してください <span class="nb">.</span> <span class="nb">.</span> <span class="nb">.</span> \n\n</pre></div></div>\n\n<h2>\n<span id="使ってみた" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"><i class="fa fa-link"></i></a>使ってみた</h2>\n\n<h4>\n<span id="今開いているディレクトリをエクスプローラーで表示" class="fragment"></span><a href="#%E4%BB%8A%E9%96%8B%E3%81%84%E3%81%A6%E3%81%84%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%97%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%A7%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>今開いているディレクトリをエクスプローラーで表示</h4>\n\n<p>コマンドプロンプトで操作しながらアプリの起動とかをマウスで行ったり</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>start <span class="nb">.</span>\n</pre></div></div>\n\n<h4>\n<span id="拡張子を一括変換" class="fragment"></span><a href="#%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92%E4%B8%80%E6%8B%AC%E5%A4%89%E6%8F%9B"><i class="fa fa-link"></i></a>拡張子を一括変換</h4>\n\n<p>txtをdatへ一括で変換しています。<br>\n一括削除も同じ感じで使える。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>rename <span class="k">*</span>.txt <span class="k">*</span>.dat\n\n<span class="nv">$ </span>del <span class="k">*</span>.bak\n</pre></div></div>\n\n<h4>\n<span id="ファイアフォールを無効化する" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%82%A2%E3%83%95%E3%82%A9%E3%83%BC%E3%83%AB%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>ファイアフォールを無効化する</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>netsh advfirewall <span class="nb">set </span>allprofiles state off\n\n<span class="nv">$ </span>Set-NetFirewallProfile <span class="nt">-Profile</span> Domain,Public,Private <span class="nt">-Enabled</span> False\n</pre></div></div>\n\n<h4>\n<span id="ネットワークのドライブ割り当て" class="fragment"></span><a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6"><i class="fa fa-link"></i></a>ネットワークのドライブ割り当て</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>net use ドライブレター: <span class="se">\\フ</span>ォルダパス パスワード /user:ユーザアカウント\n</pre></div></div>\n\n<h4>\n<span id="プロセスの利用ポート一覧を表示する" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E5%88%A9%E7%94%A8%E3%83%9D%E3%83%BC%E3%83%88%E4%B8%80%E8%A6%A7%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>プロセスの利用ポート一覧を表示する</h4>\n\n<p>-bを追記すればプロセス名も取得できる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>netstat <span class="nt">-ano</span>\n</pre></div></div>\n\n<h4>\n<span id="プロセスidからプロセス名を特定する" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9id%E3%81%8B%E3%82%89%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E5%90%8D%E3%82%92%E7%89%B9%E5%AE%9A%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>プロセスIDからプロセス名を特定する</h4>\n\n<p>指定したPIDに対応するアプリケーション名が得られる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>tasklist /FI <span class="s2">"PID eq 2780"</span>\n</pre></div></div>\n\n<h4>\n<span id="特定のポートを使用しているプロセスを表示" class="fragment"></span><a href="#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%9D%E3%83%BC%E3%83%88%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%82%92%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>特定のポートを使用しているプロセスを表示</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>netstat <span class="nt">-oan</span> | findstr <span class="s2">":80"</span>\n</pre></div></div>\n\n<h4>\n<span id="連番のipアドレスのマシンに対してping" class="fragment"></span><a href="#%E9%80%A3%E7%95%AA%E3%81%AEip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6ping"><i class="fa fa-link"></i></a>連番のIPアドレスのマシンに対してping</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="k">for</span> %i <span class="k">in</span> <span class="o">(</span>1,2,3<span class="o">)</span> <span class="k">do </span>ping 192.168.0.%i\n</pre></div></div>\n\n<h4>\n<span id="複数ファイルをまとめて出力する" class="fragment"></span><a href="#%E8%A4%87%E6%95%B0%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>複数ファイルをまとめて出力する</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">type</span> <span class="k">*</span>.txt\n</pre></div></div>\n\n<h4>\n<span id="カレントディレクトリにある特定のファイルを一括で開く" class="fragment"></span><a href="#%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%82%E3%82%8B%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%B8%80%E6%8B%AC%E3%81%A7%E9%96%8B%E3%81%8F"><i class="fa fa-link"></i></a>カレントディレクトリにある特定のファイルを一括で開く</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="k">for</span> %V <span class="k">in</span> <span class="o">(</span> <span class="k">*</span>.txt <span class="o">)</span> <span class="k">do</span> %V\n</pre></div></div>\n\n<h4>\n<span id="ファイル内容の単語をキーにしてファイルの行を検索" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%86%85%E5%AE%B9%E3%81%AE%E5%8D%98%E8%AA%9E%E3%82%92%E3%82%AD%E3%83%BC%E3%81%AB%E3%81%97%E3%81%A6%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%A1%8C%E3%82%92%E6%A4%9C%E7%B4%A2"><i class="fa fa-link"></i></a>ファイル内容の単語をキーにしてファイルの行を検索</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>findstr /n /s <span class="s2">"hoge foo"</span> <span class="k">*</span>.txt\n</pre></div></div>\n\n<h4>\n<span id="ファイルをツリー形式で表示" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%84%E3%83%AA%E3%83%BC%E5%BD%A2%E5%BC%8F%E3%81%A7%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>ファイルをツリー形式で表示</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>tree /f\n</pre></div></div>\n\n<h4>\n<span id="出力結果をクリップボードへコピー" class="fragment"></span><a href="#%E5%87%BA%E5%8A%9B%E7%B5%90%E6%9E%9C%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%89%E3%81%B8%E3%82%B3%E3%83%94%E3%83%BC"><i class="fa fa-link"></i></a>出力結果をクリップボードへコピー</h4>\n\n<p>「コマンド + | clip」で出力結果がコピーされる<br>\nこれは結構便利かも</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">dir</span> | clip\n</pre></div></div>\n\n<h4>\n<span id="一つ前のディレクトリへ戻る" class="fragment"></span><a href="#%E4%B8%80%E3%81%A4%E5%89%8D%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E6%88%BB%E3%82%8B"><i class="fa fa-link"></i></a>一つ前のディレクトリへ戻る</h4>\n\n<p>linuxでいう「cd -」的なやつ。記憶できるのはちょっと便利</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 戻ってきたいディレクトリを記憶</span>\n<span class="nv">$ </span><span class="nb">pushd</span> <span class="nb">.</span>\n\n<span class="c"># 戻る</span>\n<span class="nb">popd</span>\n</pre></div></div>\n\n<h4>\n<span id="環境変数を参照編集" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E5%8F%82%E7%85%A7%E7%B7%A8%E9%9B%86"><i class="fa fa-link"></i></a>環境変数を参照/編集</h4>\n\n<p>環境変数の設定どこだよって何度もなるので</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 参照(全部)</span>\n<span class="nv">$ </span><span class="nb">set</span>\n\n<span class="c"># 参照(特定のもの)</span>\n<span class="nv">$ </span><span class="nb">echo</span> %path:<span class="p">;</span><span class="o">=</span> / %\n\n<span class="c"># 編集(末尾へ追記)</span>\n<span class="nv">$ </span><span class="nb">set </span><span class="nv">PATH</span><span class="o">=</span>%PATH%<span class="p">;</span>C:<span class="se">\\H</span>ogeHoge\n\n<span class="c"># 編集(先頭へ追記)</span>\n<span class="nv">$ </span><span class="nb">set </span><span class="nv">PATH</span><span class="o">=</span>C:<span class="se">\\H</span>ogeHoge<span class="p">;</span>%PATH%\n</pre></div></div>\n\n<h2>\n<span id="バッチファイル" class="fragment"></span><a href="#%E3%83%90%E3%83%83%E3%83%81%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB"><i class="fa fa-link"></i></a>バッチファイル</h2>\n\n<h4>\n<span id="いろんなディレクトリから特定のファイルの収集" class="fragment"></span><a href="#%E3%81%84%E3%82%8D%E3%82%93%E3%81%AA%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%8F%8E%E9%9B%86"><i class="fa fa-link"></i></a>いろんなディレクトリから特定のファイルの収集</h4>\n\n<p>ファイル名に「test_」と付いているファイルだけを集める</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>@echo off\n\ndir /b /s test_*.txt &gt; list.txt\n\nfor /f %%a in (list.txt) do (\n  copy "%%a" ./test_dir/\n)\n</pre></div></div>\n\n<h4>\n<span id="日付取得" class="fragment"></span><a href="#%E6%97%A5%E4%BB%98%E5%8F%96%E5%BE%97"><i class="fa fa-link"></i></a>日付取得</h4>\n\n<p>ログ用とかに日付や時間が欲しいとき</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>@echo off\n\n<span class="nb">set </span><span class="nv">YYYYMMDD</span><span class="o">=</span>%DATE:/<span class="o">=</span>%\n<span class="nb">dir</span> <span class="o">&gt;</span> result.txt.%YYYYMMDD%\n</pre></div></div>\n\n<h2>\n<span id="小技" class="fragment"></span><a href="#%E5%B0%8F%E6%8A%80"><i class="fa fa-link"></i></a>小技</h2>\n\n<h4>\n<span id="エクスプローラからコマンドプロンプトに移動する" class="fragment"></span><a href="#%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%97%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%8B%E3%82%89%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%AB%E7%A7%BB%E5%8B%95%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>エクスプローラからコマンドプロンプトに移動する</h4>\n\n<p>エクスプローラーで任意のディレクトリを開いた状態で「shift + 右クリック」で［コマンドウィンドウをここで開く］を選択<br>\nコマンドプロンプトのカレントディレクトリが上のディレクトリで開かれる</p>\n\n<h4>\n<span id="ドライブの切り替え" class="fragment"></span><a href="#%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E3%81%AE%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88"><i class="fa fa-link"></i></a>ドライブの切り替え</h4>\n\n<p>CドライブからDドライブへ移動</p>\n\n<p>d:[ENTER]</p>\n\n<h2>\n<span id="文字列操作" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E6%93%8D%E4%BD%9C"><i class="fa fa-link"></i></a>文字列操作</h2>\n\n<p>Vを変数としたときに表示フォーマットの指定<br>\n文字列操作は意外と直感的に使える。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>%V% \n変数Vの値全体|%V% ⇒「ABCDEFGHIJKL」\n\n%V:~m%\nm文字目から、最後まで|%V:~5% ⇒「FGHIJKL」\n\n%V:~m,n%\nm文字目から、n文字分|%V:~5,2% ⇒「FG」\n\n%V:~m,-n%\nm文字目から、最後のn文字分を除いたもの|%V:~5,-2% ⇒「FGHIJ」\n\n%V:~-m%\n後ろからm文字目から、最後まで|%V:~-5% ⇒「HIJKL」\n\n%V:~-m,n%\n後ろからm文字目から、n文字分|%V:~-5,2% ⇒「HI」\n\n%V:~-m,-n%\n後ろからm文字目から、最後のn文字分を除いたもの|%V:~-5,-2% ⇒「HIJ」\n</pre></div></div>\n\n<h2>\n<span id="所感" class="fragment"></span><a href="#%E6%89%80%E6%84%9F"><i class="fa fa-link"></i></a>所感</h2>\n\n<p>3日程作業したが全く慣れなかった。<br>\nとりあえずいろいろまとめたが多分しばらく慣れないと思う。</p>\n\n<h2>\n<span id="参考url" class="fragment"></span><a href="#%E5%8F%82%E8%80%83url"><i class="fa fa-link"></i></a>参考URL</h2>\n\n<p><a href="https://tech.nikkeibp.co.jp/it/free/NT/WinKeyWord/20040805/1/" rel="nofollow noopener" target="_blank">Windowsコマンド集</a><br>\n<a href="https://www.yutorism.jp/entry/2015/07/09/125950" rel="nofollow noopener" target="_blank">IT屋必見！\u3000『コマンドプロンプト』のストレスが少し減る小技集</a><br>\n<a href="http://kowaza.withinit.com/wincommand/cmd_command.html" rel="nofollow noopener" target="_blank">『コマンドプロンプト』で使えるコマンド一覧</a></p>\n', 'body': '![RE2EbDL.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/bf5ca423-e680-3be1-e748-3dfd1d0cc6ea.jpeg)\n\nコマンドプロンプトはとりあえず 「winキー + R」って打ってcmdで開こう\n\n## 背景\n\nPowerShellとかWSLとか一切無いような環境で作業する機会が発生しました。\nコマンドプロンプトはcdとdirぐらいしか使ったこと無いから嫌だとか言ってる場合でも無いので\nとりあえず備忘録的にまとめました。\n\n特に目新しいものでもなくホントの初心者の初心者用の記事です。\nワンライナーとか便利コマンドあれば是非コメントください。\n\n## 基本コマンド\n\n|コマンド|内容                                                   |使いそうなオプション|\n---------|-------------------------------------------------|--------------------\n|dir     |現在のフォルダ内にある、ファイル、フォルダの一覧を示す |\n|cd      |フォルダの移動。cdの後にパスを指定します               |\n|tree    |ディレクトリをツリー形式で表示                         |/F 配下のファイルも全て表示\n|xcopy   |ファイルをディレクトリ構造ごとコピーする               |/H 隠しファイルも全てコピー /Y 上書き確認無し\n|copy    |ファイルをコピーする                                   |\n|del     |ファイルの削除                                         |/P 確認メッセージ入れる\n|md      |ディレクトリの作成                                     |\n|rm      |ディレクトリの削除                                     |\n|ren     |ファイルやディレクトリのリネーム                       |\n|cls     |画面のクリア                                           |\n|type    |ファイルの内容を表示                                   |\n|more    |ページャ。なぜかlessは無い。。。                       |/e 拡張機能有効\n|fc      |2ファイルを比較                                        |\n|find    |ファイル内の文字列を検索                               |/V 検索結果を含まない行だけ /C検索文字列の行数\n|findstr |ファイル内の文字列を正規表現を使って検索               |\n|exit    |コマンドプロンプトを終了する                           |\n\n## ネットワーク系\n\n|コマンド|内容                                                   |使いそうなオプション|\n---------|-------------------------------------------------------|--------------------|\nipconfig |TCP/IPネットワーク設定を確認                           |/all 詳細な設定を全て表示\n|ping    |目的のIPアドレスまでパケットが正常に到達するか確認     |-L パケットサイズ指定 -N 送信回数指定\n|tracert |データの転送ルートを確認                               |\n|netstat |ネットワーク統計情報の表示                             |\n|route   |IPルーティング・テーブルの表示                         |\n|pathping|ネットワーク転送の追跡                                 |\n|nslookup|DNSネーム・サーバー情報の表示                          |\n|arp     |ARPキャッシュの表示および変更                          |\n|ftp     |FTPサーバーとの通信                                    |\n|rcp     |ファイルのリモート・コピー                             |\n|rsh     |コマンドのリモート実行                                 |\n|schtasks|スケジュールされているタスクを表示                     |\n\n## システム系\n\n|コマンド   |内容                                                   |使いそうなオプション|\n------------|-------------------------------------------------------|--------------------|\n|systeminfo |システム構成やOS・ネットワークなどの設定情報を確認     |/fo csv csv形式で表示する\n|shutdown   |シャットダウンだったり再起動を行う                     |-r 再起動 -a シャットダウン中止\n|eventcreate|カスタムイベントを作成する                             ||\n|ver        |Windowsのバージョン表示                                ||\n|chkdsk     |ディスクの状態をチェックし、エラーを修復               ||\n\n## その他\n\n#### コマンドのman的なのを見る\n\n基本的にコマンド + /? でコマンドの使い方が見れる\n\n``` bash\n$ dir /?\nディレクトリ中のファイルとサブディレクトリを一覧表示します。\n\nDIR [ドライブ:][パス][ファイル名] [/A[[:]属性]] [/B] [/C] [/D] [/L] [/N]\n  [/O[[:]ソート順]] [/P] [/Q] [/R] [/S] [/T[[:]タイムフィールド]] [/W] [/X] [/4]\n\n\n  [ドライブ:][パス][ファイル名]\n              一覧表示するドライブ、ディレクトリ、またはファイルを指定します。\n\n  /A          指定された属性のファイルを表示します。\n  属性        D  ディレクトリ                R  読み取り専用\n              H  隠しファイル                A  アーカイブ\n              S  システム ファイル           I  非インデックス対象ファイル\n               L  再解析ポイント             -  その属性以外\n  /B          ファイル名のみを表示します (見出しや要約が付きません)。\n  /C          ファイル サイズを桁区切り表示します。これは\n              既定の設定です。/-C とすると桁区切り表示されません。\n  /D          /W と同じですが、ファイルを列で並べ替えた一覧を表示します。\n  /L          小文字で表示します。\n  /N          ファイル名を右端に表示する一覧形式を使用します。\n  /O          ファイルを並べ替えて表示します。\n  ソート順    N  名前順 (アルファベット)     S  サイズ順 (小さい方から)\n              E  拡張子順 (アルファベット)   D  日時順 (古い方から)\n              G  グループ (ディレクトリから) -  降順\n続行するには何かキーを押してください . . . \n\n```\n\n## 使ってみた\n\n#### 今開いているディレクトリをエクスプローラーで表示\n\nコマンドプロンプトで操作しながらアプリの起動とかをマウスで行ったり\n\n``` bash\n$ start .\n```\n\n#### 拡張子を一括変換\n\ntxtをdatへ一括で変換しています。\n一括削除も同じ感じで使える。\n\n``` bash\n$ rename *.txt *.dat\n\n$ del *.bak\n```\n\n#### ファイアフォールを無効化する\n\n``` bash\n$ netsh advfirewall set allprofiles state off\n\n$ Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False\n```\n\n#### ネットワークのドライブ割り当て\n\n``` bash\n$ net use ドライブレター: \\フォルダパス パスワード /user:ユーザアカウント\n```\n\n#### プロセスの利用ポート一覧を表示する\n\n-bを追記すればプロセス名も取得できる\n\n``` bash\n$ netstat -ano\n```\n\n#### プロセスIDからプロセス名を特定する\n\n指定したPIDに対応するアプリケーション名が得られる\n\n``` bash\n$ tasklist /FI "PID eq 2780"\n```\n\n#### 特定のポートを使用しているプロセスを表示\n\n``` bash\n$ netstat -oan | findstr ":80"\n```\n\n#### 連番のIPアドレスのマシンに対してping\n\n``` bash\n$ for %i in (1,2,3) do ping 192.168.0.%i\n```\n\n#### 複数ファイルをまとめて出力する\n\n``` bash\n$ type *.txt\n```\n\n#### カレントディレクトリにある特定のファイルを一括で開く\n\n``` bash\n$ for %V in ( *.txt ) do %V\n```\n\n#### ファイル内容の単語をキーにしてファイルの行を検索\n\n``` bash\n$ findstr /n /s "hoge foo" *.txt\n```\n\n#### ファイルをツリー形式で表示\n\n``` bash\n$ tree /f\n```\n\n#### 出力結果をクリップボードへコピー\n\n「コマンド + | clip」で出力結果がコピーされる\nこれは結構便利かも\n\n``` bash\n$ dir | clip\n```\n\n#### 一つ前のディレクトリへ戻る\n\nlinuxでいう「cd -」的なやつ。記憶できるのはちょっと便利\n\n``` bash\n# 戻ってきたいディレクトリを記憶\n$ pushd .\n\n# 戻る\npopd\n```\n\n#### 環境変数を参照/編集\n\n環境変数の設定どこだよって何度もなるので\n\n``` bash\n# 参照(全部)\n$ set\n\n# 参照(特定のもの)\n$ echo %path:;= / %\n\n# 編集(末尾へ追記)\n$ set PATH=%PATH%;C:\\HogeHoge\n\n# 編集(先頭へ追記)\n$ set PATH=C:\\HogeHoge;%PATH%\n```\n\n## バッチファイル\n\n#### いろんなディレクトリから特定のファイルの収集\n\nファイル名に「test_」と付いているファイルだけを集める\n\n```\n@echo off\n \ndir /b /s test_*.txt > list.txt\n \nfor /f %%a in (list.txt) do (\n  copy "%%a" ./test_dir/\n)\n```\n\n#### 日付取得\n\nログ用とかに日付や時間が欲しいとき\n\n``` bash\n@echo off\n\nset YYYYMMDD=%DATE:/=%\ndir > result.txt.%YYYYMMDD%\n```\n\n## 小技\n\n#### エクスプローラからコマンドプロンプトに移動する\n\nエクスプローラーで任意のディレクトリを開いた状態で「shift + 右クリック」で［コマンドウィンドウをここで開く］を選択\nコマンドプロンプトのカレントディレクトリが上のディレクトリで開かれる\n\n#### ドライブの切り替え\n\nCドライブからDドライブへ移動\n\nd:[ENTER]\n\n## 文字列操作\n\nVを変数としたときに表示フォーマットの指定\n文字列操作は意外と直感的に使える。\n \n``` bash\n%V% \n変数Vの値全体|%V% ⇒「ABCDEFGHIJKL」\n\n%V:~m%\nm文字目から、最後まで|%V:~5% ⇒「FGHIJKL」\n\n%V:~m,n%\nm文字目から、n文字分|%V:~5,2% ⇒「FG」\n\n%V:~m,-n%\nm文字目から、最後のn文字分を除いたもの|%V:~5,-2% ⇒「FGHIJ」\n\n%V:~-m%\n後ろからm文字目から、最後まで|%V:~-5% ⇒「HIJKL」\n\n%V:~-m,n%\n後ろからm文字目から、n文字分|%V:~-5,2% ⇒「HI」\n\n%V:~-m,-n%\n後ろからm文字目から、最後のn文字分を除いたもの|%V:~-5,-2% ⇒「HIJ」\n```\n\n## 所感\n\n3日程作業したが全く慣れなかった。\nとりあえずいろいろまとめたが多分しばらく慣れないと思う。\n\n## 参考URL\n\n[Windowsコマンド集](https://tech.nikkeibp.co.jp/it/free/NT/WinKeyWord/20040805/1/)\n[IT屋必見！\u3000『コマンドプロンプト』のストレスが少し減る小技集](https://www.yutorism.jp/entry/2015/07/09/125950)\n[『コマンドプロンプト』で使えるコマンド一覧](http://kowaza.withinit.com/wincommand/cmd_command.html)\n', 'coediting': False, 'comments_count': 15, 'created_at': '2019-01-15T19:09:00+09:00', 'group': None, 'id': '4bf20f702176101a3ecf', 'likes_count': 386, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'コマンドプロンプト', 'versions': []}, {'name': 'バッチファイル', 'versions': []}, {'name': 'Windows10', 'versions': []}], 'title': '仕事で使えるかも知れないWindows コマンド＆ワンライナー集 + バッチファイル', 'updated_at': '2019-01-17T14:12:59+09:00', 'url': 'https://qiita.com/ryuichi1208/items/4bf20f702176101a3ecf', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/36ec3a76b35958d8544711a6d52cc44ea78ddeb7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37316239393239622d306366372d623363662d353563632d3736346139623634356561642e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/36ec3a76b35958d8544711a6d52cc44ea78ddeb7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37316239393239622d306366372d623363662d353563632d3736346139623634356561642e706e67" alt="ossinfo_icon_prometheus.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/71b9929b-0cf7-b3cf-55cc-764a9b645ead.png"></a></p>\n\n<p>Prometheus(プロメテウス)</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>それっぽい監視グラフをマウス操作メインでみたい人向けの記事<br>\n監視設計などについて触れていない。</p>\n\n<h2>\n<span id="prometheusとは" class="fragment"></span><a href="#prometheus%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Prometheusとは</h2>\n\n<p>オープンソースのサービス監視システムと時系列データベース。所謂監視ツールです。<br>\n開発言語は Go。</p>\n\n<p>Prometheus は一般的な監視ツールのように、データの収集、数値の表示、グラフの表示、アラートを出す機能があります。それだけでなく、Prometheus は独自のデータモデルを持ち、クエリ言語を使って時系列データの評価やグラフ化を行えます。</p>\n\n<p><a href="https://github.com/prometheus/prometheus" rel="nofollow noopener" target="_blank">prometheus/prometheus</a></p>\n\n<h2>\n<span id="アーキテクチャ" class="fragment"></span><a href="#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3"><i class="fa fa-link"></i></a>アーキテクチャ</h2>\n\n<p><a href="https://camo.qiitausercontent.com/ce02f45f0c8c5a9d0e7b73172cc35fe18a0fcab2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66383737633363322d383235612d633239312d613133382d3334333832393330313333612e706e67" target="_blank" rel="nofollow noopener"><img width="739" alt="スクリーンショット 2019-01-13 14.33.29.png" src="https://camo.qiitausercontent.com/ce02f45f0c8c5a9d0e7b73172cc35fe18a0fcab2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66383737633363322d383235612d633239312d613133382d3334333832393330313333612e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/f877c3c2-825a-c291-a138-34382930133a.png"></a></p>\n\n<p>公式に詳しい図があります。<br>\nデータは左から取得し、真ん中で処理、右側からのクエリに答えて時系列データを返します。といった流れです。<br>\nユーザ通知は細かく設定可能でデータ量などで通知を行っています。</p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<h2>\n<span id="とりあえず動作確認" class="fragment"></span><a href="#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"><i class="fa fa-link"></i></a>とりあえず動作確認</h2>\n\n<p>プロメテウスのDockerイメージは公開されているのでそちらを使わせていただきます。<br>\n<a href="https://hub.docker.com/r/prom/prometheus/" rel="nofollow noopener" target="_blank">prom/prometheus</a></p>\n\n<p>実行前にプロメテウス用のyamlを書きます。<br>\n以下は自分自身を監視対象としたyamlの例です。<br>\n内容は公式にあるものをそのまま利用しています。<br>\n<a href="https://prometheus.io/docs/prometheus/latest/getting_started/" class="autolink" rel="nofollow noopener" target="_blank">https://prometheus.io/docs/prometheus/latest/getting_started/</a></p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">prometheus.yml</span></div>\n<div class="highlight"><pre><span class="na">global</span><span class="pi">:</span>\n  <span class="na">scrape_interval</span><span class="pi">:</span>     <span class="s">15s</span> <span class="c1"># By default, scrape targets every 15 seconds.</span>\n\n  <span class="c1"># Attach these labels to any time series or alerts when communicating with</span>\n  <span class="c1"># external systems (federation, remote storage, Alertmanager).</span>\n  <span class="na">external_labels</span><span class="pi">:</span>\n    <span class="na">monitor</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">codelab-monitor\'</span>\n\n<span class="c1"># A scrape configuration containing exactly one endpoint to scrape:</span>\n<span class="c1"># Here it\'s Prometheus itself.</span>\n<span class="na">scrape_configs</span><span class="pi">:</span>\n  <span class="c1"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span>\n  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">prometheus\'</span>\n\n    <span class="c1"># Override the global default and scrape targets from this job every 5 seconds.</span>\n    <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">5s</span>\n\n    <span class="na">static_configs</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">\'</span><span class="s">localhost:9090\'</span><span class="pi">]</span>\n</pre></div>\n</div>\n\n<p>上記のymalをコンテナ内へ配置するようコンテナを起動<br>\nこれだけでPrometheusの起動は完了です。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker run <span class="nt">-d</span> <span class="nt">-p</span> 9090:9090 <span class="nt">-v</span> prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\n</pre></div></div>\n\n<p><a href="http://hostIP:9090" class="autolink" rel="nofollow noopener" target="_blank">http://hostIP:9090</a> へアクセスするだけで動作を確認できる。</p>\n\n<p><a href="https://camo.qiitausercontent.com/1ca9f3c3d9bc88d5adaf141029ba6893c67de2ad/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65363839613935352d333235392d303131322d656439322d3464393330323832333633322e706e67" target="_blank" rel="nofollow noopener"><img width="888" alt="スクリーンショット 2019-01-13 14.24.02.png" src="https://camo.qiitausercontent.com/1ca9f3c3d9bc88d5adaf141029ba6893c67de2ad/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65363839613935352d333235392d303131322d656439322d3464393330323832333633322e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/e689a955-3259-0112-ed92-4d9302823632.png"></a></p>\n\n<h2>\n<span id="grafanaと連携" class="fragment"></span><a href="#grafana%E3%81%A8%E9%80%A3%E6%90%BA"><i class="fa fa-link"></i></a>grafanaと連携</h2>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">2\'</span>\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">prometheus</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">prom/prometheus</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./prometheus.yml:/etc/prometheus/prometheus.yml</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s1">\'</span><span class="s">9090:9090\'</span>\n  <span class="na">grafana</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">grafana/grafana</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>\n</pre></div>\n</div>\n\n<p>上記を作成して<code>docker-compose up -d</code>すれば起動する。<br>\nあとは``<code>http://hostIP:3000</code>へアクセスすればGrafnaへ繋がる。<br>\nデフォルトのID/PWは admin/adminです。<br>\n初回ログイン時はパスワードの再設定を促されるので設定してください</p>\n\n<p><a href="https://camo.qiitausercontent.com/a0769a060500d6706be3a32b459f59032aa12bce/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34316564623935382d326531382d613831382d663038392d3238386137653737616662652e706e67" target="_blank" rel="nofollow noopener"><img width="848" alt="スクリーンショット 2019-01-13 14.48.15.png" src="https://camo.qiitausercontent.com/a0769a060500d6706be3a32b459f59032aa12bce/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34316564623935382d326531382d613831382d663038392d3238386137653737616662652e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/41edb958-2e18-a818-f089-288a7e77afbe.png"></a></p>\n\n<p>ログイン成功画面</p>\n\n<p><a href="https://camo.qiitausercontent.com/ca6f76b681a5b34c7b2352e3a426bdc80a9f3368/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34653038323231662d616465612d373536332d313331352d6266383839326135356432302e706e67" target="_blank" rel="nofollow noopener"><img width="1186" alt="スクリーンショット 2019-01-13 15.00.22.png" src="https://camo.qiitausercontent.com/ca6f76b681a5b34c7b2352e3a426bdc80a9f3368/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34653038323231662d616465612d373536332d313331352d6266383839326135356432302e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/4e08221f-adea-7563-1315-bf8892a55d20.png"></a></p>\n\n<p>このままだと何もデータを見れません。<br>\nデータリソースの追加を選択肢必要な情報を入力してください。<br>\nポート番号はdocker-compose.ymlで設定したポート番号を選択してください。</p>\n\n<p><a href="https://camo.qiitausercontent.com/b8f64ab4db169e516d1e472963bef0915b631102/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37306261616133302d353435342d373464652d396364612d3738306630353234386430352e706e67" target="_blank" rel="nofollow noopener"><img width="577" alt="スクリーンショット 2019-01-13 15.11.42.png" src="https://camo.qiitausercontent.com/b8f64ab4db169e516d1e472963bef0915b631102/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37306261616133302d353435342d373464652d396364612d3738306630353234386430352e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/70baaa30-5454-74de-9cda-780f05248d05.png"></a></p>\n\n<p>あとはクエリを書くだけでデータの可視化を楽しむことができます。<br>\n可視化では下記の記事がわかりやすくおすすめです。</p>\n\n<p><a href="http://blog.serverworks.co.jp/tech/2016/03/11/play-with-grafana-1/" rel="nofollow noopener" target="_blank">Grafanaでかっけぇダッシュボード作るよ！(構築・設定編)</a></p>\n\n<p>ここで色々使うと以下のようになります。<br>\n設定に関してもほとんどマウスでポチポチするだけでそれっぽい可視化ができる。<br>\nクエリについても単純でちょっとした下調べをすればすぐに書けると思う。(今回はネットにあるものをコピペしただけ)</p>\n\n<p><a href="https://camo.qiitausercontent.com/1e2c9d28f33d20027b8723494289a1299a4b2b3b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37613238633930642d316266322d366565392d326462382d3335396437346638393835632e706e67" target="_blank" rel="nofollow noopener"><img width="568" alt="スクリーンショット 2019-01-13 15.32.40.png" src="https://camo.qiitausercontent.com/1e2c9d28f33d20027b8723494289a1299a4b2b3b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37613238633930642d316266322d366565392d326462382d3335396437346638393835632e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/7a28c90d-1bf2-6ee9-2db8-359d74f8985c.png"></a></p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>Promtheus自体を動かすのは非常に簡単だ。だがそこからデータの活用だったり収集/整形などはまた別に学習が必要そうだと感じた。top や dstat を使う方法でメトリクスを収集するのがほとんどであるがそれ以外の素晴らしい方法を一切知らなかったのでこれを機会に実務へ提案して取り入れて行きたい。</p>\n\n<p>監視ツールとしての Zabbix や Sensu、Nagios、Munin 等とは監視の対象や目的が別路線ではあるのですでに運用で使っているものとは別の考え方が必要でそれぞれとは併用が必要そう。(完全移行の方法もあったりスルとしても使い慣れたって意味だと移行は躊躇う。。。)</p>\n\n<p>監視設計については別途見ていく必要がある。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://knowledge.sakura.ad.jp/12058/" class="autolink" rel="nofollow noopener" target="_blank">https://knowledge.sakura.ad.jp/12058/</a><br>\n<a href="http://blog.serverworks.co.jp/tech/2016/03/11/play-with-grafana-1/" class="autolink" rel="nofollow noopener" target="_blank">http://blog.serverworks.co.jp/tech/2016/03/11/play-with-grafana-1/</a><br>\n<a href="https://qiita.com/sugitak/items/ff8f5ad845283c5915d2" class="autolink" id="reference-58e774fc01a6de5ed013">https://qiita.com/sugitak/items/ff8f5ad845283c5915d2</a><br>\n<a href="https://www.slideshare.net/ssuser88ff5b/prometheus-79183671" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/ssuser88ff5b/prometheus-79183671</a></p>\n', 'body': '![ossinfo_icon_prometheus.png](https://qiita-image-store.s3.amazonaws.com/0/258841/71b9929b-0cf7-b3cf-55cc-764a9b645ead.png)\n\nPrometheus(プロメテウス)\n\n## 背景\n\nそれっぽい監視グラフをマウス操作メインでみたい人向けの記事\n監視設計などについて触れていない。\n\n## Prometheusとは\n\nオープンソースのサービス監視システムと時系列データベース。所謂監視ツールです。\n開発言語は Go。\n\nPrometheus は一般的な監視ツールのように、データの収集、数値の表示、グラフの表示、アラートを出す機能があります。それだけでなく、Prometheus は独自のデータモデルを持ち、クエリ言語を使って時系列データの評価やグラフ化を行えます。\n\n[prometheus/prometheus](https://github.com/prometheus/prometheus)\n\n## アーキテクチャ\n\n<img width="739" alt="スクリーンショット 2019-01-13 14.33.29.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/f877c3c2-825a-c291-a138-34382930133a.png">\n\n公式に詳しい図があります。\nデータは左から取得し、真ん中で処理、右側からのクエリに答えて時系列データを返します。といった流れです。\nユーザ通知は細かく設定可能でデータ量などで通知を行っています。\n\n## 環境\n\n## とりあえず動作確認\n\nプロメテウスのDockerイメージは公開されているのでそちらを使わせていただきます。\n[prom/prometheus](https://hub.docker.com/r/prom/prometheus/)\n\n実行前にプロメテウス用のyamlを書きます。\n以下は自分自身を監視対象としたyamlの例です。\n内容は公式にあるものをそのまま利用しています。\nhttps://prometheus.io/docs/prometheus/latest/getting_started/\n\n``` yaml:prometheus.yml\nglobal:\n  scrape_interval:     15s # By default, scrape targets every 15 seconds.\n\n  # Attach these labels to any time series or alerts when communicating with\n  # external systems (federation, remote storage, Alertmanager).\n  external_labels:\n    monitor: \'codelab-monitor\'\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it\'s Prometheus itself.\nscrape_configs:\n  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n  - job_name: \'prometheus\'\n\n    # Override the global default and scrape targets from this job every 5 seconds.\n    scrape_interval: 5s\n\n    static_configs:\n      - targets: [\'localhost:9090\']\n```\n\n上記のymalをコンテナ内へ配置するようコンテナを起動\nこれだけでPrometheusの起動は完了です。\n\n``` bash\n$ docker run -d -p 9090:9090 -v prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\n```\n\nhttp://hostIP:9090 へアクセスするだけで動作を確認できる。\n\n<img width="888" alt="スクリーンショット 2019-01-13 14.24.02.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/e689a955-3259-0112-ed92-4d9302823632.png">\n\n## grafanaと連携\n\n``` yaml:docker-compose.yml\nversion: \'2\'\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n      - \'9090:9090\'\n  grafana:\n    image: grafana/grafana\n    ports:\n      - "3000:3000"\n```\n\n上記を作成して```docker-compose up -d```すれば起動する。\nあとは```http://hostIP:3000`へアクセスすればGrafnaへ繋がる。\nデフォルトのID/PWは admin/adminです。\n初回ログイン時はパスワードの再設定を促されるので設定してください\n\n<img width="848" alt="スクリーンショット 2019-01-13 14.48.15.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/41edb958-2e18-a818-f089-288a7e77afbe.png">\n\nログイン成功画面\n\n<img width="1186" alt="スクリーンショット 2019-01-13 15.00.22.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/4e08221f-adea-7563-1315-bf8892a55d20.png">\n\nこのままだと何もデータを見れません。\nデータリソースの追加を選択肢必要な情報を入力してください。\nポート番号はdocker-compose.ymlで設定したポート番号を選択してください。\n\n<img width="577" alt="スクリーンショット 2019-01-13 15.11.42.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/70baaa30-5454-74de-9cda-780f05248d05.png">\n\nあとはクエリを書くだけでデータの可視化を楽しむことができます。\n可視化では下記の記事がわかりやすくおすすめです。\n\n[Grafanaでかっけぇダッシュボード作るよ！(構築・設定編)](http://blog.serverworks.co.jp/tech/2016/03/11/play-with-grafana-1/)\n\nここで色々使うと以下のようになります。\n設定に関してもほとんどマウスでポチポチするだけでそれっぽい可視化ができる。\nクエリについても単純でちょっとした下調べをすればすぐに書けると思う。(今回はネットにあるものをコピペしただけ)\n\n<img width="568" alt="スクリーンショット 2019-01-13 15.32.40.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/7a28c90d-1bf2-6ee9-2db8-359d74f8985c.png">\n\n## まとめ\n\nPromtheus自体を動かすのは非常に簡単だ。だがそこからデータの活用だったり収集/整形などはまた別に学習が必要そうだと感じた。top や dstat を使う方法でメトリクスを収集するのがほとんどであるがそれ以外の素晴らしい方法を一切知らなかったのでこれを機会に実務へ提案して取り入れて行きたい。\n\n監視ツールとしての Zabbix や Sensu、Nagios、Munin 等とは監視の対象や目的が別路線ではあるのですでに運用で使っているものとは別の考え方が必要でそれぞれとは併用が必要そう。(完全移行の方法もあったりスルとしても使い慣れたって意味だと移行は躊躇う。。。)\n\n監視設計については別途見ていく必要がある。\n\n## 参考リンク\n\nhttps://knowledge.sakura.ad.jp/12058/\nhttp://blog.serverworks.co.jp/tech/2016/03/11/play-with-grafana-1/\nhttps://qiita.com/sugitak/items/ff8f5ad845283c5915d2\nhttps://www.slideshare.net/ssuser88ff5b/prometheus-79183671\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-01-13T15:46:58+09:00', 'group': None, 'id': 'caf2d32b7a49ce5a39b1', 'likes_count': 11, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': '監視', 'versions': []}, {'name': 'prometheus', 'versions': []}], 'title': 'PrometheusをDockerを使って触ってみる', 'updated_at': '2019-01-13T15:46:58+09:00', 'url': 'https://qiita.com/ryuichi1208/items/caf2d32b7a49ce5a39b1', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/045cb99692a275e93937561655855befce6b960e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63333331613337342d303763362d313739382d323439302d3663343834376135643965642e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/045cb99692a275e93937561655855befce6b960e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63333331613337342d303763362d313739382d323439302d3663343834376135643965642e6a706567" alt="driver1.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/c331a374-07c6-1798-2490-6c4847a5d9ed.jpeg"></a></p>\n\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>デバイスドライバについて調べた事のまとめ。<br>\nとりあえずinsmodしてカーネルメッセージを出力するまでを目標とする。</p>\n\n<h2>\n<span id="デバイスドライバとは" class="fragment"></span><a href="#%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>デバイスドライバとは</h2>\n\n<p>デバイスドライバとは、パソコンに接続されている周辺装置をカーネルが制御するためのプログラム。<br>\nデバイスドライバは普通のプログラムと違いカーネル空間で動作する。<br>\nデバイスドライバをビルドするためには、カーネルバージョンと同一バージョンの、<br>\nkernel-develとkernel-headersパッケージが必要。</p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<p>今回は下記の環境で検証してみる。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-r</span>\n4.18.0-13-generic\n\n<span class="nv">$ </span><span class="nb">cat</span> /etc/lsb-release | <span class="nb">head</span> <span class="nt">-n2</span>\n<span class="nv">DISTRIB_ID</span><span class="o">=</span>Ubuntu\n<span class="nv">DISTRIB_RELEASE</span><span class="o">=</span>18.10\n\n<span class="nv">$ </span>gcc <span class="nt">--version</span>\ngcc <span class="o">(</span>Ubuntu 8.2.0-7ubuntu1<span class="o">)</span> 8.2.0\nCopyright <span class="o">(</span>C<span class="o">)</span> 2018 Free Software Foundation, Inc.\nThis is free software<span class="p">;</span> see the <span class="nb">source </span><span class="k">for </span>copying conditions.  There is NO\nwarranty<span class="p">;</span> not even <span class="k">for </span>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</pre></div></div>\n\n<h2>\n<span id="書いてみる" class="fragment"></span><a href="#%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>書いてみる</h2>\n\n<p>以下が簡単なデバイスドライバ。<br>\nただただhello worldを出力するだけのものだ。</p>\n\n<div class="code-frame" data-lang="c"><div class="highlight"><pre><span class="cp">#include &lt;linux/init.h&gt;\n#include &lt;linux/module.h&gt;\n</span>\n<span class="k">static</span> <span class="kt">int</span> <span class="nf">m_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"Hello World</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="k">static</span> <span class="kt">void</span> <span class="nf">m_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"driver unloaded</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="c1">// モジュール開始と終了のマクロ</span>\n<span class="n">module_init</span><span class="p">(</span><span class="n">m_init</span><span class="p">);</span>\n<span class="n">module_exit</span><span class="p">(</span><span class="n">m_exit</span><span class="p">);</span>\n<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL2"</span><span class="p">);</span>\n</pre></div></div>\n\n<p>上記のポイントはまずmain()関数が無いこと。<br>\nユーザ空間でのプログラムはmain関数がエントリポイントといった決まりがあるが、<br>\nデバイスドライバではmodule_initに渡した関数がエントリとなる。</p>\n\n<p>module_initとmodule_exitは <a href="https://elixir.bootlin.com/linux/v4.14/source/include/linux/module.h#L77" rel="nofollow noopener" target="_blank">kernel/include/linux/module.h</a>で定義されている。</p>\n\n<p>module.hを覗いてみると以下のようにさらに実装は別箇所<br>\n本題と逸れるためこれ以降は割愛。<br>\ninitcall()とexitcall()はそれぞれ <a href="https://elixir.bootlin.com/linux/v4.14/source/include/linux/init.h#L149" rel="nofollow noopener" target="_blank">kernel/include/linux/init.h</a>を追うと読めるようだ。</p>\n\n<p>printk() は、カーネル内で使える printf()といった程度の理解。<br>\n※printkをするときに\\nがないと、dmesgのログに出力されないらしい。\\nでdmesg用のバッファに出力している模様</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">module.h</span></div>\n<div class="highlight"><pre><span class="cm">/**\n * module_init() - driver initialization entry point\n * @x: function to be run at kernel boot time or module insertion\n *\n * module_init() will either be called during do_initcalls() (if\n * builtin) or at module insertion time (if a module).  There can only\n * be one per module.\n */</span>\n<span class="cp">#define module_init(x)  __initcall(x);\n</span>\n<span class="cm">/**\n * module_exit() - driver exit entry point\n * @x: function to be run when driver is removed\n *\n * module_exit() will wrap the driver clean-up code\n * with cleanup_module() when used with rmmod when\n * the driver is a module.  If the driver is statically\n * compiled into the kernel, module_exit() has no effect.\n * There can only be one per module.\n */</span>\n<span class="cp">#define module_exit(x)  __exitcall(x);\n</span></pre></div>\n</div>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">init.h</span></div>\n<div class="highlight"><pre><span class="cm">/*\n * initcalls are now grouped by functionality into separate\n * subsections. Ordering inside the subsections is determined\n * by link order. \n * For backwards compatibility, initcall() puts the call in \n * the device init subsection.\n *\n * The `id\' arg to __define_initcall() is needed so that multiple initcalls\n * can point at the same handler without causing duplicate-symbol build errors.\n *\n * Initcalls are run by placing pointers in initcall sections that the\n * kernel iterates at runtime. The linker can do dead code / data elimination\n * and remove that completely, so the initcall sections have to be marked\n * as KEEP() in the linker script.\n */</span>\n\n<span class="cp">#define __define_initcall(fn, id) \\\n    static initcall_t __initcall_##fn##id __used \\\n    __attribute__((__section__(".initcall" #id ".init"))) = fn;\n</span>\n<span class="cm">/*\n * Early initcalls run before initializing SMP.\n *\n * Only for built-in code, not modules.\n */</span>\n<span class="cp">#define early_initcall(fn)      __define_initcall(fn, early)\n</span>\n<span class="cm">/*\n * A "pure" initcall has no dependencies on anything else, and purely\n * initializes variables that couldn\'t be statically initialized.\n *\n * This only exists for built-in code, not for modules.\n * Keep main.c:initcall_level_names[] in sync.\n */</span>\n<span class="cp">#define pure_initcall(fn)       __define_initcall(fn, 0)\n</span>\n<span class="cp">#define core_initcall(fn)       __define_initcall(fn, 1)\n#define core_initcall_sync(fn)      __define_initcall(fn, 1s)\n#define postcore_initcall(fn)       __define_initcall(fn, 2)\n#define postcore_initcall_sync(fn)  __define_initcall(fn, 2s)\n#define arch_initcall(fn)       __define_initcall(fn, 3)\n#define arch_initcall_sync(fn)      __define_initcall(fn, 3s)\n#define subsys_initcall(fn)     __define_initcall(fn, 4)\n#define subsys_initcall_sync(fn)    __define_initcall(fn, 4s)\n#define fs_initcall(fn)         __define_initcall(fn, 5)\n#define fs_initcall_sync(fn)        __define_initcall(fn, 5s)\n#define rootfs_initcall(fn)     __define_initcall(fn, rootfs)\n#define device_initcall(fn)     __define_initcall(fn, 6)\n#define device_initcall_sync(fn)    __define_initcall(fn, 6s)\n#define late_initcall(fn)       __define_initcall(fn, 7)\n#define late_initcall_sync(fn)      __define_initcall(fn, 7s)\n</span>\n<span class="cp">#define __initcall(fn) device_initcall(fn)\n</span>\n<span class="cp">#define __exitcall(fn)                      \\\n    static exitcall_t __exitcall_##fn __exit_call = fn\n</span></pre></div>\n</div>\n\n<p>とりあえず大事なのは下記2点</p>\n\n<p>・「module_init」でエントリーポイントを指定する<br>\n・「module_exit」でアンロード時の処理関数を指定する</p>\n\n<h2>\n<span id="ビルド" class="fragment"></span><a href="#%E3%83%93%E3%83%AB%E3%83%89"><i class="fa fa-link"></i></a>ビルド</h2>\n\n<p>今回はビルド用に下記Makefileを用意。<br>\n先ほど用意したソースと同じ階層にファイルを置きmakeを打つだけでビルドされる。</p>\n\n<div class="code-frame" data-lang="">\n<div class="code-lang"><span class="bold">Makefile</span></div>\n<div class="highlight"><pre>obj-m := hello.o\n\nall:\n    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\n</pre></div>\n</div>\n\n<p>ビルド手順は以下の通り<br>\n拡張子 *.koが存在しているのが分かる。これがカーネルモジュールだ。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>make\nmake <span class="nt">-C</span> /lib/modules/4.18.0-13-generic/build <span class="nv">M</span><span class="o">=</span>/root modules\nmake[1]: ディレクトリ <span class="s1">\'/usr/src/linux-headers-4.18.0-13-generic\'</span> に入ります\nMakefile:970: <span class="s2">"Cannot use CONFIG_STACK_VALIDATION=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel"</span>\n  CC <span class="o">[</span>M]  /root/hello.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /root/hello.mod.o\n  LD <span class="o">[</span>M]  /root/hello.ko\nmake[1]: ディレクトリ <span class="s1">\'/usr/src/linux-headers-4.18.0-13-generic\'</span> から出ま\n\n<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>\n合計 28\n<span class="nt">-rw-r--r--</span> 1 root root  155 Jan 11 07:14 Makefile\n<span class="nt">-rw-r--r--</span> 1 root root    0 Jan 11 07:16 Module.symvers\n<span class="nt">-rw-r--r--</span> 1 root root  350 Jan 11 07:14 hello.c\n<span class="nt">-rw-r--r--</span> 1 root root 3784 Jan 11 07:16 hello.ko\n<span class="nt">-rw-r--r--</span> 1 root root  596 Jan 11 07:16 hello.mod.c\n<span class="nt">-rw-r--r--</span> 1 root root 2568 Jan 11 07:16 hello.mod.o\n<span class="nt">-rw-r--r--</span> 1 root root 2104 Jan 11 07:16 hello.o\n<span class="nt">-rw-r--r--</span> 1 root root   22 Jan 11 07:16 modules.order\n</pre></div></div>\n\n<p>カーネルモジュールを読みこむ基本コマンドは「insmod」で、引数として *.ko ファイルを指定する。<br>\n自動ロード(プラグ＆プレイ)機能を使うならmodprobeコマンドを使用する必要がある。<br>\n<a href="https://tech.nikkeibp.co.jp/it/article/COLUMN/20130909/503342/" class="autolink" rel="nofollow noopener" target="_blank">https://tech.nikkeibp.co.jp/it/article/COLUMN/20130909/503342/</a></p>\n\n<p>ここではisnmodを使用しカーネルメッセージを確認してみる。<br>\ninsmodコマンドはroot権限で実行する必要がある。<br>\n起動時のカーネルメッセージの確認などに使われるをdmesgを用いて確認する。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>insmod hello.ko\n\n<span class="c"># メッセージの確認</span>\n<span class="nv">$ </span><span class="nb">sudo </span>dmesg\n<span class="o">[</span>    0.000000] Linux version 4.18.0-13-generic <span class="o">(</span>buildd@lgw01-amd64-048<span class="o">)</span> <span class="o">(</span>gcc version 8.2.0 <span class="o">(</span>Ubuntu 8.2.0-7ubuntu1<span class="o">))</span> <span class="c">#14-Ubuntu SMP Wed Dec 5 09:04:24 UTC 2018 (Ubuntu 4.18.0-13.14-generic 4.18.17)</span>\n<span class="o">(</span>中略<span class="o">)</span>\n<span class="o">[</span> 1572.805848] Hello World\n\n<span class="c"># モジュールの確認</span>\n<span class="nv">$ </span><span class="nb">sudo </span>lsmod | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"hello|Mod"</span>\nModule                  Size  Used by\nhello                  16384  0\n</pre></div></div>\n\n<p>確認の最後で使っているlsmodは以下の内容を確認できる。<br>\n主に見たいのは依存関係だが今回は特に依存なしである。当然といえば当然。</p>\n\n<p>Module  ドライバ名<br>\nSize    メモリ上のドライバサイズ<br>\nUsed    参照カウンタ<br>\nby  依存ドライバ</p>\n\n<p>ちなみにドライバのアンロードはrmmodコマンドで行う。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>rmmod hello\n\n<span class="nv">$ </span>dmesg | <span class="nb">tail</span> <span class="nt">-n</span> 3\n<span class="o">[</span> 1572.805215] Disabling lock debugging due to kernel taint\n<span class="o">[</span> 1572.805848] Hello World\n<span class="o">[</span> 2577.303835] driver unloaded\n</pre></div></div>\n\n<h2>\n<span id="感想" class="fragment"></span><a href="#%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>感想</h2>\n\n<p>とりあえずドライバをちょっと触ってみる、といったことはできた気がするのでとりあえず満足。<br>\n実際ここを縄張りとして開発している方々は本当にすごいと思う。<br>\nドライバの必要性だったりドライバの歴史だったりが知れたので良かったのかもしれない。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="http://linux-dvr.biz/" class="autolink" rel="nofollow noopener" target="_blank">http://linux-dvr.biz/</a><br>\n<a href="http://public2016.hatenablog.com/entry/2016/09/01/231611" class="autolink" rel="nofollow noopener" target="_blank">http://public2016.hatenablog.com/entry/2016/09/01/231611</a><br>\n<a href="https://qiita.com/rarul/items/308d4eef138b511aa233" class="autolink" id="reference-3daa12ff0e2302fcfd18">https://qiita.com/rarul/items/308d4eef138b511aa233</a></p>\n', 'body': '![driver1.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/c331a374-07c6-1798-2490-6c4847a5d9ed.jpeg)\n\n## 概要\n\nデバイスドライバについて調べた事のまとめ。\nとりあえずinsmodしてカーネルメッセージを出力するまでを目標とする。\n\n## デバイスドライバとは\n\nデバイスドライバとは、パソコンに接続されている周辺装置をカーネルが制御するためのプログラム。\nデバイスドライバは普通のプログラムと違いカーネル空間で動作する。\nデバイスドライバをビルドするためには、カーネルバージョンと同一バージョンの、\nkernel-develとkernel-headersパッケージが必要。\n\n## 環境\n\n今回は下記の環境で検証してみる。\n\n``` bash\n$ uname -r\n4.18.0-13-generic\n\n$ cat /etc/lsb-release | head -n2\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=18.10\n\n$ gcc --version\ngcc (Ubuntu 8.2.0-7ubuntu1) 8.2.0\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\n## 書いてみる\n\n以下が簡単なデバイスドライバ。\nただただhello worldを出力するだけのものだ。\n\n``` c\n#include <linux/init.h>\n#include <linux/module.h>\n\nstatic int m_init(void)\n{\n\tprintk(KERN_ALERT "Hello World\\n");\n\treturn 0;\n}\n\nstatic void m_exit(void)\n{\n\tprintk(KERN_ALERT "driver unloaded\\n");\n}\n\n// モジュール開始と終了のマクロ\nmodule_init(m_init);\nmodule_exit(m_exit);\nMODULE_LICENSE("GPL2");\n```\n\n上記のポイントはまずmain()関数が無いこと。\nユーザ空間でのプログラムはmain関数がエントリポイントといった決まりがあるが、\nデバイスドライバではmodule_initに渡した関数がエントリとなる。\n\nmodule_initとmodule_exitは [kernel/include/linux/module.h](https://elixir.bootlin.com/linux/v4.14/source/include/linux/module.h#L77)で定義されている。\n\nmodule.hを覗いてみると以下のようにさらに実装は別箇所\n本題と逸れるためこれ以降は割愛。\ninitcall()とexitcall()はそれぞれ [kernel/include/linux/init.h](https://elixir.bootlin.com/linux/v4.14/source/include/linux/init.h#L149)を追うと読めるようだ。\n\nprintk() は、カーネル内で使える printf()といった程度の理解。\n※printkをするときに\\nがないと、dmesgのログに出力されないらしい。\\nでdmesg用のバッファに出力している模様\n\n``` c:module.h\n/**\n * module_init() - driver initialization entry point\n * @x: function to be run at kernel boot time or module insertion\n *\n * module_init() will either be called during do_initcalls() (if\n * builtin) or at module insertion time (if a module).  There can only\n * be one per module.\n */\n#define module_init(x)  __initcall(x);\n\n/**\n * module_exit() - driver exit entry point\n * @x: function to be run when driver is removed\n *\n * module_exit() will wrap the driver clean-up code\n * with cleanup_module() when used with rmmod when\n * the driver is a module.  If the driver is statically\n * compiled into the kernel, module_exit() has no effect.\n * There can only be one per module.\n */\n#define module_exit(x)  __exitcall(x);\n```\n\n``` c:init.h\n/*\n * initcalls are now grouped by functionality into separate\n * subsections. Ordering inside the subsections is determined\n * by link order. \n * For backwards compatibility, initcall() puts the call in \n * the device init subsection.\n *\n * The `id\' arg to __define_initcall() is needed so that multiple initcalls\n * can point at the same handler without causing duplicate-symbol build errors.\n *\n * Initcalls are run by placing pointers in initcall sections that the\n * kernel iterates at runtime. The linker can do dead code / data elimination\n * and remove that completely, so the initcall sections have to be marked\n * as KEEP() in the linker script.\n */\n\n#define __define_initcall(fn, id) \\\n    static initcall_t __initcall_##fn##id __used \\\n    __attribute__((__section__(".initcall" #id ".init"))) = fn;\n\n/*\n * Early initcalls run before initializing SMP.\n *\n * Only for built-in code, not modules.\n */\n#define early_initcall(fn)      __define_initcall(fn, early)\n\n/*\n * A "pure" initcall has no dependencies on anything else, and purely\n * initializes variables that couldn\'t be statically initialized.\n *\n * This only exists for built-in code, not for modules.\n * Keep main.c:initcall_level_names[] in sync.\n */\n#define pure_initcall(fn)       __define_initcall(fn, 0)\n\n#define core_initcall(fn)       __define_initcall(fn, 1)\n#define core_initcall_sync(fn)      __define_initcall(fn, 1s)\n#define postcore_initcall(fn)       __define_initcall(fn, 2)\n#define postcore_initcall_sync(fn)  __define_initcall(fn, 2s)\n#define arch_initcall(fn)       __define_initcall(fn, 3)\n#define arch_initcall_sync(fn)      __define_initcall(fn, 3s)\n#define subsys_initcall(fn)     __define_initcall(fn, 4)\n#define subsys_initcall_sync(fn)    __define_initcall(fn, 4s)\n#define fs_initcall(fn)         __define_initcall(fn, 5)\n#define fs_initcall_sync(fn)        __define_initcall(fn, 5s)\n#define rootfs_initcall(fn)     __define_initcall(fn, rootfs)\n#define device_initcall(fn)     __define_initcall(fn, 6)\n#define device_initcall_sync(fn)    __define_initcall(fn, 6s)\n#define late_initcall(fn)       __define_initcall(fn, 7)\n#define late_initcall_sync(fn)      __define_initcall(fn, 7s)\n\n#define __initcall(fn) device_initcall(fn)\n\n#define __exitcall(fn)                      \\\n    static exitcall_t __exitcall_##fn __exit_call = fn\n```\n\nとりあえず大事なのは下記2点\n\n・「module_init」でエントリーポイントを指定する\n・「module_exit」でアンロード時の処理関数を指定する\n\n## ビルド\n\n今回はビルド用に下記Makefileを用意。\n先ほど用意したソースと同じ階層にファイルを置きmakeを打つだけでビルドされる。\n\n``` :Makefile\nobj-m := hello.o\n\nall:\n\tmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\n```\n\nビルド手順は以下の通り\n拡張子 *.koが存在しているのが分かる。これがカーネルモジュールだ。\n\n``` bash\n$ make\nmake -C /lib/modules/4.18.0-13-generic/build M=/root modules\nmake[1]: ディレクトリ \'/usr/src/linux-headers-4.18.0-13-generic\' に入ります\nMakefile:970: "Cannot use CONFIG_STACK_VALIDATION=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel"\n  CC [M]  /root/hello.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /root/hello.mod.o\n  LD [M]  /root/hello.ko\nmake[1]: ディレクトリ \'/usr/src/linux-headers-4.18.0-13-generic\' から出ま\n\n$ ls -l\n合計 28\n-rw-r--r-- 1 root root  155 Jan 11 07:14 Makefile\n-rw-r--r-- 1 root root    0 Jan 11 07:16 Module.symvers\n-rw-r--r-- 1 root root  350 Jan 11 07:14 hello.c\n-rw-r--r-- 1 root root 3784 Jan 11 07:16 hello.ko\n-rw-r--r-- 1 root root  596 Jan 11 07:16 hello.mod.c\n-rw-r--r-- 1 root root 2568 Jan 11 07:16 hello.mod.o\n-rw-r--r-- 1 root root 2104 Jan 11 07:16 hello.o\n-rw-r--r-- 1 root root   22 Jan 11 07:16 modules.order\n```\n\nカーネルモジュールを読みこむ基本コマンドは「insmod」で、引数として *.ko ファイルを指定する。\n自動ロード(プラグ＆プレイ)機能を使うならmodprobeコマンドを使用する必要がある。\nhttps://tech.nikkeibp.co.jp/it/article/COLUMN/20130909/503342/\n\nここではisnmodを使用しカーネルメッセージを確認してみる。\ninsmodコマンドはroot権限で実行する必要がある。\n起動時のカーネルメッセージの確認などに使われるをdmesgを用いて確認する。\n\n``` bash\n$ sudo insmod hello.ko\n\n# メッセージの確認\n$ sudo dmesg\n[    0.000000] Linux version 4.18.0-13-generic (buildd@lgw01-amd64-048) (gcc version 8.2.0 (Ubuntu 8.2.0-7ubuntu1)) #14-Ubuntu SMP Wed Dec 5 09:04:24 UTC 2018 (Ubuntu 4.18.0-13.14-generic 4.18.17)\n(中略)\n[ 1572.805848] Hello World\n\n# モジュールの確認\n$ sudo lsmod | grep -E "hello|Mod"\nModule                  Size  Used by\nhello                  16384  0\n```\n\n確認の最後で使っているlsmodは以下の内容を確認できる。\n主に見たいのは依存関係だが今回は特に依存なしである。当然といえば当然。\n\nModule\tドライバ名\nSize\tメモリ上のドライバサイズ\nUsed\t参照カウンタ\nby\t依存ドライバ\n\nちなみにドライバのアンロードはrmmodコマンドで行う。\n\n``` bash\n$ sudo rmmod hello\n\n$ dmesg | tail -n 3\n[ 1572.805215] Disabling lock debugging due to kernel taint\n[ 1572.805848] Hello World\n[ 2577.303835] driver unloaded\n```\n\n## 感想\n\nとりあえずドライバをちょっと触ってみる、といったことはできた気がするのでとりあえず満足。\n実際ここを縄張りとして開発している方々は本当にすごいと思う。\nドライバの必要性だったりドライバの歴史だったりが知れたので良かったのかもしれない。\n\n## 参考リンク\n\nhttp://linux-dvr.biz/\nhttp://public2016.hatenablog.com/entry/2016/09/01/231611\nhttps://qiita.com/rarul/items/308d4eef138b511aa233\n', 'coediting': False, 'comments_count': 1, 'created_at': '2019-01-12T00:40:57+09:00', 'group': None, 'id': '4c250cbe1b4ce9626dc8', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'デバイスドライバ', 'versions': []}], 'title': '【超入門】デバイスドライバ', 'updated_at': '2019-01-12T00:40:57+09:00', 'url': 'https://qiita.com/ryuichi1208/items/4c250cbe1b4ce9626dc8', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/9867c042851621c6c741d6218a73925d21a2e307/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36653331363838372d653738362d393166312d383063362d3636643561316635356665352e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/9867c042851621c6c741d6218a73925d21a2e307/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36653331363838372d653738362d393166312d383063362d3636643561316635356665352e706e67" alt="ダウンロード.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/6e316887-e786-91f1-80c6-66d5a1f55fe5.png"></a></p>\n\n<p>GNU Bourne Again Shell（bash）</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>bash5.0が発表されたので早速使ってみました。<br>\nメジャーバージョンアップは4.0の2009年2月ぶりとの事で約10年<br>\nマイナーバージョンアップも4.4が2016年9月ぶりです。</p>\n\n<p>後方互換性が多少無いようなのですぐに乗り換えることは出来ませんがとりあえず使ってみました。</p>\n\n<p>4.4との違いはバグフィックスと新機能追加</p>\n\n<p>関係ないですがbashのファーストリリースは1989年との事で今年は記念すべき30周年を向かえるんですね。<br>\n未だに第一線で大活躍しているのはすごいです。</p>\n\n<h2>\n<span id="使ってみる" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>使ってみる</h2>\n\n<p>まずは下記サイトよりソースを入手します。<br>\n<a href="http://lists.gnu.org/archive/html/bug-bash/2019-01/msg00063.html" class="autolink" rel="nofollow noopener" target="_blank">http://lists.gnu.org/archive/html/bug-bash/2019-01/msg00063.html</a></p>\n\n<p>Gitでも公開されているのでそちらからでも入手可能です。</p>\n\n<p>tarを入手したら展開します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">tar </span>xvf bash-5.0.tar.gz\n\n</pre></div></div>\n\n<p>次にREADME通りに下記を実行しビルドします</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ CC</span><span class="o">=</span>cc ./configure\n<span class="nv">$ </span>make\n</pre></div></div>\n\n<p>ビルドしたらbashが出来上がるので起動してみます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nb">ls\n</span>ABOUT-NLS    arrayfunc.o      config-bot.h   expr.o     list.o          pcomplete.h  support\nAUTHORS      assoc.c          config-top.h   externs.h  locale.c        pcomplete.o  syntax.c\nCHANGES      assoc.h          config.h       findcmd.c  locale.o        pcomplib.c   syntax.h\nCOMPAT       assoc.o          config.h.in    findcmd.h  lsignames.h     pcomplib.o   syntax.o\nCOPYING      bash             config.log     findcmd.o  m4              po           test.c\nCWRU         bashansi.h       config.status  flags.c    mailcheck.c     print_cmd.c  test.h\nChangeLog    bashbug          configure      flags.h    mailcheck.h     print_cmd.o  test.o\nINSTALL      bashhist.c       configure.ac   flags.o    mailcheck.o     quit.h       tests\nMANIFEST     bashhist.h       conftypes.h    general.c  make_cmd.c      redir.c      trap.c\nMakefile     bashhist.o       copy_cmd.c     general.h  make_cmd.h      redir.h      trap.h\nMakefile.in  bashintl.h       copy_cmd.o     general.o  make_cmd.o      redir.o      trap.o\nNEWS         bashjmp.h        cross-build    hashcmd.c  mksignames      shell.c      unwind_prot.c\nNOTES        bashline.c       dispose_cmd.c  hashcmd.h  mksignames.o    shell.h      unwind_prot.h\nPOSIX        bashline.h       dispose_cmd.h  hashcmd.o  mksyntax        shell.o      unwind_prot.o\nRBASH        bashline.o       dispose_cmd.o  hashlib.c  mksyntax.c      sig.c        variables.c\nREADME       bashtypes.h      doc            hashlib.h  nojobs.c        sig.h        variables.h\nY2K          bashversion      error.c        hashlib.o  parse.y         sig.o        variables.o\naclocal.m4   bracecomp.c      error.h        include    parser-built    siglist.c    version.c\nalias.c      bracecomp.o      error.o        input.c    parser.h        siglist.h    version.h\nalias.h      braces.c         eval.c         input.h    patchlevel.h    signames.h   version.o\nalias.o      braces.o         eval.o         input.o    pathexp.c       stamp-h      xmalloc.c\narray.c      buildsignames.o  examples       jobs.c     pathexp.h       stringlib.c  xmalloc.h\narray.h      buildversion.o   execute_cmd.c  jobs.h     pathexp.o       stringlib.o  xmalloc.o\narray.o      builtins         execute_cmd.h  jobs.o     pathnames.h     subst.c      y.tab.c\narrayfunc.c  builtins.h       execute_cmd.o  lib        pathnames.h.in  subst.h      y.tab.h\narrayfunc.h  command.h        expr.c         list.c     pcomplete.c     subst.o      y.tab.o\n\n<span class="nv">$ </span>./bash\n\n<span class="nv">$ </span>./bash <span class="nt">--version</span>\nGNU bash, version 5.0.0<span class="o">(</span>1<span class="o">)</span><span class="nt">-release</span> <span class="o">(</span>x86_64-pc-linux-gnu<span class="o">)</span>\nCopyright <span class="o">(</span>C<span class="o">)</span> 2019 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\n\nThis is free software<span class="p">;</span> you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n</pre></div></div>\n\n<p>5.0が起動しているが確認できました。<br>\nメーリングリストを参考に今すぐ使えそうな機能を何点か使ってみました。</p>\n\n<p>※正式なインストール手順では無いのでREADMEをご一読ください！！！</p>\n\n<h2>\n<span id="新機能概要" class="fragment"></span><a href="#%E6%96%B0%E6%A9%9F%E8%83%BD%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>新機能概要</h2>\n\n<p>個人的に気になる機能を使ってみました。<br>\n内容はメーリングリストのメールの翻訳なので間違っている箇所がある可能性があります。<br>\n気づいた方はご指摘願います。</p>\n\n<h4>\n<span id="新しく追加された変数" class="fragment"></span><a href="#%E6%96%B0%E3%81%97%E3%81%8F%E8%BF%BD%E5%8A%A0%E3%81%95%E3%82%8C%E3%81%9F%E5%A4%89%E6%95%B0"><i class="fa fa-link"></i></a>新しく追加された変数</h4>\n\n<p>使いどころは分かりませんが二つの変数が追加されている<br>\nUNIX時間の秒数とマイクロ秒付きの値が見れる。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$EPOCHSECONDS</span>\n1546999731\n<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$EPOCHREALTIME</span>\n1546999732.481601\n</pre></div></div>\n\n<h4>\n<span id="historyの範囲指定削除" class="fragment"></span><a href="#history%E3%81%AE%E7%AF%84%E5%9B%B2%E6%8C%87%E5%AE%9A%E5%89%8A%E9%99%A4"><i class="fa fa-link"></i></a>historyの範囲指定削除</h4>\n\n<p>こちらも何に使えるのかは検討もつきませんが(履歴の整理にはちょっと便利かも)<br>\nコマンド履歴を範囲指定で削除できるようです。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">history</span> <span class="nt">-d</span> 10-20\n</pre></div></div>\n\n<h4>\n<span id="bash_argv0の追加" class="fragment"></span><a href="#bash_argv0%E3%81%AE%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>$BASH_ARGV0の追加</h4>\n\n<p>$0同様にシェルまたはシェルスクリプトに展開される変数が追加されました。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$BASH_ARGV0</span>\n./bash\n</pre></div></div>\n\n<h4>\n<span id="config-toph" class="fragment"></span><a href="#config-toph"><i class="fa fa-link"></i></a>config-top.h</h4>\n\n<p>ヘッダファイルが追加されています。<br>\nこのファイルをビルド前に編集することで静的にbashの設定を行う事が出来ます。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">config-top.h</span></div>\n<div class="highlight"><pre>\n<span class="c1">// 複数指定のkillが1つ失敗しても後続のプロセスへの処理を継続する</span>\n<span class="cp">#define CONTINUE_AFTER_KILL_ERROR\n</span>\n<span class="c1">// (中略)</span>\n\n<span class="cm">/* $PATHのデフォルト */</span>\n<span class="cp">#ifndef DEFAULT_PATH_VALUE\n#define DEFAULT_PATH_VALUE \\\n  "/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:."\n#endif\n</span>\n<span class="cm">/* If you want to unconditionally set a value for PATH in every restricted\n   shell, set this. */</span>\n<span class="cm">/* #define RBASH_STATIC_PATH_VALUE "/rbin:/usr/rbin" */</span>\n\n<span class="cm">/* The value for PATH when invoking `command -p\'.  This is only used when\n   the Posix.2 confstr () function, or CS_PATH define are not present. */</span>\n<span class="cp">#ifndef STANDARD_UTILS_PATH\n#define STANDARD_UTILS_PATH \\\n  "/bin:/usr/bin:/sbin:/usr/sbin:/etc:/usr/etc"\n#endif\n</span>\n<span class="c1">// デフォルトのプライマリおよびセカンダリプロンプト</span>\n<span class="cp">#define PPROMPT "\\\\s-\\\\v\\\\$ "\n#define SPROMPT "&gt; "\n</span>\n<span class="cm">/* Undefine this if you don\'t want the ksh-compatible behavior of reprinting\n   the select menu after a valid choice is made only if REPLY is set to NULL\n   in the body of the select command.  The menu is always reprinted if the\n   reply to the select query is an empty line. */</span>\n<span class="cp">#define KSH_COMPATIBLE_SELECT\n</span>\n<span class="c1">// デフォルトの対話型シェル起動ファイル</span>\n<span class="cp">#define DEFAULT_BASHRC "~/.bashrc"\n</span>\n<span class="cm">/* 対話式シェル用のシステム全体の.bashrcファイル */</span>\n<span class="cm">/* #define SYS_BASHRC "/etc/bash.bashrc" */</span>\n\n<span class="c1">// .bash_logoutのデフォルト</span>\n<span class="cp">#define SYS_BASH_LOGOUT "/etc/bash.bash_logout"\n</span>\n<span class="c1">// (中略)</span>\n\n<span class="c1">// ソースに必要な最大再帰レベル</span>\n<span class="cp">#define SOURCENEST_MAX 0\n</span>\n<span class="c1">// lib/sh/tmpfile.cの代わりにlibc mktemp/mkstempを使用するように定義。</span>\n<span class="cp">#define USE_MKTEMP\n#define USE_MKSTEMP\n</span>\n<span class="c1">// OLDPWDの値をディレクトリにするように定義</span>\n<span class="cp">#define OLDPWD_CHECK_DIRECTORY 1\n</span>\n<span class="c1">// 履歴の保存数</span>\n<span class="cm">/*#define HISTSIZE_DEFAULT "500"*/</span>\n\n<span class="c1">// 履歴の展開の有無のデフォルト</span>\n<span class="cp">#define HISTEXPAND_DEFAULT      1\n</span></pre></div>\n</div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>他にもたくさんのアップデートがありました。<br>\n全てを見たい方は公式を見に行くか付属のCHANGESをご参照ください。</p>\n\n<p>waitの話だったりnamerefの話だったり詳しく取りあげてくださっている記事があれば教えてください</p>\n\n<h2>\n<span id="参考url" class="fragment"></span><a href="#%E5%8F%82%E8%80%83url"><i class="fa fa-link"></i></a>参考URL</h2>\n\n<p><a href="https://lwn.net/Articles/776223/" class="autolink" rel="nofollow noopener" target="_blank">https://lwn.net/Articles/776223/</a><br>\n<a href="https://www.osnews.com/story/129062/bash-5-0-released/" class="autolink" rel="nofollow noopener" target="_blank">https://www.osnews.com/story/129062/bash-5-0-released/</a></p>\n', 'body': '\n![ダウンロード.png](https://qiita-image-store.s3.amazonaws.com/0/258841/6e316887-e786-91f1-80c6-66d5a1f55fe5.png)\n\nGNU Bourne Again Shell（bash）\n\n## 背景\n\nbash5.0が発表されたので早速使ってみました。\nメジャーバージョンアップは4.0の2009年2月ぶりとの事で約10年\nマイナーバージョンアップも4.4が2016年9月ぶりです。\n\n後方互換性が多少無いようなのですぐに乗り換えることは出来ませんがとりあえず使ってみました。\n\n4.4との違いはバグフィックスと新機能追加\n\n関係ないですがbashのファーストリリースは1989年との事で今年は記念すべき30周年を向かえるんですね。\n未だに第一線で大活躍しているのはすごいです。\n\n## 使ってみる\n\nまずは下記サイトよりソースを入手します。\nhttp://lists.gnu.org/archive/html/bug-bash/2019-01/msg00063.html\n\nGitでも公開されているのでそちらからでも入手可能です。\n\ntarを入手したら展開します。\n\n``` bash\n$ tar xvf bash-5.0.tar.gz\n\n```\n\n次にREADME通りに下記を実行しビルドします\n\n``` bash\n$ CC=cc ./configure\n$ make\n```\n\nビルドしたらbashが出来上がるので起動してみます。\n\n``` bash\nls\nABOUT-NLS    arrayfunc.o      config-bot.h   expr.o     list.o          pcomplete.h  support\nAUTHORS      assoc.c          config-top.h   externs.h  locale.c        pcomplete.o  syntax.c\nCHANGES      assoc.h          config.h       findcmd.c  locale.o        pcomplib.c   syntax.h\nCOMPAT       assoc.o          config.h.in    findcmd.h  lsignames.h     pcomplib.o   syntax.o\nCOPYING      bash             config.log     findcmd.o  m4              po           test.c\nCWRU         bashansi.h       config.status  flags.c    mailcheck.c     print_cmd.c  test.h\nChangeLog    bashbug          configure      flags.h    mailcheck.h     print_cmd.o  test.o\nINSTALL      bashhist.c       configure.ac   flags.o    mailcheck.o     quit.h       tests\nMANIFEST     bashhist.h       conftypes.h    general.c  make_cmd.c      redir.c      trap.c\nMakefile     bashhist.o       copy_cmd.c     general.h  make_cmd.h      redir.h      trap.h\nMakefile.in  bashintl.h       copy_cmd.o     general.o  make_cmd.o      redir.o      trap.o\nNEWS         bashjmp.h        cross-build    hashcmd.c  mksignames      shell.c      unwind_prot.c\nNOTES        bashline.c       dispose_cmd.c  hashcmd.h  mksignames.o    shell.h      unwind_prot.h\nPOSIX        bashline.h       dispose_cmd.h  hashcmd.o  mksyntax        shell.o      unwind_prot.o\nRBASH        bashline.o       dispose_cmd.o  hashlib.c  mksyntax.c      sig.c        variables.c\nREADME       bashtypes.h      doc            hashlib.h  nojobs.c        sig.h        variables.h\nY2K          bashversion      error.c        hashlib.o  parse.y         sig.o        variables.o\naclocal.m4   bracecomp.c      error.h        include    parser-built    siglist.c    version.c\nalias.c      bracecomp.o      error.o        input.c    parser.h        siglist.h    version.h\nalias.h      braces.c         eval.c         input.h    patchlevel.h    signames.h   version.o\nalias.o      braces.o         eval.o         input.o    pathexp.c       stamp-h      xmalloc.c\narray.c      buildsignames.o  examples       jobs.c     pathexp.h       stringlib.c  xmalloc.h\narray.h      buildversion.o   execute_cmd.c  jobs.h     pathexp.o       stringlib.o  xmalloc.o\narray.o      builtins         execute_cmd.h  jobs.o     pathnames.h     subst.c      y.tab.c\narrayfunc.c  builtins.h       execute_cmd.o  lib        pathnames.h.in  subst.h      y.tab.h\narrayfunc.h  command.h        expr.c         list.c     pcomplete.c     subst.o      y.tab.o\n\n$ ./bash\n\n$ ./bash --version\nGNU bash, version 5.0.0(1)-release (x86_64-pc-linux-gnu)\nCopyright (C) 2019 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n```\n\n5.0が起動しているが確認できました。\nメーリングリストを参考に今すぐ使えそうな機能を何点か使ってみました。\n\n※正式なインストール手順では無いのでREADMEをご一読ください！！！\n\n## 新機能概要\n\n個人的に気になる機能を使ってみました。\n内容はメーリングリストのメールの翻訳なので間違っている箇所がある可能性があります。\n気づいた方はご指摘願います。\n\n#### 新しく追加された変数\n\n使いどころは分かりませんが二つの変数が追加されている\nUNIX時間の秒数とマイクロ秒付きの値が見れる。\n\n``` bash\n$ echo $EPOCHSECONDS\n1546999731\n$ echo $EPOCHREALTIME\n1546999732.481601\n```\n\n#### historyの範囲指定削除\n\nこちらも何に使えるのかは検討もつきませんが(履歴の整理にはちょっと便利かも)\nコマンド履歴を範囲指定で削除できるようです。\n\n``` bash\n$ history -d 10-20\n```\n\n#### $BASH_ARGV0の追加\n\n$0同様にシェルまたはシェルスクリプトに展開される変数が追加されました。\n\n``` bash\n$ echo $BASH_ARGV0\n./bash\n```\n\n#### config-top.h\n\nヘッダファイルが追加されています。\nこのファイルをビルド前に編集することで静的にbashの設定を行う事が出来ます。\n\n``` c:config-top.h\n\n// 複数指定のkillが1つ失敗しても後続のプロセスへの処理を継続する\n#define CONTINUE_AFTER_KILL_ERROR\n\n// (中略)\n\n/* $PATHのデフォルト */\n#ifndef DEFAULT_PATH_VALUE\n#define DEFAULT_PATH_VALUE \\\n  "/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:."\n#endif\n\n/* If you want to unconditionally set a value for PATH in every restricted\n   shell, set this. */\n/* #define RBASH_STATIC_PATH_VALUE "/rbin:/usr/rbin" */\n\n/* The value for PATH when invoking `command -p\'.  This is only used when\n   the Posix.2 confstr () function, or CS_PATH define are not present. */\n#ifndef STANDARD_UTILS_PATH\n#define STANDARD_UTILS_PATH \\\n  "/bin:/usr/bin:/sbin:/usr/sbin:/etc:/usr/etc"\n#endif\n\n// デフォルトのプライマリおよびセカンダリプロンプト\n#define PPROMPT "\\\\s-\\\\v\\\\$ "\n#define SPROMPT "> "\n\n/* Undefine this if you don\'t want the ksh-compatible behavior of reprinting\n   the select menu after a valid choice is made only if REPLY is set to NULL\n   in the body of the select command.  The menu is always reprinted if the\n   reply to the select query is an empty line. */\n#define KSH_COMPATIBLE_SELECT\n\n// デフォルトの対話型シェル起動ファイル\n#define DEFAULT_BASHRC "~/.bashrc"\n\n/* 対話式シェル用のシステム全体の.bashrcファイル */\n/* #define SYS_BASHRC "/etc/bash.bashrc" */\n\n// .bash_logoutのデフォルト\n#define SYS_BASH_LOGOUT "/etc/bash.bash_logout"\n\n// (中略)\n\n// ソースに必要な最大再帰レベル\n#define SOURCENEST_MAX 0\n\n// lib/sh/tmpfile.cの代わりにlibc mktemp/mkstempを使用するように定義。\n#define USE_MKTEMP\n#define USE_MKSTEMP\n\n// OLDPWDの値をディレクトリにするように定義\n#define OLDPWD_CHECK_DIRECTORY 1\n\n// 履歴の保存数\n/*#define HISTSIZE_DEFAULT "500"*/\n\n// 履歴の展開の有無のデフォルト\n#define HISTEXPAND_DEFAULT      1\n```\n\n## まとめ\n\n他にもたくさんのアップデートがありました。\n全てを見たい方は公式を見に行くか付属のCHANGESをご参照ください。\n\nwaitの話だったりnamerefの話だったり詳しく取りあげてくださっている記事があれば教えてください\n\n## 参考URL\n\nhttps://lwn.net/Articles/776223/\nhttps://www.osnews.com/story/129062/bash-5-0-released/\n', 'coediting': False, 'comments_count': 0, 'created_at': '2019-01-09T21:49:05+09:00', 'group': None, 'id': '9f0b42517a51ccd34243', 'likes_count': 39, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Bash', 'versions': []}, {'name': 'Linux', 'versions': []}, {'name': 'shell', 'versions': []}], 'title': 'bash 5.0がリリースされた話', 'updated_at': '2019-01-12T14:16:19+09:00', 'url': 'https://qiita.com/ryuichi1208/items/9f0b42517a51ccd34243', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/f742bb642d513ab54aad4ec74ded035e47969703/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36396461393530352d313461642d613138632d613062622d3232613738346163336663332e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/f742bb642d513ab54aad4ec74ded035e47969703/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36396461393530352d313461642d613138632d613062622d3232613738346163336663332e6a706567" alt="Raspbian-Jessie-Lite-680x486.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/69da9505-14ad-a18c-a0bb-22a784ac3fc3.jpeg"></a></p>\n\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>ラズパイ用のカーネルをセルフビルドしてインストールしたときの実行ログ<br>\n最終的に下記のようにカーネル名に自分の名前が入ることを目標とする。<br>\n尚、ラズパイの初期設定などは既に完了しているところから始めます。<br>\n自前ビルドとクロスコンパイルがあるが本記事ではクロスコンパイルの手順は非対称です。</p>\n\n<p>ちなみに自前ビルドせずとも公式では下記の方法でカーネルアップデートの方法を提供している。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt-get update\n\n<span class="nv">$ </span><span class="nb">sudo </span>apt-get dist-upgrade\n</pre></div></div>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<p>本記事では下記の環境で検証しています。</p>\n\n<ul>\n<li>raspberry pi 3 * 1</li>\n<li>raspbianのソース <a href="https://github.com/raspberrypi/linux" rel="nofollow noopener" target="_blank">raspberrypi/linux</a>\n</li>\n</ul>\n\n<h2>\n<span id="前準備" class="fragment"></span><a href="#%E5%89%8D%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>前準備</h2>\n\n<p>カーネルを置く場所を決めます。<br>\n慣例として/home/pi以下に置くようなので同様にそちらに配置します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> /home/pi\n<span class="nv">$ </span><span class="nb">mkdir</span> ./kernel_ryu\n</pre></div></div>\n\n<p>次にカーネルソースを持ってきます。<br>\nソースはGitHubで公開されているので楽に持ってこれます。<br>\nコミット履歴を見ると今でも割と頻繁に開発は行われている模様。<br>\ngitが無い方は事前にインストールしておいてください。<br>\nついでにbcも依存関係上必要になるようなのでそちらも入れておきます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>git bc\n</pre></div></div>\n\n<p>上記のインストールが完了したらカーネルソースを入手します。<br>\ngitコマンドで最新のカーネルのみを入手します。<br>\n別ブランチをダウンロードするには「--branch」を指定して入手することが出来ます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/raspberrypi/linux\n</pre></div></div>\n\n<p>次にconfigファイルのコピーをします。<br>\n尚★のところがそれぞれラズパイのバージョン毎に変わりますのでご注意ください。<br>\nRaspberry Pi 1、Pi Zero、Pi Zero Wでは「KERNEL=kernel」<br>\nRaspberry Pi 2、Pi 3、Pi 3+では「KERNEL=kernel7」となります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd </span>linux\n<span class="nv">$ KERNEL</span><span class="o">=</span>kernel7 <span class="c">#★</span>\n<span class="nv">$ </span><span class="nb">sudo </span>modprobe configs\n<span class="nv">$ </span><span class="nb">cat</span> /proc/config.gz <span class="o">&gt;</span> .config\n</pre></div></div>\n\n<p>その後はカーネルに自分が分かりやすい名前を設定してください。<br>\n設定するのはMakefie内の下記の箇所です。例ではryuichiを指定しています。</p>\n\n<div class="code-frame" data-lang="">\n<div class="code-lang"><span class="bold">Makefile</span></div>\n<div class="highlight"><pre># SPDX-License-Identifier: GPL-2.0\nVERSION = 4\nPATCHLEVEL = 14\nSUBLEVEL = 91\nEXTRAVERSION = -ryuichi #ここに記載\nNAME = Petit Gorille\n</pre></div>\n</div>\n\n<h2>\n<span id="余談" class="fragment"></span><a href="#%E4%BD%99%E8%AB%87"><i class="fa fa-link"></i></a>余談</h2>\n\n<p>ここでカーネルの設定をカスタマイズすることもできます。が今回は軽く紹介する程度で留めます。<br>\n設定方法はmenuconfigを実行することでカスタマイズが可能です。</p>\n\n<p>menuconfigを事項するにはlibncurses5-devというライブラリが必要なのでインストールします。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>libncurses5-dev\n\n<span class="nv">$ </span>make menuconfig\n</pre></div></div>\n\n<h2>\n<span id="カーネルコンパイル" class="fragment"></span><a href="#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB"><i class="fa fa-link"></i></a>カーネルコンパイル</h2>\n\n<p>いよいよコンパイルします。<br>\n処理時間は結構まちまちのようで機種の処理性能に大きく依存するようです。<br>\nビルド中は他の作業をして待ちましょう。<br>\nmakeにはオプションとしてジョブ数を指定しています。ラズパイのCPU数に合わせて指定することで<br>\n高速化が望めます。</p>\n\n<p><a href="https://linuxjm.osdn.jp/html/GNU_make/man1/make.1.html" class="autolink" rel="nofollow noopener" target="_blank">https://linuxjm.osdn.jp/html/GNU_make/man1/make.1.html</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>make <span class="nt">-j4</span> zImage modules dtbs\n</pre></div></div>\n\n<h2>\n<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h2>\n\n<p>ビルドが完了したら次はインストールです。<br>\n以下のコマンドを実行してください。<br>\nバックアップが必要な方は適宜行うようにしましょう。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> ~/linux/\n<span class="nv">$ </span><span class="nb">sudo cp arch</span>/arm/boot/dts/<span class="k">*</span>.dtb /boot/\n<span class="nv">$ </span><span class="nb">sudo cp arch</span>/arm/boot/dts/overlays/<span class="k">*</span>.dtb<span class="k">*</span> /boot/overlays/\n<span class="nv">$ </span><span class="nb">sudo cp arch</span>/arm/boot/dts/overlays/README /boot/overlays/\n<span class="nv">$ </span><span class="nb">sudo </span>scripts/mkknlimg <span class="nb">arch</span>/arm/boot/zImage /boot/<span class="nv">$KERNEL</span>.img\n</pre></div></div>\n\n<p>既存カーネルをバックアップするなら</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> /boot\n<span class="nv">$ </span><span class="nb">sudo mkdir</span> <span class="nt">-p</span> boot_org/overlays\n<span class="nv">$ </span><span class="nb">sudo cp</span> <span class="k">*</span>.dtb boot_org/\n<span class="nv">$ </span><span class="nb">sudo cp </span>overlays/<span class="k">*</span>.dtb boot_org/overlays/\n<span class="nv">$ </span><span class="nb">sudo cp </span>overlays/README boot_org/overlays/\n<span class="nv">$ </span><span class="nb">sudo cp </span>kernel7.img boot_org/\n</pre></div></div>\n\n<p>ビルド/インストールが終わりました。<br>\n最後に再起動してunameコマンドを実行して確認してみます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>shutdown <span class="nt">-r</span> now\n\n<span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-r</span>\n4.1.7-ryuichi\n</pre></div></div>\n\n<p>はい、成功していますね！独自のカーネル名が入ったカーネルの完成。<br>\n特に何か機能を開発したわけではないけどラズパイへの愛着が一層増しますね。</p>\n\n<h2>\n<span id="クロスコンパイルについて" class="fragment"></span><a href="#%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>クロスコンパイルについて</h2>\n\n<p>クロスコンパイルについても少し触れます。</p>\n\n<p>クロスコンパイルとはソースコードを元に、開発に使用しているOSとは別の環境向けにコンパイルすることです。<br>\nここではraspberry pi用のカーネルをUbuntuでコンパイルする。といったイメージです。</p>\n\n<p>クロスコンパイルを行うには適したホストが必要になります。<br>\n特に制限等が無ければUbuntuを使う傾向があるようです。<br>\n詳しい手順は公式リファレンスに記載してありますので興味がある方は実施してみてください。<br>\n<a href="https://www.raspberrypi.org/documentation/linux/kernel/building.md" class="autolink" rel="nofollow noopener" target="_blank">https://www.raspberrypi.org/documentation/linux/kernel/building.md</a></p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>思っていたよりも簡単にカーネルビルド/インストールが行えました。<br>\n次にやりたいことはといえば特に決まっていませんが、とりあえずGitHubの本家をforkして<br>\n何か知らして遊んでいこうかなと考えています。<br>\nまずはmenuconfigで何が設定できて何が出来ないのかの理解が優先ですかね。</p>\n\n<h2>\n<span id="参考url" class="fragment"></span><a href="#%E5%8F%82%E8%80%83url"><i class="fa fa-link"></i></a>参考URL</h2>\n\n<p><a href="https://www.raspberrypi.org/documentation/linux/kernel/" class="autolink" rel="nofollow noopener" target="_blank">https://www.raspberrypi.org/documentation/linux/kernel/</a><br>\n<a href="https://karaage.hatenadiary.jp/entry/2015/10/07/073000" class="autolink" rel="nofollow noopener" target="_blank">https://karaage.hatenadiary.jp/entry/2015/10/07/073000</a></p>\n', 'body': '![Raspbian-Jessie-Lite-680x486.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/69da9505-14ad-a18c-a0bb-22a784ac3fc3.jpeg)\n\n## 概要\n\nラズパイ用のカーネルをセルフビルドしてインストールしたときの実行ログ\n最終的に下記のようにカーネル名に自分の名前が入ることを目標とする。\n尚、ラズパイの初期設定などは既に完了しているところから始めます。\n自前ビルドとクロスコンパイルがあるが本記事ではクロスコンパイルの手順は非対称です。\n\nちなみに自前ビルドせずとも公式では下記の方法でカーネルアップデートの方法を提供している。\n\n``` bash\n$ sudo apt-get update\n\n$ sudo apt-get dist-upgrade\n```\n\n## 環境\n\n本記事では下記の環境で検証しています。\n\n* raspberry pi 3 * 1\n* raspbianのソース [raspberrypi/linux](https://github.com/raspberrypi/linux)\n\n## 前準備\n\nカーネルを置く場所を決めます。\n慣例として/home/pi以下に置くようなので同様にそちらに配置します。\n\n``` bash\n$ cd /home/pi\n$ mkdir ./kernel_ryu\n```\n\n次にカーネルソースを持ってきます。\nソースはGitHubで公開されているので楽に持ってこれます。\nコミット履歴を見ると今でも割と頻繁に開発は行われている模様。\ngitが無い方は事前にインストールしておいてください。\nついでにbcも依存関係上必要になるようなのでそちらも入れておきます。\n\n``` bash\n$ sudo apt-get install git bc\n```\n\n上記のインストールが完了したらカーネルソースを入手します。\ngitコマンドで最新のカーネルのみを入手します。\n別ブランチをダウンロードするには「--branch」を指定して入手することが出来ます。\n\n``` bash\n$ git clone --depth=1 https://github.com/raspberrypi/linux\n```\n\n次にconfigファイルのコピーをします。\n尚★のところがそれぞれラズパイのバージョン毎に変わりますのでご注意ください。\nRaspberry Pi 1、Pi Zero、Pi Zero Wでは「KERNEL=kernel」\nRaspberry Pi 2、Pi 3、Pi 3+では「KERNEL=kernel7」となります。\n\n``` bash\n$ cd linux\n$ KERNEL=kernel7 #★\n$ sudo modprobe configs\n$ cat /proc/config.gz > .config\n```\n\nその後はカーネルに自分が分かりやすい名前を設定してください。\n設定するのはMakefie内の下記の箇所です。例ではryuichiを指定しています。\n\n``` :Makefile\n# SPDX-License-Identifier: GPL-2.0\nVERSION = 4\nPATCHLEVEL = 14\nSUBLEVEL = 91\nEXTRAVERSION = -ryuichi #ここに記載\nNAME = Petit Gorille\n```\n\n## 余談\n\nここでカーネルの設定をカスタマイズすることもできます。が今回は軽く紹介する程度で留めます。\n設定方法はmenuconfigを実行することでカスタマイズが可能です。\n\nmenuconfigを事項するにはlibncurses5-devというライブラリが必要なのでインストールします。\n\n``` bash\n$ sudo apt-get install libncurses5-dev\n\n$ make menuconfig\n```\n\n## カーネルコンパイル\n\nいよいよコンパイルします。\n処理時間は結構まちまちのようで機種の処理性能に大きく依存するようです。\nビルド中は他の作業をして待ちましょう。\nmakeにはオプションとしてジョブ数を指定しています。ラズパイのCPU数に合わせて指定することで\n高速化が望めます。\n\nhttps://linuxjm.osdn.jp/html/GNU_make/man1/make.1.html\n\n``` bash\n$ sudo make -j4 zImage modules dtbs\n```\n\n## インストール\n\nビルドが完了したら次はインストールです。\n以下のコマンドを実行してください。\nバックアップが必要な方は適宜行うようにしましょう。\n\n``` bash\n$ cd ~/linux/\n$ sudo cp arch/arm/boot/dts/*.dtb /boot/\n$ sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/\n$ sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/\n$ sudo scripts/mkknlimg arch/arm/boot/zImage /boot/$KERNEL.img\n```\n\n既存カーネルをバックアップするなら\n\n``` bash\n$ cd /boot\n$ sudo mkdir -p boot_org/overlays\n$ sudo cp *.dtb boot_org/\n$ sudo cp overlays/*.dtb boot_org/overlays/\n$ sudo cp overlays/README boot_org/overlays/\n$ sudo cp kernel7.img boot_org/\n```\n\nビルド/インストールが終わりました。\n最後に再起動してunameコマンドを実行して確認してみます。\n\n``` bash\n$ sudo shutdown -r now\n\n$ uname -r\n4.1.7-ryuichi\n```\n\nはい、成功していますね！独自のカーネル名が入ったカーネルの完成。\n特に何か機能を開発したわけではないけどラズパイへの愛着が一層増しますね。\n\n## クロスコンパイルについて\n\nクロスコンパイルについても少し触れます。\n\nクロスコンパイルとはソースコードを元に、開発に使用しているOSとは別の環境向けにコンパイルすることです。\nここではraspberry pi用のカーネルをUbuntuでコンパイルする。といったイメージです。\n\nクロスコンパイルを行うには適したホストが必要になります。\n特に制限等が無ければUbuntuを使う傾向があるようです。\n詳しい手順は公式リファレンスに記載してありますので興味がある方は実施してみてください。\nhttps://www.raspberrypi.org/documentation/linux/kernel/building.md\n\n\n## まとめ\n\n思っていたよりも簡単にカーネルビルド/インストールが行えました。\n次にやりたいことはといえば特に決まっていませんが、とりあえずGitHubの本家をforkして\n何か知らして遊んでいこうかなと考えています。\nまずはmenuconfigで何が設定できて何が出来ないのかの理解が優先ですかね。\n\n## 参考URL\n\nhttps://www.raspberrypi.org/documentation/linux/kernel/\nhttps://karaage.hatenadiary.jp/entry/2015/10/07/073000\n', 'coediting': False, 'comments_count': 2, 'created_at': '2019-01-08T20:09:27+09:00', 'group': None, 'id': '7da92868442fd8959c6f', 'likes_count': 5, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'RaspberryPi', 'versions': []}, {'name': 'raspbian', 'versions': []}, {'name': 'カーネル', 'versions': []}], 'title': 'ラズパイのカーネルをセルフビルドする', 'updated_at': '2019-05-07T00:42:17+09:00', 'url': 'https://qiita.com/ryuichi1208/items/7da92868442fd8959c6f', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/27bacac0d7631de0086097fe951403ae850301db/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30653530323735652d343235312d386435612d363133362d6161333032633966633664362e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/27bacac0d7631de0086097fe951403ae850301db/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30653530323735652d343235312d386435612d363133362d6161333032633966633664362e706e67" alt="knowledge_graph_logo.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/0e50275e-4251-8d5a-6136-aa302c9fc6d6.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>windowsとmacを平行して使っているとショートカットキーがごっちゃになるので整理してみた。<br>\nwindowsのショートカットキーとmacでのいい感じの比較サイトがあれば教えて頂きたい。<br>\n個人的に作成したショートカット集とかもいいまとめがあれば教えてください。</p>\n\n<h2>\n<span id="特殊キー" class="fragment"></span><a href="#%E7%89%B9%E6%AE%8A%E3%82%AD%E3%83%BC"><i class="fa fa-link"></i></a>特殊キー</h2>\n\n<p>本記事では取り扱っていないが意外とショートカット系の記事を見ると書かれている特殊キーたち<br>\n⌘ … command<br>\n⇧ … shift<br>\n⌥ … option<br>\n⌃ … control<br>\n⇪ … caps lock</p>\n\n<h2>\n<span id="ウインドウアプリ" class="fragment"></span><a href="#%E3%82%A6%E3%82%A4%E3%83%B3%E3%83%89%E3%82%A6%E3%82%A2%E3%83%97%E3%83%AA"><i class="fa fa-link"></i></a>ウインドウ/アプリ</h2>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + H</td>\n<td>選択中のアプリを隠す</td>\n</tr>\n<tr>\n<td>command + W</td>\n<td>ウインドウを閉じる</td>\n</tr>\n<tr>\n<td>command + Q</td>\n<td>アプリを終了する</td>\n</tr>\n<tr>\n<td>command + tab</td>\n<td>アプリの切り替え</td>\n</tr>\n<tr>\n<td>command + control + F</td>\n<td>フルスクリーン表示</td>\n</tr>\n<tr>\n<td>control + (← or →)</td>\n<td>デスクトップ切り替え</td>\n</tr>\n<tr>\n<td>control + ↑</td>\n<td>ウィンドウ一覧</td>\n</tr>\n<tr>\n<td>control + ↓</td>\n<td>アクティブなアプリのウィンドウ一覧</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="基本操作" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C"><i class="fa fa-link"></i></a>基本操作</h2>\n\n<p>基本の基本操作。<br>\nreturnキーがリネームっていうの以外は大体windowsユーザからでもすんなりなじめるはず<br>\n+ネットでコピーしたものペーストする際は必須なのがこれ「comannd + shift + V」<br>\n+書式無しでペーストできる。</p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + C</td>\n<td>コピー</td>\n</tr>\n<tr>\n<td>command + X</td>\n<td>切り取り</td>\n</tr>\n<tr>\n<td>command + V</td>\n<td>ペースト</td>\n</tr>\n<tr>\n<td>command + A</td>\n<td>全選択</td>\n</tr>\n<tr>\n<td>command + Z</td>\n<td>直前の操作の取り消し</td>\n</tr>\n<tr>\n<td>command + Z + shift</td>\n<td>直前の操作の取り消しの取り消し</td>\n</tr>\n<tr>\n<td>command + S</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>command + S + shift</td>\n<td>別名で保存</td>\n</tr>\n<tr>\n<td>command + F</td>\n<td>検索</td>\n</tr>\n<tr>\n<td>command + P</td>\n<td>印刷</td>\n</tr>\n<tr>\n<td>command + N</td>\n<td>新規ウィンドウを開く</td>\n</tr>\n<tr>\n<td>command + プラス</td>\n<td>フォントを大きく</td>\n</tr>\n<tr>\n<td>command + マイナス</td>\n<td>フォントを小さく</td>\n</tr>\n<tr>\n<td>command + delete</td>\n<td>ファイルをゴミ箱へ移動</td>\n</tr>\n<tr>\n<td>command + L</td>\n<td>エイリアスを作成</td>\n</tr>\n<tr>\n<td>+comannd + shift + V</td>\n<td>書式情報を貼り付けない</td>\n</tr>\n<tr>\n<td>command + ,</td>\n<td>環境設定を開く</td>\n</tr>\n<tr>\n<td>option + command + shift + V</td>\n<td>書式情報を貼り付けない</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="スクリーンショット" class="fragment"></span><a href="#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88"><i class="fa fa-link"></i></a>スクリーンショット</h2>\n\n<p>スクリーンショットだけでなく録画がデフォルトで出来るようになったのは驚きでした。<br>\n静止画ではなく動きを見せたいときに使えますね。<br>\n録画に関しては下記をご参照ください。<br>\n<a href="https://support.apple.com/ja-jp/HT208721" class="autolink" rel="nofollow noopener" target="_blank">https://support.apple.com/ja-jp/HT208721</a></p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + shift + 3</td>\n<td>画面全体</td>\n</tr>\n<tr>\n<td>command + shift + 4</td>\n<td>範囲を選択してスクリーンショット</td>\n</tr>\n<tr>\n<td>command + shift + 5</td>\n<td>動画撮影等</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="カーソル操作文字入力" class="fragment"></span><a href="#%E3%82%AB%E3%83%BC%E3%82%BD%E3%83%AB%E6%93%8D%E4%BD%9C%E6%96%87%E5%AD%97%E5%85%A5%E5%8A%9B"><i class="fa fa-link"></i></a>カーソル操作/文字入力</h2>\n\n<p>行末一括削除のcontrol + Kが非常に便利です。<br>\nただここら辺はvimの方が直感的に操作できている気がします。</p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>control + A</td>\n<td>行または段落の先頭に移動</td>\n</tr>\n<tr>\n<td>control + E</td>\n<td>行または段落の末尾に移動</td>\n</tr>\n<tr>\n<td>control + F</td>\n<td>1文字分進む</td>\n</tr>\n<tr>\n<td>control + B</td>\n<td>1文字分戻る</td>\n</tr>\n<tr>\n<td>control + P</td>\n<td>1 行上に移動</td>\n</tr>\n<tr>\n<td>control + N</td>\n<td>1 行下に移動</td>\n</tr>\n<tr>\n<td>control + L</td>\n<td>カーソルまたは選択範囲を表示領域の中央に表示</td>\n</tr>\n<tr>\n<td>control + O</td>\n<td>挿入ポイントの後に 1 行挿入</td>\n</tr>\n<tr>\n<td>control + T</td>\n<td>挿入ポイントの右側の文字と左側の文字を置換</td>\n</tr>\n<tr>\n<td>control + D</td>\n<td>カーソル右側の文字を削除</td>\n</tr>\n<tr>\n<td>control + H</td>\n<td>カーソル左側の文字を削除</td>\n</tr>\n<tr>\n<td>control + K</td>\n<td>カーソル右側の文字から行末／段落末まで削除</td>\n</tr>\n<tr>\n<td>control + V</td>\n<td>次ページへ移動</td>\n</tr>\n<tr>\n<td>option＋delete</td>\n<td>カーソル左側の1単語とその後ろのスペース・句読点を削除</td>\n</tr>\n<tr>\n<td>shift + command + ←</td>\n<td>カーソルから一単語分左を選択する</td>\n</tr>\n<tr>\n<td>shift + command + →</td>\n<td>カーソルから一単語分右を選択する</td>\n</tr>\n<tr>\n<td>shift + command + ↑</td>\n<td>カーソルから段落の先頭までを選択する</td>\n</tr>\n<tr>\n<td>shift + command + ↓</td>\n<td>カーソルから段落の末尾までを選択する</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="システム" class="fragment"></span><a href="#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0"><i class="fa fa-link"></i></a>システム</h2>\n\n<p>困ったときに役立つコマンドたち。<br>\n開発しているとメモリ不足だったり起こりがちなので。</p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>shift + command + Q</td>\n<td>ユーザアカウントからログアウト</td>\n</tr>\n<tr>\n<td>option + command + 電源ボタン</td>\n<td>スリープ</td>\n</tr>\n<tr>\n<td>command + option + eject</td>\n<td>すぐにスリープ</td>\n</tr>\n<tr>\n<td>control + 電源ボタン</td>\n<td>再起動</td>\n</tr>\n<tr>\n<td>control + command + 電源ボタン</td>\n<td>強制再起動</td>\n</tr>\n<tr>\n<td>電源長押し</td>\n<td>強制終了</td>\n</tr>\n<tr>\n<td>電源ボタン + C</td>\n<td>CD/DVDから起動</td>\n</tr>\n<tr>\n<td>電源ボタン + T</td>\n<td>ターゲットディスクモードで起動</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="terminal" class="fragment"></span><a href="#terminal"><i class="fa fa-link"></i></a>terminal</h2>\n\n<p>ターミナルで使用できる基本的なショートカットキー<br>\nカーソル移動も使えたりしますので合わせて覚えると良いですね。</p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + L</td>\n<td>画面をクリア</td>\n</tr>\n<tr>\n<td>command + T</td>\n<td>新規タブ</td>\n</tr>\n<tr>\n<td>shift + command + K</td>\n<td>新規リモート接続</td>\n</tr>\n<tr>\n<td>control + tab</td>\n<td>次のタブ</td>\n</tr>\n<tr>\n<td>control + shift + tab</td>\n<td>前のタブ</td>\n</tr>\n<tr>\n<td>command + D</td>\n<td>ウィンドウを2つに分割</td>\n</tr>\n<tr>\n<td>shift + command + D</td>\n<td>分割を閉じる</td>\n</tr>\n<tr>\n<td>command ＋ W</td>\n<td>タブを閉じる</td>\n</tr>\n<tr>\n<td>option ＋ command ＋ W</td>\n<td>他のタブを閉じる</td>\n</tr>\n<tr>\n<td>shift ＋ command ＋ W</td>\n<td>ウインドウを閉じる</td>\n</tr>\n<tr>\n<td>command + ,</td>\n<td>ターミナルの環境設定を開く</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="finder" class="fragment"></span><a href="#finder"><i class="fa fa-link"></i></a>Finder</h2>\n\n<p>基本的にターミナルからファイルをいじることが多く忘れがちなFinder関連のショートカットキー</p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + shift + N</td>\n<td>新しいフォルダを作る</td>\n</tr>\n<tr>\n<td>command + D</td>\n<td>ファイルを複製する</td>\n</tr>\n<tr>\n<td>command + I</td>\n<td>ファイルの情報を見る</td>\n</tr>\n<tr>\n<td>command + delete</td>\n<td>ファイルをゴミ箱に捨てる</td>\n</tr>\n<tr>\n<td>command + shift + delete</td>\n<td>ゴミ箱を空にする（確認あり）</td>\n</tr>\n<tr>\n<td>command + option + shift + delete</td>\n<td>ゴミ箱を空にする(確認なし)</td>\n</tr>\n<tr>\n<td>command + shift + D</td>\n<td>「デスクトップ」を開く</td>\n</tr>\n<tr>\n<td>command + shift + A</td>\n<td>「アプリケーション」フォルダを開く</td>\n</tr>\n<tr>\n<td>command + option + L</td>\n<td>「ダウンロード」フォルダを開く</td>\n</tr>\n<tr>\n<td>command + ↓</td>\n<td>ファイルを開く,(ファイル選択時),ディレクトリを開く(ディレクトリ選択時)</td>\n</tr>\n<tr>\n<td>command + ↑</td>\n<td>1個上のディレクトリへ移動</td>\n</tr>\n<tr>\n<td>space</td>\n<td>ファイルプレビュー</td>\n</tr>\n<tr>\n<td>enter</td>\n<td>ファイル名変更</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="chrome" class="fragment"></span><a href="#chrome"><i class="fa fa-link"></i></a>Chrome</h2>\n\n<p>Safari使って3年くらいたったが家にwindows機が来たためブックマークを同期するために導入<br>\nここで紹介しているショートカットよりも個人的には操作がvimライクになるVimniumの導入をおススメする。</p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + shift + N</td>\n<td>新しいウィンドウをシークレットモードで開く</td>\n</tr>\n<tr>\n<td>command + option + →</td>\n<td>次のタブへ切り替え</td>\n</tr>\n<tr>\n<td>command + option + ←</td>\n<td>前のタブへ切り替え</td>\n</tr>\n<tr>\n<td>command + shift + I</td>\n<td>現在のページをメールで送信</td>\n</tr>\n<tr>\n<td>command + R</td>\n<td>現在のページの再読み込み</td>\n</tr>\n<tr>\n<td>command + option + C</td>\n<td>現在のページのURLをクリップボードへコピー</td>\n</tr>\n<tr>\n<td>command + option + U</td>\n<td>ソースを表示</td>\n</tr>\n<tr>\n<td>command + option + I</td>\n<td>開発者ツールを表示/非表示（トグル）</td>\n</tr>\n<tr>\n<td>option + リンククリック</td>\n<td>リンク先をダウンロード</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="safari" class="fragment"></span><a href="#safari"><i class="fa fa-link"></i></a>safari</h2>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + shift + A</td>\n<td>フォームに自動入力</td>\n</tr>\n<tr>\n<td>command + shift + B</td>\n<td>お気に入りバーの表示切替</td>\n</tr>\n<tr>\n<td>command + shift + K</td>\n<td>ポップアップウィンドウをブロック</td>\n</tr>\n<tr>\n<td>command + option + E</td>\n<td>キャッシュを空にする</td>\n</tr>\n<tr>\n<td>command + option + L</td>\n<td>ダウンロードウィンドウを表示</td>\n</tr>\n<tr>\n<td>command + option + I</td>\n<td>開発者ツールを表示/非表示（トグル）</td>\n</tr>\n<tr>\n<td>commnad + option + [1-9]</td>\n<td>割り当てたブックマークを開く</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="メール" class="fragment"></span><a href="#%E3%83%A1%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>メール</h2>\n\n<p>これ以外にもたくさんあるっぽい。<br>\nフラグと迷惑メールにするは個人的には必須。<br>\nメール送信は誤送信があり得るから使ってない<br>\n参考：<a href="http://inforati.jp/apple/mac-tips-techniques/internet-hints/how-to-use-mac-mail-app-with-keyboard-shortcut.html" class="autolink" rel="nofollow noopener" target="_blank">http://inforati.jp/apple/mac-tips-techniques/internet-hints/how-to-use-mac-mail-app-with-keyboard-shortcut.html</a></p>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + shift + N</td>\n<td>新規メール受信</td>\n</tr>\n<tr>\n<td>command + shift + D</td>\n<td>メール送信</td>\n</tr>\n<tr>\n<td>command + shift + F</td>\n<td>転送</td>\n</tr>\n<tr>\n<td>command + shift + E</td>\n<td>リダイレクト</td>\n</tr>\n<tr>\n<td>command + shift + R</td>\n<td>全員へ返信</td>\n</tr>\n<tr>\n<td>command + R</td>\n<td>差出人へメール返信</td>\n</tr>\n<tr>\n<td>command + option + B</td>\n<td>Bccヘッダを追加</td>\n</tr>\n<tr>\n<td>command + option + R</td>\n<td>返信先ヘッダを追加</td>\n</tr>\n<tr>\n<td>command + shift + U</td>\n<td>既読にする</td>\n</tr>\n<tr>\n<td>command + shift + L</td>\n<td>フラグをつける</td>\n</tr>\n<tr>\n<td>command + shift + J</td>\n<td>迷惑メールにする</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="あまり使わ無そうだけど知っときたいやつ" class="fragment"></span><a href="#%E3%81%82%E3%81%BE%E3%82%8A%E4%BD%BF%E3%82%8F%E7%84%A1%E3%81%9D%E3%81%86%E3%81%A0%E3%81%91%E3%81%A9%E7%9F%A5%E3%81%A3%E3%81%A8%E3%81%8D%E3%81%9F%E3%81%84%E3%82%84%E3%81%A4"><i class="fa fa-link"></i></a>あまり使わ無そうだけど知っときたいやつ</h2>\n\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command + Control + option + 8</td>\n<td>画面の色反転</td>\n</tr>\n<tr>\n<td>command + shift + U</td>\n<td>ユーティリティフォルダを開く</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>最初Mac買ったときは正直こんなん覚えられるか！って思ってたけど意外と手が覚えてくれた。<br>\nそのせいでwin機使うと誤爆することも多々あるが。。。<br>\n必要なときに必要なものだけ覚えるのも良いけどドンなのがあるのか先に知っておくのも良いと思った。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://support.apple.com/ja-jp/HT201236" class="autolink" rel="nofollow noopener" target="_blank">https://support.apple.com/ja-jp/HT201236</a><br>\n<a href="https://matome.naver.jp/odai/2138612139607002701" class="autolink" rel="nofollow noopener" target="_blank">https://matome.naver.jp/odai/2138612139607002701</a></p>\n', 'body': '![knowledge_graph_logo.png](https://qiita-image-store.s3.amazonaws.com/0/258841/0e50275e-4251-8d5a-6136-aa302c9fc6d6.png)\n\n\n## 背景\nwindowsとmacを平行して使っているとショートカットキーがごっちゃになるので整理してみた。\nwindowsのショートカットキーとmacでのいい感じの比較サイトがあれば教えて頂きたい。\n個人的に作成したショートカット集とかもいいまとめがあれば教えてください。\n## 特殊キー\n本記事では取り扱っていないが意外とショートカット系の記事を見ると書かれている特殊キーたち\n⌘ … command\n⇧ … shift\n⌥ … option\n⌃ … control\n⇪ … caps lock\n\n## ウインドウ/アプリ\n\nコマンド |概要\n----------------------|----\ncommand + H |選択中のアプリを隠す\ncommand + W |ウインドウを閉じる\ncommand + Q |アプリを終了する\ncommand + tab |アプリの切り替え\ncommand + control + F | フルスクリーン表示\ncontrol + (← or →)|デスクトップ切り替え\ncontrol + ↑|ウィンドウ一覧\ncontrol + ↓|アクティブなアプリのウィンドウ一覧\n\n## 基本操作\n\n基本の基本操作。\nreturnキーがリネームっていうの以外は大体windowsユーザからでもすんなりなじめるはず\n+ネットでコピーしたものペーストする際は必須なのがこれ「comannd + shift + V」\n+書式無しでペーストできる。\n\nコマンド |概要\n-------------------|----\ncommand + C |コピー\ncommand + X |切り取り\ncommand + V |ペースト\ncommand + A |全選択\ncommand + Z |直前の操作の取り消し\ncommand + Z + shift|直前の操作の取り消しの取り消し\ncommand + S |保存\ncommand + S + shift|別名で保存\ncommand + F |検索\ncommand + P |印刷\ncommand + N |新規ウィンドウを開く\ncommand + プラス |フォントを大きく\ncommand + マイナス |フォントを小さく\ncommand + delete |ファイルをゴミ箱へ移動\ncommand + L |エイリアスを作成\n+comannd + shift + V|書式情報を貼り付けない\ncommand + ,|環境設定を開く\noption + command + shift + V|書式情報を貼り付けない\n\n## スクリーンショット\n\nスクリーンショットだけでなく録画がデフォルトで出来るようになったのは驚きでした。\n静止画ではなく動きを見せたいときに使えますね。\n録画に関しては下記をご参照ください。\nhttps://support.apple.com/ja-jp/HT208721\n\nコマンド |概要\n-------------------|----\ncommand + shift + 3|画面全体\ncommand + shift + 4|範囲を選択してスクリーンショット\ncommand + shift + 5|動画撮影等\n\n## カーソル操作/文字入力\n\n行末一括削除のcontrol + Kが非常に便利です。\nただここら辺はvimの方が直感的に操作できている気がします。\n\nコマンド |概要\n-------------------|----\ncontrol + A |行または段落の先頭に移動\ncontrol + E |行または段落の末尾に移動\ncontrol + F |1文字分進む\ncontrol + B |1文字分戻る\ncontrol + P |1 行上に移動\ncontrol + N |1 行下に移動\ncontrol + L |カーソルまたは選択範囲を表示領域の中央に表示\ncontrol + O |挿入ポイントの後に 1 行挿入\ncontrol + T |挿入ポイントの右側の文字と左側の文字を置換\ncontrol + D |カーソル右側の文字を削除\ncontrol + H |カーソル左側の文字を削除\ncontrol + K |カーソル右側の文字から行末／段落末まで削除\ncontrol + V |次ページへ移動\noption＋delete |カーソル左側の1単語とその後ろのスペース・句読点を削除\nshift + command + ←|カーソルから一単語分左を選択する\nshift + command + →|カーソルから一単語分右を選択する\nshift + command + ↑|カーソルから段落の先頭までを選択する\nshift + command + ↓|カーソルから段落の末尾までを選択する\n\n## システム\n困ったときに役立つコマンドたち。\n開発しているとメモリ不足だったり起こりがちなので。\n\nコマンド |概要\n------------------------------|----\nshift + command + Q |ユーザアカウントからログアウト\noption + command + 電源ボタン |スリープ\ncommand + option + eject |すぐにスリープ\ncontrol + 電源ボタン |再起動\ncontrol + command + 電源ボタン|強制再起動\n電源長押し |強制終了\n電源ボタン + C |CD/DVDから起動\n電源ボタン + T |ターゲットディスクモードで起動\n## terminal\nターミナルで使用できる基本的なショートカットキー\nカーソル移動も使えたりしますので合わせて覚えると良いですね。\n\nコマンド |概要\n----------------------|----\ncommand + L |画面をクリア\ncommand + T |新規タブ\nshift + command + K |新規リモート接続\ncontrol + tab |次のタブ\ncontrol + shift + tab |前のタブ\ncommand + D |ウィンドウを2つに分割\nshift + command + D |分割を閉じる\ncommand ＋ W |タブを閉じる\noption ＋ command ＋ W|他のタブを閉じる\nshift ＋ command ＋ W |ウインドウを閉じる\ncommand + , |ターミナルの環境設定を開く\n\n## Finder\n\n基本的にターミナルからファイルをいじることが多く忘れがちなFinder関連のショートカットキー\n\nコマンド |概要\n--------------------------|----\ncommand + shift + N |新しいフォルダを作る\ncommand + D |ファイルを複製する\ncommand + I |ファイルの情報を見る\ncommand + delete |ファイルをゴミ箱に捨てる\ncommand + shift + delete|ゴミ箱を空にする（確認あり）\ncommand + option + shift + delete|ゴミ箱を空にする(確認なし)\ncommand + shift + D|「デスクトップ」を開く\ncommand + shift + A|「アプリケーション」フォルダを開く\ncommand + option + L|「ダウンロード」フォルダを開く\ncommand + ↓|ファイルを開く,(ファイル選択時),ディレクトリを開く(ディレクトリ選択時)\ncommand + ↑|1個上のディレクトリへ移動\nspace|ファイルプレビュー\nenter|ファイル名変更\n\n## Chrome\n\nSafari使って3年くらいたったが家にwindows機が来たためブックマークを同期するために導入\nここで紹介しているショートカットよりも個人的には操作がvimライクになるVimniumの導入をおススメする。\n\nコマンド |概要\n--------------------------|----\ncommand + shift + N |新しいウィンドウをシークレットモードで開く\ncommand + option + → |次のタブへ切り替え\ncommand + option + ← |前のタブへ切り替え\ncommand + shift + I |現在のページをメールで送信\ncommand + R |現在のページの再読み込み\ncommand + option + C |現在のページのURLをクリップボードへコピー\ncommand + option + U | ソースを表示\ncommand + option + I | 開発者ツールを表示/非表示（トグル）\noption + リンククリック |リンク先をダウンロード\n\n\n## safari\nコマンド |概要\n--------------------------|----\ncommand + shift + A |フォームに自動入力\ncommand + shift + B |お気に入りバーの表示切替\ncommand + shift + K |ポップアップウィンドウをブロック\ncommand + option + E |キャッシュを空にする\ncommand + option + L |ダウンロードウィンドウを表示\ncommand + option + I | 開発者ツールを表示/非表示（トグル）\ncommnad + option + [1-9] |割り当てたブックマークを開く\n\n## メール\n\nこれ以外にもたくさんあるっぽい。\nフラグと迷惑メールにするは個人的には必須。\nメール送信は誤送信があり得るから使ってない\n参考：http://inforati.jp/apple/mac-tips-techniques/internet-hints/how-to-use-mac-mail-app-with-keyboard-shortcut.html\n\nコマンド |概要\n--------------------------|----\ncommand + shift + N |新規メール受信\ncommand + shift + D |メール送信\ncommand + shift + F |転送\ncommand + shift + E |リダイレクト\ncommand + shift + R |全員へ返信\ncommand + R |差出人へメール返信\ncommand + option + B |Bccヘッダを追加\ncommand + option + R |返信先ヘッダを追加\ncommand + shift + U |既読にする\ncommand + shift + L |フラグをつける\ncommand + shift + J |迷惑メールにする\n## あまり使わ無そうだけど知っときたいやつ\nコマンド |概要\n-------------------------------|----\ncommand + Control + option + 8 |画面の色反転\ncommand + shift + U |ユーティリティフォルダを開く\n## まとめ\n最初Mac買ったときは正直こんなん覚えられるか！って思ってたけど意外と手が覚えてくれた。\nそのせいでwin機使うと誤爆することも多々あるが。。。\n必要なときに必要なものだけ覚えるのも良いけどドンなのがあるのか先に知っておくのも良いと思った。\n## 参考リンク\nhttps://support.apple.com/ja-jp/HT201236\nhttps://matome.naver.jp/odai/2138612139607002701\n', 'coediting': False, 'comments_count': 11, 'created_at': '2019-01-05T16:01:20+09:00', 'group': None, 'id': '95b835b63c31d39c7629', 'likes_count': 629, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Mac', 'versions': []}, {'name': 'UNIX', 'versions': []}, {'name': 'macos', 'versions': []}, {'name': 'ショートカットキー', 'versions': []}], 'title': 'Macで開発するなら抑えておくべきショートカットキーまとめ', 'updated_at': '2019-01-31T22:54:23+09:00', 'url': 'https://qiita.com/ryuichi1208/items/95b835b63c31d39c7629', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/c24700a4bd2579c848959c6cd600d1eaf68b873a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32616138373635382d333132322d653032622d663464332d6330316235313535653836642e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/c24700a4bd2579c848959c6cd600d1eaf68b873a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32616138373635382d333132322d653032622d663464332d6330316235313535653836642e706e67" alt="20180226181047.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/2aa87658-3122-e02b-f4d3-c01b5155e86d.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>エディタを開きながらログを見たりコマンド実行して見たりする際に便利だったtmuxのチートシート的な記事<br>\nリソース管理/ログ/コマンド操作を一つのターミナルで操作できるようになります。</p>\n\n<h2>\n<span id="tmuxとは" class="fragment"></span><a href="#tmux%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>tmuxとは</h2>\n\n<p>ターミナルマルチプレクサと呼ばれれるソフトウェアの一つ。1つのターミナルで複数の作業領域を簡単に操作できるようになる。<br>\n似てようなソフトウェアとしてGNU Screenがある。</p>\n\n<p>GitHubでソースは公開されている。<br>\n<a href="https://github.com/tmux/tmux" rel="nofollow noopener" target="_blank">tmux/tmux</a></p>\n\n<h2>\n<span id="tmux用語" class="fragment"></span><a href="#tmux%E7%94%A8%E8%AA%9E"><i class="fa fa-link"></i></a>tmux用語</h2>\n\n<p>tmuxを使う際に独自の用語が何個かある。<br>\nよく出てくるのは下記</p>\n\n<table>\n<thead>\n<tr>\n<th>用語</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>window</td>\n<td>ペインの管理単位</td>\n</tr>\n<tr>\n<td>pane</td>\n<td>ウィンドウの中に複数持つことのできる領域</td>\n</tr>\n<tr>\n<td>session</td>\n<td>ウィンドウを管理する単位</td>\n</tr>\n<tr>\n<td>server/client</td>\n<td>サーバがすべてのセッションを管理</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat</span> /etc/<span class="k">*</span><span class="nt">-release</span> | <span class="nb">head</span> <span class="nt">-2</span>\n<span class="nv">DISTRIB_ID</span><span class="o">=</span>Ubuntu\n<span class="nv">DISTRIB_RELEASE</span><span class="o">=</span>18.10\n\n<span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-r</span>\n4.18.0-10-generic\n\n<span class="nv">$ </span>tmux <span class="nt">-V</span>\ntmux 2.7\n</pre></div></div>\n\n<h2>\n<span id="コマンド" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>コマンド</h2>\n\n<p>ここでの書いているのは基本中の基本操作。<br>\n使う上ではすべて必須の操作となりますので是非覚えてしまおう。</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">Ctrl-b + ?</td>\n<td style="text-align: left">ショートカット一覧</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + d</td>\n<td style="text-align: left">デタッチ</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + w</td>\n<td style="text-align: left">ウィンドウ一覧</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + c</td>\n<td style="text-align: left">ウィンドウ生成</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + n</td>\n<td style="text-align: left">次のウィンドウへ</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + p</td>\n<td style="text-align: left">前のウィンドウへ</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + :</td>\n<td style="text-align: left">コマンドモードへ</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + [</td>\n<td style="text-align: left">コピーモード開始</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + Ctrl-Space</td>\n<td style="text-align: left">コピーモードでのコピー開始</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + ESC-w</td>\n<td style="text-align: left">コピーモードでのコピー終了</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + ]</td>\n<td style="text-align: left">コピーデータの貼付け</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + q</td>\n<td style="text-align: left">ペインのインジケータを表示</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + t</td>\n<td style="text-align: left">時計表示</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + %</td>\n<td style="text-align: left">ウインドウを左右ペインへ分割</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + "</td>\n<td style="text-align: left">ウインドウを上下ペインへ分割</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + o</td>\n<td style="text-align: left">アクティブなペインの移動（次のペインへ移動）</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + x</td>\n<td style="text-align: left">ペインの破棄</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b + Space</td>\n<td style="text-align: left">ペインレイアウトの変更（左右、上下）</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b : resize-pane -U 数字</td>\n<td style="text-align: left">上部ペインのサイズ変更</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b : resize-pane -D 数字</td>\n<td style="text-align: left">下部ペインのサイズ変更</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b : resize-pane -L 数字</td>\n<td style="text-align: left">左ペインのサイズ変更</td>\n</tr>\n<tr>\n<td style="text-align: left">Ctrl-b : resize-pane -R 数字</td>\n<td style="text-align: left">右ペインのサイズ変更</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="設定ファイルを書いておこう" class="fragment"></span><a href="#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%8A%E3%81%93%E3%81%86"><i class="fa fa-link"></i></a>設定ファイルを書いておこう</h2>\n\n<p>オプションだったりキーバインドの変更をコマンド実行でも変更できるがtmuxを終了すると元に戻ってします。<br>\nそこでいつものdotfileを作成して起動するたびに読み込まれるようにします。</p>\n\n<p>以下は私が使っている設定ファイルです。<br>\nGitHubでも公開しています。<br>\n<a href="https://github.com/ryuichi1208/dotfiles" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/ryuichi1208/dotfiles</a></p>\n\n<p>キーバインドやショートカットは好みが大変わかれる箇所なのでいろいろと考察も必要そう<br>\n<a href="https://qiita.com/hnw/items/02113da3476f29df768b" class="autolink" id="reference-7cd830141076f8585911">https://qiita.com/hnw/items/02113da3476f29df768b</a><br>\n何を何へ割り当てるといいかなんかはホントに好みが分かれますが。。。</p>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">~/.tmux.conf</span></div>\n<div class="highlight"><pre><span class="c"># set prefix to C-a</span>\n<span class="nb">set</span> <span class="nt">-g</span> prefix C-a\n\n<span class="c"># reset C-b as prefix key</span>\nunbind C-b\n\n<span class="c"># decrease key stroke delay</span>\n<span class="nb">set</span> <span class="nt">-sg</span> escape-time 1\n\n<span class="c"># reload .tmux.conf</span>\n<span class="nb">bind </span>r source-file ~/.tmux.conf <span class="se">\\;</span> display <span class="s2">"Reloaded!"</span>\n\n<span class="c"># split vertically</span>\n<span class="nb">bind</span> <span class="se">\\ </span>split-window <span class="nt">-h</span>\n\n<span class="c"># split horizontally</span>\n<span class="nb">bind</span> - split-window <span class="nt">-v</span>\n\n<span class="c"># move pane</span>\n<span class="nb">bind </span>h <span class="k">select</span><span class="nt">-pane</span> <span class="nt">-L</span>\n<span class="nb">bind </span>j <span class="k">select</span><span class="nt">-pane</span> <span class="nt">-D</span>\n<span class="nb">bind </span>k <span class="k">select</span><span class="nt">-pane</span> <span class="nt">-U</span>\n<span class="nb">bind </span>l <span class="k">select</span><span class="nt">-pane</span> <span class="nt">-R</span>\n<span class="nb">bind</span> <span class="nt">-r</span> C-h <span class="k">select</span><span class="nt">-window</span> <span class="nt">-t</span> :-\n<span class="nb">bind</span> <span class="nt">-r</span> C-l <span class="k">select</span><span class="nt">-window</span> <span class="nt">-t</span> :+\n\n<span class="c"># resize pane</span>\n<span class="nb">bind</span> <span class="nt">-r</span> H resize-pane <span class="nt">-L</span> 5\n<span class="nb">bind</span> <span class="nt">-r</span> J resize-pane <span class="nt">-D</span> 5\n<span class="nb">bind</span> <span class="nt">-r</span> K resize-pane <span class="nt">-U</span> 5\n<span class="nb">bind</span> <span class="nt">-r</span> L resize-pane <span class="nt">-R</span> 5\n\n<span class="c"># enable mouse</span>\nsetw <span class="nt">-g</span> mouse on\n\n<span class="c"># 256-color</span>\n<span class="nb">set</span> <span class="nt">-g</span> default-terminal <span class="s2">"screen-256color"</span>\n\n<span class="c"># status bar</span>\n<span class="nb">set</span> <span class="nt">-g</span> status-interval 60\nsetw <span class="nt">-g</span> monitor-activity on\n<span class="nb">set</span> <span class="nt">-g</span> visual-activity on\n\n<span class="c"># copy mode</span>\nsetw <span class="nt">-g</span> mode-keys vi\nset-option <span class="nt">-g</span> default-command <span class="s2">"exec reattach-to-user-namespace -l </span><span class="nv">$SHELL</span><span class="s2">"</span>\nbind-key <span class="nt">-T</span> copy-mode-vi v send-keys <span class="nt">-X</span> begin-selection\nbind-key <span class="nt">-T</span> copy-mode-vi y send-keys <span class="nt">-X</span> copy-pipe-and-cancel <span class="s2">"reattach-to-user-namespace pbcopy"</span>\nunbind <span class="nt">-T</span> copy-mode-vi Enter\nbind-key <span class="nt">-T</span> copy-mode-vi Enter send-keys <span class="nt">-X</span> copy-pipe-and-cancel <span class="s2">"reattach-to-user-namespace pbcopy"</span>\n\n<span class="c"># sync</span>\nset-option <span class="nt">-g</span> synchronize-panes off\n<span class="nb">bind </span>e setw synchronize-panes on\n<span class="nb">bind </span>E setw synchronize-panes off\n\n<span class="c">## set status bar</span>\n<span class="nb">set</span> <span class="nt">-g</span> status-bg default\nsetw <span class="nt">-g</span> window-status-current-bg <span class="s2">"#282a2e"</span>\nsetw <span class="nt">-g</span> window-status-current-fg <span class="s2">"#81a2be"</span>\n\n<span class="c">## highlight active window</span>\nsetw <span class="nt">-g</span> window-style <span class="s1">\'bg=#282a2e\'</span>\nsetw <span class="nt">-g</span> window-active-style <span class="s1">\'bg=#1d1f21\'</span>\nsetw <span class="nt">-g</span> pane-active-border-style <span class="s1">\'\'</span>\n\n<span class="c">## highlight activity in status bar</span>\nsetw <span class="nt">-g</span> window-status-activity-fg <span class="s2">"#8abeb7"</span>\nsetw <span class="nt">-g</span> window-status-activity-bg <span class="s2">"#1d1f21"</span>\n\n<span class="c">## pane border and colors</span>\n<span class="nb">set</span> <span class="nt">-g</span> pane-active-border-bg default\n<span class="nb">set</span> <span class="nt">-g</span> pane-active-border-fg <span class="s2">"#373b41"</span>\n<span class="nb">set</span> <span class="nt">-g</span> pane-border-bg default\n<span class="nb">set</span> <span class="nt">-g</span> pane-border-fg <span class="s2">"#373b41"</span>\n\n<span class="nb">set</span> <span class="nt">-g</span> clock-mode-colour <span class="s2">"#81a2be"</span>\n<span class="nb">set</span> <span class="nt">-g</span> clock-mode-style 24\n\n<span class="nb">set</span> <span class="nt">-g</span> message-bg <span class="s2">"#8abeb7"</span>\n<span class="nb">set</span> <span class="nt">-g</span> message-fg <span class="s2">"#000000"</span>\n\n<span class="nb">set</span> <span class="nt">-g</span> message-command-bg <span class="s2">"#8abeb7"</span>\n<span class="nb">set</span> <span class="nt">-g</span> message-command-fg <span class="s2">"#000000"</span>\n\n<span class="c"># message bar or "prompt"</span>\n<span class="nb">set</span> <span class="nt">-g</span> message-bg <span class="s2">"#2d2d2d"</span>\n<span class="nb">set</span> <span class="nt">-g</span> message-fg <span class="s2">"#cc99cc"</span>\n\n<span class="nb">set</span> <span class="nt">-g</span> mode-bg <span class="s2">"#1d1f21"</span>\n<span class="nb">set</span> <span class="nt">-g</span> mode-fg <span class="s2">"#de935f"</span>\n\n<span class="c"># right side of status bar holds "[host name] (date time)"</span>\n<span class="nb">set</span> <span class="nt">-g</span> status-right-length 100\n<span class="nb">set</span> <span class="nt">-g</span> status-right-fg black\n<span class="nb">set</span> <span class="nt">-g</span> status-right-attr bold\n<span class="nb">set</span> <span class="nt">-g</span> status-right <span class="s1">\'#[fg=#f99157,bg=#2d2d2d] %H:%M |#[fg=#6699cc] %Y-%m-%d \'</span>\n\n<span class="c"># make background window look like white tab</span>\nset-window-option <span class="nt">-g</span> window-status-bg default\nset-window-option <span class="nt">-g</span> window-status-fg white\nset-window-option <span class="nt">-g</span> window-status-attr none\nset-window-option <span class="nt">-g</span> window-status-format <span class="s1">\'#[fg=#6699cc,bg=colour235] #I #[fg=#999999,bg=#2d2d2d] #W #[default]\'</span>\n\n<span class="c"># make foreground window look like bold yellow foreground tab</span>\nset-window-option <span class="nt">-g</span> window-status-current-attr none\nset-window-option <span class="nt">-g</span> window-status-current-format <span class="s1">\'#[fg=#f99157,bg=#2d2d2d] #I #[fg=#cccccc,bg=#393939] #W #[default]\'</span>\n\n\n<span class="c"># active terminal yellow border, non-active white</span>\n<span class="nb">set</span> <span class="nt">-g</span> pane-border-bg default\n<span class="nb">set</span> <span class="nt">-g</span> pane-border-fg <span class="s2">"#999999"</span>\n<span class="nb">set</span> <span class="nt">-g</span> pane-active-border-fg <span class="s2">"#f99157"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="作業画面" class="fragment"></span><a href="#%E4%BD%9C%E6%A5%AD%E7%94%BB%E9%9D%A2"><i class="fa fa-link"></i></a>作業画面</h2>\n\n<p>ネットワークの設定したりログを見たりパッケージを入れたりを同一のターミナルでやってる画面</p>\n\n<p><a href="https://camo.qiitausercontent.com/e05ec34a6584c0cfce75501f4e052235d04505fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36616565303131632d323561342d323534622d613466322d6638636131343039356438652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/e05ec34a6584c0cfce75501f4e052235d04505fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36616565303131632d323561342d323534622d613466322d6638636131343039356438652e706e67" alt="スクリーンショット 2018-12-31 22.02.21.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/6aee011c-25a4-254b-a4f2-f8ca14095d8e.png"></a></p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>2018年最後の記事はなんだかんだお世話になっているtmuxのご紹介でした。<br>\nステータスラインだったり、プラグインについても書きたかったが力尽きたので特にしていません。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://qiita.com/succi0303/items/cb396704493476373edf" class="autolink" id="reference-a065d2f3355b0ee711e9">https://qiita.com/succi0303/items/cb396704493476373edf</a></p>\n', 'body': '![20180226181047.png](https://qiita-image-store.s3.amazonaws.com/0/258841/2aa87658-3122-e02b-f4d3-c01b5155e86d.png)\n\n## 背景\n\nエディタを開きながらログを見たりコマンド実行して見たりする際に便利だったtmuxのチートシート的な記事\nリソース管理/ログ/コマンド操作を一つのターミナルで操作できるようになります。\n\n## tmuxとは\n\nターミナルマルチプレクサと呼ばれれるソフトウェアの一つ。1つのターミナルで複数の作業領域を簡単に操作できるようになる。\n似てようなソフトウェアとしてGNU Screenがある。\n\nGitHubでソースは公開されている。\n[tmux/tmux](https://github.com/tmux/tmux)\n\n## tmux用語\n\ntmuxを使う際に独自の用語が何個かある。\nよく出てくるのは下記\n\n用語|概要\n----|---\nwindow|ペインの管理単位\npane|ウィンドウの中に複数持つことのできる領域\nsession|ウィンドウを管理する単位\nserver/client|サーバがすべてのセッションを管理\n\n## 環境\n\n``` bash\n$ cat /etc/*-release | head -2\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=18.10\n\n$ uname -r\n4.18.0-10-generic\n\n$ tmux -V\ntmux 2.7\n```\n\n## コマンド\n\nここでの書いているのは基本中の基本操作。\n使う上ではすべて必須の操作となりますので是非覚えてしまおう。\n\n| コマンド                    | 説明 |\n|:----------------------------|:-----|\n|Ctrl-b + ?                     | ショートカット一覧 |\n|Ctrl-b + d                     | デタッチ |\n|Ctrl-b + w                     | ウィンドウ一覧 |\n|Ctrl-b + c                     | ウィンドウ生成 |\n|Ctrl-b + n                     | 次のウィンドウへ |\n|Ctrl-b + p                     | 前のウィンドウへ |\n|Ctrl-b + :                     | コマンドモードへ |\n|Ctrl-b + [                     | コピーモード開始 |\n|Ctrl-b + Ctrl-Space            | コピーモードでのコピー開始 |\n|Ctrl-b + ESC-w                 |コピーモードでのコピー終了 |\n|Ctrl-b + ]                     | コピーデータの貼付け |\n|Ctrl-b + q                     | ペインのインジケータを表示 |\n|Ctrl-b + t                     | 時計表示 |\n|Ctrl-b + %                     | ウインドウを左右ペインへ分割 |\n|Ctrl-b + "                     | ウインドウを上下ペインへ分割 |\n|Ctrl-b + o                     | アクティブなペインの移動（次のペインへ移動） |\n|Ctrl-b + x                     | ペインの破棄 |\n|Ctrl-b + Space                 |ペインレイアウトの変更（左右、上下） |\n|Ctrl-b : resize-pane -U 数字 | 上部ペインのサイズ変更 |\n|Ctrl-b : resize-pane -D 数字 | 下部ペインのサイズ変更 |\n|Ctrl-b : resize-pane -L 数字 | 左ペインのサイズ変更 |\n|Ctrl-b : resize-pane -R 数字 | 右ペインのサイズ変更 |\n\n## 設定ファイルを書いておこう\n\nオプションだったりキーバインドの変更をコマンド実行でも変更できるがtmuxを終了すると元に戻ってします。\nそこでいつものdotfileを作成して起動するたびに読み込まれるようにします。\n\n以下は私が使っている設定ファイルです。\nGitHubでも公開しています。\nhttps://github.com/ryuichi1208/dotfiles\n\nキーバインドやショートカットは好みが大変わかれる箇所なのでいろいろと考察も必要そう\nhttps://qiita.com/hnw/items/02113da3476f29df768b\n何を何へ割り当てるといいかなんかはホントに好みが分かれますが。。。\n\n``` bash:~/.tmux.conf\n# set prefix to C-a\nset -g prefix C-a\n\n# reset C-b as prefix key\nunbind C-b\n\n# decrease key stroke delay\nset -sg escape-time 1\n\n# reload .tmux.conf\nbind r source-file ~/.tmux.conf \\; display "Reloaded!"\n\n# split vertically\nbind \\ split-window -h\n\n# split horizontally\nbind - split-window -v\n\n# move pane\nbind h select-pane -L\nbind j select-pane -D\nbind k select-pane -U\nbind l select-pane -R\nbind -r C-h select-window -t :-\nbind -r C-l select-window -t :+\n\n# resize pane\nbind -r H resize-pane -L 5\nbind -r J resize-pane -D 5\nbind -r K resize-pane -U 5\nbind -r L resize-pane -R 5\n\n# enable mouse\nsetw -g mouse on\n\n# 256-color\nset -g default-terminal "screen-256color"\n\n# status bar\nset -g status-interval 60\nsetw -g monitor-activity on\nset -g visual-activity on\n\n# copy mode\nsetw -g mode-keys vi\nset-option -g default-command "exec reattach-to-user-namespace -l $SHELL"\nbind-key -T copy-mode-vi v send-keys -X begin-selection\nbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"\nunbind -T copy-mode-vi Enter\nbind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"\n\n# sync\nset-option -g synchronize-panes off\nbind e setw synchronize-panes on\nbind E setw synchronize-panes off\n\n## set status bar\nset -g status-bg default\nsetw -g window-status-current-bg "#282a2e"\nsetw -g window-status-current-fg "#81a2be"\n\n## highlight active window\nsetw -g window-style \'bg=#282a2e\'\nsetw -g window-active-style \'bg=#1d1f21\'\nsetw -g pane-active-border-style \'\'\n\n## highlight activity in status bar\nsetw -g window-status-activity-fg "#8abeb7"\nsetw -g window-status-activity-bg "#1d1f21"\n\n## pane border and colors\nset -g pane-active-border-bg default\nset -g pane-active-border-fg "#373b41"\nset -g pane-border-bg default\nset -g pane-border-fg "#373b41"\n\nset -g clock-mode-colour "#81a2be"\nset -g clock-mode-style 24\n\nset -g message-bg "#8abeb7"\nset -g message-fg "#000000"\n\nset -g message-command-bg "#8abeb7"\nset -g message-command-fg "#000000"\n\n# message bar or "prompt"\nset -g message-bg "#2d2d2d"\nset -g message-fg "#cc99cc"\n\nset -g mode-bg "#1d1f21"\nset -g mode-fg "#de935f"\n\n# right side of status bar holds "[host name] (date time)"\nset -g status-right-length 100\nset -g status-right-fg black\nset -g status-right-attr bold\nset -g status-right \'#[fg=#f99157,bg=#2d2d2d] %H:%M |#[fg=#6699cc] %Y-%m-%d \'\n\n# make background window look like white tab\nset-window-option -g window-status-bg default\nset-window-option -g window-status-fg white\nset-window-option -g window-status-attr none\nset-window-option -g window-status-format \'#[fg=#6699cc,bg=colour235] #I #[fg=#999999,bg=#2d2d2d] #W #[default]\'\n\n# make foreground window look like bold yellow foreground tab\nset-window-option -g window-status-current-attr none\nset-window-option -g window-status-current-format \'#[fg=#f99157,bg=#2d2d2d] #I #[fg=#cccccc,bg=#393939] #W #[default]\'\n\n\n# active terminal yellow border, non-active white\nset -g pane-border-bg default\nset -g pane-border-fg "#999999"\nset -g pane-active-border-fg "#f99157"\n```\n\n## 作業画面\n\nネットワークの設定したりログを見たりパッケージを入れたりを同一のターミナルでやってる画面\n\n![スクリーンショット 2018-12-31 22.02.21.png](https://qiita-image-store.s3.amazonaws.com/0/258841/6aee011c-25a4-254b-a4f2-f8ca14095d8e.png)\n\n## まとめ\n\n2018年最後の記事はなんだかんだお世話になっているtmuxのご紹介でした。\nステータスラインだったり、プラグインについても書きたかったが力尽きたので特にしていません。\n\n## 参考リンク\n\nhttps://qiita.com/succi0303/items/cb396704493476373edf\n\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-12-31T21:22:53+09:00', 'group': None, 'id': '12e18623833b93517a98', 'likes_count': 8, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'tmux', 'versions': []}], 'title': 'tmuxで開発効率アップ 基本のまとめ', 'updated_at': '2019-01-12T00:55:02+09:00', 'url': 'https://qiita.com/ryuichi1208/items/12e18623833b93517a98', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/b6d6f57f031e255ee85e88d9f1fefcc6837743ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66613939356163382d663631632d306232302d343930372d6263353434326436313930312e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/b6d6f57f031e255ee85e88d9f1fefcc6837743ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66613939356163382d663631632d306232302d343930372d6263353434326436313930312e6a706567" alt="20131125225811.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/fa995ac8-f61c-0b20-4907-bc5442d61901.jpeg"></a></p>\n\n<p>Linuxインストール後にやっておきたい事(OS依存少なめ)</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>Linuxをインストールして最初にやっておきたい事を順を追って書きました。<br>\n仮想マシンだったり物理マシンだったりしょっちゅうインストールする機会が多いですが<br>\n最低限やっておきたいものです。<br>\n関係ないですが、最近はLinux Mintに興味津々です。</p>\n\n<h2>\n<span id="とりあえず環境を最新へ" class="fragment"></span><a href="#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E7%92%B0%E5%A2%83%E3%82%92%E6%9C%80%E6%96%B0%E3%81%B8"><i class="fa fa-link"></i></a>①とりあえず環境を最新へ</h2>\n\n<p>とりあえずyumなりaptなりで最新へアップデート。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># RHEL系</span>\n<span class="nv">$ </span><span class="nb">sudo </span>yum update\n\n<span class="c"># Debian系</span>\n<span class="nv">$ </span><span class="nb">sudo </span>apt update <span class="p">;</span> <span class="nb">sudo </span>apt upgrade\n</pre></div></div>\n\n<h2>\n<span id="作業ユーザの追加" class="fragment"></span><a href="#%E4%BD%9C%E6%A5%AD%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AE%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>②作業ユーザの追加</h2>\n\n<p>自分専用だろうが一応追加します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># sudoする為にwheelグループにする</span>\n<span class="c"># useradd hogefuga -G wheel</span>\n<span class="c"># passwd hogefuga</span>\n</pre></div></div>\n\n<h2>\n<span id="sshできるようにする" class="fragment"></span><a href="#ssh%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>③sshできるようにする</h2>\n\n<p>ターミナルエミュレータで作業する為にsshしたいのでとりあえずやってみる<br>\n駄目だったら下記を確認</p>\n\n<ul>\n<li>IPアドレス/ユーザ名が合っているか</li>\n<li>sshのポートが空いているか</li>\n<li>sshd_configの設定は間違っていないか</li>\n</ul>\n\n<p>後は基本的にrootログインは禁止してますね<br>\nroot権欲しいなら都度sudoなりsuしてます。</p>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">/etc/ssh/sshd_config</span></div>\n<div class="highlight"><pre><span class="c"># Example of overriding settings on a per-user basis</span>\n<span class="c">#Match User anoncvs</span>\n<span class="c">#       X11Forwarding no</span>\n<span class="c">#       AllowTcpForwarding no</span>\n<span class="c">#       ForceCommand cvs server</span>\nPermitRootLogin no\n</pre></div>\n</div>\n\n<p>ここからは基本的にターミナルエミュレータで作業を進めます</p>\n\n<h2>\n<span id="必要パッケージのインストール" class="fragment"></span><a href="#%E5%BF%85%E8%A6%81%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>④必要パッケージのインストール</h2>\n\n<h4>\n<span id="vim-enhancedを入れる" class="fragment"></span><a href="#vim-enhanced%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B"><i class="fa fa-link"></i></a>vim-enhancedを入れる</h4>\n\n<p>特に理由は無いがvim-enhancedを入れている。<br>\n色々種類があるが下記が詳しい。<br>\n<a href="https://qiita.com/b4b4r07/items/f7a4a0461e1fc6f436a4" class="autolink" id="reference-cc862d29ab2aa3094809">https://qiita.com/b4b4r07/items/f7a4a0461e1fc6f436a4</a></p>\n\n<h4>\n<span id="net-toolsを入れる" class="fragment"></span><a href="#net-tools%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B"><i class="fa fa-link"></i></a>net-toolsを入れる</h4>\n\n<p>ifconfigやnetstatなどまあ使いどころはあるかもしれないので一応。。。<br>\niproute2との比較は下記が詳しい<br>\n<a href="https://qiita.com/miyu/items/0cac69b6810dbbc56a9b" class="autolink" id="reference-a7715d6ca9734920f382">https://qiita.com/miyu/items/0cac69b6810dbbc56a9b</a></p>\n\n<h4>\n<span id="bash-completionを入れる" class="fragment"></span><a href="#bash-completion%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B"><i class="fa fa-link"></i></a>bash-completionを入れる</h4>\n\n<p>bash-completionは入力補完を強化(?)するソフト<br>\nsystemctlなどのサブコマンドの補完が使えるようになります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># RHEL系</span>\n<span class="nv">$ </span>yum <span class="nb">install</span> <span class="nt">-y</span> bash-completion\n\n<span class="c"># Debian系</span>\n<span class="nv">$ </span>apt <span class="nb">install</span> <span class="nt">-y</span> bash-completion\n\n<span class="c"># 試す</span>\n<span class="nv">$ </span>systemctl\nadd-requires           force-reload           list-sockets           set-environment\nadd-wants              get-default            list-timers            set-property\ncancel                 halt                   list-unit-files        show\n<span class="nb">cat                    help                   </span>list-units             show-environment\ncondreload             hibernate              mask                   snapshot\ncondrestart            hybrid-sleep           poweroff               start\ncondstop               is-active              preset                 status\ndaemon-reexec          is-enabled             reboot                 stop\ndaemon-reload          is-failed              reenable               <span class="nb">suspend\n</span>default                isolate                reload                 switch-root\ndelete                 is-system-running      reload-or-restart      try-restart\ndisable                kexec                  reload-or-try-restart  unmask\nedit                   <span class="nb">kill                   </span>rescue                 unset-environment\nemergency              <span class="nb">link                   </span>reset-failed\n<span class="nb">enable                 </span>list-dependencies      restart\n<span class="nb">exit                   </span>list-jobs              set-default\n</pre></div></div>\n\n<p>こんな感じでstatusなりrestart/reloadなりの補完が聞くようになります。<br>\nsshのホスト名(known_hosts準拠)だったりmanだったり色々使いどころあるので便利です。</p>\n\n<h2>\n<span id="共有サーバマウント" class="fragment"></span><a href="#%E5%85%B1%E6%9C%89%E3%82%B5%E3%83%BC%E3%83%90%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88"><i class="fa fa-link"></i></a>⑤共有サーバマウント</h2>\n\n<p>サーバ構築してからも他マシンとのファイル共有は必要なので。<br>\nさらにいえば下記項目を自動で行うスクリプトを置いて叩くだけにしておけば<br>\n何台増えようが同じような環境が作れる。<br>\nここで同時にfstabを設定しておけばリブート時にもマウントする手間が省けるのでベスト</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/dev/hda4               /                  ext3    defaults        1 1\n/dev/hda1               /boot              ext3    defaults        1 2\n/dev/cdrom              /mnt/cdrom         iso9660 noauto,owner,ro 0 0\n/dev/hda2               /var               ext3    defaults        1 3\n/dev/hda3               swap               swap    defaults        0 0\nserver:/usr/local/pub   /pub               nfs     defaults        0 0\n</pre></div></div>\n\n<h2>\n<span id="bashrcをちょろっと書く" class="fragment"></span><a href="#bashrc%E3%82%92%E3%81%A1%E3%82%87%E3%82%8D%E3%81%A3%E3%81%A8%E6%9B%B8%E3%81%8F"><i class="fa fa-link"></i></a>⑥bashrcをちょろっと書く</h2>\n\n<p>適当なサービス上げるだけとかでもとりあえず入れとくと後々便利<br>\nエラーがあったら結果ログ見に行ったりするので必須ですね。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="k">$(</span><span class="nb">uname</span><span class="k">)</span><span class="s2">"</span> <span class="o">==</span> <span class="s1">\'Darwin\'</span> <span class="o">]</span><span class="p">;</span> <span class="k">then\n    </span><span class="nv">OSNAME</span><span class="o">=</span><span class="s1">\'Mac\'</span>\n<span class="k">else\n    </span><span class="nv">OSNAME</span><span class="o">=</span><span class="s1">\'Linux\'</span>\n<span class="k">fi</span>\n\n<span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$PS1</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="k">return</span>\n\n<span class="c">## export</span>\n<span class="nb">export </span>OSNAME\n<span class="nb">export </span><span class="nv">LESSCHARSET</span><span class="o">=</span>UTF-8\n<span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8\n<span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>en_US.UTF-8\n<span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8\n<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/bin:/usr/local/sbin:~/bin:<span class="nv">$PATH</span>\n<span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span>vim\n<span class="nb">export </span><span class="nv">HISTSIZE</span><span class="o">=</span>10000\n<span class="nb">export </span><span class="nv">HISTFILESIZE</span><span class="o">=</span><span class="k">${</span><span class="nv">HISTSIZE</span><span class="k">}</span>\n\n<span class="c">## Aliases</span>\n<span class="nb">alias</span> ..<span class="o">=</span><span class="s1">\'cd ..\'</span>\n<span class="nb">alias</span> ...<span class="o">=</span><span class="s1">\'cd ../..\'</span>\n<span class="nb">alias</span> ....<span class="o">=</span><span class="s1">\'cd ../../..\'</span>\n<span class="nb">alias</span> .....<span class="o">=</span><span class="s1">\'cd ../../../..\'</span>\n<span class="nb">alias</span> ......<span class="o">=</span><span class="s1">\'cd ../../../../..\'</span>\n<span class="nb">alias </span>cd.<span class="o">=</span><span class="s1">\'cd ..\'</span>\n<span class="nb">alias </span>cd..<span class="o">=</span><span class="s1">\'cd ..\'</span>\n<span class="nb">alias </span><span class="nv">l</span><span class="o">=</span><span class="s1">\'ls -alF\'</span>\n<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">\'ls -l\'</span>\n<span class="nb">alias </span><span class="nv">vi</span><span class="o">=</span><span class="s1">\'vim\'</span>\n<span class="nb">alias </span><span class="nv">vi2</span><span class="o">=</span><span class="s1">\'vi -O2 \'</span>\n<span class="nb">alias </span><span class="nv">hc</span><span class="o">=</span><span class="s2">"history -c"</span>\n<span class="nb">alias </span><span class="nv">which</span><span class="o">=</span><span class="s1">\'type -p\'</span>\n<span class="nb">alias </span><span class="nv">k5</span><span class="o">=</span><span class="s1">\'kill -9 %%\'</span>\n<span class="nb">alias </span><span class="nv">gv</span><span class="o">=</span><span class="s1">\'vim +GV +"autocmd BufWipeout &lt;buffer&gt; qall"\'</span>\n<span class="nb">alias </span><span class="nv">x</span><span class="o">=</span><span class="s1">\'xonsh\'</span>\n</pre></div></div>\n\n<h2>\n<span id="vimrcをちょろっと書く" class="fragment"></span><a href="#vimrc%E3%82%92%E3%81%A1%E3%82%87%E3%82%8D%E3%81%A3%E3%81%A8%E6%9B%B8%E3%81%8F"><i class="fa fa-link"></i></a>⑦vimrcをちょろっと書く</h2>\n\n<p>デフォルトで出来る限り行える設定だけ書いてます。<br>\nサーバでちょっとしたスクリプトなりを書くときにストレスが10%ぐらい減ります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nb">set </span>number\n<span class="nb">set </span>ruler\n<span class="nb">set </span>list\n<span class="nb">set </span><span class="nv">listchars</span><span class="o">=</span>tab:&gt;-,trail:-,nbsp:%,extends:&gt;,precedes:&lt;,eol:&lt;\n<span class="nb">set </span>incsearch\n<span class="nb">set </span>hlsearch\n<span class="nb">set </span>nowrap\n<span class="nb">set </span>showmatch\n<span class="nb">set </span><span class="nv">whichwrap</span><span class="o">=</span>h,l\n<span class="nb">set </span>nowrapscan\n<span class="nb">set </span>ignorecase\n<span class="nb">set </span>hidden\n<span class="nb">set history</span><span class="o">=</span>2000\n<span class="nb">set </span>autoindent\n<span class="nb">set </span>expandtab\n<span class="nb">set </span><span class="nv">tabstop</span><span class="o">=</span>2\n<span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span>2\n<span class="nb">set </span><span class="nv">helplang</span><span class="o">=</span>en\n<span class="nb">set </span>autoindent\n<span class="nb">set </span>nocompatible\n<span class="nb">set </span>expandtab\n<span class="nb">set </span>hidden\n<span class="nb">set </span>incsearch\n<span class="nb">set </span>number\n<span class="nb">set </span>showmatch\n<span class="nb">set </span>smartcase\n<span class="nb">set </span>smartindent\n<span class="nb">set </span>smarttab\n<span class="nb">set </span><span class="nv">whichwrap</span><span class="o">=</span>b,s,h,l,&lt;,&gt;,[,]\n<span class="nb">set </span>nowrapscan\n<span class="nb">set </span><span class="nv">t_Co</span><span class="o">=</span>256\n</pre></div></div>\n\n<h2>\n<span id="最低限のセキュリティ設定" class="fragment"></span><a href="#%E6%9C%80%E4%BD%8E%E9%99%90%E3%81%AE%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>⑧最低限のセキュリティ設定</h2>\n\n<p>閉じたネットワークでも念のためやってます。<br>\n下記記事が結構ためになりました。<br>\n<a href="https://qiita.com/saitoxu/items/5ea998164c6225358567" class="autolink" id="reference-234358645cfb2ead5de5">https://qiita.com/saitoxu/items/5ea998164c6225358567</a></p>\n\n<h2>\n<span id="selinuxの無効化" class="fragment"></span><a href="#selinux%E3%81%AE%E7%84%A1%E5%8A%B9%E5%8C%96"><i class="fa fa-link"></i></a>⑨SELinuxの無効化</h2>\n\n<p>selinuxはLinuxの監査やセキュリティを向上させる機能</p>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">/etc/selinux/config</span></div>\n<div class="highlight"><pre><span class="nv">SELINUX</span><span class="o">=</span>disabled\n</pre></div>\n</div>\n\n<p>上記のように編集し、再起動する。<br>\nスペルミスとかするとOSが起動しなくなったりするのでご注意を(何度かやった)<br>\nリカバリモードで起動して、ファイル修正すれば直ります。</p>\n\n<h2>\n<span id="不要サービスの無効化" class="fragment"></span><a href="#%E4%B8%8D%E8%A6%81%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E7%84%A1%E5%8A%B9%E5%8C%96"><i class="fa fa-link"></i></a>⑩不要サービスの無効化</h2>\n\n<p>検証/運用上使うこと無いサービスを無効化します。<br>\n不要なポートだったりリソースの無駄使いを防ぐためです。<br>\nここは用途でやるかやらないか色々検討が必要ですね。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># systemctl disable auditd.service</span>\n<span class="c"># systemctl disable abrt-ccpp.service</span>\n<span class="c"># systemctl disable abrt-oops.service</span>\n<span class="c"># systemctl disable abrt-xorg.service</span>\n<span class="c"># systemctl disable abrt-vmcore.service</span>\n<span class="c"># systemctl disable abrtd.service</span>\n<span class="c"># systemctl disable libstoragemgmt.service</span>\n<span class="c"># systemctl disable smartd.service</span>\n<span class="c"># systemctl disable libvirtd.service</span>\n<span class="c"># systemctl disable qemu-guest-agent.service</span>\n<span class="c"># systemctl disable dmraid-activation.service</span>\n<span class="c"># systemctl disable mdmonitor.service</span>\n<span class="c"># systemctl disable avahi-daemon.service</span>\n<span class="c"># systemctl disable kdump</span>\n</pre></div></div>\n\n<h2>\n<span id="感想" class="fragment"></span><a href="#%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>感想</h2>\n\n<p>最低限の共通設定でした。<br>\nここから検証用環境を構築していくためのスタートラインです。<br>\n環境構築はなぞの独特の楽しさがありますね。<br>\nGUIでインストールした場合はもっと他にもやりたいことはあります。<br>\n(隠しファイル表示なり、ディレクトリ名を英語にするなりブラウザ関連の設定なり..etc)</p>\n', 'body': '![20131125225811.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/fa995ac8-f61c-0b20-4907-bc5442d61901.jpeg)\n\nLinuxインストール後にやっておきたい事(OS依存少なめ)\n\n## 背景\n\nLinuxをインストールして最初にやっておきたい事を順を追って書きました。\n仮想マシンだったり物理マシンだったりしょっちゅうインストールする機会が多いですが\n最低限やっておきたいものです。\n関係ないですが、最近はLinux Mintに興味津々です。\n\n## ①とりあえず環境を最新へ\n\nとりあえずyumなりaptなりで最新へアップデート。\n\n``` bash\n# RHEL系\n$ sudo yum update\n\n# Debian系\n$ sudo apt update ; sudo apt upgrade\n```\n\n## ②作業ユーザの追加\n\n自分専用だろうが一応追加します。\n\n``` bash\n# sudoする為にwheelグループにする\n# useradd hogefuga -G wheel\n# passwd hogefuga\n```\n\n## ③sshできるようにする\n\nターミナルエミュレータで作業する為にsshしたいのでとりあえずやってみる\n駄目だったら下記を確認\n\n* IPアドレス/ユーザ名が合っているか\n* sshのポートが空いているか\n* sshd_configの設定は間違っていないか\n\n後は基本的にrootログインは禁止してますね\nroot権欲しいなら都度sudoなりsuしてます。\n\n``` bash:/etc/ssh/sshd_config\n# Example of overriding settings on a per-user basis\n#Match User anoncvs\n#       X11Forwarding no\n#       AllowTcpForwarding no\n#       ForceCommand cvs server\nPermitRootLogin no\n```\n\nここからは基本的にターミナルエミュレータで作業を進めます\n\n## ④必要パッケージのインストール\n\n#### vim-enhancedを入れる\n\n特に理由は無いがvim-enhancedを入れている。\n色々種類があるが下記が詳しい。\nhttps://qiita.com/b4b4r07/items/f7a4a0461e1fc6f436a4\n\n#### net-toolsを入れる\n\nifconfigやnetstatなどまあ使いどころはあるかもしれないので一応。。。\niproute2との比較は下記が詳しい\nhttps://qiita.com/miyu/items/0cac69b6810dbbc56a9b\n\n#### bash-completionを入れる\n\nbash-completionは入力補完を強化(?)するソフト\nsystemctlなどのサブコマンドの補完が使えるようになります。\n\n``` bash\n# RHEL系\n$ yum install -y bash-completion\n\n# Debian系\n$ apt install -y bash-completion\n\n# 試す\n$ systemctl\nadd-requires           force-reload           list-sockets           set-environment\nadd-wants              get-default            list-timers            set-property\ncancel                 halt                   list-unit-files        show\ncat                    help                   list-units             show-environment\ncondreload             hibernate              mask                   snapshot\ncondrestart            hybrid-sleep           poweroff               start\ncondstop               is-active              preset                 status\ndaemon-reexec          is-enabled             reboot                 stop\ndaemon-reload          is-failed              reenable               suspend\ndefault                isolate                reload                 switch-root\ndelete                 is-system-running      reload-or-restart      try-restart\ndisable                kexec                  reload-or-try-restart  unmask\nedit                   kill                   rescue                 unset-environment\nemergency              link                   reset-failed\nenable                 list-dependencies      restart\nexit                   list-jobs              set-default\n```\n\nこんな感じでstatusなりrestart/reloadなりの補完が聞くようになります。\nsshのホスト名(known_hosts準拠)だったりmanだったり色々使いどころあるので便利です。\n\n## ⑤共有サーバマウント\n\nサーバ構築してからも他マシンとのファイル共有は必要なので。\nさらにいえば下記項目を自動で行うスクリプトを置いて叩くだけにしておけば\n何台増えようが同じような環境が作れる。\nここで同時にfstabを設定しておけばリブート時にもマウントする手間が省けるのでベスト\n\n``` bash\n/dev/hda4               /                  ext3    defaults        1 1\n/dev/hda1               /boot              ext3    defaults        1 2\n/dev/cdrom              /mnt/cdrom         iso9660 noauto,owner,ro 0 0\n/dev/hda2               /var               ext3    defaults        1 3\n/dev/hda3               swap               swap    defaults        0 0\nserver:/usr/local/pub   /pub               nfs     defaults        0 0\n```\n\n## ⑥bashrcをちょろっと書く\n\n適当なサービス上げるだけとかでもとりあえず入れとくと後々便利\nエラーがあったら結果ログ見に行ったりするので必須ですね。\n\n``` bash\nif [ "$(uname)" == \'Darwin\' ]; then\n\tOSNAME=\'Mac\'\nelse\n\tOSNAME=\'Linux\'\nfi\n\n[ -z "$PS1" ] && return\n\n## export\nexport OSNAME\nexport LESSCHARSET=UTF-8\nexport LANG=en_US.UTF-8\nexport LC_CTYPE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\nexport PATH=/usr/local/bin:/usr/local/sbin:~/bin:$PATH\nexport EDITOR=vim\nexport HISTSIZE=10000\nexport HISTFILESIZE=${HISTSIZE}\n\n## Aliases\nalias ..=\'cd ..\'\nalias ...=\'cd ../..\'\nalias ....=\'cd ../../..\'\nalias .....=\'cd ../../../..\'\nalias ......=\'cd ../../../../..\'\nalias cd.=\'cd ..\'\nalias cd..=\'cd ..\'\nalias l=\'ls -alF\'\nalias ll=\'ls -l\'\nalias vi=\'vim\'\nalias vi2=\'vi -O2 \'\nalias hc="history -c"\nalias which=\'type -p\'\nalias k5=\'kill -9 %%\'\nalias gv=\'vim +GV +"autocmd BufWipeout <buffer> qall"\'\nalias x=\'xonsh\'\n```\n\n## ⑦vimrcをちょろっと書く\n\nデフォルトで出来る限り行える設定だけ書いてます。\nサーバでちょっとしたスクリプトなりを書くときにストレスが10%ぐらい減ります。\n\n``` bash\nset number\nset ruler\nset list\nset listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<,eol:<\nset incsearch\nset hlsearch\nset nowrap\nset showmatch\nset whichwrap=h,l\nset nowrapscan\nset ignorecase\nset hidden\nset history=2000\nset autoindent\nset expandtab\nset tabstop=2\nset shiftwidth=2\nset helplang=en\nset autoindent\nset nocompatible\nset expandtab\nset hidden\nset incsearch\nset number\nset showmatch\nset smartcase\nset smartindent\nset smarttab\nset whichwrap=b,s,h,l,<,>,[,]\nset nowrapscan\nset t_Co=256\n```\n\n## ⑧最低限のセキュリティ設定\n\n閉じたネットワークでも念のためやってます。\n下記記事が結構ためになりました。\nhttps://qiita.com/saitoxu/items/5ea998164c6225358567\n\n## ⑨SELinuxの無効化\n\nselinuxはLinuxの監査やセキュリティを向上させる機能\n\n``` bash:/etc/selinux/config\nSELINUX=disabled\n```\n\n上記のように編集し、再起動する。\nスペルミスとかするとOSが起動しなくなったりするのでご注意を(何度かやった)\nリカバリモードで起動して、ファイル修正すれば直ります。\n\n## ⑩不要サービスの無効化\n\n検証/運用上使うこと無いサービスを無効化します。\n不要なポートだったりリソースの無駄使いを防ぐためです。\nここは用途でやるかやらないか色々検討が必要ですね。\n\n``` bash\n# systemctl disable auditd.service\n# systemctl disable abrt-ccpp.service\n# systemctl disable abrt-oops.service\n# systemctl disable abrt-xorg.service\n# systemctl disable abrt-vmcore.service\n# systemctl disable abrtd.service\n# systemctl disable libstoragemgmt.service\n# systemctl disable smartd.service\n# systemctl disable libvirtd.service\n# systemctl disable qemu-guest-agent.service\n# systemctl disable dmraid-activation.service\n# systemctl disable mdmonitor.service\n# systemctl disable avahi-daemon.service\n# systemctl disable kdump\n```\n\n## 感想\n\n最低限の共通設定でした。\nここから検証用環境を構築していくためのスタートラインです。\n環境構築はなぞの独特の楽しさがありますね。\nGUIでインストールした場合はもっと他にもやりたいことはあります。\n(隠しファイル表示なり、ディレクトリ名を英語にするなりブラウザ関連の設定なり..etc)\n', 'coediting': False, 'comments_count': 7, 'created_at': '2018-12-28T23:18:12+09:00', 'group': None, 'id': '017481022ab1d7d9f43c', 'likes_count': 170, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}], 'title': 'Linuxインストール後にやっておきたい事(OS依存少なめ)', 'updated_at': '2018-12-31T13:58:34+09:00', 'url': 'https://qiita.com/ryuichi1208/items/017481022ab1d7d9f43c', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/aac7b826068019e8abc5a98443561e46fd0e560b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64656433613236392d323334392d343333622d633837632d6363623032313234666531652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/aac7b826068019e8abc5a98443561e46fd0e560b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64656433613236392d323334392d343333622d633837632d6363623032313234666531652e706e67" alt="perf-system.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/ded3a269-2349-433b-c87c-ccb02124fe1e.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>システムコールから先のボトルネック箇所を知りたい事がありまして、その際にperfなるものを教えてもらいました。<br>\n使ってみると色々と便利なツールで勉強になったことも多々あるのでそちらのご紹介です。</p>\n\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>perf(Performance analysis tools for Linux)とはLinuxカーネル2.6.31以降で使用可能なLinuxの性能解析ツールです。<br>\nざっくりいえば下記</p>\n\n<ul>\n<li>実行されるプログラムと OS とのイベントを見れる</li>\n<li>OS とハードウェアのイベントを見れる</li>\n</ul>\n\n<p>カーネルのカウンタで計測されるイベントだったりプロセッサで計測されるイベントが知れる<br>\n例えばL1のヒット状況やTLBの様子なども観察できます。<br>\n(CPUサイクル数、分岐の数、分岐予測ミス数、キャッシュ参照数、キャッシュミス数など豊富な機能)</p>\n\n<h2>\n<span id="導入" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>導入</h2>\n\n<p>導入はRedHat,centOSならyum,ubuntuならaptで間単にインストールできます。<br>\n今回はRHEL7.5にインストール(カーネル3.10.0-862)</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nb">install </span>perf\n\n<span class="nv">$ </span>perf <span class="nt">--version</span>\nperf version 3.10.0-862.el7.x86_64.debug\n</pre></div></div>\n\n<h2>\n<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>\n\n<p>perf [サブコマンド]でプロファイルの実行だったり閲覧だったりが出来ます<br>\nサブコマンドは下記</p>\n\n<table>\n<thead>\n<tr>\n<th>サブコマンド</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stat</td>\n<td>プログラムやある時点のシステムのトータルイベントカウントを計測する</td>\n</tr>\n<tr>\n<td>top</td>\n<td>関数単位でCPU使用率を閲覧</td>\n</tr>\n<tr>\n<td>record</td>\n<td>一つのプログラムのイベントをサンプリング</td>\n</tr>\n<tr>\n<td>report</td>\n<td>recordで生成されたファイルを分析する</td>\n</tr>\n<tr>\n<td>list</td>\n<td>調査可能なイベント一覧</td>\n</tr>\n</tbody>\n</table>\n\n<p>メインとして使われるのは上5つとのこと他にも色々機能がありますがこちらはほぼ未調査</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>perf <span class="nt">--help</span>\n\n usage: perf <span class="o">[</span><span class="nt">--version</span><span class="o">]</span> <span class="o">[</span><span class="nt">--help</span><span class="o">]</span> <span class="o">[</span>OPTIONS] COMMAND <span class="o">[</span>ARGS]\n\n The most commonly used perf commands are:\n   annotate        Read perf.data <span class="o">(</span>created by perf record<span class="o">)</span> and display annotated code\n   archive         Create archive with object files with build-ids found <span class="k">in </span>perf.data file\n   bench           General framework <span class="k">for </span>benchmark suites\n   buildid-cache   Manage build-id cache.\n   buildid-list    List the buildids <span class="k">in </span>a perf.data file\n   c2c             Shared Data C2C/HITM Analyzer.\n   config          Get and <span class="nb">set </span>variables <span class="k">in </span>a configuration file.\n   data            Data file related processing\n   diff            Read perf.data files and display the differential profile\n   evlist          List the event names <span class="k">in </span>a perf.data file\n   ftrace          simple wrapper <span class="k">for </span>kernel<span class="s1">\'s ftrace functionality\n   inject          Filter to augment the events stream with additional information\n   kallsyms        Searches running kernel for symbols\n   kmem            Tool to trace/measure kernel memory properties\n   kvm             Tool to trace/measure kvm guest os\n   list            List all symbolic event types\n   lock            Analyze lock events\n   mem             Profile memory accesses\n   record          Run a command and record its profile into perf.data\n   report          Read perf.data (created by perf record) and display the profile\n   sched           Tool to trace/measure scheduler properties (latencies)\n   script          Read perf.data (created by perf record) and display trace output\n   stat            Run a command and gather performance counter statistics\n   test            Runs sanity tests.\n   timechart       Tool to visualize total system behavior during a workload\n   top             System profiling tool.\n   probe           Define new dynamic tracepoints\n   trace           strace inspired tool\n\n See \'</span>perf <span class="nb">help </span>COMMAND<span class="s1">\' for more information on a specific command.\n</span></pre></div></div>\n\n<p>ちなみにmanを見るときはそれぞれper-[サブコマンド]の形で見れます</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>perf-stat<span class="o">(</span>1<span class="o">)</span>, perf-top<span class="o">(</span>1<span class="o">)</span>, perf-record<span class="o">(</span>1<span class="o">)</span>, perf-report<span class="o">(</span>1<span class="o">)</span>, perf-list<span class="o">(</span>1<span class="o">)</span>\n</pre></div></div>\n\n<h2>\n<span id="実行" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>実行</h2>\n\n<h4>\n<span id="perf-recordを使う" class="fragment"></span><a href="#perf-record%E3%82%92%E4%BD%BF%E3%81%86"><i class="fa fa-link"></i></a>perf recordを使う</h4>\n\n<p>とりあえず簡単なプログラムを書いて実行例を示します。<br>\nmmapしてwriteするだけのプログラム。<br>\nこれに対してperf recordを実行し実行時間が特にかかっている処理を確認します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c">#include &lt;stdio.h&gt;</span>\n<span class="c">#include &lt;fcntl.h&gt;</span>\n<span class="c">#include &lt;sys/mman.h&gt;</span>\n<span class="c">#include &lt;string.h&gt;</span>\n\n<span class="c">#define FILE_SIZE 1024</span>\n\nint main<span class="o">(</span>void<span class="o">)</span> <span class="o">{</span>\n    int fd<span class="p">;</span>\n    char <span class="k">*</span>map<span class="p">;</span>\n    char c <span class="o">=</span> 0<span class="p">;</span>\n    long page_size, map_size<span class="p">;</span>\n\n    fd <span class="o">=</span> open<span class="o">(</span><span class="s2">"writeFile"</span>, O_CREAT | O_RDWR, 0666<span class="o">)</span><span class="p">;</span>\n    <span class="k">if</span><span class="o">(</span>fd &lt; 0<span class="o">)</span> <span class="o">{</span>\n        <span class="nb">printf</span><span class="o">(</span><span class="s2">"Error : can\'t open file</span><span class="se">\\n</span><span class="s2">"</span><span class="o">)</span><span class="p">;</span>\n        <span class="k">return</span> <span class="nt">-1</span><span class="p">;</span>\n    <span class="o">}</span>\n\n    page_size <span class="o">=</span> getpagesize<span class="o">()</span><span class="p">;</span>\n    map_size <span class="o">=</span> <span class="o">(</span>FILE_SIZE / page_size + 1<span class="o">)</span> <span class="k">*</span> page_size<span class="p">;</span>\n\n    lseek<span class="o">(</span>fd, map_size, SEEK_SET<span class="o">)</span><span class="p">;</span>\n    write<span class="o">(</span>fd, &amp;c, sizeof<span class="o">(</span>char<span class="o">))</span><span class="p">;</span>\n    lseek<span class="o">(</span>fd, 0, SEEK_SET<span class="o">)</span><span class="p">;</span>\n\n    map <span class="o">=</span> <span class="o">(</span>char<span class="k">*</span><span class="o">)</span>mmap<span class="o">(</span>NULL, map_size, PROT_WRITE, MAP_SHARED, fd, 0<span class="o">)</span><span class="p">;</span>\n    <span class="k">if</span><span class="o">(</span>map <span class="o">==</span> MAP_FAILED<span class="o">)</span> <span class="o">{</span>\n        <span class="nb">printf</span><span class="o">(</span><span class="s2">"Error : mmap failed</span><span class="se">\\n</span><span class="s2">"</span><span class="o">)</span><span class="p">;</span>\n        <span class="k">return</span> <span class="nt">-1</span><span class="p">;</span>\n    <span class="o">}</span>\n\n    strcat<span class="o">(</span>map, <span class="s2">"perf tools test</span><span class="se">\\n</span><span class="s2">"</span><span class="o">)</span><span class="p">;</span>\n    strcat<span class="o">(</span>map, <span class="s2">"aaaaaaaaaaaaaaa</span><span class="se">\\n</span><span class="s2">"</span><span class="o">)</span><span class="p">;</span>\n    strcat<span class="o">(</span>map, <span class="s2">"bbbbbbbbbbbbbbb</span><span class="se">\\n</span><span class="s2">"</span><span class="o">)</span><span class="p">;</span>\n\n    msync<span class="o">(</span>map, map_size, 0<span class="o">)</span><span class="p">;</span>\n\n    close<span class="o">(</span>fd<span class="o">)</span><span class="p">;</span>\n    munmap<span class="o">(</span>map, map_size<span class="o">)</span><span class="p">;</span>\n\n    <span class="k">return </span>0<span class="p">;</span>\n<span class="o">}</span>\n</pre></div></div>\n\n<p>上記をコンパイルし実行。perf record, reportを実施</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 測定開始</span>\n<span class="nv">$ </span>perf record ./test\n<span class="o">[</span> perf record: Woken up 1 <span class="nb">times </span>to write data <span class="o">]</span>\n<span class="o">[</span> perf record: Captured and wrote 0.014 MB perf.data <span class="o">(</span>8 samples<span class="o">)</span> <span class="o">]</span>\n<span class="c"># 測定結果を確認する</span>\n<span class="nv">$ </span>perf report | <span class="nb">head</span> <span class="nt">-n</span> 20\n<span class="c"># To display the perf.data header info, please use --header/--header-only options.</span>\n<span class="c">#</span>\n<span class="c">#</span>\n<span class="c"># Total Lost Samples: 0</span>\n<span class="c">#</span>\n<span class="c"># Samples: 8  of event \'cycles:u\'</span>\n<span class="c"># Event count (approx.): 441279</span>\n<span class="c">#</span>\n<span class="c"># Overhead  Command  Shared Object  Symbol</span>\n<span class="c"># ........  .......  .............  .......................</span>\n<span class="c">#</span>\n    59.13%  <span class="nb">test     </span>ld-2.17.so     <span class="o">[</span>.] _dl_relocate_object\n    34.89%  <span class="nb">test     </span>ld-2.17.so     <span class="o">[</span>.] dl_main\n     5.98%  <span class="nb">test     </span>ld-2.17.so     <span class="o">[</span>.] _start\n</pre></div></div>\n\n<p>共有ライブラリld-2.17.soの「_dl_relocate_object」が特に時間がかかっていることが分かる。<br>\nこのように具体的になんの処理が遅いのかの切り分けが出来るようになります。</p>\n\n<p>またperfにはキャッシュミス回数の測定などにも使えるとのこと<br>\n下記がとても参考になるので是非ご覧ください。<br>\n<a href="http://laysakura.hateblo.jp/entry/20111015/1318738362" class="autolink" rel="nofollow noopener" target="_blank">http://laysakura.hateblo.jp/entry/20111015/1318738362</a></p>\n\n<h4>\n<span id="perf-statを使う" class="fragment"></span><a href="#perf-stat%E3%82%92%E4%BD%BF%E3%81%86"><i class="fa fa-link"></i></a>perf statを使う</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>perf <span class="nb">stat dd </span><span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>./aaa <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span>32\n32+0 records <span class="k">in\n</span>32+0 records out\n33554432 bytes <span class="o">(</span>34 MB<span class="o">)</span> copied, 0.0183909 s, 1.8 GB/s\n\n Performance counter stats <span class="k">for</span> <span class="s1">\'dd if=/dev/zero of=./aaa bs=1M count=32\'</span>:\n\n    2440.034235  task-clock-msecs         <span class="c">#      0.134 CPUs</span>\n            428  context-switches         <span class="c">#      0.000 M/sec</span>\n              4  CPU-migrations           <span class="c">#      0.000 M/sec</span>\n            420  page-faults              <span class="c">#      0.000 M/sec</span>\n     3857327327  cycles                   <span class="c">#   1580.850 M/sec</span>\n      822921345  instructions             <span class="c">#      0.213 IPC</span>\n       21888683  cache-references         <span class="c">#      8.971 M/sec</span>\n        2781896  cache-misses             <span class="c">#      1.140 M/sec</span>\n</pre></div></div>\n\n<table>\n<thead>\n<tr>\n<th>項目名</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>task-clock-msecs</td>\n<td>CPU使用時間</td>\n</tr>\n<tr>\n<td>context-switches</td>\n<td>コンテキストスイッチした回数</td>\n</tr>\n<tr>\n<td>CPU-migrations</td>\n<td>別のCPUに移動した回数</td>\n</tr>\n<tr>\n<td>page-faults</td>\n<td>ページフォルトした回数</td>\n</tr>\n<tr>\n<td>cycles</td>\n<td>使ったCPUのクロック数</td>\n</tr>\n<tr>\n<td>instructions</td>\n<td>キャンセル命令数</td>\n</tr>\n<tr>\n<td>cache-references</td>\n<td>キャッシュヒット回数</td>\n</tr>\n<tr>\n<td>cache-misses</td>\n<td>キャッシュミス回数</td>\n</tr>\n</tbody>\n</table>\n\n<p>CPU使用時間は当然ながらコンテキストスイッチの回数だったりキャッシュミス回数だったりが<br>\n可視化される。perf_event_open(2)を使用することでイベントカウンタのfdを入手しこれをread()することで<br>\nカウント数などを得ている</p>\n\n<p>以下のようなオプションを使うとユーザレベルでの命令回数などが簡単に取得できる</p>\n\n<table>\n<thead>\n<tr>\n<th>Modifiers</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u</td>\n<td>monitor at priv level 3, 2, 1 (user)</td>\n<td>event:u</td>\n</tr>\n<tr>\n<td>k</td>\n<td>monitor at priv level 0 (kernel)</td>\n<td>event:k</td>\n</tr>\n<tr>\n<td>h</td>\n<td>monitor hypervisor events on a virtualization environment</td>\n<td>event:h</td>\n</tr>\n<tr>\n<td>H</td>\n<td>monitor host machine on a virtualization environment</td>\n<td>event:H</td>\n</tr>\n<tr>\n<td>G</td>\n<td>monitor guest machine on a virtualization environment</td>\n<td>event:G</td>\n</tr>\n</tbody>\n</table>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">実行例</span></div>\n<div class="highlight"><pre><span class="nv">$ </span>perf <span class="nb">stat</span> <span class="nt">-e</span> instructions:u <span class="nb">dd </span><span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/dev/null <span class="nv">count</span><span class="o">=</span>100000\n100000+0 records <span class="k">in\n</span>100000+0 records out\n51200000 bytes <span class="o">(</span>51 MB<span class="o">)</span> copied, 0.0371708 s, 1.4 GB/s\n\n Performance counter stats <span class="k">for</span> <span class="s1">\'dd if=/dev/zero of=/dev/null count=100000\'</span>:\n\n        40,062,814      instructions:u\n\n       0.038015773 seconds <span class="nb">time </span>elapsed\n</pre></div>\n</div>\n\n<p>ここら辺の仕組みの理解で良いまとめがあれば教えてください。</p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>とりあえずperfのインストールから使い方や考え方について色々調べてみました。<br>\nただ使えてもそこから何を見出すかや傾向分析なんかは経験が一番必要というお話をされました。<br>\n(現に使ってみてカーネルのどの部分が遅いなど分かっても対策案を出すにはいたりませんでした)</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="http://www.brendangregg.com/perf.html" class="autolink" rel="nofollow noopener" target="_blank">http://www.brendangregg.com/perf.html</a><br>\n<a href="http://int.main.jp/txt/perf.html" class="autolink" rel="nofollow noopener" target="_blank">http://int.main.jp/txt/perf.html</a><br>\n<a href="http://nbisco.hatenablog.com/entry/2016/12/12/000000" class="autolink" rel="nofollow noopener" target="_blank">http://nbisco.hatenablog.com/entry/2016/12/12/000000</a><br>\n<a href="http://d.hatena.ne.jp/kumagi/20110327" class="autolink" rel="nofollow noopener" target="_blank">http://d.hatena.ne.jp/kumagi/20110327</a><br>\n<a href="https://www.ibm.com/developerworks/jp/linux/library/l-analyzing-performance-perf-annotate-trs/index.html" class="autolink" rel="nofollow noopener" target="_blank">https://www.ibm.com/developerworks/jp/linux/library/l-analyzing-performance-perf-annotate-trs/index.html</a></p>\n', 'body': '![perf-system.png](https://qiita-image-store.s3.amazonaws.com/0/258841/ded3a269-2349-433b-c87c-ccb02124fe1e.png)\n\n\n## 背景\n\nシステムコールから先のボトルネック箇所を知りたい事がありまして、その際にperfなるものを教えてもらいました。\n使ってみると色々と便利なツールで勉強になったことも多々あるのでそちらのご紹介です。\n\n## 概要\n\nperf(Performance analysis tools for Linux)とはLinuxカーネル2.6.31以降で使用可能なLinuxの性能解析ツールです。\nざっくりいえば下記\n\n* 実行されるプログラムと OS とのイベントを見れる\n* OS とハードウェアのイベントを見れる\n\nカーネルのカウンタで計測されるイベントだったりプロセッサで計測されるイベントが知れる\n例えばL1のヒット状況やTLBの様子なども観察できます。\n(CPUサイクル数、分岐の数、分岐予測ミス数、キャッシュ参照数、キャッシュミス数など豊富な機能)\n\n## 導入\n\n導入はRedHat,centOSならyum,ubuntuならaptで間単にインストールできます。\n今回はRHEL7.5にインストール(カーネル3.10.0-862)\n\n``` bash\n$ sudo yum install perf\n\n$ perf --version\nperf version 3.10.0-862.el7.x86_64.debug\n```\n\n## 使い方\n\nperf [サブコマンド]でプロファイルの実行だったり閲覧だったりが出来ます\nサブコマンドは下記\n\nサブコマンド|概要\n------------|----\nstat        |プログラムやある時点のシステムのトータルイベントカウントを計測する\ntop         |関数単位でCPU使用率を閲覧\nrecord      |一つのプログラムのイベントをサンプリング\nreport      |recordで生成されたファイルを分析する\nlist        |調査可能なイベント一覧\n\nメインとして使われるのは上5つとのこと他にも色々機能がありますがこちらはほぼ未調査\n\n``` bash\n$ perf --help\n\n usage: perf [--version] [--help] [OPTIONS] COMMAND [ARGS]\n\n The most commonly used perf commands are:\n   annotate        Read perf.data (created by perf record) and display annotated code\n   archive         Create archive with object files with build-ids found in perf.data file\n   bench           General framework for benchmark suites\n   buildid-cache   Manage build-id cache.\n   buildid-list    List the buildids in a perf.data file\n   c2c             Shared Data C2C/HITM Analyzer.\n   config          Get and set variables in a configuration file.\n   data            Data file related processing\n   diff            Read perf.data files and display the differential profile\n   evlist          List the event names in a perf.data file\n   ftrace          simple wrapper for kernel\'s ftrace functionality\n   inject          Filter to augment the events stream with additional information\n   kallsyms        Searches running kernel for symbols\n   kmem            Tool to trace/measure kernel memory properties\n   kvm             Tool to trace/measure kvm guest os\n   list            List all symbolic event types\n   lock            Analyze lock events\n   mem             Profile memory accesses\n   record          Run a command and record its profile into perf.data\n   report          Read perf.data (created by perf record) and display the profile\n   sched           Tool to trace/measure scheduler properties (latencies)\n   script          Read perf.data (created by perf record) and display trace output\n   stat            Run a command and gather performance counter statistics\n   test            Runs sanity tests.\n   timechart       Tool to visualize total system behavior during a workload\n   top             System profiling tool.\n   probe           Define new dynamic tracepoints\n   trace           strace inspired tool\n\n See \'perf help COMMAND\' for more information on a specific command.\n```\n\nちなみにmanを見るときはそれぞれper-[サブコマンド]の形で見れます\n\n\n``` bash\nperf-stat(1), perf-top(1), perf-record(1), perf-report(1), perf-list(1)\n```\n\n## 実行\n\n#### perf recordを使う\n\nとりあえず簡単なプログラムを書いて実行例を示します。\nmmapしてwriteするだけのプログラム。\nこれに対してperf recordを実行し実行時間が特にかかっている処理を確認します。\n\n``` bash\n#include <stdio.h>\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <string.h>\n\n#define FILE_SIZE 1024\n\nint main(void) {\n    int fd;\n    char *map;\n    char c = 0;\n    long page_size, map_size;\n\n    fd = open("writeFile", O_CREAT | O_RDWR, 0666);\n    if(fd < 0) {\n        printf("Error : can\'t open file\\n");\n        return -1;\n    }\n\n    page_size = getpagesize();\n    map_size = (FILE_SIZE / page_size + 1) * page_size;\n\n    lseek(fd, map_size, SEEK_SET);\n    write(fd, &c, sizeof(char));\n    lseek(fd, 0, SEEK_SET);\n\n    map = (char*)mmap(NULL, map_size, PROT_WRITE, MAP_SHARED, fd, 0);\n    if(map == MAP_FAILED) {\n        printf("Error : mmap failed\\n");\n        return -1;\n    }\n\n    strcat(map, "perf tools test\\n");\n    strcat(map, "aaaaaaaaaaaaaaa\\n");\n    strcat(map, "bbbbbbbbbbbbbbb\\n");\n\n    msync(map, map_size, 0);\n\n    close(fd);\n    munmap(map, map_size);\n\n    return 0;\n}\n```\n\n上記をコンパイルし実行。perf record, reportを実施\n\n``` bash\n# 測定開始\n$ perf record ./test\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.014 MB perf.data (8 samples) ]\n# 測定結果を確認する\n$ perf report | head -n 20\n# To display the perf.data header info, please use --header/--header-only options.\n#\n#\n# Total Lost Samples: 0\n#\n# Samples: 8  of event \'cycles:u\'\n# Event count (approx.): 441279\n#\n# Overhead  Command  Shared Object  Symbol\n# ........  .......  .............  .......................\n#\n    59.13%  test     ld-2.17.so     [.] _dl_relocate_object\n    34.89%  test     ld-2.17.so     [.] dl_main\n     5.98%  test     ld-2.17.so     [.] _start\n```\n\n共有ライブラリld-2.17.soの「_dl_relocate_object」が特に時間がかかっていることが分かる。\nこのように具体的になんの処理が遅いのかの切り分けが出来るようになります。\n\nまたperfにはキャッシュミス回数の測定などにも使えるとのこと\n下記がとても参考になるので是非ご覧ください。\nhttp://laysakura.hateblo.jp/entry/20111015/1318738362\n\n#### perf statを使う\n\n``` bash\n$ perf stat dd if=/dev/zero of=./aaa bs=1M count=32\n32+0 records in\n32+0 records out\n33554432 bytes (34 MB) copied, 0.0183909 s, 1.8 GB/s\n\n Performance counter stats for \'dd if=/dev/zero of=./aaa bs=1M count=32\':\n\n    2440.034235  task-clock-msecs         #      0.134 CPUs\n            428  context-switches         #      0.000 M/sec\n              4  CPU-migrations           #      0.000 M/sec\n            420  page-faults              #      0.000 M/sec\n     3857327327  cycles                   #   1580.850 M/sec\n      822921345  instructions             #      0.213 IPC\n       21888683  cache-references         #      8.971 M/sec\n        2781896  cache-misses             #      1.140 M/sec\n```\n\n|項目名|概要|\n-------|----\ntask-clock-msecs|CPU使用時間\ncontext-switches|コンテキストスイッチした回数\nCPU-migrations|別のCPUに移動した回数\npage-faults|ページフォルトした回数\ncycles|使ったCPUのクロック数\ninstructions|キャンセル命令数\ncache-references|キャッシュヒット回数\ncache-misses|キャッシュミス回数\n\nCPU使用時間は当然ながらコンテキストスイッチの回数だったりキャッシュミス回数だったりが\n可視化される。perf_event_open(2)を使用することでイベントカウンタのfdを入手しこれをread()することで\nカウント数などを得ている\n\n\n以下のようなオプションを使うとユーザレベルでの命令回数などが簡単に取得できる\n\nModifiers|Description|Example\n---------|-----------|-------\nu        |monitor at priv level 3, 2, 1 (user)|event:u\nk        |monitor at priv level 0 (kernel)|event:k\nh        |monitor hypervisor events on a virtualization environment|event:h\nH        |monitor host machine on a virtualization environment|event:H\nG        |monitor guest machine on a virtualization environment|event:G\n\n``` bash:実行例\n$ perf stat -e instructions:u dd if=/dev/zero of=/dev/null count=100000\n100000+0 records in\n100000+0 records out\n51200000 bytes (51 MB) copied, 0.0371708 s, 1.4 GB/s\n\n Performance counter stats for \'dd if=/dev/zero of=/dev/null count=100000\':\n\n        40,062,814      instructions:u\n\n       0.038015773 seconds time elapsed\n```\n\nここら辺の仕組みの理解で良いまとめがあれば教えてください。\n\n## まとめ\n\nとりあえずperfのインストールから使い方や考え方について色々調べてみました。\nただ使えてもそこから何を見出すかや傾向分析なんかは経験が一番必要というお話をされました。\n(現に使ってみてカーネルのどの部分が遅いなど分かっても対策案を出すにはいたりませんでした)\n\n\n## 参考リンク\n\nhttp://www.brendangregg.com/perf.html\nhttp://int.main.jp/txt/perf.html\nhttp://nbisco.hatenablog.com/entry/2016/12/12/000000\nhttp://d.hatena.ne.jp/kumagi/20110327\nhttps://www.ibm.com/developerworks/jp/linux/library/l-analyzing-performance-perf-annotate-trs/index.html\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-12-25T22:44:05+09:00', 'group': None, 'id': '87658621d332d31b9450', 'likes_count': 7, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'UNIX', 'versions': []}], 'title': 'Linux 性能解析ツールperfを使ってみた', 'updated_at': '2018-12-25T22:44:05+09:00', 'url': 'https://qiita.com/ryuichi1208/items/87658621d332d31b9450', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/ee66aa59f643d3194971dbbaa1aea9e39e10c7f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31303866653832622d313735642d303863302d383964322d3133393161393536313430352e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/ee66aa59f643d3194971dbbaa1aea9e39e10c7f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31303866653832622d313735642d303863302d383964322d3133393161393536313430352e6a706567" alt="docker_global_hackday3_red.jpeg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/108fe82b-175d-08c0-89d2-1391a9561405.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p><a href="https://speakerdeck.com/stormcat24/oqian-falsedockerimezihamadazhong-i" class="autolink" rel="nofollow noopener" target="_blank">https://speakerdeck.com/stormcat24/oqian-falsedockerimezihamadazhong-i</a></p>\n\n<p>上記のスライドを見て初めて1コンテナ1GBは重過ぎるということに気づかされました。<br>\n色々詰め込んでいるしあくまで趣味レベルで触っているだけでまあ良いかとずっと思ってましたが<br>\n業務でも触ることを考えて色々減量を考えました。<br>\nそんな中「docker-slim」が良いよって話を聞いて使ってみて想像以上に良かったのでご紹介。</p>\n\n<p>公式HPは下記<br>\n<a href="http://dockersl.im/" class="autolink" rel="nofollow noopener" target="_blank">http://dockersl.im/</a></p>\n\n<h2>\n<span id="dockerイメージが大きい弊害" class="fragment"></span><a href="#docker%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%8C%E5%A4%A7%E3%81%8D%E3%81%84%E5%BC%8A%E5%AE%B3"><i class="fa fa-link"></i></a>Dockerイメージが大きい弊害</h2>\n\n<p>スライドの中からの引用です。<br>\n大きければビルドもアップロード/ダウンロード時間が増える。<br>\n当然のことですね。且つ待ち時間が多くなりTwitterする時間も確かに増えますね(笑)</p>\n\n<ul>\n<li>イメージビルド、CI時間が増える</li>\n<li>イメージのダウンロード時間が増える</li>\n<li>イメージのアップロード時間が増える</li>\n<li>生産性が下がる</li>\n<li>Twitterする時間が増える</li>\n</ul>\n\n<h2>\n<span id="減量方法" class="fragment"></span><a href="#%E6%B8%9B%E9%87%8F%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>減量方法</h2>\n\n<p>減量する方法は色々なところで議論されていますが主に下記が効果的</p>\n\n<ul>\n<li>軽量イメージを使用する (例:Alpineやscratch)</li>\n<li>RUNをまとめる ()</li>\n<li>マルチステージビルドを使う</li>\n</ul>\n\n<p>マルチステージビルドは、Docker17.05以上で利用できる新機能です。<br>\nビルドで使うコンテナと、最終的な実行可能ファイルだけを詰め込んだコンテナを<br>\n分けて使うことが出来ます。</p>\n\n<p>それぞれしっかり調べていくと大量の時間がかかりますね。<br>\nそんな中上記を自動でやってくれるツール「docker-slim」がとても便利。</p>\n\n<h2>\n<span id="what-is-docker-slim-" class="fragment"></span><a href="#what-is-docker-slim-"><i class="fa fa-link"></i></a>What is docker-slim ?</h2>\n\n<p>減量減量言ってましたがdocker-slimはコンテナの最適化ツールといった感じです。<br>\nソースはGitHubで公開されています。ちなみに実装はGo。<br>\nスター数は2000程。最新バージョンは1.22で今もリリースされ続けています。<br>\n<a href="https://github.com/docker-slim/docker-slim" rel="nofollow noopener" target="_blank">docker-slim/docker-slim</a></p>\n\n<p>主な機能は下記。<br>\n最適化したDockerfileを作ってくれるので取り入れたい項目だけ使えたりするのは良いですね。</p>\n\n<ul>\n<li>静的及び動的解析による最適化</li>\n<li>最適化後にDockerfileを自動作成</li>\n</ul>\n\n<h2>\n<span id="インストール手順" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>インストール手順</h2>\n\n<p>MacとLinuxのバイナリーがREADMEのINSTALLATIONの欄にあります。<br>\nそちらを入手して解凍しパスを通すだけで使えるようです。<br>\n自前ビルド無しで使えるのはうれしいですね。<br>\n(ローカル構築の場合は手順が違うようなのでご注意を)</p>\n\n<div class="code-frame" data-lang="usage"><div class="highlight"><pre>docker-slim [version|info|build|profile] [--http-probe|--remove-file-artifacts] &lt;IMAGE_ID_OR_NAME&gt;\n</pre></div></div>\n\n<p>色々オプションがありますが、基本的にはREADMEとDEMOの動画でことは足りる感触です。<br>\n実行例などでは主にサブコマンドを使って説明されている。</p>\n\n<table>\n<thead>\n<tr>\n<th>サブコマンド</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>build</td>\n<td>太ったイメージから軽量化されたイメージをビルド</td>\n</tr>\n<tr>\n<td>profile</td>\n<td>コンテナレポートを作成</td>\n</tr>\n<tr>\n<td>info</td>\n<td>実行せずにDockerfileのみを作成</td>\n</tr>\n<tr>\n<td>version</td>\n<td>docker-slimのバージョンを表示</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="使ってみた" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"><i class="fa fa-link"></i></a>使ってみた</h2>\n\n<h5>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h5>\n\n<p>環境はこんな感じ<br>\n最新版のdocker-slimを取ってきて使ってます</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-a</span>\nLinux ubuntu0827 4.15.0-39-generic <span class="c">#42-Ubuntu SMP Tue Oct 23 15:48:01 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span>\n<span class="nv">$ </span>docker <span class="nt">--version</span>\nDocker version 18.06.1-ce, build e68fc7a\n</pre></div></div>\n\n<h5>\n<span id="サンプルdockerfile" class="fragment"></span><a href="#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%ABdockerfile"><i class="fa fa-link"></i></a>サンプルDockerfile</h5>\n\n<p>使用するDockerfileはこんな感じ<br>\nとりあえず適当にJava入りコンテナを書いてみる。</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">Dockerfile</span></div>\n<div class="highlight"><pre><span class="s">FROM ubuntu:latest</span>\n\n<span class="s">ENV JAVA_HOME /usr/lib/jvm/java-8-oracle</span>\n\n<span class="s">RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select </span><span class="no">true</span><span class="s"> | debconf-set-selections &amp;&amp; \\</span>\n    <span class="s">apt-get update &amp;&amp; \\</span>\n    <span class="s">apt-get install -y software-properties-common &amp;&amp; \\</span>\n    <span class="s">add-apt-repository -y ppa:webupd8team/java &amp;&amp; \\</span>\n    <span class="s">apt-get update &amp;&amp; \\</span>\n    <span class="s">apt-get install -y oracle-java8-installer</span>\n\n<span class="s">CMD "/bin/bash"</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="導入" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>導入</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">-L</span> <span class="nt">-O</span> https://github.com/docker-slim/docker-slim/releases/download/1.22/dist_linux.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   607    0   607    0     0    988      0 <span class="nt">--</span>:--:-- <span class="nt">--</span>:--:-- <span class="nt">--</span>:--:--   986\n100 5199k  100 5199k    0     0   366k      0  0:00:14  0:00:14 <span class="nt">--</span>:--:--  791k\n<span class="nv">$ </span><span class="nb">tar </span>zxvf dist_linux.tar.gz\ndist_linux/\ndist_linux/docker-slim\ndist_linux/docker-slim-sensor\ndist_linux  dist_linux.tar.gz  django_work  git-work  iog  kubernetes  omnibus-gitlab-master  python.py  work\n<span class="nv">$ </span><span class="nb">cd </span>dist_linux/\n<span class="nv">$ </span><span class="nb">ls\n</span>docker-slim  docker-slim-sensor\n</pre></div></div>\n\n<p>導入したら太ったイメージを用意しdocker-slimを実行。<br>\nサンプル動画通りの動きです。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 何もしないコンテナだけど844MB</span>\n<span class="nv">$ </span>docker images java_fat_1\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\njava_fat_1          latest              c7c3170996a5        2 minutes ago       844MB\n\n<span class="c"># docker-slimを実行したイメージ</span>\n<span class="nv">$ </span>docker images java_fat_1.slim\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\njava_fat_1.slim     latest              e3607956321d        2 minutes ago       3.87MB\n</pre></div></div>\n\n<p>844MB ⇒ 3.87MBまで凄い圧縮率。<br>\nDockerfileは.imagesにあるので中身を見てみます。<br>\n動的解析でインストール類が無くなってますね(例が悪かった←)<br>\n当然ですがコンテナ作ってからいろいろやろうとするなって話ですね</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat</span> .images/c7c3170996a5c5a62e5544165a9dbd234e2139e5745eec1fc01948a2d2ea396f/artifacts/Dockerfile\nFROM scratch\nCOPY files /\nENV PATH <span class="s2">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>\nENV JAVA_HOME <span class="s2">"/usr/lib/jvm/java-8-oracle"</span>\nCMD <span class="o">[</span><span class="s2">"/bin/sh"</span>,<span class="s2">"-c"</span>,<span class="s2">"</span><span class="se">\\"</span><span class="s2">/bin/bash</span><span class="se">\\"</span><span class="s2">"</span><span class="o">]</span>\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>レイヤの結合だったりcacheの削除だったりやるべきことや学ぶべきことはたくさんある。<br>\nとりあえずAlpineLinuxだとかRUNの結合だ！とかやってましたがこの機会にちょっとだけ知識が増えました。<br>\n今回紹介した減量ツールはその取っ掛かりとしてはとてもいいのでは無いでしょうか？<br>\n便利さゆえに本質を理解せずに使わないようにしたいですね。</p>\n\n<p>自分もこんな感じの便利ツールで減量したい。。。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://techblog.ca-wise.co.jp/2016/02/post-17.html" class="autolink" rel="nofollow noopener" target="_blank">https://techblog.ca-wise.co.jp/2016/02/post-17.html</a><br>\n<a href="https://studygolang.com/articles/13233" class="autolink" rel="nofollow noopener" target="_blank">https://studygolang.com/articles/13233</a></p>\n', 'body': '![docker_global_hackday3_red.jpeg](https://qiita-image-store.s3.amazonaws.com/0/258841/108fe82b-175d-08c0-89d2-1391a9561405.jpeg)\n\n## 背景\n\nhttps://speakerdeck.com/stormcat24/oqian-falsedockerimezihamadazhong-i\n\n上記のスライドを見て初めて1コンテナ1GBは重過ぎるということに気づかされました。\n色々詰め込んでいるしあくまで趣味レベルで触っているだけでまあ良いかとずっと思ってましたが\n業務でも触ることを考えて色々減量を考えました。\nそんな中「docker-slim」が良いよって話を聞いて使ってみて想像以上に良かったのでご紹介。\n\n公式HPは下記\nhttp://dockersl.im/\n\n## Dockerイメージが大きい弊害\n\nスライドの中からの引用です。\n大きければビルドもアップロード/ダウンロード時間が増える。\n当然のことですね。且つ待ち時間が多くなりTwitterする時間も確かに増えますね(笑)\n\n* イメージビルド、CI時間が増える\n* イメージのダウンロード時間が増える\n* イメージのアップロード時間が増える\n* 生産性が下がる\n* Twitterする時間が増える\n\n## 減量方法\n\n減量する方法は色々なところで議論されていますが主に下記が効果的\n\n* 軽量イメージを使用する (例:Alpineやscratch)\n* RUNをまとめる ()\n* マルチステージビルドを使う\n\nマルチステージビルドは、Docker17.05以上で利用できる新機能です。\nビルドで使うコンテナと、最終的な実行可能ファイルだけを詰め込んだコンテナを\n分けて使うことが出来ます。\n\nそれぞれしっかり調べていくと大量の時間がかかりますね。\nそんな中上記を自動でやってくれるツール「docker-slim」がとても便利。\n\n## What is docker-slim ?\n\n減量減量言ってましたがdocker-slimはコンテナの最適化ツールといった感じです。\nソースはGitHubで公開されています。ちなみに実装はGo。\nスター数は2000程。最新バージョンは1.22で今もリリースされ続けています。\n[docker-slim/docker-slim](https://github.com/docker-slim/docker-slim)\n\n主な機能は下記。\n最適化したDockerfileを作ってくれるので取り入れたい項目だけ使えたりするのは良いですね。\n\n* 静的及び動的解析による最適化\n* 最適化後にDockerfileを自動作成\n\n## インストール手順\n\nMacとLinuxのバイナリーがREADMEのINSTALLATIONの欄にあります。\nそちらを入手して解凍しパスを通すだけで使えるようです。\n自前ビルド無しで使えるのはうれしいですね。\n(ローカル構築の場合は手順が違うようなのでご注意を)\n\n``` usage\ndocker-slim [version|info|build|profile] [--http-probe|--remove-file-artifacts] <IMAGE_ID_OR_NAME>\n```\n\n色々オプションがありますが、基本的にはREADMEとDEMOの動画でことは足りる感触です。\n実行例などでは主にサブコマンドを使って説明されている。\n\nサブコマンド|説明\n------------|----\nbuild       |太ったイメージから軽量化されたイメージをビルド\nprofile     |コンテナレポートを作成\ninfo        |実行せずにDockerfileのみを作成\nversion     |docker-slimのバージョンを表示\n\n## 使ってみた\n\n##### 環境\n\n環境はこんな感じ\n最新版のdocker-slimを取ってきて使ってます\n\n``` bash\n$ uname -a\nLinux ubuntu0827 4.15.0-39-generic #42-Ubuntu SMP Tue Oct 23 15:48:01 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n$ docker --version\nDocker version 18.06.1-ce, build e68fc7a\n```\n\n##### サンプルDockerfile\n\n使用するDockerfileはこんな感じ\nとりあえず適当にJava入りコンテナを書いてみる。\n\n``` yaml:Dockerfile\nFROM ubuntu:latest\n\nENV JAVA_HOME /usr/lib/jvm/java-8-oracle\n\nRUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \\\n    apt-get update && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository -y ppa:webupd8team/java && \\\n    apt-get update && \\\n    apt-get install -y oracle-java8-installer\n\nCMD "/bin/bash"\n```\n#### 導入\n\n``` bash\n$ curl -L -O https://github.com/docker-slim/docker-slim/releases/download/1.22/dist_linux.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   607    0   607    0     0    988      0 --:--:-- --:--:-- --:--:--   986\n100 5199k  100 5199k    0     0   366k      0  0:00:14  0:00:14 --:--:--  791k\n$ tar zxvf dist_linux.tar.gz\ndist_linux/\ndist_linux/docker-slim\ndist_linux/docker-slim-sensor\ndist_linux  dist_linux.tar.gz  django_work  git-work  iog  kubernetes  omnibus-gitlab-master  python.py  work\n$ cd dist_linux/\n$ ls\ndocker-slim  docker-slim-sensor\n```\n\n導入したら太ったイメージを用意しdocker-slimを実行。\nサンプル動画通りの動きです。\n\n``` bash\n# 何もしないコンテナだけど844MB\n$ docker images java_fat_1\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\njava_fat_1          latest              c7c3170996a5        2 minutes ago       844MB\n\n# docker-slimを実行したイメージ\n$ docker images java_fat_1.slim\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\njava_fat_1.slim     latest              e3607956321d        2 minutes ago       3.87MB\n```\n\n844MB ⇒ 3.87MBまで凄い圧縮率。\nDockerfileは.imagesにあるので中身を見てみます。\n動的解析でインストール類が無くなってますね(例が悪かった←)\n当然ですがコンテナ作ってからいろいろやろうとするなって話ですね\n\n``` bash\n$ cat .images/c7c3170996a5c5a62e5544165a9dbd234e2139e5745eec1fc01948a2d2ea396f/artifacts/Dockerfile\nFROM scratch\nCOPY files /\nENV PATH "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nENV JAVA_HOME "/usr/lib/jvm/java-8-oracle"\nCMD ["/bin/sh","-c","\\"/bin/bash\\""]\n```\n\n## まとめ\n\nレイヤの結合だったりcacheの削除だったりやるべきことや学ぶべきことはたくさんある。\nとりあえずAlpineLinuxだとかRUNの結合だ！とかやってましたがこの機会にちょっとだけ知識が増えました。\n今回紹介した減量ツールはその取っ掛かりとしてはとてもいいのでは無いでしょうか？\n便利さゆえに本質を理解せずに使わないようにしたいですね。\n\n自分もこんな感じの便利ツールで減量したい。。。\n\n## 参考リンク\n\nhttps://techblog.ca-wise.co.jp/2016/02/post-17.html\nhttps://studygolang.com/articles/13233\n', 'coediting': False, 'comments_count': 3, 'created_at': '2018-12-23T00:10:51+09:00', 'group': None, 'id': 'c96d39a57e11d54f02bf', 'likes_count': 127, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'dockerfile', 'versions': []}], 'title': 'docker-slimを使ってDockerイメージのダイエット', 'updated_at': '2019-05-14T10:26:12+09:00', 'url': 'https://qiita.com/ryuichi1208/items/c96d39a57e11d54f02bf', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/ac5b2528632ac9a718feede3271e064fafbbdb7d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35313834306161302d393466362d396134362d633434332d3065666336313137393163352e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/ac5b2528632ac9a718feede3271e064fafbbdb7d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35313834306161302d393466362d396134362d633434332d3065666336313137393163352e6a706567" alt="index.jpeg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/51840aa0-94f6-9a46-c443-0efc611791c5.jpeg"></a></p>\n\n<p>愛用しているワンライナー<br>\n特にきれいにまとめてる系の記事ではない</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>個人的に愛用しているワンライナーコマンド集<br>\naliasが許されない共用マシンとかで実行するときに見る用</p>\n\n<p>シェル芸人への憧れ強め。全ての作業を1発で終わらせる姿には感動。<br>\n洗練された無駄の無い技術はかっこいいですね。</p>\n\n<p>シェル芸人さんのような作品とは程遠いけど色々使っていく中で便利だと思ったワンライナー集<br>\nシェル芸人については下記をご参照ください<br>\n<a href="http://www.usptomo.com/PAGE=20101025WHATS" class="autolink" rel="nofollow noopener" target="_blank">http://www.usptomo.com/PAGE=20101025WHATS</a></p>\n\n<p>シェル芸人への道への第一歩として読むのにいい記事があったのでこちらもご紹介<br>\n<a href="https://qiita.com/t_nakayama0714/items/bfe4852e0535858ee662" class="autolink" id="reference-43e69203e6dce24c20ce">https://qiita.com/t_nakayama0714/items/bfe4852e0535858ee662</a></p>\n\n<p>UNIX哲学は大変興味深いですね。<br>\n下記も結構面白かったのでお時間ある方は是非ご覧ください。<br>\n<a href="https://futurismo.biz/archives/1500/" class="autolink" rel="nofollow noopener" target="_blank">https://futurismo.biz/archives/1500/</a></p>\n\n<h2>\n<span id="ワンライナー" class="fragment"></span><a href="#%E3%83%AF%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%8A%E3%83%BC"><i class="fa fa-link"></i></a>ワンライナー</h2>\n\n<h4>\n<span id="一つ前のディレクトリへ戻る" class="fragment"></span><a href="#%E4%B8%80%E3%81%A4%E5%89%8D%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E6%88%BB%E3%82%8B"><i class="fa fa-link"></i></a>一つ前のディレクトリへ戻る</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> -\n</pre></div></div>\n\n<p>めちゃくちゃ使うのに意外と入門書に載ってないやつ。</p>\n\n<h4>\n<span id="スクリプトが置かれている場所の絶対パスとスクリプト名を取得" class="fragment"></span><a href="#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%8C%E7%BD%AE%E3%81%8B%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E6%89%80%E3%81%AE%E7%B5%B6%E5%AF%BE%E3%83%91%E3%82%B9%E3%81%A8%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E5%90%8D%E3%82%92%E5%8F%96%E5%BE%97"><i class="fa fa-link"></i></a>スクリプトが置かれている場所の絶対パスとスクリプト名を取得</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="k">$(</span><span class="nb">cd</span> <span class="k">$(</span><span class="nb">dirname</span> <span class="nv">$0</span><span class="k">)</span> <span class="o">&amp;&amp;</span> <span class="nb">pwd</span><span class="k">)</span>/<span class="k">$(</span><span class="nb">basename</span> <span class="nv">$0</span><span class="k">)</span>\n</pre></div></div>\n\n<p>スクリプト内でフルパスが欲しいときって意外とあるから使うやつ</p>\n\n<h4>\n<span id="物理メモリを多く使用しているプロセスを抽出" class="fragment"></span><a href="#%E7%89%A9%E7%90%86%E3%83%A1%E3%83%A2%E3%83%AA%E3%82%92%E5%A4%9A%E3%81%8F%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%82%92%E6%8A%BD%E5%87%BA"><i class="fa fa-link"></i></a>物理メモリを多く使用しているプロセスを抽出</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ps aux | <span class="nb">sort</span> <span class="nt">-n</span> <span class="nt">-k</span> 6 | <span class="nb">tail</span> <span class="nt">-n</span> 10\n</pre></div></div>\n\n<h4>\n<span id="cpu使用率が高いプロセスを見つける" class="fragment"></span><a href="#cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E3%81%8C%E9%AB%98%E3%81%84%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%8B"><i class="fa fa-link"></i></a>CPU使用率が高いプロセスを見つける</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>vmstat 1 | <span class="nb">awk</span> <span class="s1">\'{print strftime("%y/%m/%d %H:%M:%S"), $0}\'</span>\n</pre></div></div>\n\n<h4>\n<span id="ヘッダーとフッターを除外して表示" class="fragment"></span><a href="#%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%81%A8%E3%83%95%E3%83%83%E3%82%BF%E3%83%BC%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%A6%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>ヘッダーとフッターを除外して表示</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat </span>ファイル名 | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">\'$d\'</span> | <span class="nb">awk</span> <span class="s1">\'NR &gt; 1 {print}\'</span>\n</pre></div></div>\n\n<h4>\n<span id="任意のディレクトリ以下のファイルを検索" class="fragment"></span><a href="#%E4%BB%BB%E6%84%8F%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E4%BB%A5%E4%B8%8B%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%A4%9C%E7%B4%A2"><i class="fa fa-link"></i></a>任意のディレクトリ以下のファイルを検索</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>find ./ <span class="nt">-name</span> <span class="s1">\'*\'</span>|xargs <span class="nb">grep</span> <span class="s1">\'xxx\'</span>\n</pre></div></div>\n\n<h4>\n<span id="ファイルを空にする" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%A9%BA%E3%81%AB%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>ファイルを空にする</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat</span> /dev/null <span class="o">&gt;</span> sample.txt\n</pre></div></div>\n\n<p>一々テキストエディタ開いて削除とかいらない便利なやつ<br>\n/dev/nullについては下記をご参照ください<br>\n<a href="https://ja.wikipedia.org/wiki//dev/null" class="autolink" rel="nofollow noopener" target="_blank">https://ja.wikipedia.org/wiki//dev/null</a></p>\n\n<h4>\n<span id="ディレクトリ作成後そこへ移動" class="fragment"></span><a href="#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90%E5%BE%8C%E3%81%9D%E3%81%93%E3%81%B8%E7%A7%BB%E5%8B%95"><i class="fa fa-link"></i></a>ディレクトリ作成後そこへ移動</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">mkdir </span>dir_name <span class="p">;</span> <span class="nb">cd</span> <span class="nv">$_</span>\n</pre></div></div>\n\n<h4>\n<span id="文字コード変換" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89%E5%A4%89%E6%8F%9B"><i class="fa fa-link"></i></a>文字コード変換</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>perl <span class="nt">-MEncode</span> <span class="nt">-pe</span> <span class="s1">\'$_ = encode("utf8", decode("eucjp", $_))\'</span> eucjp.txt <span class="o">&gt;</span> utf.txt\n</pre></div></div>\n\n<h4>\n<span id="listen中のポート一覧" class="fragment"></span><a href="#listen%E4%B8%AD%E3%81%AE%E3%83%9D%E3%83%BC%E3%83%88%E4%B8%80%E8%A6%A7"><i class="fa fa-link"></i></a>Listen中のポート一覧</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>lsof <span class="nt">-Pan</span> <span class="nt">-i</span> tcp <span class="nt">-i</span> udp\n</pre></div></div>\n\n<p>ssでもいい気がするがこっちも</p>\n\n<h4>\n<span id="指定したポートを使ってるプロセスをkill" class="fragment"></span><a href="#%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%83%9D%E3%83%BC%E3%83%88%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%82%92kill"><i class="fa fa-link"></i></a>指定したポートを使ってるプロセスをkill</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>lsof <span class="nt">-i</span> :8080 | <span class="nb">awk</span> <span class="s1">\'{l=$2} END {print l}\'</span> | xargs <span class="nb">kill</span>\n</pre></div></div>\n\n<h4>\n<span id="任意のディレクトリのファイル数をカウント" class="fragment"></span><a href="#%E4%BB%BB%E6%84%8F%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%95%B0%E3%82%92%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88"><i class="fa fa-link"></i></a>任意のディレクトリのファイル数をカウント</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-F</span> |grep <span class="nt">-v</span> / |wc <span class="nt">-l</span>\n</pre></div></div>\n\n<p>試験的に作ったディレクトリを数えるために使えるやつ</p>\n\n<h4>\n<span id="指定ディレクトリ配下のファイルのパーミッションを見る" class="fragment"></span><a href="#%E6%8C%87%E5%AE%9A%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E9%85%8D%E4%B8%8B%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%91%E3%83%BC%E3%83%9F%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%A6%8B%E3%82%8B"><i class="fa fa-link"></i></a>指定ディレクトリ配下のファイルのパーミッションを見る</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>find <span class="nb">.</span> <span class="nt">-printf</span> <span class="s2">"%U %G %m %p</span><span class="se">\\n</span><span class="s2">"</span>\n</pre></div></div>\n\n<h4>\n<span id="バックアップ的なやつ" class="fragment"></span><a href="#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E7%9A%84%E3%81%AA%E3%82%84%E3%81%A4"><i class="fa fa-link"></i></a>バックアップ的なやつ</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cp </span>passwd<span class="o">{</span>,.bak<span class="o">}</span>\n</pre></div></div>\n\n<h4>\n<span id="パスの最後のスラッシュを削除じゃなければ何もしない" class="fragment"></span><a href="#%E3%83%91%E3%82%B9%E3%81%AE%E6%9C%80%E5%BE%8C%E3%81%AE%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E3%82%92%E5%89%8A%E9%99%A4%E3%81%98%E3%82%83%E3%81%AA%E3%81%91%E3%82%8C%E3%81%B0%E4%BD%95%E3%82%82%E3%81%97%E3%81%AA%E3%81%84"><i class="fa fa-link"></i></a>パスの最後のスラッシュを削除(じゃなければ何もしない)</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ MYDIR</span><span class="o">=</span><span class="k">${</span><span class="nv">MYDIR</span><span class="p">%/</span><span class="k">}</span>\n</pre></div></div>\n\n<h4>\n<span id="ディレクトリサイズが大きい順で表示" class="fragment"></span><a href="#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%8C%E5%A4%A7%E3%81%8D%E3%81%84%E9%A0%86%E3%81%A7%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>ディレクトリサイズが大きい順で表示</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">du</span> <span class="nt">-m</span> / <span class="nt">--max-depth</span><span class="o">=</span>3 <span class="nt">--exclude</span><span class="o">=</span><span class="s2">"/proc*"</span> | <span class="nb">sort</span> <span class="nt">-k1</span> <span class="nt">-n</span> <span class="nt">-r</span>\n</pre></div></div>\n\n<h4>\n<span id="拡張子を一括変換" class="fragment"></span><a href="#%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92%E4%B8%80%E6%8B%AC%E5%A4%89%E6%8F%9B"><i class="fa fa-link"></i></a>拡張子を一括変換</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="k">for </span>filename <span class="k">in</span> <span class="k">*</span>.txt<span class="p">;</span> <span class="k">do </span><span class="nb">mv</span> <span class="nv">$filename</span> <span class="k">${</span><span class="nv">filename</span><span class="p">%.txt</span><span class="k">}</span>.txt.old<span class="p">;</span> <span class="k">done</span>\n</pre></div></div>\n\n<p>txtからtxt.oldへ変換する</p>\n\n<h4>\n<span id="パスワードをランダム生成する" class="fragment"></span><a href="#%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>パスワードをランダム生成する</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">head</span> /dev/urandom | <span class="nb">tr</span> <span class="nt">-dc</span> A-Za-z0-9 | <span class="nb">head</span> <span class="nt">-c</span> 13 <span class="p">;</span> <span class="nb">echo</span> <span class="s1">\'\'</span>\n</pre></div></div>\n\n<p>テストユーザとかのパスワードが必要なときにとりあえず</p>\n\n<h4>\n<span id="連番ファイルの作成" class="fragment"></span><a href="#%E9%80%A3%E7%95%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>連番ファイルの作成</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">touch </span>foo_<span class="o">{</span>1..30<span class="o">}</span>.txt\n<span class="nv">$ </span><span class="nb">touch</span> <span class="o">{</span>A..Z<span class="o">}</span>.txt\n</pre></div></div>\n\n<h4>\n<span id="定期的にコマンドを実行" class="fragment"></span><a href="#%E5%AE%9A%E6%9C%9F%E7%9A%84%E3%81%AB%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>定期的にコマンドを実行</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do</span> <span class="sb">`</span><span class="nb">sleep </span>1<span class="p">;</span> say hello<span class="sb">`</span><span class="p">;</span> <span class="k">done</span>\n</pre></div></div>\n\n<h4>\n<span id="ファイル名を指定してファイルを保存する-curl" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B-curl"><i class="fa fa-link"></i></a>ファイル名を指定してファイルを保存する curl</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">-o</span> foo.txt https://hoge.com/fuga.txt <span class="nt">-o</span> bar.txt https://piyo.com/hogera.txt\n</pre></div></div>\n\n<h4>\n<span id="sortとuniqのイディオム" class="fragment"></span><a href="#sort%E3%81%A8uniq%E3%81%AE%E3%82%A4%E3%83%87%E3%82%A3%E3%82%AA%E3%83%A0"><i class="fa fa-link"></i></a>sortとuniqのイディオム</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>.. | <span class="nb">sort</span> | <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="nb">sort</span> <span class="nt">-nr</span>\n</pre></div></div>\n\n<h4>\n<span id="ds_storeを一括削除" class="fragment"></span><a href="#ds_store%E3%82%92%E4%B8%80%E6%8B%AC%E5%89%8A%E9%99%A4"><i class="fa fa-link"></i></a>.DS_storeを一括削除</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>find <span class="nb">.</span> <span class="nt">-name</span> <span class="s1">\'.DS_Store\'</span> <span class="nt">-type</span> f <span class="nt">-ls</span> <span class="nt">-delete</span>\n</pre></div></div>\n\n<p>憎きDS_Storeの一括削除</p>\n\n<h4>\n<span id="並列化してxargs" class="fragment"></span><a href="#%E4%B8%A6%E5%88%97%E5%8C%96%E3%81%97%E3%81%A6xargs"><i class="fa fa-link"></i></a>並列化してxargs</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nb">echo</span> <span class="s2">"aaa"</span> <span class="s2">"iii"</span> | xargs <span class="nt">-r</span> <span class="nt">-n</span> 1 <span class="nt">-P</span> 2 <span class="nb">echo</span> <span class="s2">"Output:"</span>\n</pre></div></div>\n\n<p>forでは不可能な並列実行を行う</p>\n\n<h4>\n<span id="ストップウォッチ的なやつ" class="fragment"></span><a href="#%E3%82%B9%E3%83%88%E3%83%83%E3%83%97%E3%82%A6%E3%82%A9%E3%83%83%E3%83%81%E7%9A%84%E3%81%AA%E3%82%84%E3%81%A4"><i class="fa fa-link"></i></a>ストップウォッチ的なやつ</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">time read</span>\n</pre></div></div>\n\n<p>Ctrl + Dを押したら止まる。</p>\n\n<h4>\n<span id="シスログを時間指定で見る" class="fragment"></span><a href="#%E3%82%B7%E3%82%B9%E3%83%AD%E3%82%B0%E3%82%92%E6%99%82%E9%96%93%E6%8C%87%E5%AE%9A%E3%81%A7%E8%A6%8B%E3%82%8B"><i class="fa fa-link"></i></a>シスログを時間指定で見る</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span> - <span class="s1">\'"開始時間" &lt; $1 &amp;&amp; $1 &lt;= "終了時間"\'</span> /抽出を行うログのPATH\n</pre></div></div>\n\n<h4>\n<span id="文字列を抜き出す" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E6%8A%9C%E3%81%8D%E5%87%BA%E3%81%99"><i class="fa fa-link"></i></a>文字列を抜き出す</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">\'abcde\'</span> | <span class="nb">awk</span> <span class="s1">\'{print substr($0, 2)}\'</span>\n</pre></div></div>\n\n<h4>\n<span id="あるディレクトリ配下のファイルを一括コピー" class="fragment"></span><a href="#%E3%81%82%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E9%85%8D%E4%B8%8B%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%B8%80%E6%8B%AC%E3%82%B3%E3%83%94%E3%83%BC"><i class="fa fa-link"></i></a>あるディレクトリ配下のファイルを一括コピー</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="k">for </span>txt <span class="k">in</span> <span class="k">$(</span>find <span class="nb">.</span> <span class="nt">-name</span> <span class="k">*</span>.txt<span class="k">)</span><span class="p">;</span> <span class="k">do </span><span class="nb">cp</span> <span class="nt">-ip</span> <span class="k">${</span><span class="nv">txt</span><span class="k">}</span> ~/work/ <span class="p">;</span> <span class="k">done</span>\n</pre></div></div>\n\n<h4>\n<span id="定期的にプロセス状態を監視" class="fragment"></span><a href="#%E5%AE%9A%E6%9C%9F%E7%9A%84%E3%81%AB%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E7%8A%B6%E6%85%8B%E3%82%92%E7%9B%A3%E8%A6%96"><i class="fa fa-link"></i></a>定期的にプロセス状態を監視</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="k">while </span><span class="nb">true</span> <span class="p">;</span> <span class="k">do </span>ps aux | <span class="nb">grep </span>httpd <span class="p">;</span> <span class="nb">echo</span> <span class="s2">""</span><span class="p">;</span> <span class="nb">sleep </span>2 <span class="p">;</span> <span class="k">done</span> <span class="p">;</span>\n</pre></div></div>\n\n<p>watchあるならそっちでも。ログ見やすいから個人的にはこっち</p>\n\n<h4>\n<span id="タイムスタンプつきでtailf" class="fragment"></span><a href="#%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%97%E3%81%A4%E3%81%8D%E3%81%A7tailf"><i class="fa fa-link"></i></a>タイムスタンプつきでtailf</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>tailf file | <span class="k">while </span><span class="nb">read</span><span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="s2">"</span><span class="k">$(</span><span class="nb">date</span> +%T.%N<span class="k">)</span><span class="s2"> </span><span class="nv">$REPLY</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span>\n</pre></div></div>\n\n<h4>\n<span id="表示整形-column" class="fragment"></span><a href="#%E8%A1%A8%E7%A4%BA%E6%95%B4%E5%BD%A2-column"><i class="fa fa-link"></i></a>表示整形 column</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>mount | column <span class="nt">-t</span>\n</pre></div></div>\n\n<p>セパレータを指定することもできる</p>\n\n<h4>\n<span id="grepする時間を指定して出力がなければエラー終了" class="fragment"></span><a href="#grep%E3%81%99%E3%82%8B%E6%99%82%E9%96%93%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E5%87%BA%E5%8A%9B%E3%81%8C%E3%81%AA%E3%81%91%E3%82%8C%E3%81%B0%E3%82%A8%E3%83%A9%E3%83%BC%E7%B5%82%E4%BA%86"><i class="fa fa-link"></i></a>grepする時間を指定して出力がなければエラー終了</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">timeout </span>5 tailf hoge.txt | <span class="nb">grep</span> <span class="nt">-q</span> <span class="nt">--line-buffered</span> <span class="s2">"hoge"</span>\n</pre></div></div>\n\n<h4>\n<span id="ユーザ毎のcpu使用率を見る" class="fragment"></span><a href="#%E3%83%A6%E3%83%BC%E3%82%B6%E6%AF%8E%E3%81%AEcpu%E4%BD%BF%E7%94%A8%E7%8E%87%E3%82%92%E8%A6%8B%E3%82%8B"><i class="fa fa-link"></i></a>ユーザ毎のCPU使用率を見る</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ps aux | <span class="nb">awk</span> <span class="s1">\'{ if(NR&gt;1){p[$1] += $3; n[$1]++ }}END{for(i in p) print p[i], n[i], i}\'</span>\n</pre></div></div>\n\n<h2>\n<span id="awkつかうやつ" class="fragment"></span><a href="#awk%E3%81%A4%E3%81%8B%E3%81%86%E3%82%84%E3%81%A4"><i class="fa fa-link"></i></a>AWKつかうやつ</h2>\n\n<h4>\n<span id="文字数単語数をカウントする" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E6%95%B0%E5%8D%98%E8%AA%9E%E6%95%B0%E3%82%92%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>文字数/単語数をカウントする</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 文字数カウント(wc -c)</span>\n<span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'{n+=length($0)} END{print n}\'</span> filename\n\n<span class="c"># 単語数カウント(wc -w)</span>\n<span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'{n+=NF} END{print n}\'</span> filename\n\n<span class="c"># 行数カウント(wc -l)</span>\n<span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'END{print NR}\'</span> filename\n</pre></div></div>\n\n<h4>\n<span id="指定行から指定行まで表示" class="fragment"></span><a href="#%E6%8C%87%E5%AE%9A%E8%A1%8C%E3%81%8B%E3%82%89%E6%8C%87%E5%AE%9A%E8%A1%8C%E3%81%BE%E3%81%A7%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>指定行から指定行まで表示</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'NR==10,NR==20\'</span>\n</pre></div></div>\n\n<h4>\n<span id="奇数偶数行のみ表示" class="fragment"></span><a href="#%E5%A5%87%E6%95%B0%E5%81%B6%E6%95%B0%E8%A1%8C%E3%81%AE%E3%81%BF%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>奇数/偶数行のみ表示</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 奇数行</span>\n<span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'NR%2\'</span> filename\n\n<span class="c"># 偶数行</span>\n<span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'NR%2==0\'</span> filename\n</pre></div></div>\n\n<h4>\n<span id="プロセス名で一括kill" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E5%90%8D%E3%81%A7%E4%B8%80%E6%8B%ACkill"><i class="fa fa-link"></i></a>プロセス名で一括kill</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">kill</span> <span class="sb">`</span>ps <span class="nt">-aux</span> | <span class="nb">grep</span> <span class="s2">"プロセス名"</span> | <span class="nb">awk</span> <span class="s1">\'{print $2;}\'</span><span class="sb">`</span>\n</pre></div></div>\n\n<h2>\n<span id="危険なシェル芸" class="fragment"></span><a href="#%E5%8D%B1%E9%99%BA%E3%81%AA%E3%82%B7%E3%82%A7%E3%83%AB%E8%8A%B8"><i class="fa fa-link"></i></a>危険なシェル芸</h2>\n\n<p>世の中には実行すべきではないシェル芸も存在する。<br>\nそれがこのfork爆弾だ。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>:<span class="o">(){</span> :|:&amp; <span class="o">}</span><span class="p">;</span>:\n</pre></div></div>\n\n<p>たった13文字でFork爆弾として機能する凄いやつ。<br>\n実行した瞬間からfork(2)を実行しその子プロセスもfork(2)を実行。<br>\nプロセステーブルを埋め尽くしkillすることも出来なくする恐ろしいコマンド。<br>\n基本的には実行したら最後でOSの再起動しか対処方法は無いといわれている。</p>\n\n<p>ちなみにwindowsでも実行することが出来るらしい</p>\n\n<div class="code-frame" data-lang="">\n<div class="code-lang"><span class="bold">windows版Fork爆弾</span></div>\n<div class="highlight"><pre>&gt; for /l %a in (0,0,0) do start\n</pre></div>\n</div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>いろいろ追記してたらただのコマンド集的な感じになった。<br>\nジャンル分けするのはめんどいのでやってない。<br>\n(そもそもがメモ帳からのコピペまんま)<br>\n綺麗にいい感じにまとまってるサイトあったら教えてください。</p>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p><a href="https://qiita.com/toyohama/items/455b786e775ca60c2704" class="autolink" id="reference-8d4fc7cf8265cfb3daa1">https://qiita.com/toyohama/items/455b786e775ca60c2704</a><br>\n<a href="https://qiita.com/todays-mitsui/items/5c58b2a808b4a31f14e1" class="autolink" id="reference-432eae847aaa8bed3c04">https://qiita.com/todays-mitsui/items/5c58b2a808b4a31f14e1</a></p>\n\n<p>Fork爆弾<br>\n<a href="https://ja.wikipedia.org/wiki/Fork%E7%88%86%E5%BC%BE" class="autolink" rel="nofollow noopener" target="_blank">https://ja.wikipedia.org/wiki/Fork%E7%88%86%E5%BC%BE</a></p>\n', 'body': '![index.jpeg](https://qiita-image-store.s3.amazonaws.com/0/258841/51840aa0-94f6-9a46-c443-0efc611791c5.jpeg)\n\n\n愛用しているワンライナー\n特にきれいにまとめてる系の記事ではない\n\n## 背景\n\n個人的に愛用しているワンライナーコマンド集\naliasが許されない共用マシンとかで実行するときに見る用\n\nシェル芸人への憧れ強め。全ての作業を1発で終わらせる姿には感動。\n洗練された無駄の無い技術はかっこいいですね。\n\nシェル芸人さんのような作品とは程遠いけど色々使っていく中で便利だと思ったワンライナー集\nシェル芸人については下記をご参照ください\nhttp://www.usptomo.com/PAGE=20101025WHATS\n\nシェル芸人への道への第一歩として読むのにいい記事があったのでこちらもご紹介\nhttps://qiita.com/t_nakayama0714/items/bfe4852e0535858ee662\n\nUNIX哲学は大変興味深いですね。\n下記も結構面白かったのでお時間ある方は是非ご覧ください。\nhttps://futurismo.biz/archives/1500/\n\n## ワンライナー\n\n#### 一つ前のディレクトリへ戻る\n\n``` bash\n$ cd -\n```\n\nめちゃくちゃ使うのに意外と入門書に載ってないやつ。\n\n#### スクリプトが置かれている場所の絶対パスとスクリプト名を取得\n\n``` bash\n$ echo $(cd $(dirname $0) && pwd)/$(basename $0)\n```\n\nスクリプト内でフルパスが欲しいときって意外とあるから使うやつ\n\n#### 物理メモリを多く使用しているプロセスを抽出\n\n``` bash\n$ ps aux | sort -n -k 6 | tail -n 10\n```\n\n#### CPU使用率が高いプロセスを見つける\n\n``` bash\n$ vmstat 1 | awk \'{print strftime("%y/%m/%d %H:%M:%S"), $0}\'\n```\n\n#### ヘッダーとフッターを除外して表示\n\n``` bash\n$ cat ファイル名 | sed -e \'$d\' | awk \'NR > 1 {print}\'\n```\n\n#### 任意のディレクトリ以下のファイルを検索\n\n``` bash\n$ find ./ -name \'*\'|xargs grep \'xxx\'\n```\n\n#### ファイルを空にする\n\n``` bash\n$ cat /dev/null > sample.txt\n```\n\n一々テキストエディタ開いて削除とかいらない便利なやつ\n/dev/nullについては下記をご参照ください\nhttps://ja.wikipedia.org/wiki//dev/null\n\n#### ディレクトリ作成後そこへ移動\n\n``` bash\n$ mkdir dir_name ; cd $_\n```\n\n#### 文字コード変換\n\n``` bash\n$ perl -MEncode -pe \'$_ = encode("utf8", decode("eucjp", $_))\' eucjp.txt > utf.txt\n```\n\n#### Listen中のポート一覧\n\n``` bash\n$ lsof -Pan -i tcp -i udp\n```\n\nssでもいい気がするがこっちも\n\n#### 指定したポートを使ってるプロセスをkill\n\n``` bash\n$ lsof -i :8080 | awk \'{l=$2} END {print l}\' | xargs kill\n```\n\n#### 任意のディレクトリのファイル数をカウント\n\n``` bash\n$ ls -F |grep -v / |wc -l\n```\n\n試験的に作ったディレクトリを数えるために使えるやつ\n\n#### 指定ディレクトリ配下のファイルのパーミッションを見る\n\n``` bash\n$ find . -printf "%U %G %m %p\\n"\n```\n\n#### バックアップ的なやつ\n\n``` bash\n$ cp passwd{,.bak}\n```\n\n#### パスの最後のスラッシュを削除(じゃなければ何もしない)\n\n``` bash\n$ MYDIR=${MYDIR%/}\n```\n\n#### ディレクトリサイズが大きい順で表示\n\n``` bash\n$ du -m / --max-depth=3 --exclude="/proc*" | sort -k1 -n -r\n```\n\n#### 拡張子を一括変換\n\n``` bash\n$ for filename in *.txt; do mv $filename ${filename%.txt}.txt.old; done\n```\n\ntxtからtxt.oldへ変換する\n\n#### パスワードをランダム生成する\n\n``` bash\n$ head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo \'\'\n```\n\nテストユーザとかのパスワードが必要なときにとりあえず\n\n#### 連番ファイルの作成\n\n``` bash\n$ touch foo_{1..30}.txt\n$ touch {A..Z}.txt\n```\n\n#### 定期的にコマンドを実行\n\n``` bash\n$ while true; do `sleep 1; say hello`; done\n```\n\n#### ファイル名を指定してファイルを保存する curl\n\n``` bash\n$ curl -o foo.txt https://hoge.com/fuga.txt -o bar.txt https://piyo.com/hogera.txt\n```\n\n#### sortとuniqのイディオム\n\n``` bash\n$ .. | sort | uniq -c | sort -nr\n```\n\n#### .DS_storeを一括削除\n\n``` bash\n$ find . -name \'.DS_Store\' -type f -ls -delete\n```\n\n憎きDS_Storeの一括削除\n\n#### 並列化してxargs\n\n``` bash\necho "aaa" "iii" | xargs -r -n 1 -P 2 echo "Output:"\n```\n\nforでは不可能な並列実行を行う\n\n#### ストップウォッチ的なやつ\n\n``` bash\n$ time read\n```\n\nCtrl + Dを押したら止まる。\n\n#### シスログを時間指定で見る\n\n``` bash\n$ awk -F - \'"開始時間" < $1 && $1 <= "終了時間"\' /抽出を行うログのPATH\n```\n\n#### 文字列を抜き出す\n\n``` bash\n$ echo \'abcde\' | awk \'{print substr($0, 2)}\'\n```\n\n#### あるディレクトリ配下のファイルを一括コピー\n\n``` bash\n$ for txt in $(find . -name *.txt); do cp -ip ${txt} ~/work/ ; done\n```\n\n#### 定期的にプロセス状態を監視\n\n``` bash\n$ while true ; do ps aux | grep httpd ; echo ""; sleep 2 ; done ;\n```\n\nwatchあるならそっちでも。ログ見やすいから個人的にはこっち\n\n#### タイムスタンプつきでtailf\n\n``` bash\ntailf file | while read; do echo "$(date +%T.%N) $REPLY"; done\n```\n\n#### 表示整形 column\n\n``` bash \n$ mount | column -t\n```\n\nセパレータを指定することもできる\n\n#### grepする時間を指定して出力がなければエラー終了\n\n``` bash\n$ timeout 5 tailf hoge.txt | grep -q --line-buffered "hoge"\n```\n\n#### ユーザ毎のCPU使用率を見る\n\n``` bash\n$ ps aux | awk \'{ if(NR>1){p[$1] += $3; n[$1]++ }}END{for(i in p) print p[i], n[i], i}\'\n```\n\n## AWKつかうやつ\n\n#### 文字数/単語数をカウントする\n\n``` bash\n# 文字数カウント(wc -c)\n$ awk \'{n+=length($0)} END{print n}\' filename\n\n# 単語数カウント(wc -w)\n$ awk \'{n+=NF} END{print n}\' filename\n\n# 行数カウント(wc -l)\n$ awk \'END{print NR}\' filename\n```\n\n#### 指定行から指定行まで表示\n\n``` bash\n$ awk \'NR==10,NR==20\'\n```\n\n#### 奇数/偶数行のみ表示\n\n``` bash\n# 奇数行\n$ awk \'NR%2\' filename\n\n# 偶数行\n$ awk \'NR%2==0\' filename\n```\n\n#### プロセス名で一括kill\n\n``` bash\n$ kill `ps -aux | grep "プロセス名" | awk \'{print $2;}\'`\n```\n\n## 危険なシェル芸\n\n世の中には実行すべきではないシェル芸も存在する。\nそれがこのfork爆弾だ。\n\n``` bash\n$ :(){ :|:& };:\n```\n\nたった13文字でFork爆弾として機能する凄いやつ。\n実行した瞬間からfork(2)を実行しその子プロセスもfork(2)を実行。\nプロセステーブルを埋め尽くしkillすることも出来なくする恐ろしいコマンド。\n基本的には実行したら最後でOSの再起動しか対処方法は無いといわれている。\n\nちなみにwindowsでも実行することが出来るらしい\n\n``` :windows版Fork爆弾\n> for /l %a in (0,0,0) do start\n```\n\n## まとめ\n\nいろいろ追記してたらただのコマンド集的な感じになった。\nジャンル分けするのはめんどいのでやってない。\n(そもそもがメモ帳からのコピペまんま)\n綺麗にいい感じにまとまってるサイトあったら教えてください。\n\n## 参考リンク\n\nhttps://qiita.com/toyohama/items/455b786e775ca60c2704\nhttps://qiita.com/todays-mitsui/items/5c58b2a808b4a31f14e1\n\nFork爆弾\nhttps://ja.wikipedia.org/wiki/Fork%E7%88%86%E5%BC%BE\n', 'coediting': False, 'comments_count': 7, 'created_at': '2018-12-20T21:46:16+09:00', 'group': None, 'id': '55b73d8ae75993dc10c1', 'likes_count': 751, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Bash', 'versions': []}, {'name': 'Zsh', 'versions': []}, {'name': 'Linux', 'versions': []}, {'name': 'UNIX', 'versions': []}], 'title': '仕事で使えるLinux ワンライナー集', 'updated_at': '2019-01-06T20:00:56+09:00', 'url': 'https://qiita.com/ryuichi1208/items/55b73d8ae75993dc10c1', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/8555ba6c967d58d12581ee6750b6fc4fdbd4525f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37303966313462312d386330342d323433342d326663372d6631623334616134616466662e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/8555ba6c967d58d12581ee6750b6fc4fdbd4525f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37303966313462312d386330342d323433342d326663372d6631623334616134616466662e706e67" alt="og_image.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/709f14b1-8c04-2434-2fc7-f1b34aa4adff.png"></a></p>\n\n<h1>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h1>\n\n<p>JJUG CCC Fall 2018の資料のまとめです。現在編集中<br>\nタイムテーブルは下記<br>\n<a href="https://docs.google.com/spreadsheets/d/1cyNPjk8doq26FgjhLVwA0Pw2grGFwxqo4yVXqJgQCTE/edit#gid=413114967" class="autolink" rel="nofollow noopener" target="_blank">https://docs.google.com/spreadsheets/d/1cyNPjk8doq26FgjhLVwA0Pw2grGFwxqo4yVXqJgQCTE/edit#gid=413114967</a></p>\n\n<h1>\n<span id="a--b" class="fragment"></span><a href="#a--b"><i class="fa fa-link"></i></a>A + B</h1>\n\n<h3>\n<span id="ツール比較しながら語るorマッパーとdbマイグレーションの実際のところ" class="fragment"></span><a href="#%E3%83%84%E3%83%BC%E3%83%AB%E6%AF%94%E8%BC%83%E3%81%97%E3%81%AA%E3%81%8C%E3%82%89%E8%AA%9E%E3%82%8Bor%E3%83%9E%E3%83%83%E3%83%91%E3%83%BC%E3%81%A8db%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9F%E9%9A%9B%E3%81%AE%E3%81%A8%E3%81%93%E3%82%8D"><i class="fa fa-link"></i></a>ツール比較しながら語るO/RマッパーとDBマイグレーションの実際のところ</h3>\n\n<p>(渡辺 祐(<a href="/nabedge" class="user-mention js-hovercard" title="nabedge" data-hovercard-target-type="user" data-hovercard-target-name="nabedge">@nabedge</a>)さん) #ccc_a1<br>\n<a href="https://www.slideshare.net/nabedge/ordb" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/nabedge/ordb</a></p>\n\n<h3>\n<span id="モジュールグラフが作られる様子を学ぼう" class="fragment"></span><a href="#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%B0%E3%83%A9%E3%83%95%E3%81%8C%E4%BD%9C%E3%82%89%E3%82%8C%E3%82%8B%E6%A7%98%E5%AD%90%E3%82%92%E5%AD%A6%E3%81%BC%E3%81%86"><i class="fa fa-link"></i></a>モジュールグラフが作られる様子を学ぼう</h3>\n\n<p>(opengl-8080さん) #ccc_a2a<br>\n<a href="https://qiita.com/opengl-8080/items/bcac846ba604a86fc4d4" class="autolink" id="reference-67aad184a6cdb7c377f7">https://qiita.com/opengl-8080/items/bcac846ba604a86fc4d4</a></p>\n\n<h3>\n<span id="line-で広告プラットフォームを-java--golang-で立ち上げた話" class="fragment"></span><a href="#line-%E3%81%A7%E5%BA%83%E5%91%8A%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%92-java--golang-%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%9F%E8%A9%B1"><i class="fa fa-link"></i></a>LINE で広告プラットフォームを Java + Golang で立ち上げた話</h3>\n\n<p>(Tokuhiro Matsunoさん) #ccc_a2b</p>\n\n<h3>\n<span id="ibm-cloudとkubernetesでspring-bootのマイクロサービスを簡単に" class="fragment"></span><a href="#ibm-cloud%E3%81%A8kubernetes%E3%81%A7spring-boot%E3%81%AE%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E7%B0%A1%E5%8D%98%E3%81%AB"><i class="fa fa-link"></i></a>"IBM CloudとKubernetesでSpring Bootのマイクロサービスを簡単に！</h3>\n\n<p>(日本アイ・ビー・エム株式会社) #ccc_a3"<br>\n<a href="https://speakerdeck.com/taijihagino/java-spring-boot-with-kubernetes-on-ibm-cloud" class="autolink" rel="nofollow noopener" target="_blank">https://speakerdeck.com/taijihagino/java-spring-boot-with-kubernetes-on-ibm-cloud</a></p>\n\n<h3>\n<span id="エムスリーでのkotlinへの取り組み" class="fragment"></span><a href="#%E3%82%A8%E3%83%A0%E3%82%B9%E3%83%AA%E3%83%BC%E3%81%A7%E3%81%AEkotlin%E3%81%B8%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF"><i class="fa fa-link"></i></a>"エムスリーでのKotlinへの取り組み</h3>\n\n<p>(エムスリー株式会社) #ccc_a4"<br>\n<a href="https://speakerdeck.com/m3_engineering/jjug-ccc-2018fall-kotlin-in-m3" class="autolink" rel="nofollow noopener" target="_blank">https://speakerdeck.com/m3_engineering/jjug-ccc-2018fall-kotlin-in-m3</a></p>\n\n<h3>\n<span id="deep-dive-into-instanceof" class="fragment"></span><a href="#deep-dive-into-instanceof"><i class="fa fa-link"></i></a>"Deep dive into instanceof</h3>\n\n<p>（スマートニュース株式会社) #ccc_a5"</p>\n\n<h3>\n<span id="オイラ大地の18年拡張し続けているecサイトをspring-bootとk8s-on-azureでマイクロサービス化する事例" class="fragment"></span><a href="#%E3%82%AA%E3%82%A4%E3%83%A9%E5%A4%A7%E5%9C%B0%E3%81%AE18%E5%B9%B4%E6%8B%A1%E5%BC%B5%E3%81%97%E7%B6%9A%E3%81%91%E3%81%A6%E3%81%84%E3%82%8Bec%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92spring-boot%E3%81%A8k8s-on-azure%E3%81%A7%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E5%8C%96%E3%81%99%E3%82%8B%E4%BA%8B%E4%BE%8B"><i class="fa fa-link"></i></a>オイラ大地の18年拡張し続けているECサイトをSpring Bootとk8s on Azureでマイクロサービス化する事例</h3>\n\n<p>(オイシックス・ラ・大地株式会社) #ccc_a6<br>\n<a href="https://www.slideshare.net/hiroakikobayashi1806/18ecspring-bootk8s-on-azure" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/hiroakikobayashi1806/18ecspring-bootk8s-on-azure</a></p>\n\n<h3>\n<span id="gcを発生させないjvmとコーディングスタイル" class="fragment"></span><a href="#gc%E3%82%92%E7%99%BA%E7%94%9F%E3%81%95%E3%81%9B%E3%81%AA%E3%81%84jvm%E3%81%A8%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB"><i class="fa fa-link"></i></a>GCを発生させないJVMとコーディングスタイル</h3>\n\n<p>(数村憲治さん) #ccc_a7<br>\n<a href="https://www.slideshare.net/kenjikazumura/gcjvm" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/kenjikazumura/gcjvm</a></p>\n\n<h1>\n<span id="c--d" class="fragment"></span><a href="#c--d"><i class="fa fa-link"></i></a>C + D</h1>\n\n<h3>\n<span id="超上級zgcのデータ構造とアルゴリズム超入門--設計実装編-" class="fragment"></span><a href="#%E8%B6%85%E4%B8%8A%E7%B4%9Azgc%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%81%A8%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E8%B6%85%E5%85%A5%E9%96%80--%E8%A8%AD%E8%A8%88%E5%AE%9F%E8%A3%85%E7%B7%A8-"><i class="fa fa-link"></i></a>[超上級]ZGCのデータ構造とアルゴリズム超入門 -設計・実装編-</h3>\n\n<p>(伊藤 智博さん) #ccc_c1</p>\n\n<h3>\n<span id="graalvm超入門" class="fragment"></span><a href="#graalvm%E8%B6%85%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>GraalVM超入門</h3>\n\n<p>(Kiyotaka Suzuki(<a href="/tamtam180" class="user-mention js-hovercard" title="tamtam180" data-hovercard-target-type="user" data-hovercard-target-name="tamtam180">@tamtam180</a>)さん) #ccc_c2<br>\n<a href="https://www.slideshare.net/tamrin69/getting-started-graalvm" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/tamrin69/getting-started-graalvm</a></p>\n\n<h3>\n<span id="beginning-jakarta-ee-glassfish-and-payara" class="fragment"></span><a href="#beginning-jakarta-ee-glassfish-and-payara"><i class="fa fa-link"></i></a>"Beginning Jakarta EE, GlassFish and Payara</h3>\n\n<p>(Payara Services Ltd) #ccc_c3"<br>\n<a href="https://www.slideshare.net/khasunuma/beginning-jakartaeeglassfishpayara" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/khasunuma/beginning-jakartaeeglassfishpayara</a></p>\n\n<h3>\n<span id="jdk付属ツールにパッチを出しまくったワケ" class="fragment"></span><a href="#jdk%E4%BB%98%E5%B1%9E%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AB%E3%83%91%E3%83%83%E3%83%81%E3%82%92%E5%87%BA%E3%81%97%E3%81%BE%E3%81%8F%E3%81%A3%E3%81%9F%E3%83%AF%E3%82%B1"><i class="fa fa-link"></i></a>JDK付属ツールにパッチを出しまくったワケ</h3>\n\n<p>(末永 恭正さん) #ccc_c4<br>\n<a href="https://www.slideshare.net/YaSuenag/jdk-125949908" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/YaSuenag/jdk-125949908</a></p>\n\n<h3>\n<span id="既存アプリケーションでkotlinを導入してみた" class="fragment"></span><a href="#%E6%97%A2%E5%AD%98%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A7kotlin%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F"><i class="fa fa-link"></i></a>既存アプリケーションでKotlinを導入してみた</h3>\n\n<p>(フリュー株式会社) #ccc_c5<br>\n<a href="https://docs.google.com/presentation/d/1wTm_eSbsM2ihfz27QpSHzuRcCIhcRYKom-Vx_-FfUts/edit?usp=sharing" class="autolink" rel="nofollow noopener" target="_blank">https://docs.google.com/presentation/d/1wTm_eSbsM2ihfz27QpSHzuRcCIhcRYKom-Vx_-FfUts/edit?usp=sharing</a></p>\n\n<h3>\n<span id="jshellではじめる最新java" class="fragment"></span><a href="#jshell%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E6%9C%80%E6%96%B0java"><i class="fa fa-link"></i></a>JShellではじめる最新Java</h3>\n\n<p>(きしだなおきさん) #ccc_c6<br>\n<a href="https://qiita.com/nowokay/items/80e8ccd50f6749846dd6" class="autolink" id="reference-7cf0d0b344d2ba026dd8">https://qiita.com/nowokay/items/80e8ccd50f6749846dd6</a></p>\n\n<h3>\n<span id="scala-とマイクロサービスでつくる証券会社とスタートアップ" class="fragment"></span><a href="#scala-%E3%81%A8%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A7%E3%81%A4%E3%81%8F%E3%82%8B%E8%A8%BC%E5%88%B8%E4%BC%9A%E7%A4%BE%E3%81%A8%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%A2%E3%83%83%E3%83%97"><i class="fa fa-link"></i></a>"Scala とマイクロサービスでつくる証券会社とスタートアップ</h3>\n\n<p>（株式会社FOLIO）#ccc_c7"<br>\n<a href="https://speakerdeck.com/mura_mi/folio-in-jjug-ccc-2018-fall" class="autolink" rel="nofollow noopener" target="_blank">https://speakerdeck.com/mura_mi/folio-in-jjug-ccc-2018-fall</a></p>\n\n<h2>\n<span id="e--f" class="fragment"></span><a href="#e--f"><i class="fa fa-link"></i></a>E + F</h2>\n\n<h3>\n<span id="jjug基調講演" class="fragment"></span><a href="#jjug%E5%9F%BA%E8%AA%BF%E8%AC%9B%E6%BC%94"><i class="fa fa-link"></i></a>"【JJUG基調講演】</h3>\n\n<p>Javaの未来を考えよう #ccc_e1"</p>\n\n<h3>\n<span id="oracle基調講演" class="fragment"></span><a href="#oracle%E5%9F%BA%E8%AA%BF%E8%AC%9B%E6%BC%94"><i class="fa fa-link"></i></a>"【ORACLE基調講演】</h3>\n\n<p>Java Concurrency, A(nother) Peek Under the Hood (David Buck)<br>\n #ccc_e2"</p>\n\n<h3>\n<span id="思考停止しないアーキテクチャ設計" class="fragment"></span><a href="#%E6%80%9D%E8%80%83%E5%81%9C%E6%AD%A2%E3%81%97%E3%81%AA%E3%81%84%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E8%A8%AD%E8%A8%88"><i class="fa fa-link"></i></a>思考停止しないアーキテクチャ設計</h3>\n\n<p>(川島義隆さん) #ccc_e3<br>\n<a href="https://www.slideshare.net/kawasima/jjug-ccc-2018-fall" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/kawasima/jjug-ccc-2018-fall</a></p>\n\n<h3>\n<span id="複雑なドメインに泥臭く立ち向かう" class="fragment"></span><a href="#%E8%A4%87%E9%9B%91%E3%81%AA%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%81%AB%E6%B3%A5%E8%87%AD%E3%81%8F%E7%AB%8B%E3%81%A1%E5%90%91%E3%81%8B%E3%81%86"><i class="fa fa-link"></i></a>"複雑なドメインに泥臭く立ち向かう</h3>\n\n<p>(株式会社エスエムエス) #ccc_e4"<br>\n<a href="https://speakerdeck.com/sukun1899/fu-za-nadomeinnini-chou-kuli-tixiang-kau" class="autolink" rel="nofollow noopener" target="_blank">https://speakerdeck.com/sukun1899/fu-za-nadomeinnini-chou-kuli-tixiang-kau</a></p>\n\n<h3>\n<span id="java-を活用したマイクロサービスのための-kubernetes-活用" class="fragment"></span><a href="#java-%E3%82%92%E6%B4%BB%E7%94%A8%E3%81%97%E3%81%9F%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE-kubernetes-%E6%B4%BB%E7%94%A8"><i class="fa fa-link"></i></a>"Java を活用したマイクロサービスのための Kubernetes 活用</h3>\n\n<p>(日本マイクロソフト株式会社) #ccc_e5"</p>\n\n<h3>\n<span id="コードをどまんなかに据えた設計アプローチ" class="fragment"></span><a href="#%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E3%81%A9%E3%81%BE%E3%82%93%E3%81%AA%E3%81%8B%E3%81%AB%E6%8D%AE%E3%81%88%E3%81%9F%E8%A8%AD%E8%A8%88%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81"><i class="fa fa-link"></i></a>コードをどまんなかに据えた設計アプローチ</h3>\n\n<p>(irofさん) #ccc_e6<br>\n<a href="https://speakerdeck.com/irof/kodowodomannakaniju-etashe-ji-apuroti" class="autolink" rel="nofollow noopener" target="_blank">https://speakerdeck.com/irof/kodowodomannakaniju-etashe-ji-apuroti</a></p>\n\n<h2>\n<span id="g--h" class="fragment"></span><a href="#g--h"><i class="fa fa-link"></i></a>G + H</h2>\n\n<h3>\n<span id="spring-boot-の-web-アプリケーションを-docker-に載せて-aws-ecs-で動かしている話" class="fragment"></span><a href="#spring-boot-%E3%81%AE-web-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92-docker-%E3%81%AB%E8%BC%89%E3%81%9B%E3%81%A6-aws-ecs-%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E8%A9%B1"><i class="fa fa-link"></i></a>Spring Boot の Web アプリケーションを Docker に載せて AWS ECS で動かしている話</h3>\n\n<p>(福嶋航さん) #ccc_g1</p>\n\n<h3>\n<span id="マネーフォワードのアカウントアグリゲーションの現状と課題点についてselenium-webdriverとヘッドレスchromeを用いたスクレイピング" class="fragment"></span><a href="#%E3%83%9E%E3%83%8D%E3%83%BC%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%89%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%A2%E3%82%B0%E3%83%AA%E3%82%B2%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%8F%BE%E7%8A%B6%E3%81%A8%E8%AA%B2%E9%A1%8C%E7%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6selenium-webdriver%E3%81%A8%E3%83%98%E3%83%83%E3%83%89%E3%83%AC%E3%82%B9chrome%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>"マネーフォワードのアカウントアグリゲーションの現状と課題点について／Selenium WebDriverとヘッドレスChromeを用いたスクレイピング</h3>\n\n<p>(株式会社マネーフォワード) #ccc_g2"</p>\n\n<h3>\n<span id="生粋のkotlin-loverによるlineのkotlinの話" class="fragment"></span><a href="#%E7%94%9F%E7%B2%8B%E3%81%AEkotlin-lover%E3%81%AB%E3%82%88%E3%82%8Bline%E3%81%AEkotlin%E3%81%AE%E8%A9%B1"><i class="fa fa-link"></i></a>"生粋のKotlin LoverによるLINEのKotlinの話</h3>\n\n<p>(LINE 株式会社) #ccc_g3"</p>\n\n<h3>\n<span id="今こそstream-api入門" class="fragment"></span><a href="#%E4%BB%8A%E3%81%93%E3%81%9Dstream-api%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>今こそStream API入門</h3>\n\n<p>(櫻庭 祐一さん) #ccc_g4<br>\n<a href="https://www.slideshare.net/skrb/stream-api-125945709" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/skrb/stream-api-125945709</a></p>\n\n<h3>\n<span id="migration-guide-from-java-8-to-java-11" class="fragment"></span><a href="#migration-guide-from-java-8-to-java-11"><i class="fa fa-link"></i></a>Migration Guide from Java 8 to Java 11</h3>\n\n<p>(KUBOTA Yujiさん) #ccc_g5<br>\n<a href="https://gist.github.com/ykubota/b37a62de579dc92d02c9483974160c67" class="autolink" rel="nofollow noopener" target="_blank">https://gist.github.com/ykubota/b37a62de579dc92d02c9483974160c67</a></p>\n\n<h3>\n<span id="秒間-200000-reqsec-をさばく広告入札システムを支えるパフォーマンスチューニング術" class="fragment"></span><a href="#%E7%A7%92%E9%96%93-200000-reqsec-%E3%82%92%E3%81%95%E3%81%B0%E3%81%8F%E5%BA%83%E5%91%8A%E5%85%A5%E6%9C%AD%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E6%94%AF%E3%81%88%E3%82%8B%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E8%A1%93"><i class="fa fa-link"></i></a>"秒間 200,000 Req/sec をさばく広告入札システムを支えるパフォーマンスチューニング術</h3>\n\n<p>(ウルシステムズ株式会社) #ccc_g6"<br>\n<a href="https://www.slideshare.net/mobile/hiroiso/200000-reqsec" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/mobile/hiroiso/200000-reqsec</a></p>\n\n<h3>\n<span id="マイクロソフト牛尾さん渡米直前記念-外資系企業で働くエンジニアの生産性向上物語" class="fragment"></span><a href="#%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%BD%E3%83%95%E3%83%88%E7%89%9B%E5%B0%BE%E3%81%95%E3%82%93%E6%B8%A1%E7%B1%B3%E7%9B%B4%E5%89%8D%E8%A8%98%E5%BF%B5-%E5%A4%96%E8%B3%87%E7%B3%BB%E4%BC%81%E6%A5%AD%E3%81%A7%E5%83%8D%E3%81%8F%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E7%94%9F%E7%94%A3%E6%80%A7%E5%90%91%E4%B8%8A%E7%89%A9%E8%AA%9E"><i class="fa fa-link"></i></a>"「マイクロソフト牛尾さん渡米直前記念」 \u3000外資系企業で働くエンジニアの生産性向上物語</h3>\n\n<p>(日本マイクロソフト株式会社) #ccc_g7"</p>\n\n<h1>\n<span id="i" class="fragment"></span><a href="#i"><i class="fa fa-link"></i></a>I</h1>\n\n<h3>\n<span id="dont-go-java" class="fragment"></span><a href="#dont-go-java"><i class="fa fa-link"></i></a>Don\'t Go, Java</h3>\n\n<p>(Chris Engelbert) #ccc_i1</p>\n\n<h3>\n<span id="the-silence-of-the-lambs-inspecting-source-code-and-binaries-in-continuous-delivery-pipelines" class="fragment"></span><a href="#the-silence-of-the-lambs-inspecting-source-code-and-binaries-in-continuous-delivery-pipelines"><i class="fa fa-link"></i></a>The Silence of the Lambs: Inspecting Source Code and Binaries, in Continuous Delivery Pipelines</h3>\n\n<p>(Michael Hüttermann) #ccc_i2</p>\n\n<h3>\n<span id="project-helidon-java-libraries-for-microservices" class="fragment"></span><a href="#project-helidon-java-libraries-for-microservices"><i class="fa fa-link"></i></a>Project Helidon: Java Libraries for Microservices</h3>\n\n<p>(David Delabassee) #ccc_i3</p>\n\n<h3>\n<span id="serverless-architecture-in-the-java-ecosystem" class="fragment"></span><a href="#serverless-architecture-in-the-java-ecosystem"><i class="fa fa-link"></i></a>Serverless Architecture in the Java Ecosystem</h3>\n\n<p>(PRATIK PATEL) #ccc_i4</p>\n\n<h3>\n<span id="revisiting-effective-java-in-2018" class="fragment"></span><a href="#revisiting-effective-java-in-2018"><i class="fa fa-link"></i></a>Revisiting Effective Java in 2018</h3>\n\n<p>(Edson Yanaga) #ccc_i5</p>\n\n<h3>\n<span id="graphql-vs-traditional-rest-api" class="fragment"></span><a href="#graphql-vs-traditional-rest-api"><i class="fa fa-link"></i></a>GraphQL vs Traditional Rest API</h3>\n\n<p>(Vladimir Dejanovic) #ccc_i6</p>\n\n<h3>\n<span id="how-java-leverage-xdevapi-of-mysql-connectorj-to-get-the-best-of-both-sql--nosql" class="fragment"></span><a href="#how-java-leverage-xdevapi-of-mysql-connectorj-to-get-the-best-of-both-sql--nosql"><i class="fa fa-link"></i></a>How Java Leverage XDevAPI of MySQL Connector/J To Get the Best of Both SQL &amp; NoSQL</h3>\n\n<p>(IvanTu2729さん) #ccc_i7<br>\n<a href="https://www.slideshare.net/" class="autolink" rel="nofollow noopener" target="_blank">https://www.slideshare.net/</a></p>\n\n<h1>\n<span id="l" class="fragment"></span><a href="#l"><i class="fa fa-link"></i></a>L</h1>\n\n<h3>\n<span id="ふつうのjavaアプリ開発のための自動テスト戦略" class="fragment"></span><a href="#%E3%81%B5%E3%81%A4%E3%81%86%E3%81%AEjava%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E8%87%AA%E5%8B%95%E3%83%86%E3%82%B9%E3%83%88%E6%88%A6%E7%95%A5"><i class="fa fa-link"></i></a>ふつうのJavaアプリ開発のための自動テスト戦略</h3>\n\n<p>(進藤遼さん) #ccc_l1a<br>\n<a href="https://t.co/IHcjeaXzfq" class="autolink" rel="nofollow noopener" target="_blank">https://t.co/IHcjeaXzfq</a></p>\n\n<h3>\n<span id="ドメイン駆動設計とspring-bootを活用したアプリケーション開発" class="fragment"></span><a href="#%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E9%A7%86%E5%8B%95%E8%A8%AD%E8%A8%88%E3%81%A8spring-boot%E3%82%92%E6%B4%BB%E7%94%A8%E3%81%97%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"><i class="fa fa-link"></i></a>ドメイン駆動設計とSpring Bootを活用したアプリケーション開発</h3>\n\n<p>(zhanponさん) #ccc_l1b<br>\n<a href="https://speakerdeck.com/zhanpon/ddd-and-spring-boot" class="autolink" rel="nofollow noopener" target="_blank">https://speakerdeck.com/zhanpon/ddd-and-spring-boot</a></p>\n\n<h3>\n<span id="java--コンテナ向けパフォーマンス分析手法の紹介と活用事例" class="fragment"></span><a href="#java--%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%90%91%E3%81%91%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E5%88%86%E6%9E%90%E6%89%8B%E6%B3%95%E3%81%AE%E7%B4%B9%E4%BB%8B%E3%81%A8%E6%B4%BB%E7%94%A8%E4%BA%8B%E4%BE%8B"><i class="fa fa-link"></i></a>Java + コンテナ向けパフォーマンス分析手法の紹介と活用事例</h3>\n\n<p>(米司伊織さん) #ccc_l2</p>\n', 'body': '![og_image.png](https://qiita-image-store.s3.amazonaws.com/0/258841/709f14b1-8c04-2434-2fc7-f1b34aa4adff.png)\n\n# 概要\n\nJJUG CCC Fall 2018の資料のまとめです。現在編集中\nタイムテーブルは下記\nhttps://docs.google.com/spreadsheets/d/1cyNPjk8doq26FgjhLVwA0Pw2grGFwxqo4yVXqJgQCTE/edit#gid=413114967\n\n# A + B\n\n### ツール比較しながら語るO/RマッパーとDBマイグレーションの実際のところ\n(渡辺 祐(@nabedge)さん) #ccc_a1\nhttps://www.slideshare.net/nabedge/ordb\n\n### モジュールグラフが作られる様子を学ぼう\n(opengl-8080さん) #ccc_a2a\nhttps://qiita.com/opengl-8080/items/bcac846ba604a86fc4d4\n\n### LINE で広告プラットフォームを Java + Golang で立ち上げた話\n(Tokuhiro Matsunoさん) #ccc_a2b\n\n### "IBM CloudとKubernetesでSpring Bootのマイクロサービスを簡単に！\n(日本アイ・ビー・エム株式会社) #ccc_a3"\nhttps://speakerdeck.com/taijihagino/java-spring-boot-with-kubernetes-on-ibm-cloud\n\n### "エムスリーでのKotlinへの取り組み\n(エムスリー株式会社) #ccc_a4"\nhttps://speakerdeck.com/m3_engineering/jjug-ccc-2018fall-kotlin-in-m3\n\n### "Deep dive into instanceof\n（スマートニュース株式会社) #ccc_a5"\n\n### オイラ大地の18年拡張し続けているECサイトをSpring Bootとk8s on Azureでマイクロサービス化する事例\n(オイシックス・ラ・大地株式会社) #ccc_a6\nhttps://www.slideshare.net/hiroakikobayashi1806/18ecspring-bootk8s-on-azure\n\n### GCを発生させないJVMとコーディングスタイル\n(数村憲治さん) #ccc_a7\nhttps://www.slideshare.net/kenjikazumura/gcjvm\n\n# C + D\n\n### [超上級]ZGCのデータ構造とアルゴリズム超入門 -設計・実装編-\n(伊藤 智博さん) #ccc_c1\n\n### GraalVM超入門\n(Kiyotaka Suzuki(@tamtam180)さん) #ccc_c2\nhttps://www.slideshare.net/tamrin69/getting-started-graalvm\n\n### "Beginning Jakarta EE, GlassFish and Payara\n(Payara Services Ltd) #ccc_c3"\nhttps://www.slideshare.net/khasunuma/beginning-jakartaeeglassfishpayara\n\n### JDK付属ツールにパッチを出しまくったワケ\n(末永 恭正さん) #ccc_c4\nhttps://www.slideshare.net/YaSuenag/jdk-125949908\n\n### 既存アプリケーションでKotlinを導入してみた\n(フリュー株式会社) #ccc_c5\nhttps://docs.google.com/presentation/d/1wTm_eSbsM2ihfz27QpSHzuRcCIhcRYKom-Vx_-FfUts/edit?usp=sharing\n\n### JShellではじめる最新Java\n(きしだなおきさん) #ccc_c6\nhttps://qiita.com/nowokay/items/80e8ccd50f6749846dd6\n\n### "Scala とマイクロサービスでつくる証券会社とスタートアップ\n（株式会社FOLIO）#ccc_c7"\nhttps://speakerdeck.com/mura_mi/folio-in-jjug-ccc-2018-fall\n\n## E + F\n\n### "【JJUG基調講演】\nJavaの未来を考えよう #ccc_e1"\n\n### "【ORACLE基調講演】\nJava Concurrency, A(nother) Peek Under the Hood (David Buck)\n #ccc_e2"\n\n### 思考停止しないアーキテクチャ設計\n(川島義隆さん) #ccc_e3\nhttps://www.slideshare.net/kawasima/jjug-ccc-2018-fall\n\n### "複雑なドメインに泥臭く立ち向かう\n(株式会社エスエムエス) #ccc_e4"\nhttps://speakerdeck.com/sukun1899/fu-za-nadomeinnini-chou-kuli-tixiang-kau\n\n### "Java を活用したマイクロサービスのための Kubernetes 活用\n(日本マイクロソフト株式会社) #ccc_e5"\n\n### コードをどまんなかに据えた設計アプローチ\n(irofさん) #ccc_e6\nhttps://speakerdeck.com/irof/kodowodomannakaniju-etashe-ji-apuroti\n\n## G + H\n\n### Spring Boot の Web アプリケーションを Docker に載せて AWS ECS で動かしている話\n(福嶋航さん) #ccc_g1\n\n### "マネーフォワードのアカウントアグリゲーションの現状と課題点について／Selenium WebDriverとヘッドレスChromeを用いたスクレイピング\n(株式会社マネーフォワード) #ccc_g2"\n\n### "生粋のKotlin LoverによるLINEのKotlinの話\n(LINE 株式会社) #ccc_g3"\n\n### 今こそStream API入門\n(櫻庭 祐一さん) #ccc_g4\nhttps://www.slideshare.net/skrb/stream-api-125945709\n\n### Migration Guide from Java 8 to Java 11\n(KUBOTA Yujiさん) #ccc_g5\nhttps://gist.github.com/ykubota/b37a62de579dc92d02c9483974160c67\n\n### "秒間 200,000 Req/sec をさばく広告入札システムを支えるパフォーマンスチューニング術\n(ウルシステムズ株式会社) #ccc_g6"\nhttps://www.slideshare.net/mobile/hiroiso/200000-reqsec\n\n### "「マイクロソフト牛尾さん渡米直前記念」 \u3000外資系企業で働くエンジニアの生産性向上物語\n(日本マイクロソフト株式会社) #ccc_g7"\n\n# I\n\n### Don\'t Go, Java\n(Chris Engelbert) #ccc_i1\n\n### The Silence of the Lambs: Inspecting Source Code and Binaries, in Continuous Delivery Pipelines\n(Michael Hüttermann) #ccc_i2\n\n### Project Helidon: Java Libraries for Microservices\n(David Delabassee) #ccc_i3\n\n### Serverless Architecture in the Java Ecosystem\n(PRATIK PATEL) #ccc_i4\n\n### Revisiting Effective Java in 2018\n(Edson Yanaga) #ccc_i5\n\n### GraphQL vs Traditional Rest API\n(Vladimir Dejanovic) #ccc_i6\n\n\n### How Java Leverage XDevAPI of MySQL Connector/J To Get the Best of Both SQL & NoSQL\n(IvanTu2729さん) #ccc_i7\nhttps://www.slideshare.net/\n\n# L\n\n### ふつうのJavaアプリ開発のための自動テスト戦略\n(進藤遼さん) #ccc_l1a\nhttps://t.co/IHcjeaXzfq\n\n### ドメイン駆動設計とSpring Bootを活用したアプリケーション開発\n(zhanponさん) #ccc_l1b\nhttps://speakerdeck.com/zhanpon/ddd-and-spring-boot\n\n### Java + コンテナ向けパフォーマンス分析手法の紹介と活用事例\n(米司伊織さん) #ccc_l2\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-12-15T13:25:49+09:00', 'group': None, 'id': '1ed16c162c0205d1514e', 'likes_count': 77, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Java', 'versions': []}, {'name': 'Kotlin', 'versions': []}, {'name': 'jjug', 'versions': []}, {'name': 'JJUG-CCC', 'versions': []}], 'title': 'JJUG CCC Fall 2018 資料まとめ', 'updated_at': '2019-01-06T20:00:27+09:00', 'url': 'https://qiita.com/ryuichi1208/items/1ed16c162c0205d1514e', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/3ae667bc931bfb4c3bd79d88f4cba930ebe1fe51/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65666433396466662d353339322d333231352d623839662d3064656333653066633263632e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/3ae667bc931bfb4c3bd79d88f4cba930ebe1fe51/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65666433396466662d353339322d333231352d623839662d3064656333653066633263632e6a706567" alt="alpine-logo.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/efd39dff-5392-3215-b89f-0dec3e0fc2cc.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>Dockerイメージの軽量化の話に出てくるAlpine Linuxについて気になったので調べてみました。</p>\n\n<h2>\n<span id="alpine-linuxとは" class="fragment"></span><a href="#alpine-linux%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Alpine Linuxとは</h2>\n\n<p>組み込み系でよく使われているBusyBoxとmuslをベースにしたLinuxディストリビューション。<br>\nBusyBoxについては下記がまとまっていて見やすかったです。<br>\n<a href="http://monoist.atmarkit.co.jp/mn/articles/0802/04/news114.html" class="autolink" rel="nofollow noopener" target="_blank">http://monoist.atmarkit.co.jp/mn/articles/0802/04/news114.html</a></p>\n\n<p>Docker界隈でよく見かける言葉ですが特にDocker用とかそういったものでは無い。</p>\n\n<p>BusyBox + パッケージマネージャ(apk)がAlpineLinuxの概要とのことです。<br>\n公式サイトは下記です。</p>\n\n<p><a href="https://alpinelinux.org/" class="autolink" rel="nofollow noopener" target="_blank">https://alpinelinux.org/</a><br>\n(GitHub) <a href="https://github.com/alpinelinux" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/alpinelinux</a></p>\n\n<p>Alpineの特徴に軽量とありますがどれくらい軽量化というと下記比較を見れば一目瞭然</p>\n\n<p>CentOS 約4GB<br>\nUbuntu 約700MB<br>\nAlpine 約100MB</p>\n\n<h2>\n<span id="ファイル構成" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90"><i class="fa fa-link"></i></a>ファイル構成</h2>\n\n<p>Alpine Linuxがどのような構成になっているかをdockerを使ってサクッと確認してみます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker container run <span class="nt">-it</span> alpine /bin/ash\nUnable to find image <span class="s1">\'alpine:latest\'</span> locally\nlatest: Pulling from library/alpine\n4fe2ade4980c: Already exists \nDigest: sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528\nStatus: Downloaded newer image <span class="k">for </span>alpine:latest\n/ <span class="c">#</span>\n/ <span class="c"># ls -l /</span>\ntotal 52\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 bin\ndrwxr-xr-x    5 root     root           360 Dec 11 06:29 dev\ndrwxr-xr-x    1 root     root          4096 Dec 11 06:29 etc\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 home\ndrwxr-xr-x    5 root     root          4096 Sep 11 20:23 lib\ndrwxr-xr-x    5 root     root          4096 Sep 11 20:23 media\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 mnt\ndr-xr-xr-x  303 root     root             0 Dec 11 06:29 proc\ndrwx------    1 root     root          4096 Dec 11 06:30 root\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 run\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 sbin\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 srv\ndr-xr-xr-x   13 root     root             0 Dec 11 06:29 sys\ndrwxrwxrwt    2 root     root          4096 Sep 11 20:23 tmp\ndrwxr-xr-x    7 root     root          4096 Sep 11 20:23 usr\ndrwxr-xr-x   11 root     root          4096 Sep 11 20:23 var\n</pre></div></div>\n\n<p>FHSに準拠して作られている事がわかりますね。<br>\n(当たり前といえば当たり前)</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># ls -l /bin/l*</span>\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/link -&gt; /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/linux32 -&gt; /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/linux64 -&gt; /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/ln -&gt; /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/login -&gt; /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/ls -&gt; /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/lzop -&gt; /bin/busybox\n</pre></div></div>\n\n<p>また、/bin配下はすべて/bin/busyboxへのシンボリックリンクとなっている。<br>\nbusyboxとは何かというと、Alpine LinuxのベースとなっているLinuxのディストリビューション<br>\n標準UNIXコマンドで重要な多数のプログラムを単一の実行ファイルに「詰め込んで」提供する、<br>\n特殊な方式のプログラムです。詳細は下記wikiをご参照ください。<br>\n<a href="https://ja.wikipedia.org/wiki/BusyBox" class="autolink" rel="nofollow noopener" target="_blank">https://ja.wikipedia.org/wiki/BusyBox</a><br>\nbusyboxのサイズもとても小さい</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>~ <span class="c"># ls -lh /bin/busybox </span>\n<span class="nt">-rwxr-xr-x</span>    1 root     root      777.6K Jul 17 15:22 /bin/busybox\n</pre></div></div>\n\n<p>デフォルトで設定されている環境変数を見るとミニマムさに驚きです。<br>\nちなみにbashはデフォルトでないので必要な方はインストールが別途必要です。<br>\nashというシェルが採用されています。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>~ <span class="c"># env</span>\n<span class="nv">HOSTNAME</span><span class="o">=</span>de9c296717d8\n<span class="nv">SHLVL</span><span class="o">=</span>1\n<span class="nv">HOME</span><span class="o">=</span>/root\n<span class="nv">OLDPWD</span><span class="o">=</span>/root\n<span class="nv">TERM</span><span class="o">=</span>xterm\n<span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n<span class="nv">PWD</span><span class="o">=</span>/root\n</pre></div></div>\n\n<h2>\n<span id="パッケージマネージャapk" class="fragment"></span><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3apk"><i class="fa fa-link"></i></a>パッケージマネージャ「apk」</h2>\n\n<p>パッケージやアプリケーションのインストールにはapkを使用します。<br>\napt-getやらyumやら色々使ってると正直ごっちゃになりますが、Alpineではさらに<br>\n別のパッケージマネージャを利用します。</p>\n\n<p>とりあえずupdateとaddとdelとそれらに関するオプションを覚えておけば事は足りそう。</p>\n\n<h3>\n<span id="apk-help" class="fragment"></span><a href="#apk-help"><i class="fa fa-link"></i></a>apk help</h3>\n\n<p>usageが見たければここらへん。<br>\nまあよくあるパッケージマネージャーですね。<br>\n特筆して思うことはなし。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>apk <span class="nt">--help</span>\napk-tools 2.10.1, compiled <span class="k">for </span>x86_64.\n\nInstalling and removing packages:\n  add       Add PACKAGEs to <span class="s1">\'world\'</span> and <span class="nb">install</span> <span class="o">(</span>or upgrade<span class="o">)</span> them, <span class="k">while </span>ensuring that all dependencies are met\n  del       Remove PACKAGEs from <span class="s1">\'world\'</span> and uninstall them\n\nSystem maintenance:\n  fix       Repair package or upgrade it without modifying main dependencies\n  update    Update repository indexes from all remote repositories\n  upgrade   Upgrade currently installed packages to match repositories\n  cache     Download missing PACKAGEs to cache and/or delete unneeded files from cache\n\nQuerying information about packages:\n  info      Give detailed information about PACKAGEs or repositories\n  list      List packages by PATTERN and other criteria\n  dot       Generate graphviz graphs\n  policy    Show repository policy <span class="k">for </span>packages\n\nRepository maintenance:\n  index     Create repository index file from FILEs\n  fetch     Download PACKAGEs from global repositories to a <span class="nb">local </span>directory\n  verify    Verify package integrity and signature\n  manifest  Show checksums of package contents\n\nUse apk &lt;<span class="nb">command</span><span class="o">&gt;</span> <span class="nt">--help</span> <span class="k">for </span>command-specific help.\nUse apk <span class="nt">--help</span> <span class="nt">--verbose</span> <span class="k">for </span>a full <span class="nb">command </span>listing.\n\nThis apk has coffee making abilities.\n</pre></div></div>\n\n<h3>\n<span id="インストール済みパッケージの参照-info" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%B8%88%E3%81%BF%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E5%8F%82%E7%85%A7-info"><i class="fa fa-link"></i></a>インストール済みパッケージの参照 info</h3>\n\n<p>初期段階のパッケージの少なさにはほんとに驚きますね。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>apk info\nWARNING: Ignoring APKINDEX.adfa7ceb.tar.gz: No such file or directory\nWARNING: Ignoring APKINDEX.efaa1f73.tar.gz: No such file or directory\nmusl\nbusybox\nalpine-baselayout\nalpine-keys\nlibressl2.7-libcrypto\nlibressl2.7-libssl\nlibressl2.7-libtls\nssl_client\nzlib\napk-tools\nscanelf\nmusl-utils\nlibc-utils\n</pre></div></div>\n\n<h3>\n<span id="パッケージアップデート-update" class="fragment"></span><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88-update"><i class="fa fa-link"></i></a>パッケージアップデート update</h3>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># apk update</span>\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz\nv3.8.1-142-g179c136670 <span class="o">[</span>http://dl-cdn.alpinelinux.org/alpine/v3.8/main]\nv3.8.1-142-g179c136670 <span class="o">[</span>http://dl-cdn.alpinelinux.org/alpine/v3.8/community]\nOK: 9548 distinct packages available\n</pre></div></div>\n\n<h3>\n<span id="パッケージ検索-search" class="fragment"></span><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A4%9C%E7%B4%A2-search"><i class="fa fa-link"></i></a>パッケージ検索 search</h3>\n\n<p>vimを使いたいので検索対象としています。<br>\nneovimなどもあるようですがとりあえずデフォルトでいいと思うのでそちらを入れる</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># apk search vim</span>\ncharybdis-3.5.5-r4\nneovim-doc-0.3.0-r0\nvim-8.1.0115-r0\nfaenza-icon-theme-vim-1.3.1-r4\nnotmuch-vim-0.25.3-r1\ndocker-vim-18.06.1-r0\ngraphviz-2.40.1-r1\nneovim-0.3.0-r0\nvim-doc-8.1.0115-r0\nvim-editorconfig-0_git20170721-r0\npy-jinja2-vim-2.9.6-r0\nvimdiff-8.1.0115-r0\nasciidoc-vim-8.6.10-r0\nneovim-lang-0.3.0-r0\nnginx-vim-1.14.1-r0\nmsmtp-vim-1.6.6-r3\nprotobuf-vim-3.5.2-r0\nicinga2-vim-2.8.4-r0\ngst-plugins-base-1.14.0-r1\nmercurial-vim-4.6.1-r0\n</pre></div></div>\n\n<h3>\n<span id="インストール-add" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB-add"><i class="fa fa-link"></i></a>インストール add</h3>\n\n<p>上記で検索したvimをインストールしています。<br>\n=でバージョン指定もできます。<br>\n個人的にはaddというサブコマンドよりもinstallとかにしてくれたほうが覚えやすかった。。。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># apk add vim</span>\n<span class="o">(</span>1/5<span class="o">)</span> Installing lua5.3-libs <span class="o">(</span>5.3.5-r1<span class="o">)</span>\n<span class="o">(</span>2/5<span class="o">)</span> Installing ncurses-terminfo-base <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>3/5<span class="o">)</span> Installing ncurses-terminfo <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>4/5<span class="o">)</span> Installing ncurses-libs <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>5/5<span class="o">)</span> Installing vim <span class="o">(</span>8.1.0115-r0<span class="o">)</span>\nExecuting busybox-1.28.4-r1.trigger\nOK: 39 MiB <span class="k">in </span>18 packages\n\n/ <span class="c"># ls -l /usr/bin/vim</span>\n<span class="nt">-rwxr-xr-x</span>    1 root     root       2193672 Jun 25 15:52 /usr/bin/vim\n</pre></div></div>\n\n<h3>\n<span id="パッケージ削除-del" class="fragment"></span><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%89%8A%E9%99%A4-del"><i class="fa fa-link"></i></a>パッケージ削除 del</h3>\n\n<p>パッケージ削除はdelを使用する。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># apk del vim</span>\n<span class="o">(</span>1/5<span class="o">)</span> Purging vim <span class="o">(</span>8.1.0115-r0<span class="o">)</span>\n<span class="o">(</span>2/5<span class="o">)</span> Purging lua5.3-libs <span class="o">(</span>5.3.5-r1<span class="o">)</span>\n<span class="o">(</span>3/5<span class="o">)</span> Purging ncurses-libs <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>4/5<span class="o">)</span> Purging ncurses-terminfo <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>5/5<span class="o">)</span> Purging ncurses-terminfo-base <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\nExecuting busybox-1.28.4-r1.trigger\nOK: 4 MiB <span class="k">in </span>13 packages\n</pre></div></div>\n\n<p>ちなみにキャッシュは/var/cache/apk配下に設置されるので不要であれば削除しましょう</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># ls -l /var/cache/apk/</span>\ntotal 1252\n<span class="nt">-rw-r--r--</span>    1 root     root        752920 Dec 11 06:50 APKINDEX.adfa7ceb.tar.gz\n<span class="nt">-rw-r--r--</span>    1 root     root        525738 Dec 11 06:50 APKINDEX.efaa1f73.tar.gz\n</pre></div></div>\n\n<p>また、リポジトリは下記ファイルへ追記することで追加する事ができます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># cat /etc/apk/repositories</span>\nhttp://dl-cdn.alpinelinux.org/alpine/v3.8/main\nhttp://dl-cdn.alpinelinux.org/alpine/v3.8/community\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>DockerのイメージにAlpineをつかう際に何も知らずにつかうとハマるらしい<br>\nAlpineの特性を抑えておく必要があるとのことなので少しでも知れたので良かったと思いました。</p>\n\n<p>VirtualBoxでAlpine Linuxを構築してみるとかもいいのかなと思いました。</p>\n\n<p>ちなみにashは使いにくいと思ってしまったので速攻でbashをインストールして遊んでみてます。<br>\nベストな使い方的には正しくなさそうです。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>/ <span class="c"># apk add bash</span>\n<span class="o">(</span>1/5<span class="o">)</span> Installing ncurses-terminfo-base <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>2/5<span class="o">)</span> Installing ncurses-terminfo <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>3/5<span class="o">)</span> Installing ncurses-libs <span class="o">(</span>6.1_p20180818-r1<span class="o">)</span>\n<span class="o">(</span>4/5<span class="o">)</span> Installing readline <span class="o">(</span>7.0.003-r0<span class="o">)</span>\n<span class="o">(</span>5/5<span class="o">)</span> Installing bash <span class="o">(</span>4.4.19-r1<span class="o">)</span>\nExecuting bash-4.4.19-r1.post-install\nExecuting busybox-1.28.4-r1.trigger\nOK: 13 MiB <span class="k">in </span>18 packages\n/ <span class="c"># bash</span>\nbash-4.4# \n</pre></div></div>\n\n<h2>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h2>\n\n<p>◼ <a href="https://blog.stormcat.io/post/entry/alpine-entry-apk/" class="autolink" rel="nofollow noopener" target="_blank">https://blog.stormcat.io/post/entry/alpine-entry-apk/</a><br>\n◼ <a href="https://kakakakakku.hatenablog.com/entry/2016/04/25/223909" class="autolink" rel="nofollow noopener" target="_blank">https://kakakakakku.hatenablog.com/entry/2016/04/25/223909</a></p>\n', 'body': "![alpine-logo.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/efd39dff-5392-3215-b89f-0dec3e0fc2cc.jpeg)\n\n## 背景\n\nDockerイメージの軽量化の話に出てくるAlpine Linuxについて気になったので調べてみました。\n\n## Alpine Linuxとは\n\n組み込み系でよく使われているBusyBoxとmuslをベースにしたLinuxディストリビューション。\nBusyBoxについては下記がまとまっていて見やすかったです。\nhttp://monoist.atmarkit.co.jp/mn/articles/0802/04/news114.html\n\nDocker界隈でよく見かける言葉ですが特にDocker用とかそういったものでは無い。\n\nBusyBox + パッケージマネージャ(apk)がAlpineLinuxの概要とのことです。\n公式サイトは下記です。\n\nhttps://alpinelinux.org/\n(GitHub) https://github.com/alpinelinux\n\nAlpineの特徴に軽量とありますがどれくらい軽量化というと下記比較を見れば一目瞭然\n\nCentOS 約4GB\nUbuntu 約700MB\nAlpine 約100MB\n\n## ファイル構成\n\nAlpine Linuxがどのような構成になっているかをdockerを使ってサクッと確認してみます。\n\n``` bash\n$ docker container run -it alpine /bin/ash\nUnable to find image 'alpine:latest' locally\nlatest: Pulling from library/alpine\n4fe2ade4980c: Already exists \nDigest: sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528\nStatus: Downloaded newer image for alpine:latest\n/ #\n/ # ls -l /\ntotal 52\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 bin\ndrwxr-xr-x    5 root     root           360 Dec 11 06:29 dev\ndrwxr-xr-x    1 root     root          4096 Dec 11 06:29 etc\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 home\ndrwxr-xr-x    5 root     root          4096 Sep 11 20:23 lib\ndrwxr-xr-x    5 root     root          4096 Sep 11 20:23 media\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 mnt\ndr-xr-xr-x  303 root     root             0 Dec 11 06:29 proc\ndrwx------    1 root     root          4096 Dec 11 06:30 root\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 run\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 sbin\ndrwxr-xr-x    2 root     root          4096 Sep 11 20:23 srv\ndr-xr-xr-x   13 root     root             0 Dec 11 06:29 sys\ndrwxrwxrwt    2 root     root          4096 Sep 11 20:23 tmp\ndrwxr-xr-x    7 root     root          4096 Sep 11 20:23 usr\ndrwxr-xr-x   11 root     root          4096 Sep 11 20:23 var\n```\n\nFHSに準拠して作られている事がわかりますね。\n(当たり前といえば当たり前)\n\n``` bash\n/ # ls -l /bin/l*\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/link -> /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/linux32 -> /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/linux64 -> /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/ln -> /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/login -> /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/ls -> /bin/busybox\nlrwxrwxrwx    1 root     root            12 Sep 11 20:23 /bin/lzop -> /bin/busybox\n```\n\nまた、/bin配下はすべて/bin/busyboxへのシンボリックリンクとなっている。\nbusyboxとは何かというと、Alpine LinuxのベースとなっているLinuxのディストリビューション\n標準UNIXコマンドで重要な多数のプログラムを単一の実行ファイルに「詰め込んで」提供する、\n特殊な方式のプログラムです。詳細は下記wikiをご参照ください。\nhttps://ja.wikipedia.org/wiki/BusyBox\nbusyboxのサイズもとても小さい\n\n``` bash\n~ # ls -lh /bin/busybox \n-rwxr-xr-x    1 root     root      777.6K Jul 17 15:22 /bin/busybox\n```\n\nデフォルトで設定されている環境変数を見るとミニマムさに驚きです。\nちなみにbashはデフォルトでないので必要な方はインストールが別途必要です。\nashというシェルが採用されています。\n\n``` bash\n~ # env\nHOSTNAME=de9c296717d8\nSHLVL=1\nHOME=/root\nOLDPWD=/root\nTERM=xterm\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nPWD=/root\n```\n\n## パッケージマネージャ「apk」\n\nパッケージやアプリケーションのインストールにはapkを使用します。\napt-getやらyumやら色々使ってると正直ごっちゃになりますが、Alpineではさらに\n別のパッケージマネージャを利用します。\n\nとりあえずupdateとaddとdelとそれらに関するオプションを覚えておけば事は足りそう。\n\n\n### apk help\n\nusageが見たければここらへん。\nまあよくあるパッケージマネージャーですね。\n特筆して思うことはなし。\n\n``` bash\n$ sudo apk --help\napk-tools 2.10.1, compiled for x86_64.\n\nInstalling and removing packages:\n  add       Add PACKAGEs to 'world' and install (or upgrade) them, while ensuring that all dependencies are met\n  del       Remove PACKAGEs from 'world' and uninstall them\n\nSystem maintenance:\n  fix       Repair package or upgrade it without modifying main dependencies\n  update    Update repository indexes from all remote repositories\n  upgrade   Upgrade currently installed packages to match repositories\n  cache     Download missing PACKAGEs to cache and/or delete unneeded files from cache\n\nQuerying information about packages:\n  info      Give detailed information about PACKAGEs or repositories\n  list      List packages by PATTERN and other criteria\n  dot       Generate graphviz graphs\n  policy    Show repository policy for packages\n\nRepository maintenance:\n  index     Create repository index file from FILEs\n  fetch     Download PACKAGEs from global repositories to a local directory\n  verify    Verify package integrity and signature\n  manifest  Show checksums of package contents\n\nUse apk <command> --help for command-specific help.\nUse apk --help --verbose for a full command listing.\n\nThis apk has coffee making abilities.\n```\n\n### インストール済みパッケージの参照 info\n\n初期段階のパッケージの少なさにはほんとに驚きますね。\n\n``` bash\n$ apk info\nWARNING: Ignoring APKINDEX.adfa7ceb.tar.gz: No such file or directory\nWARNING: Ignoring APKINDEX.efaa1f73.tar.gz: No such file or directory\nmusl\nbusybox\nalpine-baselayout\nalpine-keys\nlibressl2.7-libcrypto\nlibressl2.7-libssl\nlibressl2.7-libtls\nssl_client\nzlib\napk-tools\nscanelf\nmusl-utils\nlibc-utils\n```\n\n### パッケージアップデート update\n\n``` bash\n/ # apk update\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz\nv3.8.1-142-g179c136670 [http://dl-cdn.alpinelinux.org/alpine/v3.8/main]\nv3.8.1-142-g179c136670 [http://dl-cdn.alpinelinux.org/alpine/v3.8/community]\nOK: 9548 distinct packages available\n```\n\n### パッケージ検索 search\n\nvimを使いたいので検索対象としています。\nneovimなどもあるようですがとりあえずデフォルトでいいと思うのでそちらを入れる\n\n``` bash\n/ # apk search vim\ncharybdis-3.5.5-r4\nneovim-doc-0.3.0-r0\nvim-8.1.0115-r0\nfaenza-icon-theme-vim-1.3.1-r4\nnotmuch-vim-0.25.3-r1\ndocker-vim-18.06.1-r0\ngraphviz-2.40.1-r1\nneovim-0.3.0-r0\nvim-doc-8.1.0115-r0\nvim-editorconfig-0_git20170721-r0\npy-jinja2-vim-2.9.6-r0\nvimdiff-8.1.0115-r0\nasciidoc-vim-8.6.10-r0\nneovim-lang-0.3.0-r0\nnginx-vim-1.14.1-r0\nmsmtp-vim-1.6.6-r3\nprotobuf-vim-3.5.2-r0\nicinga2-vim-2.8.4-r0\ngst-plugins-base-1.14.0-r1\nmercurial-vim-4.6.1-r0\n```\n\n### インストール add \n\n上記で検索したvimをインストールしています。\n=でバージョン指定もできます。\n個人的にはaddというサブコマンドよりもinstallとかにしてくれたほうが覚えやすかった。。。\n\n``` bash\n/ # apk add vim\n(1/5) Installing lua5.3-libs (5.3.5-r1)\n(2/5) Installing ncurses-terminfo-base (6.1_p20180818-r1)\n(3/5) Installing ncurses-terminfo (6.1_p20180818-r1)\n(4/5) Installing ncurses-libs (6.1_p20180818-r1)\n(5/5) Installing vim (8.1.0115-r0)\nExecuting busybox-1.28.4-r1.trigger\nOK: 39 MiB in 18 packages\n\n/ # ls -l /usr/bin/vim\n-rwxr-xr-x    1 root     root       2193672 Jun 25 15:52 /usr/bin/vim\n```\n\n### パッケージ削除 del\n\nパッケージ削除はdelを使用する。\n\n``` bash\n/ # apk del vim\n(1/5) Purging vim (8.1.0115-r0)\n(2/5) Purging lua5.3-libs (5.3.5-r1)\n(3/5) Purging ncurses-libs (6.1_p20180818-r1)\n(4/5) Purging ncurses-terminfo (6.1_p20180818-r1)\n(5/5) Purging ncurses-terminfo-base (6.1_p20180818-r1)\nExecuting busybox-1.28.4-r1.trigger\nOK: 4 MiB in 13 packages\n```\n\nちなみにキャッシュは/var/cache/apk配下に設置されるので不要であれば削除しましょう\n\n``` bash\n/ # ls -l /var/cache/apk/\ntotal 1252\n-rw-r--r--    1 root     root        752920 Dec 11 06:50 APKINDEX.adfa7ceb.tar.gz\n-rw-r--r--    1 root     root        525738 Dec 11 06:50 APKINDEX.efaa1f73.tar.gz\n```\n\nまた、リポジトリは下記ファイルへ追記することで追加する事ができます。\n\n``` bash\n/ # cat /etc/apk/repositories\nhttp://dl-cdn.alpinelinux.org/alpine/v3.8/main\nhttp://dl-cdn.alpinelinux.org/alpine/v3.8/community\n```\n\n## まとめ\n\nDockerのイメージにAlpineをつかう際に何も知らずにつかうとハマるらしい\nAlpineの特性を抑えておく必要があるとのことなので少しでも知れたので良かったと思いました。\n\nVirtualBoxでAlpine Linuxを構築してみるとかもいいのかなと思いました。\n\nちなみにashは使いにくいと思ってしまったので速攻でbashをインストールして遊んでみてます。\nベストな使い方的には正しくなさそうです。\n\n``` bash\n/ # apk add bash\n(1/5) Installing ncurses-terminfo-base (6.1_p20180818-r1)\n(2/5) Installing ncurses-terminfo (6.1_p20180818-r1)\n(3/5) Installing ncurses-libs (6.1_p20180818-r1)\n(4/5) Installing readline (7.0.003-r0)\n(5/5) Installing bash (4.4.19-r1)\nExecuting bash-4.4.19-r1.post-install\nExecuting busybox-1.28.4-r1.trigger\nOK: 13 MiB in 18 packages\n/ # bash\nbash-4.4# \n```\n\n## 参考リンク\n\n◼ https://blog.stormcat.io/post/entry/alpine-entry-apk/\n◼ https://kakakakakku.hatenablog.com/entry/2016/04/25/223909\n", 'coediting': False, 'comments_count': 0, 'created_at': '2018-12-11T21:32:51+09:00', 'group': None, 'id': '6020cfabc92bd8153654', 'likes_count': 40, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'alpine', 'versions': []}], 'title': '超軽量なAlpine Linuxについて調べた', 'updated_at': '2019-01-12T00:55:40+09:00', 'url': 'https://qiita.com/ryuichi1208/items/6020cfabc92bd8153654', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/1fbf770b0431caf2159b609a34dfae4312512d9a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38313132356134392d306261342d326161642d636565382d3862613230323935373636322e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/1fbf770b0431caf2159b609a34dfae4312512d9a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38313132356134392d306261342d326161642d636565382d3862613230323935373636322e706e67" alt="Python-Logo-PNG-Image.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/81125a49-0ba4-2aad-cee8-8ba202957662.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>Pythonでよく使うライブラリ集です。<br>\n簡単なソースと学習に役立つサイトのリンクを記載しています。<br>\nGitHubで公開されているものに関してはライブラリ名にリンクを貼っています。</p>\n\n<p>基本的には趣味レベルのみでの利用なので専門的情報が欲しい方は戻るボタン推奨。</p>\n\n<h2>\n<span id="標準ライブラリ" class="fragment"></span><a href="#%E6%A8%99%E6%BA%96%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA"><i class="fa fa-link"></i></a>標準ライブラリ</h2>\n\n<p>公式ドキュメントにありますのでこちらをご参照ください。<br>\n<a href="https://docs.python.jp/3/library/index.html" class="autolink" rel="nofollow noopener" target="_blank">https://docs.python.jp/3/library/index.html</a></p>\n\n<h2>\n<span id="数学系" class="fragment"></span><a href="#%E6%95%B0%E5%AD%A6%E7%B3%BB"><i class="fa fa-link"></i></a>数学系</h2>\n\n<h4>\n<span id="numpy" class="fragment"></span><a href="#numpy"><i class="fa fa-link"></i></a><a href="https://github.com/numpy/numpy" rel="nofollow noopener" target="_blank">NumPy</a>\n</h4>\n\n<p>ベクトルや行列計算を行うためのライブラリ<br>\n内積、フーリエ変換。行列計算などプログラミング知識が少なくても簡単に使用できるのが特徴。<br>\n少ないコード量で効率よく高速に数値計算<br>\n学習サイト：<a href="https://qiita.com/jyori112/items/a15658d1dd17c421e1e2" class="autolink" id="reference-d3e32452f73a16add974">https://qiita.com/jyori112/items/a15658d1dd17c421e1e2</a></p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">連立方程式</span></div>\n<div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>\n<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>\n\n<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.</span><span class="p">,</span><span class="mf">3.</span><span class="p">]</span> <span class="p">,[</span><span class="mf">4.</span><span class="p">,</span><span class="mf">2.</span><span class="p">]])</span> <span class="c"># 行列Aの生成</span>\n<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">1.</span><span class="p">,</span><span class="mf">1.</span><span class="p">])</span>   <span class="c"># 行列Bの生成</span>\n\n<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span> <span class="s">"X=</span><span class="se">\\n</span><span class="s">"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="p">)</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="scipy" class="fragment"></span><a href="#scipy"><i class="fa fa-link"></i></a><a href="https://github.com/scipy/scipy" rel="nofollow noopener" target="_blank">scipy</a>\n</h4>\n\n<p>信号処理や統計などの科学計算用のライブラリ<br>\nscipyではnumpyで行える配列や行列の演算を行うことができ、加えてさらに信号処理や統計といった計算ができる<br>\nNumPy ⊂ SciPy<br>\nな、関係。Scipyだけでいい気がするが世間ではNumPyが主流なのでNumPyで事が足りる機能であるならばNumPyを使うべきなのでしょう<br>\n学習/参考サイト:<a href="https://algorithm.joho.info/programming/python/scipy-integrate-quad/" class="autolink" rel="nofollow noopener" target="_blank">https://algorithm.joho.info/programming/python/scipy-integrate-quad/</a></p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">定積分</span></div>\n<div class="highlight"><pre><span class="c"># -*- coding:utf-8 -*-</span>\n<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">integrate</span>\n\n<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>\n    <span class="k">return</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>\n\n<span class="c"># 定積分(積分区間[0, 10])</span>\n<span class="n">ix</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">integrate</span><span class="o">.</span><span class="n">quad</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'計算結果:\'</span><span class="p">,</span> <span class="n">ix</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'誤差：\'</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="matplotlib" class="fragment"></span><a href="#matplotlib"><i class="fa fa-link"></i></a><a href="https://github.com/matplotlib/matplotlib" rel="nofollow noopener" target="_blank">matplotlib</a>\n</h4>\n\n<p>グラフを描画するためのライブラリ<br>\n学習サイト：<a href="https://qiita.com/skotaro/items/08dc0b8c5704c94eafb9" class="autolink" id="reference-4ca1324d171b74632ed1">https://qiita.com/skotaro/items/08dc0b8c5704c94eafb9</a></p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">グラフ作成</span></div>\n<div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>\n\n<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>\n<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>\n\n<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>\n<span class="n">C</span><span class="p">,</span> <span class="n">S</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">X</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>\n\n<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>\n<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">S</span><span class="p">)</span>\n\n<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="pandas" class="fragment"></span><a href="#pandas"><i class="fa fa-link"></i></a><a href="https://github.com/pandas-dev/pandas" rel="nofollow noopener" target="_blank">pandas</a>\n</h4>\n\n<p>Rに類似のデータフレームを提供するライブラリ<br>\npandasは、Pythonにおいて、データ解析を支援する機能を提供するライブラリである。<br>\n特に、数表および時系列データを操作するためのデータ構造と演算を提供する。<br>\nPythonで実用的なデータ分析をする際の、高水準な基盤となるべく開発されている。<br>\nPandasは扱うデータが幅広い<br>\n学習/参考サイト：<a href="https://qiita.com/ysdyt/items/9ccca82fc5b504e7913a" class="autolink" id="reference-e6b5cf599428e6d5fa11">https://qiita.com/ysdyt/items/9ccca82fc5b504e7913a</a></p>\n\n<h2>\n<span id="スクレイピングクローリング" class="fragment"></span><a href="#%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>スクレイピング/クローリング</h2>\n\n<h4>\n<span id="beautifulsoup4" class="fragment"></span><a href="#beautifulsoup4"><i class="fa fa-link"></i></a>BeautifulSoup4</h4>\n\n<p>Pythonの定番HTMLパースライブラリ<br>\nスクレイピングする際は必須のライブラリ。</p>\n\n<p>学習/参考サイト:<a href="https://python.civic-apps.com/beautifulsoup4-selector/" class="autolink" rel="nofollow noopener" target="_blank">https://python.civic-apps.com/beautifulsoup4-selector/</a></p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">html</span></div>\n<div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>\n\n<span class="kn">import</span> <span class="nn">urllib.request</span>\n<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>\n\n<span class="n">url</span> <span class="o">=</span> <span class="s">"https://qiita.com/"</span>\n<span class="n">f</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>\n<span class="n">html</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">\'utf-8\'</span><span class="p">)</span>\n\n<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="s">"html.parser"</span><span class="p">)</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="lxml" class="fragment"></span><a href="#lxml"><i class="fa fa-link"></i></a><a href="https://github.com/lxml" rel="nofollow noopener" target="_blank">lxml</a>\n</h4>\n\n<p>lxml はXMLやHTML文書を非常に素早く解析するために書かれた非常に広範囲なライブラリ<br>\n学習/参考サイト:<a href="https://python.keicode.com/advanced/xml-lxml-1.php" class="autolink" rel="nofollow noopener" target="_blank">https://python.keicode.com/advanced/xml-lxml-1.php</a></p>\n\n<h4>\n<span id="selenium" class="fragment"></span><a href="#selenium"><i class="fa fa-link"></i></a><a href="https://github.com/SeleniumHQ/selenium" rel="nofollow noopener" target="_blank">selenium</a>\n</h4>\n\n<p>selenium ライブラリは、同名の Selenium というブラウザ操作用のツールがあるのですが、<br>\nその Python バインディング、いわゆる「 Selenium の Python 版」</p>\n\n<p>学習/参考サイト:<a href="https://www.inet-solutions.jp/technology/python-selenium/" class="autolink" rel="nofollow noopener" target="_blank">https://www.inet-solutions.jp/technology/python-selenium/</a></p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">クローリング</span></div>\n<div class="highlight"><pre><span class="kn">import</span> <span class="nn">time</span>\n<span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>\n\n<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>\n<span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">\'https://www.google.com/\'</span><span class="p">)</span>\n<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>\n<span class="n">search_box</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">"q"</span><span class="p">)</span>\n<span class="n">search_box</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">\'ChromeDriver\'</span><span class="p">)</span>\n<span class="n">search_box</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span>\n<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>\n<span class="n">driver</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="画像認識" class="fragment"></span><a href="#%E7%94%BB%E5%83%8F%E8%AA%8D%E8%AD%98"><i class="fa fa-link"></i></a>画像認識</h2>\n\n<h4>\n<span id="pix2code" class="fragment"></span><a href="#pix2code"><i class="fa fa-link"></i></a><a href="https://github.com/tonybeltramelli/pix2code" rel="nofollow noopener" target="_blank">pix2code</a>\n</h4>\n\n<p>UI 画像からそれを生成するコードを自動生成するライブラリ</p>\n\n<p>学習/参考サイト:<a href="https://ledge.ai/pix2code-on-floydhub/" class="autolink" rel="nofollow noopener" target="_blank">https://ledge.ai/pix2code-on-floydhub/</a></p>\n\n<h4>\n<span id="face_recognition" class="fragment"></span><a href="#face_recognition"><i class="fa fa-link"></i></a><a href="https://github.com/ageitgey/face_recognition" rel="nofollow noopener" target="_blank">face_recognition</a>\n</h4>\n\n<p>画像内の人の顔を認識するためのライブラリ<br>\n学習/参考サイト:<a href="http://shikouno.hatenablog.com/entry/20171001/1506862903" class="autolink" rel="nofollow noopener" target="_blank">http://shikouno.hatenablog.com/entry/20171001/1506862903</a></p>\n\n<h2>\n<span id="その他" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96"><i class="fa fa-link"></i></a>その他</h2>\n\n<h4>\n<span id="python-fire" class="fragment"></span><a href="#python-fire"><i class="fa fa-link"></i></a><a href="https://github.com/google/python-fire" rel="nofollow noopener" target="_blank">python-fire</a>\n</h4>\n\n<p>Python のユーティリティクラスをコマンドラインからすぐに呼び出せるようにできるライブラリ<br>\nGoogle が公開している。</p>\n\n<p>学習/参考サイト:<a href="https://blog.amedama.jp/entry/2017/03/07/223319" class="autolink" rel="nofollow noopener" target="_blank">https://blog.amedama.jp/entry/2017/03/07/223319</a><br>\n学習/参考サイト:<a href="https://qiita.com/koga1020/items/0c51e365612689615c91" class="autolink" id="reference-0f592f3997ff4ae02a73">https://qiita.com/koga1020/items/0c51e365612689615c91</a></p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>\n\n<span class="kn">import</span> <span class="nn">fire</span>\n\n<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>\n  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>\n\n<span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>\n  <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>\n\n<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">\'__main__\'</span><span class="p">:</span>\n  <span class="n">fire</span><span class="o">.</span><span class="n">Fire</span><span class="p">()</span>\n</pre></div></div>\n\n<h4>\n<span id="tqdm" class="fragment"></span><a href="#tqdm"><i class="fa fa-link"></i></a><a href="https://github.com/tqdm/tqdm" rel="nofollow noopener" target="_blank">tqdm</a>\n</h4>\n\n<p>走らせた処理の進捗状況をプログレスバーとして表示するためのライブラリ<br>\n説明文をつけたり、進捗バーを自分のタイミングで進めることもできます。<br>\n学習/参考サイト:<a href="https://blog.amedama.jp/entry/2018/07/23/080000" class="autolink" rel="nofollow noopener" target="_blank">https://blog.amedama.jp/entry/2018/07/23/080000</a></p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">進捗率表示</span></div>\n<div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>\n\n<span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>\n<span class="kn">import</span> <span class="nn">time</span>\n\n<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)):</span>\n        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="pycrypto" class="fragment"></span><a href="#pycrypto"><i class="fa fa-link"></i></a><a href="https://github.com/dlitz/pycrypto" rel="nofollow noopener" target="_blank">pycrypto</a>\n</h4>\n\n<p>Pythonの暗号化/復号するためのライブラリ<br>\n学習/参考サイト:<a href="https://kamatari.github.io/2016/04/23/what-is-pycrypto/" class="autolink" rel="nofollow noopener" target="_blank">https://kamatari.github.io/2016/04/23/what-is-pycrypto/</a></p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">暗号化して復号</span></div>\n<div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>\n<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>\n\n<span class="n">secret_key</span> <span class="o">=</span> <span class="s">\'this is secret:)\'</span>\n<span class="n">message</span> <span class="o">=</span> <span class="s">\'Awesome python!!\'</span>\n\n<span class="n">crypto</span> <span class="o">=</span> <span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">secret_key</span><span class="p">)</span>\n<span class="n">cipher_data</span> <span class="o">=</span> <span class="n">crypto</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="n">cipher_data</span><span class="p">)</span>\n\n<span class="n">original_message</span> <span class="o">=</span> <span class="n">crypto</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">cipher_data</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="n">original_message</span><span class="p">)</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="紹介" class="fragment"></span><a href="#%E7%B4%B9%E4%BB%8B"><i class="fa fa-link"></i></a>紹介</h2>\n\n<p>PYthon関連書籍で個人的に「<a href="https://www.oreilly.co.jp/books/9784873117782/" rel="nofollow noopener" target="_blank">退屈なことはPythonにやらせよう</a>」がとても好き<br>\n普段自宅でやってる作業のいろいろが自動化するヒントがたくさん詰まっている本。<br>\n値段はちょっと高いがPythonの文法から実践方法まで学べるのは割とお得だと思う。</p>\n\n<p><a href="https://camo.qiitausercontent.com/bbb0e8fa4156fbc0efcef8b81634a2d2af103096/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64623130623332372d363934392d663637362d323263622d6432343939643162643364362e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/bbb0e8fa4156fbc0efcef8b81634a2d2af103096/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64623130623332372d363934392d663637362d323263622d6432343939643162643364362e6a706567" alt="bookfan_bk-487311778x.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/db10b327-6949-f676-22cb-d2499d1bd3d6.jpeg"></a></p>\n', 'body': '![Python-Logo-PNG-Image.png](https://qiita-image-store.s3.amazonaws.com/0/258841/81125a49-0ba4-2aad-cee8-8ba202957662.png)\n\n## 背景\n\nPythonでよく使うライブラリ集です。\n簡単なソースと学習に役立つサイトのリンクを記載しています。\nGitHubで公開されているものに関してはライブラリ名にリンクを貼っています。\n\n基本的には趣味レベルのみでの利用なので専門的情報が欲しい方は戻るボタン推奨。\n\n## 標準ライブラリ\n\n公式ドキュメントにありますのでこちらをご参照ください。\nhttps://docs.python.jp/3/library/index.html\n\n## 数学系\n\n#### [NumPy](https://github.com/numpy/numpy)\n\nベクトルや行列計算を行うためのライブラリ\n内積、フーリエ変換。行列計算などプログラミング知識が少なくても簡単に使用できるのが特徴。\n少ないコード量で効率よく高速に数値計算\n学習サイト：https://qiita.com/jyori112/items/a15658d1dd17c421e1e2\n\n``` python:連立方程式\n# -*- coding: utf-8 -*-\nimport numpy as np\n\nA = np.array([[1.,3.] ,[4.,2.]]) # 行列Aの生成\nB = np.array([1.,1.])   # 行列Bの生成\n\nX = np.linalg.solve(A, B)\nprint( "X=\\n" + str(X) )\n```\n\n#### [scipy](https://github.com/scipy/scipy)\n\n信号処理や統計などの科学計算用のライブラリ\nscipyではnumpyで行える配列や行列の演算を行うことができ、加えてさらに信号処理や統計といった計算ができる\nNumPy ⊂ SciPy\nな、関係。Scipyだけでいい気がするが世間ではNumPyが主流なのでNumPyで事が足りる機能であるならばNumPyを使うべきなのでしょう\n学習/参考サイト:https://algorithm.joho.info/programming/python/scipy-integrate-quad/\n\n``` python:定積分\n# -*- coding:utf-8 -*-\nfrom scipy import integrate\n \ndef f(x):\n    return 3*x + 1\n \n# 定積分(積分区間[0, 10])\nix, err = integrate.quad(f, 0, 10)\nprint(\'計算結果:\', ix)\nprint(\'誤差：\', err)\n```\n\n#### [matplotlib](https://github.com/matplotlib/matplotlib)\n\nグラフを描画するためのライブラリ\n学習サイト：https://qiita.com/skotaro/items/08dc0b8c5704c94eafb9\n\n``` python:グラフ作成\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX = np.linspace(-np.pi, np.pi, 256, endpoint=True)\nC, S = np.cos(X), np.sin(X)\n\nplt.plot(X, C)\nplt.plot(X, S)\n\nplt.show()\n```\n\n#### [pandas](https://github.com/pandas-dev/pandas)\n\nRに類似のデータフレームを提供するライブラリ\npandasは、Pythonにおいて、データ解析を支援する機能を提供するライブラリである。\n特に、数表および時系列データを操作するためのデータ構造と演算を提供する。\nPythonで実用的なデータ分析をする際の、高水準な基盤となるべく開発されている。\nPandasは扱うデータが幅広い\n学習/参考サイト：https://qiita.com/ysdyt/items/9ccca82fc5b504e7913a\n\n## スクレイピング/クローリング\n\n#### BeautifulSoup4\n\nPythonの定番HTMLパースライブラリ\nスクレイピングする際は必須のライブラリ。\n\n学習/参考サイト:https://python.civic-apps.com/beautifulsoup4-selector/\n\n``` python:html\n# -*- coding: utf-8 -*-\n\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\nurl = "https://qiita.com/"\nf = urllib.request.urlopen(url)\nhtml = f.read().decode(\'utf-8\')\n\nsoup = BeautifulSoup(html, "html.parser")\n```\n\n#### [lxml](https://github.com/lxml)\n\nlxml はXMLやHTML文書を非常に素早く解析するために書かれた非常に広範囲なライブラリ\n学習/参考サイト:https://python.keicode.com/advanced/xml-lxml-1.php\n\n#### [selenium](https://github.com/SeleniumHQ/selenium)\n\nselenium ライブラリは、同名の Selenium というブラウザ操作用のツールがあるのですが、\nその Python バインディング、いわゆる「 Selenium の Python 版」\n\n学習/参考サイト:https://www.inet-solutions.jp/technology/python-selenium/\n\n``` python:クローリング\nimport time\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome()\ndriver.get(\'https://www.google.com/\')\ntime.sleep(5)\nsearch_box = driver.find_element_by_name("q")\nsearch_box.send_keys(\'ChromeDriver\')\nsearch_box.submit()\ntime.sleep(5)\ndriver.quit()\n```\n\n## 画像認識\n\n#### [pix2code](https://github.com/tonybeltramelli/pix2code)\n\nUI 画像からそれを生成するコードを自動生成するライブラリ\n\n学習/参考サイト:https://ledge.ai/pix2code-on-floydhub/\n\n#### [face_recognition](https://github.com/ageitgey/face_recognition)\n\n画像内の人の顔を認識するためのライブラリ\n学習/参考サイト:http://shikouno.hatenablog.com/entry/20171001/1506862903\n\n## その他\n\n#### [python-fire](https://github.com/google/python-fire)\n\nPython のユーティリティクラスをコマンドラインからすぐに呼び出せるようにできるライブラリ\nGoogle が公開している。\n\n学習/参考サイト:https://blog.amedama.jp/entry/2017/03/07/223319\n学習/参考サイト:https://qiita.com/koga1020/items/0c51e365612689615c91\n\n``` python\n# -*- coding: utf-8 -*-\n\nimport fire\n\ndef add(x, y):\n  return x + y\n\ndef multiply(x, y):\n  return x * y\n\nif __name__ == \'__main__\':\n  fire.Fire()\n```\n\n#### [tqdm](https://github.com/tqdm/tqdm)\n\n走らせた処理の進捗状況をプログレスバーとして表示するためのライブラリ\n説明文をつけたり、進捗バーを自分のタイミングで進めることもできます。\n学習/参考サイト:https://blog.amedama.jp/entry/2018/07/23/080000\n\n``` python:進捗率表示\n# -*- coding: utf-8 -*-\n\nfrom tqdm import tqdm\nimport time\n\nfor _ in tqdm(range(100)):\n        time.sleep(0.1)\n```\n\n#### [pycrypto](https://github.com/dlitz/pycrypto)\n\nPythonの暗号化/復号するためのライブラリ\n学習/参考サイト:https://kamatari.github.io/2016/04/23/what-is-pycrypto/\n\n``` python:暗号化して復号\n# -*- coding: utf-8 -*-\nfrom Crypto.Cipher import AES\n\nsecret_key = \'this is secret:)\'\nmessage = \'Awesome python!!\'\n\ncrypto = AES.new(secret_key)\ncipher_data = crypto.encrypt(message)\nprint(cipher_data)\n\noriginal_message = crypto.decrypt(cipher_data)\nprint(original_message)\n```\n\n## 紹介\n\nPYthon関連書籍で個人的に「[退屈なことはPythonにやらせよう](https://www.oreilly.co.jp/books/9784873117782/)」がとても好き\n普段自宅でやってる作業のいろいろが自動化するヒントがたくさん詰まっている本。\n値段はちょっと高いがPythonの文法から実践方法まで学べるのは割とお得だと思う。\n\n![bookfan_bk-487311778x.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/db10b327-6949-f676-22cb-d2499d1bd3d6.jpeg)\n', 'coediting': False, 'comments_count': 5, 'created_at': '2018-12-08T23:10:04+09:00', 'group': None, 'id': 'cb5f850a9811d2a4bc3a', 'likes_count': 358, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Python', 'versions': []}, {'name': 'ライブラリ', 'versions': []}], 'title': 'Python 割と使うライブラリ集', 'updated_at': '2019-05-07T00:42:55+09:00', 'url': 'https://qiita.com/ryuichi1208/items/cb5f850a9811d2a4bc3a', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/2284b1e85135a4d707bd2aa4892e8df93ecb13e5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65326539306139362d343737662d623766342d396164642d6362383238363539346666662e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/2284b1e85135a4d707bd2aa4892e8df93ecb13e5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65326539306139362d343737662d623766342d396164642d6362383238363539346666662e6a706567" alt="ダウンロード.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/e2e90a96-477f-b7f4-9add-cb8286594fff.jpeg"></a></p>\n\n<p>CLIのみの環境でスペックを調べる方法です。<br>\n中古PCを買ったときや仕事で新しいマシンが来たときとかとりあえず打ってみるコマンドたち。<br>\nHWシリアル番号、BIOSのバージョン情報、搭載されているメモリモジュールのメモリサイズなど<br>\n見るだけで楽しい情報を取得していきます。<br>\n特に役立つ情報があるわけではないのでお暇な方どうぞ。</p>\n\n<h2>\n<span id="基本" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC"><i class="fa fa-link"></i></a>基本</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># カーネルバージョン</span>\n<span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-r</span>\n<span class="c"># -m    CPUのタイプを表示する</span>\n<span class="c"># -n    PCのホスト名を表示する</span>\n<span class="c"># -r    カーネルのバージョンを表示する</span>\n<span class="c"># -s    OS名を表示する</span>\n<span class="c"># -v    OSのリリース日を表示する</span>\n<span class="c"># -a    すべての情報を表示する</span>\n\n<span class="c"># ディストリビューション</span>\n<span class="c"># Redhat/CentOS</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/redhat-release\n<span class="nv">$ </span><span class="nb">cat</span> /etc/issue\n<span class="c"># Fedora Core</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/fedora-release\n<span class="c"># Debian</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/debian_version\n<span class="nv">$ </span><span class="nb">cat</span> /etc/issue\n<span class="c"># Turbolinux</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/turbolinux-release\n<span class="c"># SuSE Linux</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/SuSE-release\n<span class="c"># Mandriva Linux</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/mandriva-release\n<span class="c"># Vine Linux</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/vine-release\n\n<span class="c"># 自身のマシン名</span>\n<span class="nv">$ </span><span class="nb">hostname</span>\n<span class="c"># -d    DNSドメインの名前を表示</span>\n<span class="c"># -f    FQDN（Fully Qualified Domain Name）を表示</span>\n\n<span class="c"># BIOS確認</span>\n<span class="nv">$ </span><span class="nb">sudo </span>dmidecode\n\n<span class="c"># マザーボード</span>\n<span class="nv">$ </span><span class="nb">sudo </span>dmidecode <span class="nt">-t</span> baseboard\n\n<span class="c"># カーネルの出力したメッセージ確認</span>\n<span class="nv">$ </span>dmesg <span class="nt">-l</span> alert\n<span class="c"># -x    表示レベル（level）と表示対象（facility）を表示</span>\n<span class="c"># -L    色付きで表示</span>\n</pre></div></div>\n\n<h2>\n<span id="cpu" class="fragment"></span><a href="#cpu"><i class="fa fa-link"></i></a>CPU</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># CPU情報</span>\n<span class="nv">$ </span><span class="nb">cat</span> /proc/cpuinfo\n<span class="nv">$ </span>lscpu\n\n<span class="c"># プロセス毎のCPU使用率などをリアルタイムで(sarでも見たり)</span>\n<span class="nv">$ </span>top\n<span class="c"># -d    更新の間隔を指定</span>\n<span class="c"># -n    表示回数を指定</span>\n\n<span class="c"># システムの負荷平均、稼働時間も見れる</span>\n<span class="nv">$ </span>w\n<span class="nv">$ </span><span class="nb">uptime</span>\n<span class="c"># -s  起動した日時が表示される</span>\n<span class="c"># -p  表示フォーマットを変更する(個人的に好き)</span>\n</pre></div></div>\n\n<h2>\n<span id="メモリ" class="fragment"></span><a href="#%E3%83%A1%E3%83%A2%E3%83%AA"><i class="fa fa-link"></i></a>メモリ</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># メモリ情報</span>\n<span class="nv">$ </span><span class="nb">cat</span> /proc/meminfo\n\n<span class="c"># メモリの空き情報</span>\n<span class="nv">$ </span>free\n<span class="c"># -b     バイト単位で表示</span>\n<span class="c"># -k     KB単位で表示</span>\n<span class="c"># -m     MB単位で表示</span>\n<span class="c"># -g     GB単位で表示</span>\n<span class="c"># --tera TB単位で表示</span>\n\n<span class="c"># 仮想メモリやディスクI/Oの統計情報</span>\n<span class="nv">$ </span>vmstat <span class="nt">-s</span>\n</pre></div></div>\n\n<p>vmstatコマンドはオプションが多数あります。下記をご参照ください<br>\n<a href="https://tech.nikkeibp.co.jp/it/article/COLUMN/20060228/230989/" class="autolink" rel="nofollow noopener" target="_blank">https://tech.nikkeibp.co.jp/it/article/COLUMN/20060228/230989/</a></p>\n\n<h2>\n<span id="ディスク" class="fragment"></span><a href="#%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF"><i class="fa fa-link"></i></a>ディスク</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 全ディスクの使用量と空き容量</span>\n<span class="nv">$ </span><span class="nb">df</span> <span class="nt">-hT</span>\n\n<span class="c"># 特定ディレクトリ配下の使用量</span>\n<span class="nv">$ </span><span class="nb">du</span> <span class="nt">-skh</span>  | <span class="nb">sort</span> <span class="nt">-nr</span>\n\n<span class="c"># ブロックデバイスのパーティション情報を表示</span>\n<span class="nv">$ </span>parted <span class="nt">-l</span>\n\n<span class="c"># 接続されているHDDやUSBドライブを調べる</span>\n<span class="nv">$ </span>lsblk\n\n<span class="c"># パーティションの情報確認</span>\n<span class="nv">$ </span><span class="nb">sudo </span>fdisk <span class="nt">-l</span> /dev/sda\n\n<span class="c"># 物理的な情報を詳しく(あまり使わない)</span>\n<span class="nv">$ </span><span class="nb">sudo </span>hdparm <span class="nt">-i</span> /dev/sda\n\n<span class="c"># マウントしてないデバイスの容量</span>\n<span class="nv">$ </span><span class="nb">sudo </span>smartctl <span class="nt">-a</span> /dev/sda | <span class="nb">grep</span> “User Capacity”\n</pre></div></div>\n\n<h2>\n<span id="ネットワーク" class="fragment"></span><a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF"><i class="fa fa-link"></i></a>ネットワーク</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># ネットワークのデバイス情報</span>\n<span class="nv">$ </span>ip a sh dev ens27f0\n\n<span class="c"># LISTENしているポート一覧</span>\n<span class="nv">$ </span><span class="nb">sudo </span>ss <span class="nt">-antul</span>\n</pre></div></div>\n\n<h2>\n<span id="ビデオカード" class="fragment"></span><a href="#%E3%83%93%E3%83%87%E3%82%AA%E3%82%AB%E3%83%BC%E3%83%89"><i class="fa fa-link"></i></a>ビデオカード</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>lspci | <span class="nb">grep </span>VGA\n</pre></div></div>\n\n<p>ここからは若干それますがよく使うコマンド</p>\n\n<h2>\n<span id="カーネルパラメータ" class="fragment"></span><a href="#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF"><i class="fa fa-link"></i></a>カーネルパラメータ</h2>\n\n<p>カーネルパラメータは以下2つで設定を行う</p>\n\n<p>①/etc/sysctl.conf<br>\n②/proc配下</p>\n\n<p>①はシステム起動時に反映されるため、恒久的に適用したい場合にはこちらへ記載する<br>\n②は再起動すると設定が元に戻る。一時的に設定を弄りたい時用。</p>\n\n<p>sysctlコマンドは、サーバー稼働中にカーネルパラメータを設定・変更するコマンド<br>\n<code>sysctl [オプション]</code><br>\nのような書式で実行します。色々と資料を見ましたがusageが一番見やすかった。。。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>sysctl\n\nUsage:\n sysctl <span class="o">[</span>options] <span class="o">[</span>variable[<span class="o">=</span>value] ...]\n\nOptions:\n  <span class="nt">-a</span>, <span class="nt">--all</span>            display all variables\n  <span class="nt">-A</span>                   <span class="nb">alias </span>of <span class="nt">-a</span>\n  <span class="nt">-X</span>                   <span class="nb">alias </span>of <span class="nt">-a</span>\n      <span class="nt">--deprecated</span>     include deprecated parameters to listing\n  <span class="nt">-b</span>, <span class="nt">--binary</span>         print value without new line\n  <span class="nt">-e</span>, <span class="nt">--ignore</span>         ignore unknown variables errors\n  <span class="nt">-N</span>, <span class="nt">--names</span>          print variable names without values\n  <span class="nt">-n</span>, <span class="nt">--values</span>         print only values of a variables\n  <span class="nt">-p</span>, <span class="nt">--load</span><span class="o">[=</span>&lt;file&gt;]  <span class="nb">read </span>values from file\n  <span class="nt">-f</span>                   <span class="nb">alias </span>of <span class="nt">-p</span>\n      <span class="nt">--system</span>         <span class="nb">read </span>values from all system directories\n  <span class="nt">-r</span>, <span class="nt">--pattern</span> &lt;expression&gt;\n                       <span class="k">select </span>setting that match expression\n  <span class="nt">-q</span>, <span class="nt">--quiet</span>          <span class="k">do </span>not <span class="nb">echo </span>variable <span class="nb">set</span>\n  <span class="nt">-w</span>, <span class="nt">--write</span>          <span class="nb">enable </span>writing a value to variable\n  <span class="nt">-o</span>                   does nothing\n  <span class="nt">-x</span>                   does nothing\n  <span class="nt">-d</span>                   <span class="nb">alias </span>of <span class="nt">-h</span>\n\n <span class="nt">-h</span>, <span class="nt">--help</span>     display this <span class="nb">help </span>and <span class="nb">exit</span>\n <span class="nt">-V</span>, <span class="nt">--version</span>  output version information and <span class="nb">exit\n\n</span>For more details see sysctl<span class="o">(</span>8<span class="o">)</span><span class="nb">.</span>\n</pre></div></div>\n\n<h2>\n<span id="システムモニタリング-sarコマンド" class="fragment"></span><a href="#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0-sar%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>システムモニタリング sarコマンド</h2>\n\n<p>sarとは、sysstatパッケージに含まれている、システムの統計情報を取得するコマンド</p>\n\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>確認項目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-u</td>\n<td>CPU</td>\n</tr>\n<tr>\n<td>-u -P ALL</td>\n<td>CPUを各コアごとに</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>ロードアベレージ</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>メモリ</td>\n</tr>\n<tr>\n<td>-W</td>\n<td>スワップ</td>\n</tr>\n<tr>\n<td>-n DEV</td>\n<td>ネットワーク</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>ディスクIO</td>\n</tr>\n</tbody>\n</table>\n\n<p>簡単な使い方は下記</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 日時を指定してメモリ状況を見る</span>\n<span class="nv">$ </span>sar <span class="nt">-r</span> <span class="nt">-f</span> /var/log/sa/sa02 <span class="nt">-s</span> 12:00:00 <span class="nt">-e</span> 13:00:00\n<span class="c"># kbmemfree メモリ空き容量(kb)</span>\n<span class="c"># kbmemused メモリ使用量(kb)</span>\n<span class="c"># %memused  メモリ使用率</span>\n<span class="c"># kbswpfree スワップ空き容量(kb)</span>\n<span class="c"># kbswpused スワップ使用量(kb)</span>\n<span class="c"># %swpused  スワップ使用率</span>\n\n<span class="c"># ディスクI/O確認</span>\n<span class="nv">$ </span>sar <span class="nt">-b</span> <span class="nt">-s</span> 21:00:00\n<span class="c"># tps   秒間I/Oリクエスト 数の合計</span>\n<span class="c"># rtps  秒間読み込みIOリクエスト数の合計</span>\n<span class="c"># wtps  秒間書き込みIOリクエスト数の合計</span>\n<span class="c"># bread/s   秒間読み込み（ブロック単位）IOリクエストのデータ量の合計</span>\n<span class="c"># bwrtn/s   秒間書き込み（ブロック単位）IOリクエストのデータ量の合計</span>\n\n<span class="c"># CPU使用率</span>\n<span class="nv">$ </span>sar <span class="nt">-u</span> <span class="nt">-s</span> 21:00:00\n<span class="c"># %user アプリケーション（ユーザプロセス）が使用している状態</span>\n<span class="c"># %system   カーネル（OSなど）が使用している状態</span>\n<span class="c"># %iowait   ディスクI/O待ち状態</span>\n<span class="c"># %idle CPUが何の処理もしない待機状態（I/O待ちの時間は除く）</span>\n</pre></div></div>\n\n<h2>\n<span id="その他" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96"><i class="fa fa-link"></i></a>その他</h2>\n\n<p>AWSインスタンスのスペック比較記事が面白かったのでご紹介</p>\n\n<p>現行世代全18種類EC2インスタンスのHW情報をコマンドで比較してみた<br>\n<a href="https://dev.classmethod.jp/cloud/aws/ec2-instance-detail/" class="autolink" rel="nofollow noopener" target="_blank">https://dev.classmethod.jp/cloud/aws/ec2-instance-detail/</a></p>\n\n<h2>\n<span id="参考" class="fragment"></span><a href="#%E5%8F%82%E8%80%83"><i class="fa fa-link"></i></a>参考</h2>\n\n<p>Linuxでコマンドラインからマシンスペックを確認する方法<br>\n<a href="https://qiita.com/DaisukeMiyamoto/items/98ef077ddf44b5727c29" class="autolink" id="reference-be6fbe29ce8c933b4e7b">https://qiita.com/DaisukeMiyamoto/items/98ef077ddf44b5727c29</a></p>\n\n<p>sar(sysstat)によるボトルネック特定<br>\n<a href="https://qiita.com/kidach1/items/07637a5baa0da7d52e6a" class="autolink" id="reference-4aadf6e30e5e71d99b6d">https://qiita.com/kidach1/items/07637a5baa0da7d52e6a</a></p>\n', 'body': '![ダウンロード.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/e2e90a96-477f-b7f4-9add-cb8286594fff.jpeg)\n\nCLIのみの環境でスペックを調べる方法です。\n中古PCを買ったときや仕事で新しいマシンが来たときとかとりあえず打ってみるコマンドたち。\nHWシリアル番号、BIOSのバージョン情報、搭載されているメモリモジュールのメモリサイズなど\n見るだけで楽しい情報を取得していきます。\n特に役立つ情報があるわけではないのでお暇な方どうぞ。\n\n## 基本\n\n``` bash\n# カーネルバージョン\n$ uname -r\n# -m\tCPUのタイプを表示する\n# -n\tPCのホスト名を表示する\n# -r\tカーネルのバージョンを表示する\n# -s\tOS名を表示する\n# -v\tOSのリリース日を表示する\n# -a\tすべての情報を表示する\n\n# ディストリビューション\n# Redhat/CentOS\n$ cat /etc/redhat-release\n$ cat /etc/issue\n# Fedora Core\n$ cat /etc/fedora-release\n# Debian\n$ cat /etc/debian_version\n$ cat /etc/issue\n# Turbolinux\n$ cat /etc/turbolinux-release\n# SuSE Linux\n$ cat /etc/SuSE-release\n# Mandriva Linux\n$ cat /etc/mandriva-release\n# Vine Linux\n$ cat /etc/vine-release\n\n# 自身のマシン名\n$ hostname\n# -d    DNSドメインの名前を表示\n# -f    FQDN（Fully Qualified Domain Name）を表示\n\n# BIOS確認\n$ sudo dmidecode\n\n# マザーボード\n$ sudo dmidecode -t baseboard\n\n# カーネルの出力したメッセージ確認\n$ dmesg -l alert\n# -x    表示レベル（level）と表示対象（facility）を表示\n# -L    色付きで表示\n```\n\n## CPU\n\n``` bash\n# CPU情報\n$ cat /proc/cpuinfo\n$ lscpu\n\n# プロセス毎のCPU使用率などをリアルタイムで(sarでも見たり)\n$ top\n# -d    更新の間隔を指定\n# -n    表示回数を指定\n\n# システムの負荷平均、稼働時間も見れる\n$ w\n$ uptime\n# -s  起動した日時が表示される\n# -p  表示フォーマットを変更する(個人的に好き)\n```\n\n## メモリ\n\n``` bash\n# メモリ情報\n$ cat /proc/meminfo\n\n# メモリの空き情報\n$ free\n# -b     バイト単位で表示\n# -k     KB単位で表示\n# -m     MB単位で表示\n# -g     GB単位で表示\n# --tera TB単位で表示\n\n# 仮想メモリやディスクI/Oの統計情報\n$ vmstat -s\n```\n\nvmstatコマンドはオプションが多数あります。下記をご参照ください\nhttps://tech.nikkeibp.co.jp/it/article/COLUMN/20060228/230989/\n\n## ディスク\n\n``` bash\n# 全ディスクの使用量と空き容量\n$ df -hT\n\n# 特定ディレクトリ配下の使用量\n$ du -skh  | sort -nr\n\n# ブロックデバイスのパーティション情報を表示\n$ parted -l\n\n# 接続されているHDDやUSBドライブを調べる\n$ lsblk\n\n# パーティションの情報確認\n$ sudo fdisk -l /dev/sda\n\n# 物理的な情報を詳しく(あまり使わない)\n$ sudo hdparm -i /dev/sda\n\n# マウントしてないデバイスの容量\n$ sudo smartctl -a /dev/sda | grep “User Capacity”\n```\n\n## ネットワーク\n\n``` bash\n# ネットワークのデバイス情報\n$ ip a sh dev ens27f0\n\n# LISTENしているポート一覧\n$ sudo ss -antul\n```\n\n## ビデオカード\n\n``` bash\n$ lspci | grep VGA\n```\n\nここからは若干それますがよく使うコマンド\n\n## カーネルパラメータ\n\nカーネルパラメータは以下2つで設定を行う\n\n①/etc/sysctl.conf\n②/proc配下\n\n①はシステム起動時に反映されるため、恒久的に適用したい場合にはこちらへ記載する\n②は再起動すると設定が元に戻る。一時的に設定を弄りたい時用。\n\nsysctlコマンドは、サーバー稼働中にカーネルパラメータを設定・変更するコマンド\n```sysctl [オプション]```\nのような書式で実行します。色々と資料を見ましたがusageが一番見やすかった。。。\n\n``` bash\n$ sysctl\n\nUsage:\n sysctl [options] [variable[=value] ...]\n\nOptions:\n  -a, --all            display all variables\n  -A                   alias of -a\n  -X                   alias of -a\n      --deprecated     include deprecated parameters to listing\n  -b, --binary         print value without new line\n  -e, --ignore         ignore unknown variables errors\n  -N, --names          print variable names without values\n  -n, --values         print only values of a variables\n  -p, --load[=<file>]  read values from file\n  -f                   alias of -p\n      --system         read values from all system directories\n  -r, --pattern <expression>\n                       select setting that match expression\n  -q, --quiet          do not echo variable set\n  -w, --write          enable writing a value to variable\n  -o                   does nothing\n  -x                   does nothing\n  -d                   alias of -h\n\n -h, --help     display this help and exit\n -V, --version  output version information and exit\n\nFor more details see sysctl(8).\n```\n\n## システムモニタリング sarコマンド\n\nsarとは、sysstatパッケージに含まれている、システムの統計情報を取得するコマンド\n\n|オプション|確認項目|\n----------|--------\n|-u|CPU\n|-u -P ALL|CPUを各コアごとに\n|-q|ロードアベレージ\n|-r|メモリ\n|-W|スワップ\n|-n DEV|ネットワーク\n|-b|ディスクIO\n\n簡単な使い方は下記\n\n``` bash\n# 日時を指定してメモリ状況を見る\n$ sar -r -f /var/log/sa/sa02 -s 12:00:00 -e 13:00:00\n# kbmemfree\tメモリ空き容量(kb)\n# kbmemused\tメモリ使用量(kb)\n# %memused\tメモリ使用率\n# kbswpfree\tスワップ空き容量(kb)\n# kbswpused\tスワップ使用量(kb)\n# %swpused\tスワップ使用率\n\n# ディスクI/O確認\n$ sar -b -s 21:00:00\n# tps\t秒間I/Oリクエスト 数の合計\n# rtps\t秒間読み込みIOリクエスト数の合計\n# wtps\t秒間書き込みIOリクエスト数の合計\n# bread/s\t秒間読み込み（ブロック単位）IOリクエストのデータ量の合計\n# bwrtn/s\t秒間書き込み（ブロック単位）IOリクエストのデータ量の合計\n\n# CPU使用率\n$ sar -u -s 21:00:00\n# %user\tアプリケーション（ユーザプロセス）が使用している状態\n# %system\tカーネル（OSなど）が使用している状態\n# %iowait\tディスクI/O待ち状態\n# %idle\tCPUが何の処理もしない待機状態（I/O待ちの時間は除く）\n```\n\n## その他\n\nAWSインスタンスのスペック比較記事が面白かったのでご紹介\n\n現行世代全18種類EC2インスタンスのHW情報をコマンドで比較してみた\nhttps://dev.classmethod.jp/cloud/aws/ec2-instance-detail/\n\n## 参考\n\nLinuxでコマンドラインからマシンスペックを確認する方法\nhttps://qiita.com/DaisukeMiyamoto/items/98ef077ddf44b5727c29\n\nsar(sysstat)によるボトルネック特定\nhttps://qiita.com/kidach1/items/07637a5baa0da7d52e6a\n\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-12-05T21:29:20+09:00', 'group': None, 'id': '732a7c58de923c8b631f', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'CPU', 'versions': []}, {'name': 'メモリ', 'versions': []}, {'name': 'スペック', 'versions': []}], 'title': 'CLIでマシン情報を取得する方法', 'updated_at': '2018-12-05T23:40:27+09:00', 'url': 'https://qiita.com/ryuichi1208/items/732a7c58de923c8b631f', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>makeファイルについてのまとめ</p>\n\n<h2>\n<span id="makeとは" class="fragment"></span><a href="#make%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>makeとは</h2>\n\n<p>makeは主にCやC++などのコンパイル型言語で記述されたプログラムを用意にビルドするためのツール。<br>\n「$ gcc -Wall -I../common/ -I. -DUTIL -g」とか毎回記述するのが面倒なので一つのコマンドでビルドを実行します。<br>\n最近ネットで見たのですがGolangでも良く使われているようですね。</p>\n\n<p>面白い記事を見たので紹介します。<br>\n<a href="https://frasco.io/golang-dont-afraid-of-makefiles-785f3ec7eb32" rel="nofollow noopener" target="_blank">Golang を使うなら Makefile を恐れるな</a></p>\n\n<p>GNU Makeのサイト<br>\n<a href="https://www.gnu.org/software/make/" class="autolink" rel="nofollow noopener" target="_blank">https://www.gnu.org/software/make/</a></p>\n\n<h2>\n<span id="makeを使ってみる" class="fragment"></span><a href="#make%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>makeを使ってみる</h2>\n\n<p>今回使用しているバージョンは下記です。<br>\nmacならデフォルトで入ってます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>make <span class="nt">--version</span>\nGNU Make 3.81\n</pre></div></div>\n\n<h2>\n<span id="基本情報" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1"><i class="fa fa-link"></i></a>基本情報</h2>\n\n<p>Makefileの基本形は下記の通り。<br>\n<strong><em>インデントは、スペースではなく、必ずタブにしてください</em></strong></p>\n\n<div class="code-frame" data-lang="基本形"><div class="highlight"><pre>[変数名] = 値\n\n(-----TAB-----) [作り方]\n</pre></div></div>\n\n<h2>\n<span id="makeを試す" class="fragment"></span><a href="#make%E3%82%92%E8%A9%A6%E3%81%99"><i class="fa fa-link"></i></a>makeを試す</h2>\n\n<p>先ずは一つのファイルのコンパイルとバイナリ削除までを試します。<br>\nソースは以下。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">hello.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>\n<span class="p">{</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"Hello World!</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>これをコンパイルしたりバイナリ削除したりするのはまだ容易です。<br>\n本領を発揮するのはまだですがそこまではとりあえず基本。</p>\n\n<div class="code-frame" data-lang="">\n<div class="code-lang"><span class="bold">Makefile</span></div>\n<div class="highlight"><pre>CC = /usr/bin/gcc\n\nhello:\n        $(CC) -o hello hello.c -g\n\nclean:\n        rm -f hello\n</pre></div>\n</div>\n\n<p>上記ファイルを元にmakeを実行してみます。<br>\n今回はターゲット名にhelloと記載したので「make hello」として実行します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>make hello\n/usr/bin/gcc <span class="nt">-o</span> hello hello.c\n<span class="nv">$ </span><span class="nb">ls\n</span>Makefile  hello  hello.c\n<span class="nv">$ </span>make clean\n<span class="nb">rm</span> <span class="nt">-f</span> hello\n<span class="nv">$ </span><span class="nb">ls\n</span>Makefile  hello.c\n</pre></div></div>\n\n<p>次は複数ファイル同時にコンパイルとバイナリ削除の例です。<br>\nターゲット名をallとしています。<br>\nまたここでソースごとにオプションを書くのが面倒ってことでオプションをCFLAGSに代入してます。</p>\n\n<div class="code-frame" data-lang="Makefile"><div class="highlight"><pre><span class="nv">CC</span> <span class="o">=</span> /usr/bin/gcc\n<span class="nv">CFLAGS</span> <span class="o">=</span> <span class="nt">-O4</span> <span class="nt">-Wall</span> <span class="nt">-I</span>/usr/local/include\n\n<span class="nl">all</span><span class="o">:</span>\n        <span class="err">$(CC)</span> <span class="err">$(CFLAGS)</span> <span class="err">-o</span> <span class="err">hello1</span> <span class="err">hello1.c</span> <span class="err">-g</span>\n        <span class="err">$(CC)</span> <span class="err">$(CFLAGS)</span> <span class="err">-o</span> <span class="err">hello2</span> <span class="err">hello2.c</span> <span class="err">-g</span>\n\n<span class="nl">clean</span><span class="o">:</span>\n        <span class="err">rm</span> <span class="err">-f</span> <span class="err">hello1</span> <span class="err">hello2</span>\n</pre></div></div>\n\n<h2>\n<span id="自動変数" class="fragment"></span><a href="#%E8%87%AA%E5%8B%95%E5%A4%89%E6%95%B0"><i class="fa fa-link"></i></a>自動変数</h2>\n\n<p>Makefileには文字数を減らすための仕組み自動変数がある。</p>\n\n<table>\n<thead>\n<tr>\n<th>変数名</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>"$@"</td>\n<td>ターゲットファイル名</td>\n</tr>\n<tr>\n<td>"$%"</td>\n<td>ターゲットがアーカイブメンバだったときのターゲットメンバ名</td>\n</tr>\n<tr>\n<td>"$&lt;"</td>\n<td>最初の依存するファイルの名前</td>\n</tr>\n<tr>\n<td>"$?"</td>\n<td>ターゲットより新しいすべての依存するファイル名</td>\n</tr>\n<tr>\n<td>"$^"</td>\n<td>すべての依存するファイルの名前</td>\n</tr>\n<tr>\n<td>"$+"</td>\n<td>Makefileと同じ順番の依存するファイルの名前</td>\n</tr>\n<tr>\n<td>"$*"</td>\n<td>サフィックスを除いたターゲットの名前</td>\n</tr>\n</tbody>\n</table>\n', 'body': '## 概要\n\nmakeファイルについてのまとめ\n\n## makeとは\n\nmakeは主にCやC++などのコンパイル型言語で記述されたプログラムを用意にビルドするためのツール。\n「$ gcc -Wall -I../common/ -I. -DUTIL -g」とか毎回記述するのが面倒なので一つのコマンドでビルドを実行します。\n最近ネットで見たのですがGolangでも良く使われているようですね。\n\n面白い記事を見たので紹介します。\n[Golang を使うなら Makefile を恐れるな](https://frasco.io/golang-dont-afraid-of-makefiles-785f3ec7eb32)\n\nGNU Makeのサイト\nhttps://www.gnu.org/software/make/\n\n## makeを使ってみる\n\n今回使用しているバージョンは下記です。\nmacならデフォルトで入ってます。\n\n``` bash\n$ make --version\nGNU Make 3.81\n```\n\n## 基本情報\n\nMakefileの基本形は下記の通り。\n___インデントは、スペースではなく、必ずタブにしてください___\n\n\n``` 基本形\n[変数名] = 値\n[作りたいもの]: [材料]\n(-----TAB-----) [作り方]\n```\n\n## makeを試す\n\n先ずは一つのファイルのコンパイルとバイナリ削除までを試します。\nソースは以下。\n\n``` c:hello.c\n#include <stdio.h>\n\nint main(int argc, char **argv)\n{\n        fprintf(stdout, "Hello World!\\n");\n        return 0;\n}\n```\n\nこれをコンパイルしたりバイナリ削除したりするのはまだ容易です。\n本領を発揮するのはまだですがそこまではとりあえず基本。\n\n``` :Makefile\nCC = /usr/bin/gcc\n\nhello:\n        $(CC) -o hello hello.c -g\n\nclean:\n        rm -f hello\n```\n\n上記ファイルを元にmakeを実行してみます。\n今回はターゲット名にhelloと記載したので「make hello」として実行します。\n\n``` bash\n$ make hello\n/usr/bin/gcc -o hello hello.c\n$ ls\nMakefile  hello  hello.c\n$ make clean\nrm -f hello\n$ ls\nMakefile  hello.c\n```\n\n次は複数ファイル同時にコンパイルとバイナリ削除の例です。\nターゲット名をallとしています。\nまたここでソースごとにオプションを書くのが面倒ってことでオプションをCFLAGSに代入してます。\n\n``` Makefile\nCC = /usr/bin/gcc\nCFLAGS = -O4 -Wall -I/usr/local/include\n\nall:\n        $(CC) $(CFLAGS) -o hello1 hello1.c -g\n        $(CC) $(CFLAGS) -o hello2 hello2.c -g\n\nclean:\n        rm -f hello1 hello2\n```\n\n## 自動変数\n\nMakefileには文字数を減らすための仕組み自動変数がある。\n\n|変数名|説明|\n-------|---\n|"$@"  |ターゲットファイル名|\n|"$%"  | ターゲットがアーカイブメンバだったときのターゲットメンバ名|\n|"$<"  | 最初の依存するファイルの名前|\n|"$?"  | ターゲットより新しいすべての依存するファイル名|\n|"$^"  | すべての依存するファイルの名前|\n|"$+"  | Makefileと同じ順番の依存するファイルの名前|\n|"$*"  | サフィックスを除いたターゲットの名前|\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-12-02T21:03:23+09:00', 'group': None, 'id': '77bb31bc7d625e0eb116', 'likes_count': 5, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'C言語', 'versions': []}], 'title': 'C言語でmakeのいろいろ', 'updated_at': '2018-12-25T22:44:37+09:00', 'url': 'https://qiita.com/ryuichi1208/items/77bb31bc7d625e0eb116', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/35d14eeb74f1bd89167cd36985caba6ec4819cd6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35376133383835382d643963622d303035382d343365342d3235386537353636386362342e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/35d14eeb74f1bd89167cd36985caba6ec4819cd6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35376133383835382d643963622d303035382d343365342d3235386537353636386362342e706e67" alt="1086321.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/57a38858-d9cb-0058-43e4-258e75668cb4.png"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p><a href="http://blog.chaspy.me/entry/2018/02/17/120000" rel="nofollow noopener" target="_blank">「GitLab実践ガイド」を読んだ</a><br>\nこのサイトを見て以降GitLabに興味を持ったので自宅に構築してみました。<br>\nその手順等を公開していこうと思います。</p>\n\n<p>記事概要は構築とリポジトリにプッシュされたら簡単なテストを実行ってところです。</p>\n\n<h2>\n<span id="対象読者" class="fragment"></span><a href="#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85"><i class="fa fa-link"></i></a>対象読者</h2>\n\n<ul>\n<li>自宅にGitサーバを。。。と思ってる人</li>\n<li>CIしてみたい人</li>\n</ul>\n\n<h2>\n<span id="gitlab" class="fragment"></span><a href="#gitlab"><i class="fa fa-link"></i></a>GitLab</h2>\n\n<p>GitHubと同様に、Gitベースのソースコード管理機能や、マージリクエストによるレビュー機能を備えたサービス。<br>\n社内OSSや自宅OSSなんかで使える無料プランもあります。<br>\nRuby on Railsで開発されており他のGitサーバと比べると比較的マシンスペックが要求されます。</p>\n\n<p>機能的に一番の特徴はリポジトリのCI/CD。コミット後に自動でテストを行ってくれる機能。<br>\n以下の記事が大変わかりやすかったので参考にしながら実行していこうと思います。<br>\n■ <a href="https://qiita.com/bremen/items/f47f383b9931a840a25c" id="reference-9e583ffd978a3f1abbbc">GitLab CIでテスト・ビルド・デプロイを自動化する</a></p>\n\n<p>リポジトリは下記<br>\n<a href="https://github.com/gitlabhq/gitlabhq" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/gitlabhq/gitlabhq</a></p>\n\n<p>OSSのGitサーバは他にも何点か有名どころがあります。<br>\nそれぞれの違いについては今回は言及しませんがリンクだけ張っておきます。</p>\n\n<ul>\n<li><a href="https://github.com/gitbucket/gitbucket" rel="nofollow noopener" target="_blank">GitBucket</a></li>\n<li><a href="https://github.com/gitblit/gitblit" rel="nofollow noopener" target="_blank">gitblit</a></li>\n<li><a href="https://github.com/gogs/gogs" rel="nofollow noopener" target="_blank">gogs</a></li>\n</ul>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<p>今回も自宅のサーバ機にインストールしていきます。<br>\nDockerとDocker-composeのバージョンは下記です。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>root@ubuntu0827:~/work/gitlab/test# <span class="nb">uname</span> <span class="nt">-r</span>\n4.15.0-39-generic\n\nroot@ubuntu0827:~/work/gitlab/test# docker <span class="nt">--version</span>\nDocker version 18.06.1-ce, build e68fc7a\n\nroot@ubuntu0827:~/work/gitlab/test# docker-compose <span class="nt">--version</span>\ndocker-compose version 1.22.0, build f46880f\n</pre></div></div>\n\n<h2>\n<span id="導入手順" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>導入手順</h2>\n\n<p>特に何も気にせずにGitLabの公式ドキュメント通りにベースを作成。<br>\nポートが競合するのでその部分のみ新たに設定してます。</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><span class="na">web</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">gitlab/gitlab-ce:latest\'</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>\n    <span class="na">hostname</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">localhost\'</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="na">GITLAB_OMNIBUS_CONFIG</span><span class="pi">:</span> <span class="pi">|</span>\n        <span class="no">external_url \'http://localhost:9010\'</span>\n        <span class="no">gitlab_rails[\'gitlab_shell_ssh_port\'] = 2022</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s1">\'</span><span class="s">9010:9010\'</span>\n      <span class="pi">-</span> <span class="s1">\'</span><span class="s">2022:22\'</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s1">\'</span><span class="s">/srv/gitlab/config:/etc/gitlab\'</span>\n      <span class="pi">-</span> <span class="s1">\'</span><span class="s">/srv/gitlab/logs:/var/log/gitlab\'</span>\n      <span class="pi">-</span> <span class="s1">\'</span><span class="s">/srv/gitlab/data:/var/opt/gitlab\'</span>\n</pre></div>\n</div>\n\n<p>docker-compose.ymlをのあるディレクトリであとは実行するだけで構築完了。<br>\nここまで約15分。ほんと便利ですねDocker。<br>\nもちろん細かい設定を考えればもっとかかりますがとりあえず味見程度の使用なら上記で問題なさそうです。<br>\nHTTPSの利用も2行修正すれば使えますがSafariで使用する時に警告がうるさいのでオフにしてます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>root@ubuntu0827:~/work/gitlab/test# docker-compose up <span class="nt">-d</span>\n\n<span class="c"># 下記でログを確認。エラー等が出ていなければ問題なし</span>\nroot@ubuntu0827:~/work/gitlab/test# docker-compose logs <span class="nt">-f</span>\n</pre></div></div>\n\n<p>起動したらあとはクライアントのブラウザから設定したポートへアクセスするだけ。<br>\nrootユーザのパスワード設定を求められるので設定してくだいさい。<br>\n設定後はとりあえずrootでリポジトリを作るところまでやってみます。</p>\n\n<h4>\n<span id="パスワード設定画面" class="fragment"></span><a href="#%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E8%A8%AD%E5%AE%9A%E7%94%BB%E9%9D%A2"><i class="fa fa-link"></i></a>パスワード設定画面</h4>\n\n<p><a href="https://camo.qiitausercontent.com/0ff84fb09f4fca79974a9d298d62fed7572cf6da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34393530323662662d343336382d643866362d656161342d3762366230373438373738392e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/0ff84fb09f4fca79974a9d298d62fed7572cf6da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f34393530323662662d343336382d643866362d656161342d3762366230373438373738392e706e67" alt="スクリーンショット 2018-12-01 21.09.27.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/495026bf-4368-d8f6-eaa4-7b6b07487789.png"></a></p>\n\n<h4>\n<span id="リポジトリ作成画面" class="fragment"></span><a href="#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90%E7%94%BB%E9%9D%A2"><i class="fa fa-link"></i></a>リポジトリ作成画面</h4>\n\n<p><a href="https://camo.qiitausercontent.com/a1d89a7b50b5b547665169b25c2fdf3f42adcfea/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37313235653964652d623236352d303336302d613030382d6637303234313864313334652e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/a1d89a7b50b5b547665169b25c2fdf3f42adcfea/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37313235653964652d623236352d303336302d613030382d6637303234313864313334652e706e67" alt="スクリーンショット 2018-12-01 21.21.48.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/7125e9de-b265-0360-a008-f702418d134e.png"></a></p>\n\n<p>first_projectというリポジトリを作成。<br>\nprivateを選択しcreateを押すだけでリポジトリが作成されます。</p>\n\n<h4>\n<span id="cloneしてpushまでしてみる" class="fragment"></span><a href="#clone%E3%81%97%E3%81%A6push%E3%81%BE%E3%81%A7%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>cloneしてpushまでしてみる</h4>\n\n<p>いつものGitの使い方と同じです。<br>\ncloneしたりpushしたり操作に違いはありません。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>git clone http://localhost:9010/root/first_project.git\n<span class="nv">$ </span>git diff\ndiff <span class="nt">--git</span> a/README.md b/README.md\nindex 30d74d2..000610e 100644\n<span class="nt">---</span> a/README.md\n+++ b/README.md\n@@ <span class="nt">-1</span> +1,2 @@\n<span class="nt">-test</span>\n<span class="se">\\ </span>No newline at end of file\n+test\n+first commit\n\n<span class="nv">$ </span>git config user.name ryuichi1208\n<span class="nv">$ </span>git config user.email test_mail@exmample.com\n<span class="nv">$ </span>git add <span class="nt">-A</span> <span class="nb">.</span> <span class="p">;</span> git commit <span class="nt">-m</span> <span class="s2">"first commit"</span>\n<span class="nv">$ </span>git push\n</pre></div></div>\n\n<h2>\n<span id="ユーザグループ作成" class="fragment"></span><a href="#%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>ユーザ/グループ作成</h2>\n\n<p>上記の時点では管理者のみでこのような運用はありえない。<br>\nユーザとグループを作成して適切な権限を与えてみる。</p>\n\n<p>と、書いている途中で気づいたが基本GUIでとても分かりやすいので消しました笑<br>\nまあ迷う人はいないと思います。。。</p>\n\n<p>一応途中まで書いていた際に参考にしたURLを記載します。<br>\n<a href="http://www.rexent.co.jp/blog/gitlab-%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B" class="autolink" rel="nofollow noopener" target="_blank">http://www.rexent.co.jp/blog/gitlab-%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B</a></p>\n\n<h2>\n<span id="ci環境を作ってみる" class="fragment"></span><a href="#ci%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>CI環境を作ってみる</h2>\n\n<p>CIをするにはGitLabとは別途にGitLab Runnerを使用します。<br>\nサーバーからのテスト実行要求を受けて実際にビルドをするのはRunnerで、Serverは各Runnerにビルド実行要求を出し、その結果を管理します。</p>\n\n<h2>\n<span id="runnnerを使ってみる" class="fragment"></span><a href="#runnner%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>Runnnerを使ってみる</h2>\n\n<h4>\n<span id="gitlab-runnnerのインストール" class="fragment"></span><a href="#gitlab-runnner%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>GitLab Runnnerのインストール</h4>\n\n<p>Dockerをつかうか迷いましたが今回はホストへ直接入れました。<br>\nインストール手順は公式にありますので詳細はそちらをご参照ください。<br>\n<a href="https://docs.gitlab.com/runner/install/" class="autolink" rel="nofollow noopener" target="_blank">https://docs.gitlab.com/runner/install/</a></p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>wget <span class="nt">-O</span> /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64\n<span class="nv">$ </span><span class="nb">chmod</span> +x /usr/local/bin/gitlab-runner \n<span class="nv">$ </span><span class="nb">sudo </span>useradd <span class="nt">--comment</span> <span class="s1">\'GitLab Runner\'</span> <span class="nt">--create-home</span> gitlab-runner <span class="nt">--shell</span> /bin/bash\n<span class="nv">$ </span><span class="nb">sudo </span>gitlab-runner <span class="nb">install</span> <span class="nt">--user</span><span class="o">=</span>gitlab-runner <span class="nt">--working-directory</span><span class="o">=</span>/home/gitlab-runner\n<span class="nv">$ </span>gitlab-runner start\n<span class="nv">$ </span>gitlab-runner status\ngitlab-runner: Service is running!\n</pre></div></div>\n\n<p>ちなみにDockerをつかう方法も公式に書いてありますが例を記載。<br>\n手順的には対して手間ではなさそう。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>docker <span class="nb">exec</span> <span class="nt">-it</span> gitlab-runner gitlab-runner register <span class="se">\\</span>\n    <span class="nt">--url</span> <span class="o">[</span>gitlabのURL] <span class="se">\\</span>\n    <span class="nt">--registration-token</span> <span class="o">[</span>token] <span class="se">\\</span>\n    <span class="nt">--name</span> <span class="o">[</span>名前] <span class="se">\\</span>\n    <span class="nt">--tag-list</span> <span class="o">[</span>タグ名] <span class="se">\\</span>\n    <span class="nt">--executor</span> docker <span class="se">\\</span>\n    <span class="nt">--docker-image</span> alpine:latest\n</pre></div></div>\n\n<h4>\n<span id="gitlabへrunnerを登録" class="fragment"></span><a href="#gitlab%E3%81%B8runner%E3%82%92%E7%99%BB%E9%8C%B2"><i class="fa fa-link"></i></a>GitLabへRunnerを登録</h4>\n\n<p>GitLab CI ServerにRunnerを登録します。</p>\n\n<p>アクセスtokenをGitLabのページより取得し、「gitlab-runner register」で対話的に設定を行います(塗りつぶしてるところ辺りにあります)。</p>\n\n<p><a href="https://camo.qiitausercontent.com/2043b41c2dbf4b6e7f1be7cd09b450f4d4eec70b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31343665393566642d396135372d623564392d383562652d6330303663306131336262382e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/2043b41c2dbf4b6e7f1be7cd09b450f4d4eec70b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31343665393566642d396135372d623564392d383562652d6330303663306131336262382e706e67" alt="スクリーンショット 2018-12-01 22.52.34.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/146e95fd-9a57-b5d9-85be-c006c0a13bb8.png"></a></p>\n\n<p>タグを指定は「.gitlab-ci.yml」に定義しているものと一致させてください。<br>\nカンマ区切りで復数指定も可能。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>gitlab-runner register\nRuntime platform                                    <span class="nb">arch</span><span class="o">=</span>amd64 <span class="nv">os</span><span class="o">=</span>linux <span class="nv">pid</span><span class="o">=</span>27613 <span class="nv">revision</span><span class="o">=</span>3afdaba6 <span class="nv">version</span><span class="o">=</span>11.5.0\nRunning <span class="k">in </span>system-mode.                            \n\nPlease enter the gitlab-ci coordinator URL <span class="o">(</span>e.g. https://gitlab.com/<span class="o">)</span>:\nhttp://[GitLabサーバのIPアドレス]:9010/\nPlease enter the gitlab-ci token <span class="k">for </span>this runner:\n<span class="o">[</span>取得したアクセスtokenを入力]\nPlease enter the gitlab-ci description <span class="k">for </span>this runner:\n<span class="o">[</span>ubuntu0827]:  \nPlease enter the gitlab-ci tags <span class="k">for </span>this runner <span class="o">(</span>comma separated<span class="o">)</span>:\ndocker\nRegistering runner... succeeded                     <span class="nv">runner</span><span class="o">=</span>33tekJda\nPlease enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:\nshell\nRunner registered successfully. Feel free to start it, but <span class="k">if </span>it<span class="s1">\'s running already the config should be automatically reloaded!\n</span></pre></div></div>\n\n<p>excutorについては色々と調べていると記事が1つかけそうな感じなので今回は省略。<br>\nとりあえずshellを選択しています。</p>\n\n<p><a href="https://docs.gitlab.com/runner/executors/shell.html" class="autolink" rel="nofollow noopener" target="_blank">https://docs.gitlab.com/runner/executors/shell.html</a></p>\n\n<h4>\n<span id="ci実施" class="fragment"></span><a href="#ci%E5%AE%9F%E6%96%BD"><i class="fa fa-link"></i></a>CI実施</h4>\n\n<p>CIするにはデフォルトでは「.gitlab-ci.yml」というファイル名にJobを記述しpushします。<br>\n下記は簡単な例でhello worldするソースをCで書いてあるものを一緒にpush<br>\nビルドし実行までを自動でやるように記述しています。<br>\n(めちゃくちゃ省いていますが結構機能豊富でまとめきれません。。。)</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">.gitlab-ci.yml</span></div>\n<div class="highlight"><pre><span class="na">stages</span><span class="pi">:</span>\n  <span class="pi">-</span> <span class="s">test</span>\n\n<span class="na">test_job</span><span class="pi">:</span>\n  <span class="na">type</span><span class="pi">:</span> <span class="s">test</span>\n  <span class="na">script</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">gcc -o hello hello.c</span>\n    <span class="pi">-</span> <span class="s">./hello world</span>\n  <span class="na">tags</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">docker</span>\n</pre></div>\n</div>\n\n<p>この状態でGitLabへpushすると下記のような感じでビルド結果や実行結果などがわかるようになります。成功時はステータスが「passed」で失敗時は「failed」。<br>\n一瞬で成否がわかるので開発スピード向上になりそうですね。</p>\n\n<p><a href="https://camo.qiitausercontent.com/d51956cebe7923a33f4136b3169ef30fdd410f4e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31663636623734652d336261662d306538612d383435612d3934396364663464613564622e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/d51956cebe7923a33f4136b3169ef30fdd410f4e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31663636623734652d336261662d306538612d383435612d3934396364663464613564622e706e67" alt="スクリーンショット 2018-12-01 22.57.30.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/1f66b74e-3baf-0e8a-845a-949cdf4da5db.png"></a></p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>GitLab構築まで約15分でしたがCIについて調べ始めると機能面の豊富さに圧倒され<br>\n3時間ほど色々見てしまう結果になりました。<br>\nサクッとつかうだけでなく実運用面での機能が豊富です。<br>\n(Merge Accept予約や自動デプロイもちょっと見たがどれもこれも大変面白そう)<br>\nとりあえず構築→簡単なCIまでの導入手順でした。</p>\n\n<h2>\n<span id="参考にしたサイト" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88"><i class="fa fa-link"></i></a>参考にしたサイト</h2>\n\n<p>◼ <a href="https://docs.gitlab.com/" rel="nofollow noopener" target="_blank">公式ドキュメント</a><br>\n◼ <a href="https://ngyuki.hatenablog.com/entry/2017/07/07/093326" rel="nofollow noopener" target="_blank">Gitlab CI を使ってみるメモ</a></p>\n', 'body': '![1086321.png](https://qiita-image-store.s3.amazonaws.com/0/258841/57a38858-d9cb-0058-43e4-258e75668cb4.png)\n\n\n## 背景\n\n[「GitLab実践ガイド」を読んだ](http://blog.chaspy.me/entry/2018/02/17/120000)\nこのサイトを見て以降GitLabに興味を持ったので自宅に構築してみました。\nその手順等を公開していこうと思います。\n\n記事概要は構築とリポジトリにプッシュされたら簡単なテストを実行ってところです。\n\n## 対象読者\n\n* 自宅にGitサーバを。。。と思ってる人\n* CIしてみたい人\n\n## GitLab\n\nGitHubと同様に、Gitベースのソースコード管理機能や、マージリクエストによるレビュー機能を備えたサービス。\n社内OSSや自宅OSSなんかで使える無料プランもあります。\nRuby on Railsで開発されており他のGitサーバと比べると比較的マシンスペックが要求されます。\n\n機能的に一番の特徴はリポジトリのCI/CD。コミット後に自動でテストを行ってくれる機能。\n以下の記事が大変わかりやすかったので参考にしながら実行していこうと思います。\n■ [GitLab CIでテスト・ビルド・デプロイを自動化する](https://qiita.com/bremen/items/f47f383b9931a840a25c)\n\nリポジトリは下記\nhttps://github.com/gitlabhq/gitlabhq\n\nOSSのGitサーバは他にも何点か有名どころがあります。\nそれぞれの違いについては今回は言及しませんがリンクだけ張っておきます。\n\n* [GitBucket](https://github.com/gitbucket/gitbucket)\n* [gitblit](https://github.com/gitblit/gitblit)\n* [gogs](https://github.com/gogs/gogs)\n\n## 環境\n\n今回も自宅のサーバ機にインストールしていきます。\nDockerとDocker-composeのバージョンは下記です。\n\n``` bash\nroot@ubuntu0827:~/work/gitlab/test# uname -r\n4.15.0-39-generic\n\nroot@ubuntu0827:~/work/gitlab/test# docker --version\nDocker version 18.06.1-ce, build e68fc7a\n\nroot@ubuntu0827:~/work/gitlab/test# docker-compose --version\ndocker-compose version 1.22.0, build f46880f\n```\n\n## 導入手順\n\n特に何も気にせずにGitLabの公式ドキュメント通りにベースを作成。\nポートが競合するのでその部分のみ新たに設定してます。\n\n``` yaml:docker-compose.yml\nweb:\n    image: \'gitlab/gitlab-ce:latest\'\n    restart: always\n    hostname: \'localhost\'\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url \'http://localhost:9010\'\n        gitlab_rails[\'gitlab_shell_ssh_port\'] = 2022\n    ports:\n      - \'9010:9010\'\n      - \'2022:22\'\n    volumes:\n      - \'/srv/gitlab/config:/etc/gitlab\'\n      - \'/srv/gitlab/logs:/var/log/gitlab\'\n      - \'/srv/gitlab/data:/var/opt/gitlab\'\n```\n\ndocker-compose.ymlをのあるディレクトリであとは実行するだけで構築完了。\nここまで約15分。ほんと便利ですねDocker。\nもちろん細かい設定を考えればもっとかかりますがとりあえず味見程度の使用なら上記で問題なさそうです。\nHTTPSの利用も2行修正すれば使えますがSafariで使用する時に警告がうるさいのでオフにしてます。\n\n``` bash\nroot@ubuntu0827:~/work/gitlab/test# docker-compose up -d\n\n# 下記でログを確認。エラー等が出ていなければ問題なし\nroot@ubuntu0827:~/work/gitlab/test# docker-compose logs -f\n```\n\n起動したらあとはクライアントのブラウザから設定したポートへアクセスするだけ。\nrootユーザのパスワード設定を求められるので設定してくだいさい。\n設定後はとりあえずrootでリポジトリを作るところまでやってみます。\n\n#### パスワード設定画面\n\n![スクリーンショット 2018-12-01 21.09.27.png](https://qiita-image-store.s3.amazonaws.com/0/258841/495026bf-4368-d8f6-eaa4-7b6b07487789.png)\n\n#### リポジトリ作成画面\n\n![スクリーンショット 2018-12-01 21.21.48.png](https://qiita-image-store.s3.amazonaws.com/0/258841/7125e9de-b265-0360-a008-f702418d134e.png)\n\nfirst_projectというリポジトリを作成。\nprivateを選択しcreateを押すだけでリポジトリが作成されます。\n\n#### cloneしてpushまでしてみる\n\nいつものGitの使い方と同じです。\ncloneしたりpushしたり操作に違いはありません。\n\n``` bash\n$ git clone http://localhost:9010/root/first_project.git\n$ git diff\ndiff --git a/README.md b/README.md\nindex 30d74d2..000610e 100644\n--- a/README.md\n+++ b/README.md\n@@ -1 +1,2 @@\n-test\n\\ No newline at end of file\n+test\n+first commit\n\n$ git config user.name ryuichi1208\n$ git config user.email test_mail@exmample.com\n$ git add -A . ; git commit -m "first commit"\n$ git push\n```\n\n## ユーザ/グループ作成\n\n上記の時点では管理者のみでこのような運用はありえない。\nユーザとグループを作成して適切な権限を与えてみる。\n\nと、書いている途中で気づいたが基本GUIでとても分かりやすいので消しました笑\nまあ迷う人はいないと思います。。。\n\n一応途中まで書いていた際に参考にしたURLを記載します。\nhttp://www.rexent.co.jp/blog/gitlab-%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\n\n\n## CI環境を作ってみる\n\nCIをするにはGitLabとは別途にGitLab Runnerを使用します。\nサーバーからのテスト実行要求を受けて実際にビルドをするのはRunnerで、Serverは各Runnerにビルド実行要求を出し、その結果を管理します。\n\n## Runnnerを使ってみる\n\n#### GitLab Runnnerのインストール\n\nDockerをつかうか迷いましたが今回はホストへ直接入れました。\nインストール手順は公式にありますので詳細はそちらをご参照ください。\nhttps://docs.gitlab.com/runner/install/\n\n``` bash\n$ sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64\n$ chmod +x /usr/local/bin/gitlab-runner \n$ sudo useradd --comment \'GitLab Runner\' --create-home gitlab-runner --shell /bin/bash\n$ sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\n$ gitlab-runner start\n$ gitlab-runner status\ngitlab-runner: Service is running!\n```\n\nちなみにDockerをつかう方法も公式に書いてありますが例を記載。\n手順的には対して手間ではなさそう。\n\n``` bash\ndocker exec -it gitlab-runner gitlab-runner register \\\n    --url [gitlabのURL] \\\n    --registration-token [token] \\\n    --name [名前] \\\n    --tag-list [タグ名] \\\n    --executor docker \\\n    --docker-image alpine:latest\n```\n\n#### GitLabへRunnerを登録\nGitLab CI ServerにRunnerを登録します。\n\nアクセスtokenをGitLabのページより取得し、「gitlab-runner register」で対話的に設定を行います(塗りつぶしてるところ辺りにあります)。\n\n![スクリーンショット 2018-12-01 22.52.34.png](https://qiita-image-store.s3.amazonaws.com/0/258841/146e95fd-9a57-b5d9-85be-c006c0a13bb8.png)\n\nタグを指定は「.gitlab-ci.yml」に定義しているものと一致させてください。\nカンマ区切りで復数指定も可能。\n\n``` bash\n$ sudo gitlab-runner register\nRuntime platform                                    arch=amd64 os=linux pid=27613 revision=3afdaba6 version=11.5.0\nRunning in system-mode.                            \n                                                   \nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://[GitLabサーバのIPアドレス]:9010/\nPlease enter the gitlab-ci token for this runner:\n[取得したアクセスtokenを入力]\nPlease enter the gitlab-ci description for this runner:\n[ubuntu0827]:  \nPlease enter the gitlab-ci tags for this runner (comma separated):\ndocker\nRegistering runner... succeeded                     runner=33tekJda\nPlease enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:\nshell\nRunner registered successfully. Feel free to start it, but if it\'s running already the config should be automatically reloaded!\n```\n\nexcutorについては色々と調べていると記事が1つかけそうな感じなので今回は省略。\nとりあえずshellを選択しています。\n\nhttps://docs.gitlab.com/runner/executors/shell.html\n\n#### CI実施\n\nCIするにはデフォルトでは「.gitlab-ci.yml」というファイル名にJobを記述しpushします。\n下記は簡単な例でhello worldするソースをCで書いてあるものを一緒にpush\nビルドし実行までを自動でやるように記述しています。\n(めちゃくちゃ省いていますが結構機能豊富でまとめきれません。。。)\n\n``` yaml:.gitlab-ci.yml\nstages:\n  - test\n\ntest_job:\n  type: test\n  script:\n    - gcc -o hello hello.c\n    - ./hello world\n  tags:\n    - docker\n```\n\nこの状態でGitLabへpushすると下記のような感じでビルド結果や実行結果などがわかるようになります。成功時はステータスが「passed」で失敗時は「failed」。\n一瞬で成否がわかるので開発スピード向上になりそうですね。\n\n![スクリーンショット 2018-12-01 22.57.30.png](https://qiita-image-store.s3.amazonaws.com/0/258841/1f66b74e-3baf-0e8a-845a-949cdf4da5db.png)\n\n## まとめ\n\nGitLab構築まで約15分でしたがCIについて調べ始めると機能面の豊富さに圧倒され\n3時間ほど色々見てしまう結果になりました。\nサクッとつかうだけでなく実運用面での機能が豊富です。\n(Merge Accept予約や自動デプロイもちょっと見たがどれもこれも大変面白そう\x08)\nとりあえず構築→簡単なCIまでの導入手順でした。\n\n## 参考にしたサイト\n\n◼ [公式ドキュメント](https://docs.gitlab.com/)\n◼ [Gitlab CI を使ってみるメモ](https://ngyuki.hatenablog.com/entry/2017/07/07/093326)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-12-02T00:32:15+09:00', 'group': None, 'id': '1c08523b0ef34d05026f', 'likes_count': 30, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Git', 'versions': []}, {'name': 'CI', 'versions': []}, {'name': 'GitLab', 'versions': []}, {'name': 'Docker', 'versions': []}], 'title': 'Dockerで自宅GitLab環境構築~GitLab-CIの初歩まで', 'updated_at': '2018-12-03T11:52:01+09:00', 'url': 'https://qiita.com/ryuichi1208/items/1c08523b0ef34d05026f', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/594cc1c13986947f192c234a58c847adfc2ec15d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f61636639663133642d663335332d333438632d666463312d3232386463633539343836342e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/594cc1c13986947f192c234a58c847adfc2ec15d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f61636639663133642d663335332d333438632d666463312d3232386463633539343836342e706e67" alt="280px-Big-Endian-ja.svg.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/acf9f13d-f353-348c-fdc1-228dcc594864.png"></a></p>\n\n<h2>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h2>\n\n<p>エンディアンについて調べたことのアウトプット</p>\n\n<p>データをバイト単位で配置する際のやり方の一つで二つの違いの結論だけ述べると、</p>\n\n<p>ビッグエンディアン：「最初のバイトからデータを並べる」やり方<br>\nリトルエンディアン：「最後のバイトからデータを並べる」やり方</p>\n\n<p>といった特性を持つ並べ方である。<br>\n詳しくは下記に記載していきます。</p>\n\n<h2>\n<span id="エンディアンとは" class="fragment"></span><a href="#%E3%82%A8%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>エンディアンとは</h2>\n\n<p>プログラムを動かすときに、データは1バイト単位(=8ビット)で 記憶されていきます。<br>\n2バイト以上のデータを保存する時に、どのような順序で記憶していくか、という方法を示すのがエンディアンになります 。<br>\nエンディアンはCPUによって決まっています。</p>\n\n<p>ビックエンディアン、ミドルエンディアン、リトルエンディアンといった種類がある。</p>\n\n<p>ビックエンディアンとリトルエンディアンを例に挙げて説明。<br>\nlong型の変数として2882400001 = 0xABCDEF01という数があるとする。<br>\nこの場合それぞれの並び順序は</p>\n\n<p><strong><em>ビックエンディアン： AB CD EF 01</em></strong><br>\n<strong><em>リトルエンディアン： 01 EF CD AB</em></strong></p>\n\n<p>ビッグエンディアンの方はデータの上の方から準に詰めていくのに対し、<br>\nリトルエンディアンは下の方から順に詰めていきます。</p>\n\n<h2>\n<span id="エンディアンについて調べてみた" class="fragment"></span><a href="#%E3%82%A8%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F"><i class="fa fa-link"></i></a>エンディアンについて調べてみた</h2>\n\n<p>以下はC言語でエンディアンを特定するためのソース。<br>\nlscpuコマンドを使用すればわかるが今回はエンディアン変換まで行いたいので割愛。<br>\n共用体を用いてバイトオーダーを確認(参考:wiki)</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">endian.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">union</span> <span class="p">{</span>\n        <span class="kt">uint32_t</span> <span class="n">b4</span><span class="p">;</span>\n        <span class="kt">uint16_t</span> <span class="n">b2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>\n        <span class="kt">uint8_t</span>  <span class="n">b1</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>\n    <span class="p">}</span> <span class="n">bytes</span> <span class="p">;</span>\n\n    <span class="n">bytes</span><span class="p">.</span><span class="n">b4</span> <span class="o">=</span> <span class="mh">0x12345678</span> <span class="p">;</span>\n    <span class="n">printf</span> <span class="p">(</span><span class="s">"bytes.b4: %08X</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">bytes</span><span class="p">.</span><span class="n">b4</span><span class="p">)</span> <span class="p">;</span>\n    <span class="n">printf</span> <span class="p">(</span><span class="s">"bytes.b2: %04X, %04X</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">bytes</span><span class="p">.</span><span class="n">b2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bytes</span><span class="p">.</span><span class="n">b2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">;</span>\n    <span class="n">printf</span> <span class="p">(</span><span class="s">"bytes.b1: %02X, %02X, %02X, %02X</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">bytes</span><span class="p">.</span><span class="n">b1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bytes</span><span class="p">.</span><span class="n">b1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">bytes</span><span class="p">.</span><span class="n">b1</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">bytes</span><span class="p">.</span><span class="n">b1</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="p">;</span>\n    <span class="k">return</span> <span class="mi">0</span> <span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>上記をコンパイルして実行する。<br>\nすると並び順が入れ替わっているのでリトルエンディアンであることが分かる。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>gcc endian.c\n<span class="nv">$ </span>./a.out\nbytes.b4: 12345678\nbytes.b2: 5678, 1234\nbytes.b1: 78, 56, 34, 12\n</pre></div></div>\n\n<p>ちなみに検証機はwindows10のインテル系CPUなので当然である。<br>\n残念ながら自宅にはビックエンディアンでの検証ができないのでいったん締め<br>\n次はByte swappingについて調べる。</p>\n\n<h2>\n<span id="byte-swappingとは" class="fragment"></span><a href="#byte-swapping%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Byte swappingとは</h2>\n\n<p>エンディアンを相互に変換すること、つまり、<br>\n<strong><em>ビッグエンディアン⇒リトルエンディアン</em></strong><br>\nまたは<br>\n<strong><em>リトルエンディアン⇒ビッグエンディアン</em></strong><br>\nのことをByte swappingという</p>\n\n<p>エンディアン変換は以下のようなツールもあるが今回は自前で作成してみる。<br>\n<a href="http://web.save-editor.com/tool/wse_hex.html" class="autolink" rel="nofollow noopener" target="_blank">http://web.save-editor.com/tool/wse_hex.html</a></p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">byte_swap.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n</span>\n<span class="cp">#define BASENUM 0xABCD0123\n</span>\n<span class="kt">void</span> <span class="nf">check_endian</span><span class="p">()</span> <span class="p">{</span>\n        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>\n        <span class="k">if</span><span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span> <span class="p">){</span>\n                <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"little endian</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n        <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"big endian</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n        <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kt">uint32_t</span> <span class="nf">byte_swap</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kt">uint32_t</span> <span class="n">ret</span><span class="p">;</span>\n        <span class="n">ret</span>  <span class="o">=</span> <span class="n">value</span>              <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">;</span>\n        <span class="n">ret</span> <span class="o">|=</span> <span class="p">(</span><span class="n">value</span><span class="o">&amp;</span><span class="mh">0x0000FF00</span><span class="p">)</span> <span class="o">&lt;&lt;</span>  <span class="mi">8</span><span class="p">;</span>\n        <span class="n">ret</span> <span class="o">|=</span> <span class="p">(</span><span class="n">value</span><span class="o">&amp;</span><span class="mh">0x00FF0000</span><span class="p">)</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">;</span>\n        <span class="n">ret</span> <span class="o">|=</span> <span class="n">value</span>              <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">;</span>\n        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>\n        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">BASENUM</span><span class="p">;</span>\n\n        <span class="n">check_endian</span><span class="p">();</span>\n\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"base : %08x</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>\n        <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"swap ; %08x</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">byte_swap</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>\n\n        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>上記の実行結果は下記のようになります。<br>\nエンディアンの特定とbyte swappingを実装してみました。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>./a.out\nlittle endian\nbase : abcd0123\nswap : 2301cdab\n</pre></div></div>\n\n<p>エンディアン特定については全く思いつかずで下記を参考にしています。<br>\n大変わかりやすい記事ですので是非ご参照ください。<br>\n<a href="http://torasukenote.blog120.fc2.com/blog-entry-105.html" class="autolink" rel="nofollow noopener" target="_blank">http://torasukenote.blog120.fc2.com/blog-entry-105.html</a></p>\n\n<h2>\n<span id="プロセッサ以外のバイトオーダ" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%82%BB%E3%83%83%E3%82%B5%E4%BB%A5%E5%A4%96%E3%81%AE%E3%83%90%E3%82%A4%E3%83%88%E3%82%AA%E3%83%BC%E3%83%80"><i class="fa fa-link"></i></a>プロセッサ以外のバイトオーダ</h2>\n\n<p>プロセッサ界隈以外でもバイトオーダーという言葉は使われることがあります。<br>\nそれは「ネットワークバイトオーダ」です。<br>\nTCP/IPなどの通信プロトコルはバイト配列を扱いますが、MACやIPアドレスといったデータは多バイトデータですので、<br>\n通信路に出力する順番を決める必要があります。<br>\nちなみにTCP/IPのネットワークバイトオーダはビッグエンディアン。</p>\n\n<p>hton(3)やhtols(3)が変換にあたります。<br>\n<a href="https://linuxjm.osdn.jp/html/LDP_man-pages/man3/byteorder.3.html" class="autolink" rel="nofollow noopener" target="_blank">https://linuxjm.osdn.jp/html/LDP_man-pages/man3/byteorder.3.html</a></p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">関数</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">uint32_t htonl(uint32_t hostlong)</td>\n<td style="text-align: left">32bitのホストバイトオーダーをネットワークバイトオーダーに変換</td>\n</tr>\n<tr>\n<td style="text-align: left">uint16_t htons(uint16_t hostshort)</td>\n<td style="text-align: left">16bitのホストバイトオーダーをネットワークバイトオーダーに変換</td>\n</tr>\n<tr>\n<td style="text-align: left">uint32_t ntohl(uint32_t netlong)</td>\n<td style="text-align: left">32bitのネットワークバイトオーダーをホストバイトオーダーに変換</td>\n</tr>\n<tr>\n<td style="text-align: left">uint16_t ntohs(uint16_t netshort)</td>\n<td style="text-align: left">16bitのネットワークバイトオーダーをホストバイトオーダーに変換</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="ビックエンディアンはどこで" class="fragment"></span><a href="#%E3%83%93%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3%E3%81%AF%E3%81%A9%E3%81%93%E3%81%A7"><i class="fa fa-link"></i></a>ビックエンディアンはどこで</h2>\n\n<p>ビックエンディアンは自宅で用意できないと思ったが調べてみるとJavaの仮想マシンはビックエンディアンらしい。<br>\n他にもIBM社のメインフレームもビックエンディアンとのこと。<br>\n(参考：<a href="http://e-words.jp/w/%E3%83%93%E3%83%83%E3%82%B0%E3%82%A8%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3.html" class="autolink" rel="nofollow noopener" target="_blank">http://e-words.jp/w/%E3%83%93%E3%83%83%E3%82%B0%E3%82%A8%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3.html</a>)</p>\n\n<ul>\n<li>JVM</li>\n<li>IBMメインフレームワーク</li>\n<li>TCP/IPのネットワークオーダー</li>\n</ul>\n\n<p>上記3点は少なくともビックエンディアン。</p>\n', 'body': '![280px-Big-Endian-ja.svg.png](https://qiita-image-store.s3.amazonaws.com/0/258841/acf9f13d-f353-348c-fdc1-228dcc594864.png)\n\n## 概要\n\nエンディアンについて調べたことのアウトプット\n\nデータをバイト単位で配置する際のやり方の一つで二つの違いの結論だけ述べると、\n\nビッグエンディアン：「最初のバイトからデータを並べる」やり方\nリトルエンディアン：「最後のバイトからデータを並べる」やり方\n\nといった特性を持つ並べ方である。\n詳しくは下記に記載していきます。\n\n## エンディアンとは\n\nプログラムを動かすときに、データは1バイト単位(=8ビット)で 記憶されていきます。\n2バイト以上のデータを保存する時に、どのような順序で記憶していくか、という方法を示すのがエンディアンになります 。\nエンディアンはCPUによって決まっています。\n\nビックエンディアン、ミドルエンディアン、リトルエンディアンといった種類がある。\n\nビックエンディアンとリトルエンディアンを例に挙げて説明。\nlong型の変数として2882400001 = 0xABCDEF01という数があるとする。\nこの場合それぞれの並び順序は\n\n___ビックエンディアン： AB CD EF 01___\n___リトルエンディアン： 01 EF CD AB___\n\nビッグエンディアンの方はデータの上の方から準に詰めていくのに対し、\nリトルエンディアンは下の方から順に詰めていきます。\n\n## エンディアンについて調べてみた\n\n以下はC言語でエンディアンを特定するためのソース。\nlscpuコマンドを使用すればわかるが今回はエンディアン変換まで行いたいので割愛。\n共用体を用いてバイトオーダーを確認(参考:wiki)\n\n``` c:endian.c\n#include <stdint.h>\n#include <stdio.h>\n\nint main (int argc, char **argv) {\n    union {\n        uint32_t b4;\n        uint16_t b2[2]\n        uint8_t  b1[4]\n    } bytes ;\n\n    bytes.b4 = 0x12345678 ;\n    printf ("bytes.b4: %08X\\n", bytes.b4) ;\n    printf ("bytes.b2: %04X, %04X\\n", bytes.b2[0], bytes.b2[1]) ;\n    printf ("bytes.b1: %02X, %02X, %02X, %02X\\n", bytes.b1[0], bytes.b1[1], bytes.b1[2], bytes.b1[3]) ;\n    return 0 ;\n}\n```\n\n上記をコンパイルして実行する。\nすると並び順が入れ替わっているのでリトルエンディアンであることが分かる。\n\n``` bash\n$ gcc endian.c\n$ ./a.out\nbytes.b4: 12345678\nbytes.b2: 5678, 1234\nbytes.b1: 78, 56, 34, 12\n```\n\nちなみに検証機はwindows10のインテル系CPUなので当然である。\n残念ながら自宅にはビックエンディアンでの検証ができないのでいったん締め\n次はByte swappingについて調べる。\n\n## Byte swappingとは\n\nエンディアンを相互に変換すること、つまり、\n___ビッグエンディアン⇒リトルエンディアン___\nまたは\n___リトルエンディアン⇒ビッグエンディアン___\nのことをByte swappingという\n\nエンディアン変換は以下のようなツールもあるが今回は自前で作成してみる。\nhttp://web.save-editor.com/tool/wse_hex.html\n\n``` byte_swap.c\n#include <stdio.h>\n#include <stdint.h>\n\n#define BASENUM 0xABCD0123\n\nvoid check_endian() {\n        int x = 1;\n        if( *(char *)&x ){\n                fprintf(stdout, "little endian\\n");\n        }else{\n                fprintf(stdout, "big endian\\n");\n        }\n}\n\nuint32_t byte_swap(uint32_t value) {\n        uint32_t ret;\n        ret  = value              << 24;\n        ret |= (value&0x0000FF00) <<  8;\n        ret |= (value&0x00FF0000) >>  8;\n        ret |= value              >> 24;\n        return ret;\n}\n\nint main(int argc, char* argv[]) {\n        unsigned int value = BASENUM;\n\n        check_endian();\n\n        fprintf(stdout, "base : %08x\\n", value);\n        fprintf(stdout, "swap ; %08x\\n", byte_swap(value));\n\n        return 0;\n}\n```\n\n上記の実行結果は下記のようになります。\nエンディアンの特定とbyte swappingを実装してみました。\n\n``` bash\n$ ./a.out\nlittle endian\nbase : abcd0123\nswap : 2301cdab\n```\n\nエンディアン特定については全く思いつかずで下記を参考にしています。\n大変わかりやすい記事ですので是非ご参照ください。\nhttp://torasukenote.blog120.fc2.com/blog-entry-105.html\n\n\n## プロセッサ以外のバイトオーダ\n\nプロセッサ界隈以外でもバイトオーダーという言葉は使われることがあります。\nそれは「ネットワークバイトオーダ」です。\nTCP/IPなどの通信プロトコルはバイト配列を扱いますが、MACやIPアドレスといったデータは多バイトデータですので、\n通信路に出力する順番を決める必要があります。\nちなみにTCP/IPのネットワークバイトオーダはビッグエンディアン。\n\nhton(3)やhtols(3)が変換にあたります。\nhttps://linuxjm.osdn.jp/html/LDP_man-pages/man3/byteorder.3.html\n\n| 関数 | 説明 |\n|:--|:--|\n| uint32_t htonl(uint32_t hostlong) | 32bitのホストバイトオーダーをネットワークバイトオーダーに変換 |\n| uint16_t htons(uint16_t hostshort) | 16bitのホストバイトオーダーをネットワークバイトオーダーに変換 |\n| uint32_t ntohl(uint32_t netlong) | 32bitのネットワークバイトオーダーをホストバイトオーダーに変換 |\n| uint16_t ntohs(uint16_t netshort) | 16bitのネットワークバイトオーダーをホストバイトオーダーに変換 |\n\n## ビックエンディアンはどこで\n\nビックエンディアンは自宅で用意できないと思ったが調べてみるとJavaの仮想マシンはビックエンディアンらしい。\n他にもIBM社のメインフレームもビックエンディアンとのこと。\n(参考：http://e-words.jp/w/%E3%83%93%E3%83%83%E3%82%B0%E3%82%A8%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3.html)\n\n* JVM\n* IBMメインフレームワーク\n* TCP/IPのネットワークオーダー\n\n上記3点は少なくともビックエンディアン。\n', 'coediting': False, 'comments_count': 1, 'created_at': '2018-12-01T12:34:56+09:00', 'group': None, 'id': '31442f9e8a7a7c94aeec', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'CPU', 'versions': []}], 'title': '[バイトオーダー]ビックエンディアン/リトルエンディアン', 'updated_at': '2018-12-01T15:15:44+09:00', 'url': 'https://qiita.com/ryuichi1208/items/31442f9e8a7a7c94aeec', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>自分が普段電車や会社で読んでいるIT系のサイトと学習などで使用しているサイトのまとめ。</p>\n\n<h2>\n<span id="ニュース系" class="fragment"></span><a href="#%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E7%B3%BB"><i class="fa fa-link"></i></a>ニュース系</h2>\n\n<h4>\n<span id="-cnet-japan" class="fragment"></span><a href="#-cnet-japan"><i class="fa fa-link"></i></a>■ <a href="https://japan.cnet.com/" rel="nofollow noopener" target="_blank">CNET Japan</a>\n</h4>\n\n<h4>\n<span id="-it" class="fragment"></span><a href="#-it"><i class="fa fa-link"></i></a>■ <a href="http://www.atmarkit.co.jp/" rel="nofollow noopener" target="_blank">@IT</a>\n</h4>\n\n<h4>\n<span id="-itmedia" class="fragment"></span><a href="#-itmedia"><i class="fa fa-link"></i></a>■ <a href="http://www.itmedia.co.jp/" rel="nofollow noopener" target="_blank">ITmedia</a>\n</h4>\n\n<h4>\n<span id="-はてなブックマークテクノロジーカテゴリ" class="fragment"></span><a href="#-%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA"><i class="fa fa-link"></i></a>■ <a href="http://b.hatena.ne.jp/hotentry/it" rel="nofollow noopener" target="_blank">はてなブックマーク(テクノロジーカテゴリ)</a>\n</h4>\n\n<h4>\n<span id="-menthas" class="fragment"></span><a href="#-menthas"><i class="fa fa-link"></i></a>■ <a href="https://menthas.com/" rel="nofollow noopener" target="_blank">Menthas</a>\n</h4>\n\n<h4>\n<span id="-publickey" class="fragment"></span><a href="#-publickey"><i class="fa fa-link"></i></a>■ <a href="https://www.publickey1.jp/" rel="nofollow noopener" target="_blank">Publickey</a>\n</h4>\n\n<h2>\n<span id="ニュースガジェット系" class="fragment"></span><a href="#%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%82%AC%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88%E7%B3%BB"><i class="fa fa-link"></i></a>ニュース(ガジェット系)</h2>\n\n<h4>\n<span id="-pc-watch" class="fragment"></span><a href="#-pc-watch"><i class="fa fa-link"></i></a>■ <a href="https://pc.watch.impress.co.jp/" rel="nofollow noopener" target="_blank">PC Watch</a>\n</h4>\n\n<h4>\n<span id="-gizmodo" class="fragment"></span><a href="#-gizmodo"><i class="fa fa-link"></i></a>■ <a href="https://www.gizmodo.jp/" rel="nofollow noopener" target="_blank">GIZMODO</a>\n</h4>\n\n<h4>\n<span id="-engadget" class="fragment"></span><a href="#-engadget"><i class="fa fa-link"></i></a>■ <a href="https://japanese.engadget.com/" rel="nofollow noopener" target="_blank">Engadget</a>\n</h4>\n\n<h2>\n<span id="技術系ブログ企業系" class="fragment"></span><a href="#%E6%8A%80%E8%A1%93%E7%B3%BB%E3%83%96%E3%83%AD%E3%82%B0%E4%BC%81%E6%A5%AD%E7%B3%BB"><i class="fa fa-link"></i></a>技術系ブログ(企業系)</h2>\n\n<h4>\n<span id="-developersio" class="fragment"></span><a href="#-developersio"><i class="fa fa-link"></i></a>■ <a href="https://dev.classmethod.jp/" rel="nofollow noopener" target="_blank">Developers.IO</a>\n</h4>\n\n<h4>\n<span id="-はてなブログ開発ブログ" class="fragment"></span><a href="#-%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0%E9%96%8B%E7%99%BA%E3%83%96%E3%83%AD%E3%82%B0"><i class="fa fa-link"></i></a>■ <a href="http://staff.hatenablog.com/" rel="nofollow noopener" target="_blank">はてなブログ開発ブログ</a>\n</h4>\n\n<h4>\n<span id="-サイボウズのエンジニアブログ" class="fragment"></span><a href="#-%E3%82%B5%E3%82%A4%E3%83%9C%E3%82%A6%E3%82%BA%E3%81%AE%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%96%E3%83%AD%E3%82%B0"><i class="fa fa-link"></i></a>■ <a href="https://blog.cybozu.io/" rel="nofollow noopener" target="_blank">サイボウズのエンジニアブログ</a>\n</h4>\n\n<h4>\n<span id="-クックパッド開発者ブログ" class="fragment"></span><a href="#-%E3%82%AF%E3%83%83%E3%82%AF%E3%83%91%E3%83%83%E3%83%89%E9%96%8B%E7%99%BA%E8%80%85%E3%83%96%E3%83%AD%E3%82%B0"><i class="fa fa-link"></i></a>■ <a href="https://techlife.cookpad.com/" rel="nofollow noopener" target="_blank">クックパッド開発者ブログ</a>\n</h4>\n\n<h4>\n<span id="-google-developers" class="fragment"></span><a href="#-google-developers"><i class="fa fa-link"></i></a>■ <a href="https://developers-jp.googleblog.com/" rel="nofollow noopener" target="_blank">Google Developers</a>\n</h4>\n\n<h4>\n<span id="-yahoo-japan-tech-blog" class="fragment"></span><a href="#-yahoo-japan-tech-blog"><i class="fa fa-link"></i></a>■ <a href="https://techblog.yahoo.co.jp/" rel="nofollow noopener" target="_blank">Yahoo! JAPAN Tech Blog</a>\n</h4>\n\n<h4>\n<span id="-mercari-engineering-blog" class="fragment"></span><a href="#-mercari-engineering-blog"><i class="fa fa-link"></i></a>■ <a href="https://tech.mercari.com/" rel="nofollow noopener" target="_blank">Mercari Engineering Blog</a>\n</h4>\n\n<h4>\n<span id="-webnaut" class="fragment"></span><a href="#-webnaut"><i class="fa fa-link"></i></a>■ <a href="https://webnaut.jp/" rel="nofollow noopener" target="_blank">Webnaut</a>\n</h4>\n\n<h4>\n<span id="-バズ部" class="fragment"></span><a href="#-%E3%83%90%E3%82%BA%E9%83%A8"><i class="fa fa-link"></i></a>■ <a href="https://bazubu.com/" rel="nofollow noopener" target="_blank">バズ部</a>\n</h4>\n\n<h4>\n<span id="-soummisc" class="fragment"></span><a href="#-soummisc"><i class="fa fa-link"></i></a>■ <a href="https://www.soum.co.jp/misc/" rel="nofollow noopener" target="_blank">SOUM/misc</a>\n</h4>\n\n<h4>\n<span id="-line-engineering" class="fragment"></span><a href="#-line-engineering"><i class="fa fa-link"></i></a>■ <a href="https://engineering.linecorp.com/ja/blog/" rel="nofollow noopener" target="_blank">LINE Engineering</a>\n</h4>\n\n<h2>\n<span id="技術系ブログ個人" class="fragment"></span><a href="#%E6%8A%80%E8%A1%93%E7%B3%BB%E3%83%96%E3%83%AD%E3%82%B0%E5%80%8B%E4%BA%BA"><i class="fa fa-link"></i></a>技術系ブログ(個人)</h2>\n\n<h4>\n<span id="-ネットワークエンジニアのメモ" class="fragment"></span><a href="#-%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E3%83%A1%E3%83%A2"><i class="fa fa-link"></i></a>■ <a href="https://www.infraeye.com/" rel="nofollow noopener" target="_blank">ネットワークエンジニアのメモ</a>\n</h4>\n\n<h4>\n<span id="-プログラマでありたい" class="fragment"></span><a href="#-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%A7%E3%81%82%E3%82%8A%E3%81%9F%E3%81%84"><i class="fa fa-link"></i></a>■ <a href="https://blog.takuros.net/" rel="nofollow noopener" target="_blank">プログラマでありたい</a>\n</h4>\n\n<h4>\n<span id="-人間とウェブの未来" class="fragment"></span><a href="#-%E4%BA%BA%E9%96%93%E3%81%A8%E3%82%A6%E3%82%A7%E3%83%96%E3%81%AE%E6%9C%AA%E6%9D%A5"><i class="fa fa-link"></i></a>■ <a href="https://hb.matsumoto-r.jp/" rel="nofollow noopener" target="_blank">人間とウェブの未来</a>\n</h4>\n\n<h4>\n<span id="-まふゆちゃんの技術ブログ" class="fragment"></span><a href="#-%E3%81%BE%E3%81%B5%E3%82%86%E3%81%A1%E3%82%83%E3%82%93%E3%81%AE%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0"><i class="fa fa-link"></i></a>■ <a href="https://mafuyu7se.hatenablog.com/" rel="nofollow noopener" target="_blank">まふゆちゃんの技術ブログ。</a>\n</h4>\n\n<h2>\n<span id="業界紹介系ブログ" class="fragment"></span><a href="#%E6%A5%AD%E7%95%8C%E7%B4%B9%E4%BB%8B%E7%B3%BB%E3%83%96%E3%83%AD%E3%82%B0"><i class="fa fa-link"></i></a>業界紹介系ブログ</h2>\n\n<h4>\n<span id="-axia" class="fragment"></span><a href="#-axia"><i class="fa fa-link"></i></a>■ <a href="https://axia.co.jp/blog" rel="nofollow noopener" target="_blank">AXIA</a>\n</h4>\n\n<h2>\n<span id="スライド共有" class="fragment"></span><a href="#%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%89%E5%85%B1%E6%9C%89"><i class="fa fa-link"></i></a>スライド共有</h2>\n\n<h4>\n<span id="-slideshare" class="fragment"></span><a href="#-slideshare"><i class="fa fa-link"></i></a>■ <a href="https://www.slideshare.net/" rel="nofollow noopener" target="_blank">SlideShare</a>\n</h4>\n\n<h4>\n<span id="-speaker-deck" class="fragment"></span><a href="#-speaker-deck"><i class="fa fa-link"></i></a>■ <a href="https://speakerdeck.com/" rel="nofollow noopener" target="_blank">Speaker Deck</a>\n</h4>\n\n<h2>\n<span id="qa系" class="fragment"></span><a href="#qa%E7%B3%BB"><i class="fa fa-link"></i></a>Q&amp;A系</h2>\n\n<h4>\n<span id="-stack-overflow" class="fragment"></span><a href="#-stack-overflow"><i class="fa fa-link"></i></a>■ <a href="https://ja.stackoverflow.com/" rel="nofollow noopener" target="_blank">Stack Overflow</a>\n</h4>\n\n<h4>\n<span id="-teratail" class="fragment"></span><a href="#-teratail"><i class="fa fa-link"></i></a>■ <a href="https://teratail.com/" rel="nofollow noopener" target="_blank">teratail</a>\n</h4>\n\n<h2>\n<span id="カンファレンスイベント" class="fragment"></span><a href="#%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88"><i class="fa fa-link"></i></a>カンファレンス/イベント</h2>\n\n<h4>\n<span id="-オープンソースカンファレンス" class="fragment"></span><a href="#-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9"><i class="fa fa-link"></i></a>■ <a href="https://www.ospn.jp/" rel="nofollow noopener" target="_blank">オープンソースカンファレンス</a>\n</h4>\n\n<h4>\n<span id="-jjug" class="fragment"></span><a href="#-jjug"><i class="fa fa-link"></i></a>■ <a href="http://www.java-users.jp/" rel="nofollow noopener" target="_blank">JJUG</a>\n</h4>\n\n<h4>\n<span id="-jsug" class="fragment"></span><a href="#-jsug"><i class="fa fa-link"></i></a>■ <a href="http://www.jsug.org/" rel="nofollow noopener" target="_blank">JSUG</a>\n</h4>\n\n<h4>\n<span id="-jaws-ug" class="fragment"></span><a href="#-jaws-ug"><i class="fa fa-link"></i></a>■ <a href="https://jaws-ug.jp/" rel="nofollow noopener" target="_blank">JAWS-UG</a>\n</h4>\n\n<h4>\n<span id="-html5" class="fragment"></span><a href="#-html5"><i class="fa fa-link"></i></a>■ <a href="https://events.html5j.org/conference/2018/11/" rel="nofollow noopener" target="_blank">HTML5</a>\n</h4>\n\n<h4>\n<span id="-vimconf" class="fragment"></span><a href="#-vimconf"><i class="fa fa-link"></i></a>■ <a href="https://vimconf.org/" rel="nofollow noopener" target="_blank">VimConf</a>\n</h4>\n\n<h4>\n<span id="-php-conference" class="fragment"></span><a href="#-php-conference"><i class="fa fa-link"></i></a>■ <a href="http://phpcon.php.gr.jp/2018/" rel="nofollow noopener" target="_blank">PHP Conference</a>\n</h4>\n\n<h4>\n<span id="-rubykaigi" class="fragment"></span><a href="#-rubykaigi"><i class="fa fa-link"></i></a>■ <a href="https://rubykaigi.org/2019" rel="nofollow noopener" target="_blank">RubyKaigi</a>\n</h4>\n\n<h4>\n<span id="-技術書典" class="fragment"></span><a href="#-%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8"><i class="fa fa-link"></i></a>■ <a href="https://techbookfest.org/" rel="nofollow noopener" target="_blank">技術書典</a>\n</h4>\n\n<h4>\n<span id="-code-blue" class="fragment"></span><a href="#-code-blue"><i class="fa fa-link"></i></a>■ <a href="https://codeblue.jp/2018/en/" rel="nofollow noopener" target="_blank">CODE BLUE</a>\n</h4>\n\n<h4>\n<span id="-droidkaigi" class="fragment"></span><a href="#-droidkaigi"><i class="fa fa-link"></i></a>■ <a href="https://droidkaigi.jp/2019/" rel="nofollow noopener" target="_blank">DroidKaigi</a>\n</h4>\n\n<h4>\n<span id="-go-conference" class="fragment"></span><a href="#-go-conference"><i class="fa fa-link"></i></a>■ <a href="https://gocon.jp/" rel="nofollow noopener" target="_blank">Go Conference</a>\n</h4>\n\n<h2>\n<span id="カンファレンスイベント企業系" class="fragment"></span><a href="#%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E4%BC%81%E6%A5%AD%E7%B3%BB"><i class="fa fa-link"></i></a>カンファレンス/イベント(企業系)</h2>\n\n<h4>\n<span id="-aws-summit-tokyo" class="fragment"></span><a href="#-aws-summit-tokyo"><i class="fa fa-link"></i></a>■ <a href="http://www.awssummit.tokyo/" rel="nofollow noopener" target="_blank">AWS Summit Tokyo</a>\n</h4>\n\n<h4>\n<span id="-microsoft-decode" class="fragment"></span><a href="#-microsoft-decode"><i class="fa fa-link"></i></a>■ <a href="https://www.microsoft.com/ja-jp/events/decode/2018" rel="nofollow noopener" target="_blank">Microsoft de:code</a>\n</h4>\n\n<h4>\n<span id="-microsoft-tech-summit" class="fragment"></span><a href="#-microsoft-tech-summit"><i class="fa fa-link"></i></a>■ <a href="https://www.microsoft.com/ja-jp/events/techsummit/" rel="nofollow noopener" target="_blank">Microsoft Tech Summit</a>\n</h4>\n\n<h4>\n<span id="-楽天テクノロジーカンファレンス" class="fragment"></span><a href="#-%E6%A5%BD%E5%A4%A9%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9"><i class="fa fa-link"></i></a>■ <a href="https://tech.rakuten.co.jp/" rel="nofollow noopener" target="_blank">楽天テクノロジーカンファレンス</a>\n</h4>\n\n<h4>\n<span id="-cookpad-techconf" class="fragment"></span><a href="#-cookpad-techconf"><i class="fa fa-link"></i></a>■ <a href="https://techconf.cookpad.com" rel="nofollow noopener" target="_blank">Cookpad TechConf</a>\n</h4>\n\n<h4>\n<span id="-ntt-tech-conference" class="fragment"></span><a href="#-ntt-tech-conference"><i class="fa fa-link"></i></a>■ <a href="https://ntt-developers.github.io/ntt-tech-conference/" rel="nofollow noopener" target="_blank">NTT Tech Conference</a>\n</h4>\n\n<h2>\n<span id="学習サイト" class="fragment"></span><a href="#%E5%AD%A6%E7%BF%92%E3%82%B5%E3%82%A4%E3%83%88"><i class="fa fa-link"></i></a>学習サイト</h2>\n\n<h4>\n<span id="-progate" class="fragment"></span><a href="#-progate"><i class="fa fa-link"></i></a>■ <a href="https://prog-8.com/" rel="nofollow noopener" target="_blank">progate</a>\n</h4>\n\n<h4>\n<span id="-ドットインストール" class="fragment"></span><a href="#-%E3%83%89%E3%83%83%E3%83%88%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>■ <a href="https://dotinstall.com/" rel="nofollow noopener" target="_blank">ドットインストール</a>\n</h4>\n\n<h4>\n<span id="-paiza" class="fragment"></span><a href="#-paiza"><i class="fa fa-link"></i></a>■ <a href="https://paiza.jp/" rel="nofollow noopener" target="_blank">paiza</a>\n</h4>\n\n<h2>\n<span id="学習サイト分野特化" class="fragment"></span><a href="#%E5%AD%A6%E7%BF%92%E3%82%B5%E3%82%A4%E3%83%88%E5%88%86%E9%87%8E%E7%89%B9%E5%8C%96"><i class="fa fa-link"></i></a>学習サイト(分野特化)</h2>\n\n<h4>\n<span id="-ネットワークエンジニアとして" class="fragment"></span><a href="#-%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%A8%E3%81%97%E3%81%A6"><i class="fa fa-link"></i></a>■ <a href="https://www.infraexpert.com/" rel="nofollow noopener" target="_blank">ネットワークエンジニアとして</a>\n</h4>\n\n<h4>\n<span id="-シェルスクリプト-リファレンス" class="fragment"></span><a href="#-%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88-%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9"><i class="fa fa-link"></i></a>■ <a href="https://shellscript.sunone.me/" rel="nofollow noopener" target="_blank">シェルスクリプト リファレンス</a>\n</h4>\n\n<h4>\n<span id="-vim-adventures" class="fragment"></span><a href="#-vim-adventures"><i class="fa fa-link"></i></a>■ <a href="https://vim-adventures.com/" rel="nofollow noopener" target="_blank">VIM Adventures</a>\n</h4>\n\n<h2>\n<span id="学習サイトlinux" class="fragment"></span><a href="#%E5%AD%A6%E7%BF%92%E3%82%B5%E3%82%A4%E3%83%88linux"><i class="fa fa-link"></i></a>学習サイト(Linux)</h2>\n\n<h4>\n<span id="-エンジニアの入り口linux入門講座" class="fragment"></span><a href="#-%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E5%85%A5%E3%82%8A%E5%8F%A3linux%E5%85%A5%E9%96%80%E8%AC%9B%E5%BA%A7"><i class="fa fa-link"></i></a>■ <a href="https://eng-entrance.com/category/linux" rel="nofollow noopener" target="_blank">エンジニアの入り口(Linux入門講座)</a>\n</h4>\n\n<h4>\n<span id="-the-linux-kernel" class="fragment"></span><a href="#-the-linux-kernel"><i class="fa fa-link"></i></a>■ <a href="https://linuxjf.osdn.jp/JFdocs/The-Linux-Kernel.html" rel="nofollow noopener" target="_blank">The Linux Kernel</a>\n</h4>\n\n<h4>\n<span id="-linuxデバイスドライバ開発入門" class="fragment"></span><a href="#-linux%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>■ <a href="http://linux-dvr.biz/" rel="nofollow noopener" target="_blank">Linuxデバイスドライバ開発入門</a>\n</h4>\n\n<h2>\n<span id="学習サイト資格系" class="fragment"></span><a href="#%E5%AD%A6%E7%BF%92%E3%82%B5%E3%82%A4%E3%83%88%E8%B3%87%E6%A0%BC%E7%B3%BB"><i class="fa fa-link"></i></a>学習サイト(資格系)</h2>\n\n<h4>\n<span id="-ping-t" class="fragment"></span><a href="#-ping-t"><i class="fa fa-link"></i></a>■ <a href="https://ping-t.com/" rel="nofollow noopener" target="_blank">Ping-t</a>\n</h4>\n\n<h4>\n<span id="-dive-into-emax" class="fragment"></span><a href="#-dive-into-emax"><i class="fa fa-link"></i></a>■ <a href="https://diver.diveintocode.jp/exam" rel="nofollow noopener" target="_blank">DIVE INTO EMAX</a>\n</h4>\n\n<h2>\n<span id="プログラミングコンテスト" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88"><i class="fa fa-link"></i></a>プログラミングコンテスト</h2>\n\n<h4>\n<span id="-topcoder" class="fragment"></span><a href="#-topcoder"><i class="fa fa-link"></i></a>■ <a href="https://www.topcoder.com/" rel="nofollow noopener" target="_blank">TopCoder</a>\n</h4>\n\n<h4>\n<span id="-atcoder" class="fragment"></span><a href="#-atcoder"><i class="fa fa-link"></i></a>■ <a href="https://atcoder.jp/?lang=ja" rel="nofollow noopener" target="_blank">AtCoder</a>\n</h4>\n\n<h4>\n<span id="-codeforces" class="fragment"></span><a href="#-codeforces"><i class="fa fa-link"></i></a>■ <a href="https://codeforces.com/" rel="nofollow noopener" target="_blank">CodeForces</a>\n</h4>\n\n<h2>\n<span id="youtube" class="fragment"></span><a href="#youtube"><i class="fa fa-link"></i></a>Youtube</h2>\n\n<h4>\n<span id="-kenta--雑食系エンジニアtv" class="fragment"></span><a href="#-kenta--%E9%9B%91%E9%A3%9F%E7%B3%BB%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2tv"><i class="fa fa-link"></i></a>■ <a href="https://www.youtube.com/channel/UC_HLK-ksslL-Z_2wiIZDlMg" rel="nofollow noopener" target="_blank">KENTA / 雑食系エンジニアTV</a>\n</h4>\n\n<h4>\n<span id="-utsuさんの就活転職チャンネル" class="fragment"></span><a href="#-utsu%E3%81%95%E3%82%93%E3%81%AE%E5%B0%B1%E6%B4%BB%E8%BB%A2%E8%81%B7%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB"><i class="fa fa-link"></i></a>■ <a href="https://www.youtube.com/channel/UC7LnadOwPEGqGnIuwVGfjow" rel="nofollow noopener" target="_blank">Utsuさんの就活/転職チャンネル</a>\n</h4>\n\n<h4>\n<span id="-ゆとり君チャンネル" class="fragment"></span><a href="#-%E3%82%86%E3%81%A8%E3%82%8A%E5%90%9B%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB"><i class="fa fa-link"></i></a>■ <a href="https://www.youtube.com/channel/UC_1L6n5z9MQFPF8UnO9NbXQ" rel="nofollow noopener" target="_blank">ゆとり君チャンネル</a>\n</h4>\n\n<h2>\n<span id="イベントコミュニティ検索" class="fragment"></span><a href="#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E6%A4%9C%E7%B4%A2"><i class="fa fa-link"></i></a>イベント/コミュニティ検索</h2>\n\n<h4>\n<span id="-connpass" class="fragment"></span><a href="#-connpass"><i class="fa fa-link"></i></a>■ <a href="https://connpass.com/" rel="nofollow noopener" target="_blank">connpass</a>\n</h4>\n\n<h4>\n<span id="-tech-play" class="fragment"></span><a href="#-tech-play"><i class="fa fa-link"></i></a>■ <a href="https://techplay.jp/" rel="nofollow noopener" target="_blank">TECH PLAY</a>\n</h4>\n\n<h4>\n<span id="-doorkeeper" class="fragment"></span><a href="#-doorkeeper"><i class="fa fa-link"></i></a>■ <a href="https://www.doorkeeper.jp/" rel="nofollow noopener" target="_blank">Doorkeeper</a>\n</h4>\n\n<h4>\n<span id="-atnd" class="fragment"></span><a href="#-atnd"><i class="fa fa-link"></i></a>■ <a href="https://atnd.org/" rel="nofollow noopener" target="_blank">ATND</a>\n</h4>\n\n<h2>\n<span id="webサービス" class="fragment"></span><a href="#web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9"><i class="fa fa-link"></i></a>Webサービス</h2>\n\n<h4>\n<span id="-findy" class="fragment"></span><a href="#-findy"><i class="fa fa-link"></i></a>■ <a href="https://findy-code.io/" rel="nofollow noopener" target="_blank">Findy</a>\n</h4>\n\n<p>GitHubのアカウントを登録することで投稿している言語毎に偏差値を出してくれるサービスです</p>\n\n<h4>\n<span id="-socialdog" class="fragment"></span><a href="#-socialdog"><i class="fa fa-link"></i></a>■ <a href="https://social-dog.net/" rel="nofollow noopener" target="_blank">SocialDog</a>\n</h4>\n\n<p>Twitterのアカウント管理サービスです。</p>\n\n<h4>\n<span id="-yuml" class="fragment"></span><a href="#-yuml"><i class="fa fa-link"></i></a>■ <a href="http://yuml.me/" rel="nofollow noopener" target="_blank">yUML</a>\n</h4>\n\n<p>UML作成サービス</p>\n\n<h4>\n<span id="-google-scholar" class="fragment"></span><a href="#-google-scholar"><i class="fa fa-link"></i></a>■ <a href="https://scholar.google.co.jp/" rel="nofollow noopener" target="_blank">Google Scholar</a>\n</h4>\n\n<p>学術用途での検索に便利</p>\n\n<h4>\n<span id="-githubのトレンドページ" class="fragment"></span><a href="#-github%E3%81%AE%E3%83%88%E3%83%AC%E3%83%B3%E3%83%89%E3%83%9A%E3%83%BC%E3%82%B8"><i class="fa fa-link"></i></a>■ <a href="https://github.com/trending/" rel="nofollow noopener" target="_blank">GitHubのトレンドページ</a>\n</h4>\n\n<p>デイリーランキング的なやつのGitHub版</p>\n\n<h4>\n<span id="-bash-profile-generator" class="fragment"></span><a href="#-bash-profile-generator"><i class="fa fa-link"></i></a>■ <a href="http://xta.github.io/HalloweenBash/" rel="nofollow noopener" target="_blank">Bash Profile Generator</a>\n</h4>\n\n<p>プロンプトが簡単にカスタマイズできるサイト</p>\n\n<h4>\n<span id="-正規表現チェッカー" class="fragment"></span><a href="#-%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AB%E3%83%BC"><i class="fa fa-link"></i></a>■ <a href="http://okumocchi.jp/php/re.php" rel="nofollow noopener" target="_blank">正規表現チェッカー</a>\n</h4>\n\n<p>正規表現のテストが出来るwebサービス</p>\n\n<h4>\n<span id="-tweetdeck" class="fragment"></span><a href="#-tweetdeck"><i class="fa fa-link"></i></a>■ <a href="https://tweetdeck.twitter.com/" rel="nofollow noopener" target="_blank">TweetDeck</a>\n</h4>\n\n<p>複数の アカウントやタイムラインを管理できるwebサービス</p>\n', 'body': '# 背景\n\n自分が普段電車や会社で読んでいるIT系のサイトと学習などで使用しているサイトのまとめ。\n\n## ニュース系\n\n#### ■ [CNET Japan](https://japan.cnet.com/)\n\n#### ■ [@IT](http://www.atmarkit.co.jp/)\n\n#### ■ [ITmedia](http://www.itmedia.co.jp/)\n\n#### ■ [はてなブックマーク(テクノロジーカテゴリ)](http://b.hatena.ne.jp/hotentry/it)\n\n#### ■ [Menthas](https://menthas.com/)\n\n#### ■ [Publickey](https://www.publickey1.jp/)\n\n## ニュース(ガジェット系)\n\n#### ■ [PC Watch](https://pc.watch.impress.co.jp/)\n\n#### ■ [GIZMODO](https://www.gizmodo.jp/)\n\n#### ■ [Engadget](https://japanese.engadget.com/)\n\n## 技術系ブログ(企業系)\n\n#### ■ [Developers.IO](https://dev.classmethod.jp/)\n\n#### ■ [はてなブログ開発ブログ](http://staff.hatenablog.com/)\n\n#### ■ [サイボウズのエンジニアブログ](https://blog.cybozu.io/)\n\n#### ■ [クックパッド開発者ブログ](https://techlife.cookpad.com/)\n\n#### ■ [Google Developers](https://developers-jp.googleblog.com/)\n\n#### ■ [Yahoo! JAPAN Tech Blog](https://techblog.yahoo.co.jp/)\n\n#### ■ [Mercari Engineering Blog](https://tech.mercari.com/)\n\n#### ■ [Webnaut](https://webnaut.jp/)\n\n#### ■ [バズ部](https://bazubu.com/)\n\n#### ■ [SOUM/misc](https://www.soum.co.jp/misc/)\n\n#### ■ [LINE Engineering](https://engineering.linecorp.com/ja/blog/)\n\n## 技術系ブログ(個人)\n\n#### ■ [ネットワークエンジニアのメモ](https://www.infraeye.com/)\n\n#### ■ [プログラマでありたい](https://blog.takuros.net/)\n\n#### ■ [人間とウェブの未来](https://hb.matsumoto-r.jp/)\n\n#### ■ [まふゆちゃんの技術ブログ。](https://mafuyu7se.hatenablog.com/)\n\n## 業界紹介系ブログ\n\n#### ■ [AXIA](https://axia.co.jp/blog)\n\n## スライド共有\n\n#### ■ [SlideShare](https://www.slideshare.net/)\n\n#### ■ [Speaker Deck](https://speakerdeck.com/)\n\n## Q&A系\n\n#### ■ [Stack Overflow](https://ja.stackoverflow.com/)\n\n#### ■ [teratail](https://teratail.com/)\n\n## カンファレンス/イベント\n\n#### ■ [オープンソースカンファレンス](https://www.ospn.jp/)\n\n#### ■ [JJUG](http://www.java-users.jp/)\n\n#### ■ [JSUG](http://www.jsug.org/)\n\n#### ■ [JAWS-UG](https://jaws-ug.jp/)\n\n#### ■ [HTML5](https://events.html5j.org/conference/2018/11/)\n\n#### ■ [VimConf](https://vimconf.org/)\n\n#### ■ [PHP Conference](http://phpcon.php.gr.jp/2018/)\n\n#### ■ [RubyKaigi](https://rubykaigi.org/2019)\n\n#### ■ [技術書典](https://techbookfest.org/)\n\n#### ■ [CODE BLUE](https://codeblue.jp/2018/en/)\n\n#### ■ [DroidKaigi](https://droidkaigi.jp/2019/)\n\n#### ■ [Go Conference](https://gocon.jp/)\n\n## カンファレンス/イベント(企業系)\n\n#### ■ [AWS Summit Tokyo](http://www.awssummit.tokyo/)\n\n#### ■ [Microsoft de:code](https://www.microsoft.com/ja-jp/events/decode/2018)\n\n#### ■ [Microsoft Tech Summit](https://www.microsoft.com/ja-jp/events/techsummit/)\n\n#### ■ [楽天テクノロジーカンファレンス](https://tech.rakuten.co.jp/)\n\n#### ■ [Cookpad TechConf](https://techconf.cookpad.com)\n\n#### ■ [NTT Tech Conference](https://ntt-developers.github.io/ntt-tech-conference/)\n\n## 学習サイト\n\n#### ■ [progate](https://prog-8.com/)\n\n#### ■ [ドットインストール](https://dotinstall.com/)\n\n#### ■ [paiza](https://paiza.jp/)\n\n## 学習サイト(分野特化)\n\n#### ■ [ネットワークエンジニアとして](https://www.infraexpert.com/)\n\n#### ■ [シェルスクリプト リファレンス](https://shellscript.sunone.me/)\n\n#### ■ [VIM Adventures](https://vim-adventures.com/)\n\n## 学習サイト(Linux)\n\n#### ■ [エンジニアの入り口(Linux入門講座)](https://eng-entrance.com/category/linux)\n\n#### ■ [The Linux Kernel](https://linuxjf.osdn.jp/JFdocs/The-Linux-Kernel.html)\n\n#### ■ [Linuxデバイスドライバ開発入門](http://linux-dvr.biz/)\n\n## 学習サイト(資格系)\n\n#### ■ [Ping-t](https://ping-t.com/)\n\n#### ■ [DIVE INTO EMAX](https://diver.diveintocode.jp/exam)\n\n## プログラミングコンテスト\n\n#### ■ [TopCoder](https://www.topcoder.com/)\n\n#### ■ [AtCoder](https://atcoder.jp/?lang=ja)\n\n#### ■ [CodeForces](https://codeforces.com/)\n\n## Youtube\n\n#### ■ [KENTA / 雑食系エンジニアTV](https://www.youtube.com/channel/UC_HLK-ksslL-Z_2wiIZDlMg)\n\n#### ■ [Utsuさんの就活/転職チャンネル](https://www.youtube.com/channel/UC7LnadOwPEGqGnIuwVGfjow)\n\n#### ■ [ゆとり君チャンネル](https://www.youtube.com/channel/UC_1L6n5z9MQFPF8UnO9NbXQ)\n\n## イベント/コミュニティ検索\n\n#### ■ [connpass](https://connpass.com/)\n\n#### ■ [TECH PLAY](https://techplay.jp/)\n\n#### ■ [Doorkeeper](https://www.doorkeeper.jp/)\n\n#### ■ [ATND](https://atnd.org/)\n\n## Webサービス\n\n#### ■ [Findy](https://findy-code.io/)\n\nGitHubのアカウントを登録することで投稿している言語毎に偏差値を出してくれるサービスです\n\n#### ■ [SocialDog](https://social-dog.net/)\n\nTwitterのアカウント管理サービスです。\n\n#### ■ [yUML](http://yuml.me/)\n\nUML作成サービス\n\n#### ■ [Google Scholar](https://scholar.google.co.jp/)\n\n学術用途での検索に便利\n\n#### ■ [GitHubのトレンドページ](https://github.com/trending/)\n\nデイリーランキング的なやつのGitHub版\n\n#### ■ [Bash Profile Generator](http://xta.github.io/HalloweenBash/)\n\nプロンプトが簡単にカスタマイズできるサイト\n\n#### ■ [正規表現チェッカー](http://okumocchi.jp/php/re.php)\n\n正規表現のテストが出来るwebサービス\n\n#### ■ [TweetDeck](https://tweetdeck.twitter.com/)\n\n複数の アカウントやタイムラインを管理できるwebサービス\n', 'coediting': False, 'comments_count': 17, 'created_at': '2018-11-29T22:01:23+09:00', 'group': None, 'id': '604a68abb91949e79ece', 'likes_count': 2245, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'operation', 'versions': []}, {'name': 'devops', 'versions': []}, {'name': 'developer', 'versions': []}], 'title': 'エンジニアが情報収集とトレンドを追うのに読むと良いサイト', 'updated_at': '2019-03-13T17:59:59+09:00', 'url': 'https://qiita.com/ryuichi1208/items/604a68abb91949e79ece', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="七行プログラミングとは" class="fragment"></span><a href="#%E4%B8%83%E8%A1%8C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>七行プログラミングとは</h2>\n\n<p>プログラミングの言語を問わず、<br>\n「7行 × 79文字 」という文字数制限のもとにコードを書くといったこと<br>\nショートコーディングと呼ばれるらしいです。</p>\n\n<p>1kbに満たないソースでテトリスが出来るのには感動しました(当時中学生ぐらい)<br>\nUnix哲学の「スモール イズ ビューティフル」もびっくりです()。</p>\n\n<p>ちなみにスーパーマリオブラザーズは40kb程っていうのも驚き</p>\n\n<blockquote>\n<p>ショートコーダー(Short Coder)とは、プログラムのソースコードを極限まで短縮する技術を持ったプログラマのことである。「ソースコードの短縮」は、一見無意味に感じられるかもしれない。しかし最短コードを達成するには、省メモリ・高速プログラム・処理系の知識に加えて、並外れた集中力と熱いショートコーディング魂が必要なのである。</p>\n</blockquote>\n\n<p>以下に見つけたソースを記載します<br>\n(2001 ~ 2004年頃の情報がメイン)</p>\n\n<h2>\n<span id="7行テトリス" class="fragment"></span><a href="#7%E8%A1%8C%E3%83%86%E3%83%88%E3%83%AA%E3%82%B9"><i class="fa fa-link"></i></a>7行テトリス</h2>\n\n<p>改良に改良を重ね出来上がったのが下記。<br>\n第一版ができたのは今から約12年前の2002年と言うのが驚きです。<br>\nそれぞれテキストエディタに保存しブラウザで実行すれば遊べます。</p>\n\n<p>技術的解説は下記にあります。<br>\n<a href="http://www.geocities.jp/nanagyou/kaisetsu.html" class="autolink" rel="nofollow noopener" target="_blank">http://www.geocities.jp/nanagyou/kaisetsu.html</a></p>\n\n<p>■ モノクロ版</p>\n\n<div class="code-frame" data-lang="html"><div class="highlight"><pre>\n<span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">D</span> <span class="na">onKeyDown=</span><span class="s">K=event.keyCode-38</span><span class="nt">&gt;&lt;script&gt;</span><span class="nx">Z</span><span class="o">=</span><span class="nx">X</span><span class="o">=</span><span class="p">[</span><span class="nx">B</span><span class="o">=</span><span class="nx">A</span><span class="o">=</span><span class="mi">12</span><span class="p">];</span><span class="kd">function</span> <span class="nx">Y</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="nx">C</span>\n<span class="o">=</span><span class="p">[</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="mi">4</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="o">--*</span><span class="nx">K</span><span class="p">;</span><span class="nx">c</span><span class="o">-=!</span><span class="nx">Z</span><span class="p">[</span><span class="nx">h</span><span class="o">+</span><span class="p">(</span><span class="nx">K</span><span class="o">+</span><span class="mi">6</span><span class="p">?</span><span class="nx">p</span><span class="o">+</span><span class="nx">K</span><span class="p">:</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">A</span><span class="o">-</span><span class="p">(</span><span class="nx">p</span><span class="o">/</span><span class="mi">9</span><span class="o">|</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">145</span><span class="p">)])</span><span class="nx">p</span><span class="o">=</span><span class="nx">B</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="p">?</span><span class="mi">0</span><span class="p">:</span><span class="nx">K</span><span class="o">+</span><span class="mi">6</span><span class="p">?</span><span class="nx">h</span>\n<span class="o">+=</span><span class="nx">K</span><span class="p">:</span><span class="nx">t</span><span class="p">?</span><span class="nx">B</span><span class="o">=</span><span class="nx">C</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">K</span><span class="o">=</span><span class="nx">q</span><span class="o">--</span><span class="p">;</span><span class="nx">f</span><span class="o">+=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">A</span><span class="o">+</span><span class="nx">p</span><span class="p">])</span><span class="nx">k</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">B</span><span class="p">[</span><span class="nx">q</span><span class="p">]]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=!</span><span class="nx">e</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">+=</span><span class="nx">A</span><span class="p">,</span><span class="nx">f</span><span class="o">|</span><span class="nx">B</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">Z</span><span class="o">=</span><span class="nx">X</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="p">[</span><span class="nx">l</span><span class="o">=</span>\n<span class="mi">228</span><span class="p">],</span><span class="nx">B</span><span class="o">=</span><span class="p">[[</span><span class="o">-</span><span class="mi">7</span><span class="p">,</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">][</span><span class="nx">t</span><span class="o">=++</span><span class="nx">t</span><span class="o">%</span><span class="mi">7</span><span class="p">]</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="o">-</span><span class="mi">6</span><span class="p">?</span><span class="o">-</span><span class="nx">A</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span><span class="nx">l</span><span class="o">--</span><span class="p">;)</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">%</span><span class="nx">A</span><span class="p">?</span><span class="nx">l</span><span class="o">-=</span><span class="nx">l</span><span class="o">%</span><span class="nx">A</span><span class="o">*!</span><span class="nx">Z</span><span class="p">[</span>\n<span class="nx">l</span><span class="p">]:(</span><span class="nx">P</span><span class="o">+=</span><span class="nx">k</span><span class="o">++</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="o">+=</span><span class="nx">A</span><span class="p">);</span><span class="o">--</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">A</span><span class="p">;)</span><span class="nx">Z</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">c</span><span class="o">-</span><span class="nx">A</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">240</span><span class="p">;</span><span class="nx">S</span><span class="o">+=</span><span class="nx">X</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">|</span><span class="p">(</span><span class="nx">X</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">|=++</span><span class="nx">i</span><span class="o">%</span><span class="nx">A</span><span class="o">&lt;</span>\n<span class="mi">2</span><span class="o">|</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">228</span><span class="p">)?</span><span class="nx">i</span><span class="o">%</span><span class="nx">A</span><span class="p">?</span><span class="s2">"■"</span><span class="p">:</span><span class="s2">"■&lt;br&gt;"</span><span class="p">:</span><span class="s2">"＿"</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">S</span><span class="o">+</span><span class="nx">P</span><span class="p">;</span><span class="nx">Z</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">||</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="mi">99</span><span class="o">-</span><span class="nx">P</span><span class="p">)}</span><span class="nx">Y</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span>\n<span class="o">=</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="o">=</span><span class="nx">P</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>\n</pre></div></div>\n\n<p>■ カラー版</p>\n\n<div class="code-frame" data-lang="html"><div class="highlight"><pre><span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">D</span> <span class="na">onKeyDown=</span><span class="s">K=event.keyCode-38</span><span class="nt">&gt;&lt;script&gt;</span><span class="nx">Z</span><span class="o">=</span><span class="nx">X</span><span class="o">=</span><span class="p">[</span><span class="nx">B</span><span class="o">=</span><span class="nx">A</span><span class="o">=</span><span class="mi">12</span><span class="p">];</span><span class="kd">function</span> <span class="nx">Y</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="nx">C</span>\n<span class="o">=</span><span class="p">[</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="mi">4</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="o">--*</span><span class="nx">K</span><span class="p">;</span><span class="nx">c</span><span class="o">-=!</span><span class="nx">Z</span><span class="p">[</span><span class="nx">h</span><span class="o">+</span><span class="p">(</span><span class="nx">K</span><span class="o">+</span><span class="mi">6</span><span class="p">?</span><span class="nx">p</span><span class="o">+</span><span class="nx">K</span><span class="p">:</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">A</span><span class="o">-</span><span class="p">(</span><span class="nx">p</span><span class="o">/</span><span class="mi">9</span><span class="o">|</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">145</span><span class="p">)])</span><span class="nx">p</span><span class="o">=</span><span class="nx">B</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="p">?</span><span class="mi">0</span><span class="p">:</span><span class="nx">K</span><span class="o">+</span><span class="mi">6</span><span class="p">?</span><span class="nx">h</span>\n<span class="o">+=</span><span class="nx">K</span><span class="p">:</span><span class="nx">t</span><span class="p">?</span><span class="nx">B</span><span class="o">=</span><span class="nx">C</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="nx">K</span><span class="o">=</span><span class="nx">q</span><span class="o">--</span><span class="p">;</span><span class="nx">f</span><span class="o">+=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">A</span><span class="o">+</span><span class="nx">p</span><span class="p">])</span><span class="nx">X</span><span class="p">[</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">B</span><span class="p">[</span><span class="nx">q</span><span class="p">]]</span><span class="o">=</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=!</span><span class="nx">e</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">+=</span><span class="nx">A</span><span class="p">,</span><span class="nx">f</span><span class="o">|</span><span class="nx">B</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">Z</span><span class="o">=</span><span class="nx">X</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="p">[</span>\n<span class="nx">l</span><span class="o">=</span><span class="mi">228</span><span class="p">],</span><span class="nx">B</span><span class="o">=</span><span class="p">[[</span><span class="o">-</span><span class="mi">7</span><span class="p">,</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">17</span><span class="p">,</span><span class="o">-</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">][</span><span class="nx">t</span><span class="o">=++</span><span class="nx">t</span><span class="o">%</span><span class="mi">7</span><span class="p">]</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="o">-</span><span class="mi">6</span><span class="p">?</span><span class="o">-</span><span class="nx">A</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span><span class="nx">l</span><span class="o">--</span><span class="p">;)</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">%</span><span class="nx">A</span><span class="p">?</span><span class="nx">l</span><span class="o">-=</span><span class="nx">l</span><span class="o">%</span><span class="nx">A</span><span class="o">*!</span>\n<span class="nx">Z</span><span class="p">[</span><span class="nx">l</span><span class="p">]:(</span><span class="nx">P</span><span class="o">+=++</span><span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="o">+=</span><span class="nx">A</span><span class="p">);</span><span class="o">--</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">A</span><span class="p">;)</span><span class="nx">Z</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">c</span><span class="o">-</span><span class="nx">A</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="s2">"&lt;b&gt;"</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">240</span><span class="p">;</span><span class="nx">S</span><span class="o">+=</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">|</span><span class="p">(</span><span class="nx">X</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>\n<span class="o">|=++</span><span class="nx">i</span><span class="o">%</span><span class="nx">A</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">|</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">228</span><span class="p">))?</span><span class="s2">"&lt;b style=color:#"</span><span class="o">+</span><span class="mi">142</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="s2">"&gt;■"</span><span class="p">:</span><span class="s2">"＿"</span><span class="p">)</span><span class="nx">i</span><span class="o">%</span><span class="nx">A</span><span class="p">?</span><span class="mi">0</span><span class="p">:</span><span class="nx">S</span><span class="o">+=</span><span class="s2">"&lt;br&gt;"</span><span class="p">;</span>\n<span class="nx">D</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">S</span><span class="o">+</span><span class="nx">P</span><span class="p">;</span><span class="nx">Z</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">||</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="mi">99</span><span class="o">-</span><span class="nx">P</span><span class="p">)}</span><span class="nx">Y</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="o">=</span><span class="nx">P</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>\n</pre></div></div>\n\n<p>■ 実行画面</p>\n\n<p><a href="https://camo.qiitausercontent.com/454b45c7e68790f4c100fefdc4b50389118f8b01/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33663132376463392d326561392d393439632d393839372d6665663535643463616162312e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/454b45c7e68790f4c100fefdc4b50389118f8b01/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33663132376463392d326561392d393439632d393839372d6665663535643463616162312e706e67" alt="スクリーンショット 2018-11-27 21.41.29.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/3f127dc9-2ea9-949c-9897-fef55d4caab1.png"></a></p>\n\n<h2>\n<span id="7行オセロ" class="fragment"></span><a href="#7%E8%A1%8C%E3%82%AA%E3%82%BB%E3%83%AD"><i class="fa fa-link"></i></a>7行オセロ</h2>\n\n<p>コンパイルすることでCLI上で遊べるCPU対戦型のオセロです。<br>\nコンピュータ操作部分を除けば実装できそうな気がしますが人工知能部分も含むとなると<br>\nホントに天才技としか思えません。。</p>\n\n<p>解説は下記参照<br>\n<a href="https://uguisu.skr.jp/othello/7gyou.html" class="autolink" rel="nofollow noopener" target="_blank">https://uguisu.skr.jp/othello/7gyou.html</a></p>\n\n<p>整形前ソースがコメント付きであります。<br>\n一番目に付くのはmapを一次元配列で持っている点です。<br>\n多重ループしないことで文字数を削減しているようですが正直思いつくのがすごい。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">oc.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n</span><span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">m</span><span class="p">[</span><span class="mi">90</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span><span class="n">s</span><span class="p">,</span><span class="n">r</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">};</span><span class="kt">void</span> <span class="n">k</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>\n<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">v</span><span class="o">=</span><span class="n">p</span><span class="o">+</span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">==</span><span class="mi">3</span><span class="o">-</span><span class="n">t</span><span class="p">;</span><span class="n">v</span><span class="o">+=</span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="n">c</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">&amp;&amp;</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">==</span><span class="n">t</span><span class="p">){</span><span class="n">a</span><span class="o">+=</span><span class="n">c</span><span class="p">;</span><span class="n">v</span><span class="o">=</span>\n<span class="n">p</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="k">do</span> <span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">t</span><span class="p">,</span><span class="n">v</span><span class="o">+=</span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="k">while</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">!=</span><span class="n">t</span><span class="p">);}}}</span><span class="kt">char</span><span class="o">*</span><span class="n">h</span><span class="o">=</span><span class="s">" - o x</span><span class="se">\\n</span><span class="s">"</span><span class="p">;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span>\n<span class="mi">1</span><span class="p">,</span><span class="n">m</span><span class="p">[</span><span class="mi">41</span><span class="p">]</span><span class="o">=</span><span class="n">m</span><span class="p">[</span><span class="mi">49</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="o">++*</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span><span class="n">m</span><span class="p">[</span><span class="mi">40</span><span class="p">]</span><span class="o">=</span><span class="n">m</span><span class="p">[</span><span class="mi">50</span><span class="p">]</span><span class="o">=</span><span class="n">t</span><span class="o">=</span><span class="n">s</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(;;</span><span class="n">a</span><span class="o">=</span><span class="n">d</span><span class="o">=</span><span class="mi">0</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">9</span><span class="p">;</span><span class="n">p</span><span class="o">&lt;</span><span class="mi">82</span><span class="p">;</span><span class="o">++</span>\n<span class="n">p</span><span class="p">)</span><span class="n">k</span><span class="p">(),</span><span class="n">printf</span><span class="p">(</span><span class="s">"%.2s"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">h</span><span class="p">[</span><span class="n">m</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="n">d</span><span class="o">=</span><span class="n">a</span><span class="o">=</span><span class="n">s</span><span class="o">=</span><span class="n">p</span><span class="o">=</span><span class="mi">8</span><span class="p">;</span><span class="n">a</span><span class="o">==</span><span class="mi">8</span><span class="p">;</span><span class="n">k</span><span class="p">())</span><span class="n">t</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">"%d %d"</span>\n<span class="p">,</span><span class="o">&amp;</span><span class="n">p</span><span class="p">,</span><span class="o">&amp;</span><span class="n">i</span><span class="p">),</span><span class="n">p</span><span class="o">+=</span><span class="n">i</span><span class="o">*</span><span class="mi">9</span><span class="p">)</span><span class="o">:++</span><span class="n">p</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">printf</span><span class="p">(</span><span class="s">"pass"</span><span class="p">);</span><span class="k">else</span> <span class="k">break</span><span class="p">;</span><span class="n">t</span><span class="o">=</span><span class="mi">3</span><span class="o">-</span><span class="n">t</span><span class="p">;}</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>\n</pre></div>\n</div>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>gcc oc.c\n<span class="nv">$ </span>./a.out\n\n - - - - - - - -\n - - - - - - - -\n - - - - - - - -\n - - - o x - - -\n - - - x o - - -\n - - - - - - - -\n - - - - - - - -\n - - - - - - - -\n5 3\n\n - - - - - - - -\n - - - - - - - -\n - - - - o - - -\n - - - o o - - -\n - - - x o - - -\n - - - - - - - -\n - - - - - - - -\n - - - - - - - -\n</pre></div></div>\n\n<h2>\n<span id="7行玉避けゲーム" class="fragment"></span><a href="#7%E8%A1%8C%E7%8E%89%E9%81%BF%E3%81%91%E3%82%B2%E3%83%BC%E3%83%A0"><i class="fa fa-link"></i></a>7行玉避けゲーム</h2>\n\n<div class="code-frame" data-lang="html"><div class="highlight"><pre>\n<span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">B</span> <span class="na">onMouseMove=</span><span class="s">y=event.y;x=event.x</span><span class="nt">&gt;&lt;script&gt;</span><span class="nx">h</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">clientHeight</span><span class="o">-</span><span class="mi">20</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="nx">q</span><span class="o">=</span> \n<span class="p">[</span><span class="nx">D</span><span class="o">=</span><span class="nb">document</span><span class="p">]]];</span><span class="k">for</span><span class="p">(</span><span class="nx">U</span><span class="o">=</span><span class="nx">x</span><span class="o">=</span><span class="mi">99</span><span class="p">;</span><span class="nx">x</span><span class="o">--</span><span class="p">;</span><span class="nx">C</span><span class="o">=</span><span class="nx">F</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="o">=</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="nx">D</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">"&lt;b style=background:red;"</span> \n<span class="o">+</span><span class="s2">"width=16;height=16;position:absolute;top:-20&gt;&lt;/b&gt;"</span><span class="p">);</span><span class="kd">function</span> <span class="nx">T</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">C</span><span class="p">;</span><span class="nx">i</span><span class="o">--*</span> \n<span class="o">!</span><span class="nx">F</span><span class="p">;</span><span class="nx">J</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="mi">5</span><span class="o">+</span><span class="nx">i</span><span class="p">).</span><span class="nx">style</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">/</span><span class="nx">U</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">l</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">U</span><span class="p">]</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span> \n<span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">m</span><span class="o">-</span><span class="mi">15</span><span class="o">&lt;</span><span class="nx">x</span><span class="o">&amp;</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">m</span><span class="o">+</span><span class="mi">16</span><span class="o">&amp;</span><span class="nx">n</span><span class="o">-</span><span class="mi">15</span><span class="o">&lt;</span><span class="nx">y</span><span class="o">&amp;</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">+</span><span class="mi">16</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">]</span><span class="o">--</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">j</span><span class="o">--</span><span class="p">;</span><span class="nx">s</span><span class="o">+=</span><span class="nx">R</span><span class="o">%</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="nx">R</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span> \n<span class="nx">random</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">U</span><span class="p">)</span><span class="o">*</span><span class="nx">w</span><span class="o">*</span><span class="nx">h</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">?</span><span class="nx">i</span><span class="p">:</span><span class="nx">i</span><span class="o">+</span><span class="nx">U</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="o">%</span><span class="mi">2</span><span class="p">?</span><span class="nx">s</span><span class="o">%</span><span class="mi">4</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">?</span><span class="mi">0</span><span class="p">:</span><span class="nx">w</span><span class="p">:</span><span class="nx">R</span><span class="o">%</span><span class="nx">w</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="o">%</span><span class="mi">2</span><span class="p">?</span><span class="nx">R</span><span class="o">%</span><span class="nx">h</span><span class="p">:</span><span class="nx">s</span><span class="o">%</span><span class="mi">4</span><span class="p">?</span><span class="nx">h</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">P</span><span class="o">++-</span><span class="nx">C</span><span class="o">*</span> \n<span class="mi">9</span><span class="o">||</span><span class="nx">C</span><span class="o">-</span><span class="nx">U</span><span class="o">&amp;&amp;</span><span class="nx">C</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">F</span><span class="p">)</span><span class="nx">alert</span><span class="p">(</span><span class="nx">P</span><span class="p">);</span><span class="k">else</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="o">-</span><span class="nx">C</span><span class="p">)}</span><span class="nx">T</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">clientWidth</span><span class="o">-</span><span class="mi">20</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>\n</pre></div></div>\n\n<h2>\n<span id="8行ぷよぷよ" class="fragment"></span><a href="#8%E8%A1%8C%E3%81%B7%E3%82%88%E3%81%B7%E3%82%88"><i class="fa fa-link"></i></a>8行ぷよぷよ</h2>\n\n<p>こちらは8行<br>\nテキストで保存してブラウザで実行すれば遊べます。</p>\n\n<div class="code-frame" data-lang="html"><div class="highlight"><pre><span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">D</span> <span class="na">onKeyDown=</span><span class="s">K=event.keyCode-38</span><span class="nt">&gt;&lt;script&gt;</span><span class="kd">function</span> <span class="nx">G</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span><span class="nx">Z</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Z</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">?</span>\n<span class="p">(</span><span class="nx">P</span><span class="o">+=</span><span class="nx">k</span><span class="o">++</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="nx">G</span><span class="p">(</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="nx">G</span><span class="p">(</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">),</span><span class="nx">G</span><span class="p">(</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">G</span><span class="p">(</span><span class="nx">x</span><span class="o">-</span><span class="mi">8</span><span class="p">),</span><span class="nx">v</span><span class="o">++</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">Y</span><span class="p">(){</span><span class="nx">i</span><span class="o">=</span><span class="nx">I</span><span class="o">=</span><span class="mi">96</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=++</span><span class="nx">e</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span>\n<span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="p">?</span><span class="nx">K</span><span class="o">+</span><span class="mi">6</span><span class="p">?</span><span class="nx">Z</span><span class="p">[</span><span class="nx">a</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">K</span><span class="p">]</span><span class="o">|</span><span class="nx">Z</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="nx">B</span><span class="p">]?</span><span class="mi">0</span><span class="p">:</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">:</span><span class="nx">Z</span><span class="p">[</span><span class="nx">h</span><span class="o">+</span><span class="p">(</span><span class="nx">E</span><span class="o">=</span><span class="nx">B</span><span class="o">%</span><span class="mi">8</span><span class="p">?</span><span class="nx">B</span><span class="o">*</span><span class="mi">8</span><span class="p">:</span><span class="o">-</span><span class="nx">B</span><span class="o">/</span><span class="mi">8</span><span class="p">)]?</span><span class="mi">0</span><span class="p">:</span><span class="nx">B</span><span class="o">=</span><span class="nx">E</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="nx">k</span><span class="o">=</span><span class="nx">i</span><span class="o">--</span><span class="p">;</span><span class="nx">X</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">+</span><span class="nx">t</span><span class="o">%</span>\n<span class="mi">5</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">X</span><span class="p">[</span><span class="nx">h</span><span class="o">+</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">+</span><span class="nx">t</span><span class="o">/</span><span class="mi">5</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="mi">8</span><span class="o">+</span><span class="nx">h</span><span class="p">]</span><span class="o">+</span><span class="nx">Z</span><span class="p">[</span><span class="mi">8</span><span class="o">+</span><span class="nx">h</span><span class="o">+</span><span class="nx">B</span><span class="p">])</span><span class="nx">X</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">+=</span><span class="mi">8</span><span class="p">,</span><span class="nx">r</span><span class="o">||</span><span class="nx">f</span><span class="p">){</span><span class="nx">r</span><span class="p">?</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">:</span><span class="nx">X</span><span class="o">=</span><span class="p">[</span><span class="nx">Z</span><span class="o">=</span><span class="nx">X</span><span class="p">]</span>\n<span class="k">for</span><span class="p">(</span><span class="nx">Z</span><span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">--</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span><span class="nx">Z</span><span class="p">[</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">-</span><span class="mi">8</span><span class="p">]</span><span class="o">*!</span><span class="nx">Z</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Z</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">Z</span><span class="p">[</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span>\n<span class="nx">random</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="mi">25</span><span class="p">;</span><span class="nx">I</span><span class="o">--</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">v</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">Z</span><span class="p">[</span><span class="nx">I</span><span class="p">],</span><span class="nx">c</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span><span class="nx">G</span><span class="p">(</span><span class="nx">I</span><span class="p">),</span><span class="nx">c</span><span class="o">=-</span><span class="nx">c</span><span class="p">,</span><span class="nx">r</span><span class="o">+=</span><span class="nx">q</span><span class="o">=</span><span class="nx">v</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">,</span><span class="nx">G</span><span class="p">(</span><span class="nx">I</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="p">?</span><span class="mi">3</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span>\n<span class="s2">""</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">96</span><span class="p">;</span><span class="nx">S</span><span class="o">+=</span><span class="nx">i</span><span class="o">%</span><span class="mi">8</span><span class="p">?</span><span class="s2">"＿■●★▲＊□"</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">):</span><span class="s2">"■&lt;br&gt;"</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">|</span><span class="p">(</span><span class="nx">Z</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">|=++</span><span class="nx">i</span><span class="o">%</span><span class="mi">8</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">|</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">88</span><span class="p">);</span>\n<span class="nx">D</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">S</span><span class="o">+</span><span class="nx">P</span><span class="p">;</span><span class="nx">Z</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*!</span><span class="nx">r</span><span class="o">||</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">Y</span><span class="p">,</span><span class="mi">99</span><span class="o">-</span><span class="nx">P</span><span class="p">)}</span><span class="nx">e</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">Y</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">X</span><span class="o">=</span><span class="nx">Z</span><span class="o">=</span><span class="p">[</span><span class="nx">r</span><span class="o">=</span><span class="nx">h</span><span class="o">=</span><span class="nx">K</span><span class="o">=</span><span class="nx">P</span><span class="o">=</span><span class="mi">0</span><span class="p">])</span><span class="nt">&lt;/script&gt;</span>\n</pre></div></div>\n\n<p><a href="https://camo.qiitausercontent.com/99373f597396eb3f5914dd27abbf436d88a2b7f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66373837316664342d386535612d656332372d653439392d6434656232366565373437342e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/99373f597396eb3f5914dd27abbf436d88a2b7f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66373837316664342d386535612d656332372d653439392d6434656232366565373437342e706e67" alt="スクリーンショット 2018-11-27 21.52.48.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/f7871fd4-8e5a-ec27-e499-d4eb26ee7474.png"></a></p>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>元ネタは2ちゃん<br>\n検索してみると記事は2007年以降更新されていない。<br>\n現代版の7行プログラミングがあればぜひ教えていただきたいです。</p>\n\n<h2>\n<span id="リンク" class="fragment"></span><a href="#%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>リンク</h2>\n\n<p>■ <a href="http://pc.5ch.net/test/read.cgi/tech/984182993/" rel="nofollow noopener" target="_blank">七行プログラミング</a><br>\n■ <a href="http://pc3.5ch.net/test/read.cgi/tech/1018840143/" rel="nofollow noopener" target="_blank">七行プログラミング part2</a><br>\n■ <a href="http://pc2.5ch.net/test/read.cgi/tech/1033143528/" rel="nofollow noopener" target="_blank">七行プログラミング part3</a><br>\n■ <a href="https://pc8.5ch.net/test/read.cgi/tech/1051703369/" rel="nofollow noopener" target="_blank">七行プログラミング part4</a><br>\n■ <a href="https://pc11.5ch.net/test/read.cgi/tech/1142467359/" rel="nofollow noopener" target="_blank">七行プログラミング part5</a></p>\n\n<p>その他作品は下記URLより見てみてください。<br>\n読むだけでも大変勉強になる内容が多い。</p>\n', 'body': '## 七行プログラミングとは\n\nプログラミングの言語を問わず、\n「7行 × 79文字 」という文字数制限のもとにコードを書くといったこと\nショートコーディングと呼ばれるらしいです。\n\n1kbに満たないソースでテトリスが出来るのには感動しました(当時中学生ぐらい)\nUnix哲学の「スモール イズ ビューティフル」もびっくりです()。\n\nちなみにスーパーマリオブラザーズは40kb程っていうのも驚き\n\n> ショートコーダー(Short Coder)とは、プログラムのソースコードを極限まで短縮する技術を持ったプログラマのことである。「ソースコードの短縮」は、一見無意味に感じられるかもしれない。しかし最短コードを達成するには、省メモリ・高速プログラム・処理系の知識に加えて、並外れた集中力と熱いショートコーディング魂が必要なのである。\n\n以下に見つけたソースを記載します\n(2001 ~ 2004年頃の情報がメイン)\n\n## 7行テトリス\n\n改良に改良を重ね出来上がったのが下記。\n第一版ができたのは今から約12年前の2002年と言うのが驚きです。\nそれぞれテキストエディタに保存しブラウザで実行すれば遊べます。\n\n技術的解説は下記にあります。\nhttp://www.geocities.jp/nanagyou/kaisetsu.html\n\n■ モノクロ版\n\n``` html\n\n<body id=D onKeyDown=K=event.keyCode-38><script>Z=X=[B=A=12];function Y(){for(C\n=[q=c=i=4];f=i--*K;c-=!Z[h+(K+6?p+K:C[i]=p*A-(p/9|0)*145)])p=B[i];for(c?0:K+6?h\n+=K:t?B=C:0;i=K=q--;f+=Z[A+p])k=X[p=h+B[q]]=1;if(e=!e)if(h+=A,f|B)for(Z=X,X=[l=\n228],B=[[-7,-20,6,h=17,-9,3,3][t=++t%7]-4,0,1,t-6?-A:2];l--;)for(l%A?l-=l%A*!Z[\nl]:(P+=k++,c=l+=A);--c>A;)Z[c]=Z[c-A];for(S="";i<240;S+=X[i]|(X[i]=Z[i]|=++i%A<\n2|i>228)?i%A?"■":"■<br>":"＿");D.innerHTML=S+P;Z[5]||setTimeout(Y,99-P)}Y(h=e\n=K=t=P=0)</script>\n```\n\n■ カラー版\n\n``` html\n<body id=D onKeyDown=K=event.keyCode-38><script>Z=X=[B=A=12];function Y(){for(C\n=[q=c=i=4];f=i--*K;c-=!Z[h+(K+6?p+K:C[i]=p*A-(p/9|0)*145)])p=B[i];for(c?0:K+6?h\n+=K:t?B=C:0;k=i=K=q--;f+=Z[A+p])X[p=h+B[q]]=t+1;if(e=!e)if(h+=A,f|B)for(Z=X,X=[\nl=228],B=[[-7,-20,6,h=17,-9,3,3][t=++t%7]-4,0,1,t-6?-A:2];l--;)for(l%A?l-=l%A*!\nZ[l]:(P+=++k,c=l+=A);--c>A;)Z[c]=Z[c-A];for(S="<b>";i<240;S+=(c=X[i]|(X[i]=Z[i]\n|=++i%A<2|i>228))?"<b style=color:#"+142*c+">■":"＿")i%A?0:S+="<br>";\nD.innerHTML=S+P;Z[5]||setTimeout(Y,99-P)}Y(h=e=K=t=P=0)</script>\n```\n\n■ 実行画面\n\n![スクリーンショット 2018-11-27 21.41.29.png](https://qiita-image-store.s3.amazonaws.com/0/258841/3f127dc9-2ea9-949c-9897-fef55d4caab1.png)\n\n\n## 7行オセロ\n\nコンパイルすることでCLI上で遊べるCPU対戦型のオセロです。\nコンピュータ操作部分を除けば実装できそうな気がしますが人工知能部分も含むとなると\nホントに天才技としか思えません。。\n\n解説は下記参照\nhttps://uguisu.skr.jp/othello/7gyou.html\n\n整形前ソースがコメント付きであります。\n一番目に付くのはmapを一次元配列で持っている点です。\n多重ループしないことで文字数を削減しているようですが正直思いつくのがすごい。\n\n``` c:oc.c\n#include <stdio.h>\nint p,t,a,d,c,v,i,m[90]={0},s,r[]={-10,-9,-8,-1,1,8,9,10};void k(){if(m[p]==0)\nfor(i=0;i<8;i++){for(c=0,v=p+r[i];m[v]==3-t;v+=r[i])c++;if(c&&m[v]==t){a+=c;v=\np;if(d)do m[v]=t,v+=r[i];while(m[v]!=t);}}}char*h=" - o x\\n";int main(){for(i=\n1,m[41]=m[49]=2;i<10;m[i++*9]=3)m[40]=m[50]=t=s=1;for(;;a=d=0){for(p=9;p<82;++\np)k(),printf("%.2s",&h[m[p]*2]);if(a)for(d=a=s=p=8;a==8;k())t-2?(scanf("%d %d"\n,&p,&i),p+=i*9):++p;else if(s)s=0,printf("pass");else break;t=3-t;}return 0;}\n```\n\n``` bash\n$ gcc oc.c\n$ ./a.out\n\n - - - - - - - -\n - - - - - - - -\n - - - - - - - -\n - - - o x - - -\n - - - x o - - -\n - - - - - - - -\n - - - - - - - -\n - - - - - - - -\n5 3\n\n - - - - - - - -\n - - - - - - - -\n - - - - o - - -\n - - - o o - - -\n - - - x o - - -\n - - - - - - - -\n - - - - - - - -\n - - - - - - - -\n```\n\n## 7行玉避けゲーム\n\n``` html\n\n<body id=B onMouseMove=y=event.y;x=event.x><script>h=B.clientHeight-20;a=[b=[q= \n[D=document]]];for(U=x=99;x--;C=F=q[x]=P=y=0)D.write("<b style=background:red;" \n+"width=16;height=16;position:absolute;top:-20></b>");function T(){for(i=C;i--* \n!F;J=D.all(5+i).style,l=q[i]/U,m=J.left=a[i]*(c=1-l)+a[d=i+U]*l,n=J.top=b[i]*c+ \nb[d]*l,F=m-15<x&x<m+16&n-15<y&y<n+16)if(!q[s=i]--)for(j=2;j--;s+=R%3+1)R=Math. \nrandom(q[i]=U)*w*h|0,a[c=j?i:i+U]=s%2?s%4>1?0:w:R%w,b[c]=s%2?R%h:s%4?h:0;P++-C* \n9||C-U&&C++;if(F)alert(P);else setTimeout(T,U-C)}T(w=B.clientWidth-20)</script>\n```\n\n## 8行ぷよぷよ\n\nこちらは8行\nテキストで保存してブラウザで実行すれば遊べます。\n\n``` html\n<body id=D onKeyDown=K=event.keyCode-38><script>function G(x){Z[x]==c&&(Z[x]=q?\n(P+=k++,0):-c,G(x+1),G(x+8),G(x-1),G(x-8),v++)}function Y(){i=I=96;if(e=++e%4)\nfor(K?K+6?Z[a=h+K]|Z[a+B]?0:h=a:Z[h+(E=B%8?B*8:-B/8)]?0:B=E:0;K=k=i--;X[h]=2+t%\n5|0,X[h+B]=2+t/5|0,f=Z[8+h]+Z[8+h+B])X[i]=Z[i];else if(h+=8,r||f){r?r=0:X=[Z=X]\nfor(Z[-5]=0;i--;B=8)Z[j=i-8]*!Z[i]&&(Z[i]=Z[j],Z[r=j]=0);if(!r)for(t=Math.\nrandom(h=3)*25;I--;q=v=0)if(c=Z[I],c>1)G(I),c=-c,r+=q=v>3,G(I);e=r?3:0}for(i=S=\n"";i<96;S+=i%8?"＿■●★▲＊□".charAt(c):"■<br>")c=X[i]|(Z[i]|=++i%8<2|i>88);\nD.innerHTML=S+P;Z[3]*!r||setTimeout(Y,99-P)}e=3;Y(f=X=Z=[r=h=K=P=0])</script>\n```\n\n![スクリーンショット 2018-11-27 21.52.48.png](https://qiita-image-store.s3.amazonaws.com/0/258841/f7871fd4-8e5a-ec27-e499-d4eb26ee7474.png)\n\n## まとめ\n\n元ネタは2ちゃん\n検索してみると記事は2007年以降更新されていない。\n現代版の7行プログラミングがあればぜひ教えていただきたいです。\n\n## リンク\n\n■ [七行プログラミング](http://pc.5ch.net/test/read.cgi/tech/984182993/)\n■ [七行プログラミング part2](http://pc3.5ch.net/test/read.cgi/tech/1018840143/)\n■ [七行プログラミング part3](http://pc2.5ch.net/test/read.cgi/tech/1033143528/)\n■ [七行プログラミング part4](https://pc8.5ch.net/test/read.cgi/tech/1051703369/)\n■ [七行プログラミング part5](https://pc11.5ch.net/test/read.cgi/tech/1142467359/)\n\nその他作品は下記URLより見てみてください。\n読むだけでも大変勉強になる内容が多い。\n', 'coediting': False, 'comments_count': 9, 'created_at': '2018-11-27T22:24:44+09:00', 'group': None, 'id': 'f9e6ac2b99bbe4fc82d3', 'likes_count': 1175, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'HTML', 'versions': []}, {'name': 'プログラミング', 'versions': []}, {'name': 'C言語', 'versions': []}], 'title': 'たった7行でテトリスを実装「七行プログラミング」とは', 'updated_at': '2018-11-27T22:31:56+09:00', 'url': 'https://qiita.com/ryuichi1208/items/f9e6ac2b99bbe4fc82d3', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>curlコマンドを使う際に毎回調べて実行しているのですがさすがに面倒なのでまとめてみました。<br>\n自分のevernoteからの転載なので誤記などあったら教えてください。</p>\n\n<h2>\n<span id="curlカールコマンドとは" class="fragment"></span><a href="#curl%E3%82%AB%E3%83%BC%E3%83%AB%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>curl(カール)コマンドとは</h2>\n\n<p>サーバから、もしくはサーバへデータ転送を行うコマンド。<br>\nFTP,SFTP,LDAP,TELNETなど多くのプロトコルに対応している。<br>\nF5アタックなんかもワンライナーでさくっとできる。(悪用禁止)</p>\n\n<p>一番基本的な使い方はHTTPリクエストを実施し、<br>\nその内容を標準出力するといった使い方でしょうか。<br>\njsonをパースしてくれるjqは必須なので入れておきましょう。</p>\n\n<p>書式は下記</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>curl <span class="o">[</span>options] <span class="o">[</span>URL]\n</pre></div></div>\n\n<p>ちなみにソースは下記から見れます。<br>\n■ <a href="https://github.com/curl/curl" rel="nofollow noopener" target="_blank">curl/curl</a></p>\n\n<h2>\n<span id="基本形" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E5%BD%A2"><i class="fa fa-link"></i></a>基本形</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>\n<span class="c"># HTTPリクエストを実施し結果を標準出力へ</span>\n<span class="nv">$ </span>curl http://対象のURL\n\n<span class="c">#コンマや[]を使って範囲指定も出来る</span>\n<span class="nv">$ </span>curl <span class="s1">\'http://{one,two,three}.example.com\'</span>\n<span class="nv">$ </span>curl <span class="s1">\'http://[1-3].example.com\'</span>\n\n<span class="c"># 実行結果をファイルへ出力</span>\n<span class="nv">$ </span>curl http://対象のURL <span class="o">&gt;</span> 出力先\n<span class="nv">$ </span>curl <span class="nt">-o</span> 出力先PATH http://対象のURL\n\n<span class="c"># ファイル出力時の進捗状況を非表示にする(エラーも非表示)</span>\n<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-o</span> 出力先PATH http://対象のURL\n\n<span class="c"># 上記でエラーは表示したい場合</span>\n<span class="nv">$ </span>curl <span class="nt">-sS</span> <span class="nt">-o</span> 出力先PATH http://対象のURL\n\n<span class="c"># プログレスバーで進捗率を表示</span>\n<span class="nv">$ </span>curl -# <span class="nt">-O</span> http://対象のURL\n\n<span class="c"># SSL接続で証明書エラーをスキップ</span>\n<span class="nv">$ </span>curl <span class="nt">-k</span> https://対象のURL\n\n<span class="c"># URLのファイル名でダウンロード (下記はindex.htmlで保存される)</span>\n<span class="nv">$ </span>curl <span class="nt">-O</span> http://対象のURL/index.html\n\n<span class="c"># プロキシ経由でアクセスする</span>\n<span class="nv">$ </span>curl <span class="nt">-x</span> プロキシサーバ:ポート番号 <span class="nt">--proxy-user</span> ユーザ名:パスワード http://対象のURL\n\n<span class="c"># リダイレクトを有効にする</span>\n<span class="nv">$ </span>curl <span class="nt">-L</span> http://対象のURL\n\n<span class="c"># ダウンロードを中断したときに再度ダウンロードを再開するとき</span>\n<span class="nv">$ </span>curl <span class="nt">-C</span> - http://対象のURL\n\n<span class="c"># HTTPメソッドの指定（-X）</span>\n<span class="nv">$ </span>curl <span class="nt">-X</span> PUT http://対象のURL\n</pre></div></div>\n\n<p>よく使うオプションは下記3つ<br>\nこれだけ覚えておけば正直なところ大体ことは足りる気がします。</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>-L -- リダイレクトがあったらリダイレクト先の情報を取る\n-s -- 余計な出力をしない\n-o -- レスポンスボディの出力先を指定する\n</pre></div></div>\n\n<h1>\n<span id="デバッグ系" class="fragment"></span><a href="#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%B3%BB"><i class="fa fa-link"></i></a>デバッグ系</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># HTTPレスポンスヘッダーの取得（-I）</span>\n<span class="nv">$ </span>curl <span class="nt">-I</span> http://対象のURL\n\n<span class="c"># 詳細をログ出力（-vもしくは--verbose）</span>\n<span class="nv">$ </span>curl <span class="nt">-v</span> http://対象のURL\n\n<span class="c"># 終了ステータスのみを表示</span>\n<span class="nv">$ </span>curl <span class="nt">-s</span> http://対象のURL <span class="nt">-o</span> /dev/null <span class="nt">-w</span> <span class="s1">\'%{http_code}\\n\'</span>\n</pre></div></div>\n\n<h1>\n<span id="小技系" class="fragment"></span><a href="#%E5%B0%8F%E6%8A%80%E7%B3%BB"><i class="fa fa-link"></i></a>小技系</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># ファイルに記載したリストからダウンロード(並列5プロセスで実行)</span>\n<span class="nv">$ </span><span class="nb">cat </span>url.list | xargs <span class="nt">-L1</span> <span class="nt">-P5</span> curl\n\n<span class="c"># 複数ファイルを同時ダウンロード</span>\n<span class="nv">$ </span>curl <span class="nt">-O</span> http://対象のURL/fuga.txt <span class="nt">-O</span> http://対象のURL/hogera.txt\n\n<span class="c"># DDosテスト(悪用厳禁)</span>\n<span class="nv">$ </span><span class="k">for</span><span class="o">((</span><span class="p">;;</span><span class="o">)){</span> curl <span class="nt">-v</span> <span class="nt">--header</span> <span class="s2">"Connection: keep-alive"</span> <span class="s2">"http://対象のURL"</span> <span class="p">;</span><span class="o">}</span>\n</pre></div></div>\n\n<h1>\n<span id="その他あまり使わない" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%82%E3%81%BE%E3%82%8A%E4%BD%BF%E3%82%8F%E3%81%AA%E3%81%84"><i class="fa fa-link"></i></a>その他(あまり使わない)</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 転送速度に制限をかける</span>\n<span class="c"># 速度は10k, 1m, 1gで指定する</span>\n<span class="nv">$ </span>curl <span class="nt">--limit-rate</span> 制限する転送速度 http://対象のURL\n\n<span class="c"># 認証を行う</span>\n<span class="nv">$ </span>curl <span class="nt">--anyauth</span> <span class="nt">--user</span> ユーザ名:パスワード http://対象のURL\n\n<span class="c"># 最大リダイレクト回数を指定</span>\n<span class="nv">$ </span>curl <span class="nt">-Z</span> 2 <span class="nt">-L</span> http://対象URL\n\n<span class="c"># 受信クッキーの保存</span>\n<span class="nv">$ </span>curl <span class="nt">-c</span> cookie.txt http://対象のURL\n\n<span class="c"># 保存クッキーの送信</span>\n<span class="nv">$ </span>curl <span class="nt">-b</span> cookie.txt http://対象のURL\n\n<span class="c"># 最大接続時間制限を設ける</span>\n<span class="nv">$ </span>curl <span class="nt">--connect-timeout</span> 600 http://対象のURL\n</pre></div></div>\n\n<h1>\n<span id="使ったことあるオプションまとめ" class="fragment"></span><a href="#%E4%BD%BF%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%81%82%E3%82%8B%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>使ったことあるオプションまとめ</h1>\n\n<p>manを見ると知らないオプションが多いことに気づいた。<br>\n正直一生使わないオプションが多い気がする。。<br>\nとりあえず使った覚えのあるオプションのみを抜粋してまとめて見ました。</p>\n\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d, –data PARAM</td>\n<td>POSTリクエストとしてフォームを送信する。</td>\n</tr>\n<tr>\n<td>-e, –referer</td>\n<td>URL リファラーをURLで指定する</td>\n</tr>\n<tr>\n<td>-f, –fail</td>\n<td>サーバエラーが発生したら黙って終了する</td>\n</tr>\n<tr>\n<td>-i, –include</td>\n<td>HTTPヘッダを出力に含める</td>\n</tr>\n<tr>\n<td>-m, –max-time</td>\n<td>TIME 最大転送時間をTIME秒に制限する</td>\n</tr>\n<tr>\n<td>-o FILE</td>\n<td>取得したデータを指定したファイルFILEに出力する</td>\n</tr>\n<tr>\n<td>-s, –silent</td>\n<td>進捗状況やエラーを表示しない</td>\n</tr>\n<tr>\n<td>-u USER[:PASS]</td>\n<td>認証に用いるユーザー名USER, パスワードPASSを指定する（基本認証など）</td>\n</tr>\n<tr>\n<td>-v, –verbose</td>\n<td>処理状況の更なる詳細や説明を出力させます。</td>\n</tr>\n<tr>\n<td>-x HOST[:PORT]</td>\n<td>プロキシサーバとしてホストHOSTおよびポートPORTを利用</td>\n</tr>\n<tr>\n<td>-y, –speed-time</td>\n<td>転送速度が指定した速度をTIME秒の間下回ったらダウンロードを終了する。</td>\n</tr>\n<tr>\n<td>-A, –user-agent</td>\n<td>AGENT ユーザーエージェントAGENTを指定</td>\n</tr>\n<tr>\n<td>-H, –head</td>\n<td>HEADER HTTPヘッダにHEADERを追加もしくは変更する</td>\n</tr>\n<tr>\n<td>-I, –head</td>\n<td>ヘッダ情報を取得する</td>\n</tr>\n<tr>\n<td>-O, –remote-name</td>\n<td>取得したデータを標準出力ではなくファイルに出力する</td>\n</tr>\n<tr>\n<td>-R, –remote-time</td>\n<td>ダウンロードしたファイルのタイムスタンプをサーバ上のタイムスタンプに合わせる</td>\n</tr>\n<tr>\n<td>-L, –location</td>\n<td>要求したページにリダイレクトが掛かっていた場合に追従する</td>\n</tr>\n</tbody>\n</table>\n\n<p>全部知りたい人は下記をご参照ください。<br>\n<a href="http://www.mit.edu/afs.new/sipb/user/ssen/src/curl-7.11.1/docs/curl.html" class="autolink" rel="nofollow noopener" target="_blank">http://www.mit.edu/afs.new/sipb/user/ssen/src/curl-7.11.1/docs/curl.html</a></p>\n\n<hr>\n\n<p>ここからはQiita APIをCulrで使ってみる検証</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>brew <span class="nb">install </span>curl jq\n</pre></div></div>\n\n<p>公式ドキュメント<br>\n<a href="https://qiita.com/api/v2/docs" class="autolink">https://qiita.com/api/v2/docs</a></p>\n\n<h2>\n<span id="ユーザ情報を表示" class="fragment"></span><a href="#%E3%83%A6%E3%83%BC%E3%82%B6%E6%83%85%E5%A0%B1%E3%82%92%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>ユーザ情報を表示</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">--silent</span> <span class="s2">"https://qiita.com/api/v2/users/ryuichi1208"</span> | jq <span class="nb">.</span>\n<span class="o">{</span>\n  <span class="s2">"description"</span>: <span class="s2">"社会人2年目</span><span class="se">\\r\\n</span><span class="s2">ひょっこエンジニア"</span>,\n  <span class="s2">"facebook_id"</span>: <span class="s2">"ryuuichi.watanabe.3"</span>,\n  <span class="s2">"followees_count"</span>: 36,\n  <span class="s2">"followers_count"</span>: 29,\n  <span class="s2">"github_login_name"</span>: <span class="s2">"ryuichi1208"</span>,\n  <span class="s2">"id"</span>: <span class="s2">"ryuichi1208"</span>,\n  <span class="s2">"items_count"</span>: 46,\n  <span class="s2">"linkedin_id"</span>: <span class="s2">""</span>,\n  <span class="s2">"location"</span>: <span class="s2">""</span>,\n  <span class="s2">"name"</span>: <span class="s2">""</span>,\n  <span class="s2">"organization"</span>: <span class="s2">""</span>,\n  <span class="s2">"permanent_id"</span>: 258841,\n  <span class="s2">"profile_image_url"</span>: <span class="s2">"https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1543146775"</span>,\n  <span class="s2">"twitter_screen_name"</span>: <span class="s2">"ryuichi_1208"</span>,\n  <span class="s2">"website_url"</span>: <span class="s2">""</span>\n<span class="o">}</span>\n</pre></div></div>\n\n<h2>\n<span id="記事を取得" class="fragment"></span><a href="#%E8%A8%98%E4%BA%8B%E3%82%92%E5%8F%96%E5%BE%97"><i class="fa fa-link"></i></a>記事を取得</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">--silent</span> <span class="s2">"https://qiita.com/api/v2/items/[記事ID]"</span> | jq <span class="nb">.</span>\n</pre></div></div>\n\n<h2>\n<span id="最新の記事のタイトル取得" class="fragment"></span><a href="#%E6%9C%80%E6%96%B0%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E5%8F%96%E5%BE%97"><i class="fa fa-link"></i></a>最新の記事のタイトル取得</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">--silent</span> <span class="s2">"https://qiita.com/api/v2/items?page=1&amp;per_page=20"</span> | jq <span class="nb">.</span> | <span class="nb">grep</span> <span class="s1">\'"title\'</span>\n</pre></div></div>\n\n<h2>\n<span id="指定したユーザの投稿記事を取得" class="fragment"></span><a href="#%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AE%E6%8A%95%E7%A8%BF%E8%A8%98%E4%BA%8B%E3%82%92%E5%8F%96%E5%BE%97"><i class="fa fa-link"></i></a>指定したユーザの投稿記事を取得</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>curl <span class="nt">--silent</span> <span class="s2">"https://qiita.com/api/v2/users?page=1/[ユーザID]/items"</span> | jq <span class="nb">.</span> | <span class="nb">grep</span> <span class="s1">\'"ti\ntle\'</span>\n</pre></div></div>\n\n<h2>\n<span id="指定したユーザがストックしている記事のタイトルを表示" class="fragment"></span><a href="#%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%8C%E3%82%B9%E3%83%88%E3%83%83%E3%82%AF%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E8%A8%98%E4%BA%8B%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E3%82%92%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>指定したユーザがストックしている記事のタイトルを表示</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">--silent</span> <span class="s2">"https://qiita.com/api/v2/users/[ユーザID]/stocks"</span> | jq <span class="nb">.</span> | <span class="nb">grep</span> <span class="s1">\'"title\'</span>\n</pre></div></div>\n\n<h2>\n<span id="新規追加ユーザを表示" class="fragment"></span><a href="#%E6%96%B0%E8%A6%8F%E8%BF%BD%E5%8A%A0%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%92%E8%A1%A8%E7%A4%BA"><i class="fa fa-link"></i></a>新規追加ユーザを表示</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">--silent</span> <span class="s2">"https://qiita.com/api/v2/users"</span> | jq <span class="nb">.</span>\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>認証を使わずともいろいろと遊ぶことができました。<br>\n認証を使って投稿などはいつかやってみたいです。(vimでQiita記事書けるのは熱いですね)</p>\n\n<h2>\n<span id="参考サイト" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88"><i class="fa fa-link"></i></a>参考サイト</h2>\n\n<p>■\u3000<a href="https://cloudpack.media/44143" rel="nofollow noopener" target="_blank">Qiita API v2を利用してcurlで投稿してみた</a><br>\n■\u3000<a href="https://qiita.com/tag1216/items/b0b90e30c7e581aa2b00" id="reference-e7eaad8b907531d50bd6">Qiita API v2 の概要(非公式)</a></p>\n', 'body': '## 背景\n\ncurlコマンドを使う際に毎回調べて実行しているのですがさすがに面倒なのでまとめてみました。\n自分のevernoteからの転載なので誤記などあったら教えてください。\n\n## curl(カール)コマンドとは\n\nサーバから、もしくはサーバへデータ転送を行うコマンド。\nFTP,SFTP,LDAP,TELNETなど多くのプロトコルに対応している。\nF5アタックなんかもワンライナーでさくっとできる。(悪用禁止)\n\n一番基本的な使い方はHTTPリクエストを実施し、\nその内容を標準出力するといった使い方でしょうか。\njsonをパースしてくれるjqは必須なので入れておきましょう。\n\n書式は下記\n\n``` bash\ncurl [options] [URL]\n```\n\nちなみにソースは下記から見れます。\n■ [curl/curl](https://github.com/curl/curl)\n\n## 基本形\n\n``` bash\n\n# HTTPリクエストを実施し結果を標準出力へ\n$ curl http://対象のURL\n\n#コンマや[]を使って範囲指定も出来る\n$ curl \'http://{one,two,three}.example.com\'\n$ curl \'http://[1-3].example.com\'\n\n# 実行結果をファイルへ出力\n$ curl http://対象のURL > 出力先\n$ curl -o 出力先PATH http://対象のURL\n\n# ファイル出力時の進捗状況を非表示にする(エラーも非表示)\n$ curl -s -o 出力先PATH http://対象のURL\n\n# 上記でエラーは表示したい場合\n$ curl -sS -o 出力先PATH http://対象のURL\n\n# プログレスバーで進捗率を表示\n$ curl -# -O http://対象のURL\n\n# SSL接続で証明書エラーをスキップ\n$ curl -k https://対象のURL\n\n# URLのファイル名でダウンロード (下記はindex.htmlで保存される)\n$ curl -O http://対象のURL/index.html\n\n# プロキシ経由でアクセスする\n$ curl -x プロキシサーバ:ポート番号 --proxy-user ユーザ名:パスワード http://対象のURL\n\n# リダイレクトを有効にする\n$ curl -L http://対象のURL\n\n# ダウンロードを中断したときに再度ダウンロードを再開するとき\n$ curl -C - http://対象のURL\n\n# HTTPメソッドの指定（-X）\n$ curl -X PUT http://対象のURL\n```\n\nよく使うオプションは下記3つ\nこれだけ覚えておけば正直なところ大体ことは足りる気がします。\n\n```\n-L -- リダイレクトがあったらリダイレクト先の情報を取る\n-s -- 余計な出力をしない\n-o -- レスポンスボディの出力先を指定する\n```\n\n# デバッグ系\n\n``` bash\n# HTTPレスポンスヘッダーの取得（-I）\n$ curl -I http://対象のURL\n\n# 詳細をログ出力（-vもしくは--verbose）\n$ curl -v http://対象のURL\n\n# 終了ステータスのみを表示\n$ curl -s http://対象のURL -o /dev/null -w \'%{http_code}\\n\'\n```\n\n# 小技系\n\n``` bash\n# ファイルに記載したリストからダウンロード(並列5プロセスで実行)\n$ cat url.list | xargs -L1 -P5 curl\n\n# 複数ファイルを同時ダウンロード\n$ curl -O http://対象のURL/fuga.txt -O http://対象のURL/hogera.txt\n\n# DDosテスト(悪用厳禁)\n$ for((;;)){ curl -v --header "Connection: keep-alive" "http://対象のURL" ;}\n```\n\n# その他(あまり使わない)\n\n``` bash\n# 転送速度に制限をかける\n# 速度は10k, 1m, 1gで指定する\n$ curl --limit-rate 制限する転送速度 http://対象のURL\n\n# 認証を行う\n$ curl --anyauth --user ユーザ名:パスワード http://対象のURL\n\n# 最大リダイレクト回数を指定\n$ curl -Z 2 -L http://対象URL\n\n# 受信クッキーの保存\n$ curl -c cookie.txt http://対象のURL\n\n# 保存クッキーの送信\n$ curl -b cookie.txt http://対象のURL\n\n# 最大接続時間制限を設ける\n$ curl --connect-timeout 600 http://対象のURL\n```\n\n# 使ったことあるオプションまとめ\n\nmanを見ると知らないオプションが多いことに気づいた。\n正直一生使わないオプションが多い気がする。。\nとりあえず使った覚えのあるオプションのみを抜粋してまとめて見ました。\n\nオプション      |説明\n----------------|----\n-d, –data PARAM |POSTリクエストとしてフォームを送信する。\n-e, –referer    |URL リファラーをURLで指定する\n-f, –fail       |サーバエラーが発生したら黙って終了する\n-i, –include    |HTTPヘッダを出力に含める\n-m, –max-time   |TIME 最大転送時間をTIME秒に制限する\n-o FILE         |取得したデータを指定したファイルFILEに出力する\n-s, –silent     |進捗状況やエラーを表示しない\n-u USER[:PASS]  |認証に用いるユーザー名USER, パスワードPASSを指定する（基本認証など）\n-v, –verbose    |処理状況の更なる詳細や説明を出力させます。\n-x HOST[:PORT]  |プロキシサーバとしてホストHOSTおよびポートPORTを利用\n-y, –speed-time |転送速度が指定した速度をTIME秒の間下回ったらダウンロードを終了する。\n-A, –user-agent |AGENT ユーザーエージェントAGENTを指定\n-H, –head       |HEADER HTTPヘッダにHEADERを追加もしくは変更する\n-I, –head       |ヘッダ情報を取得する\n-O, –remote-name|取得したデータを標準出力ではなくファイルに出力する\n-R, –remote-time|ダウンロードしたファイルのタイムスタンプをサーバ上のタイムスタンプに合わせる\n-L, –location   |要求したページにリダイレクトが掛かっていた場合に追従する\n\n全部知りたい人は下記をご参照ください。\nhttp://www.mit.edu/afs.new/sipb/user/ssen/src/curl-7.11.1/docs/curl.html\n\n---\n\nここからはQiita APIをCulrで使ってみる検証\n\n``` bash\n$ brew install curl jq\n```\n\n公式ドキュメント\nhttps://qiita.com/api/v2/docs\n\n## ユーザ情報を表示\n\n``` bash\n$ curl --silent "https://qiita.com/api/v2/users/ryuichi1208" | jq .\n{\n  "description": "社会人2年目\\r\\nひょっこエンジニア",\n  "facebook_id": "ryuuichi.watanabe.3",\n  "followees_count": 36,\n  "followers_count": 29,\n  "github_login_name": "ryuichi1208",\n  "id": "ryuichi1208",\n  "items_count": 46,\n  "linkedin_id": "",\n  "location": "",\n  "name": "",\n  "organization": "",\n  "permanent_id": 258841,\n  "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1543146775",\n  "twitter_screen_name": "ryuichi_1208",\n  "website_url": ""\n}\n```\n\n## 記事を取得\n\n``` bash\n$ curl --silent "https://qiita.com/api/v2/items/[記事ID]" | jq .\n```\n\n## 最新の記事のタイトル取得\n\n``` bash\n$ curl --silent "https://qiita.com/api/v2/items?page=1&per_page=20" | jq . | grep \'"title\'\n```\n\n## 指定したユーザの投稿記事を取得\n\n``` bash\ncurl --silent "https://qiita.com/api/v2/users?page=1/[ユーザID]/items" | jq . | grep \'"ti\ntle\'\n```\n\n## 指定したユーザがストックしている記事のタイトルを表示\n\n``` bash\n$ curl --silent "https://qiita.com/api/v2/users/[ユーザID]/stocks" | jq . | grep \'"title\'\n```\n\n## 新規追加ユーザを表示\n\n``` bash\n$ curl --silent "https://qiita.com/api/v2/users" | jq .\n```\n\n## まとめ\n\n認証を使わずともいろいろと遊ぶことができました。\n認証を使って投稿などはいつかやってみたいです。(vimでQiita記事書けるのは熱いですね)\n\n## 参考サイト\n\n■\u3000[Qiita API v2を利用してcurlで投稿してみた](https://cloudpack.media/44143)\n■\u3000[Qiita API v2 の概要(非公式)](https://qiita.com/tag1216/items/b0b90e30c7e581aa2b00)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-27T19:55:10+09:00', 'group': None, 'id': 'e4e1b27ff7d54a66dcd9', 'likes_count': 44, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'curl', 'versions': []}], 'title': 'よく使うcurlコマンドのオプション', 'updated_at': '2018-12-28T11:01:58+09:00', 'url': 'https://qiita.com/ryuichi1208/items/e4e1b27ff7d54a66dcd9', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/b998ec0dcc767a02742c108fbe7c02c246fe303e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37316234376261302d643166372d653837372d323039652d3538386333636430383632352e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/b998ec0dcc767a02742c108fbe7c02c246fe303e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37316234376261302d643166372d653837372d323039652d3538386333636430383632352e706e67" alt="20170828180932.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/71b47ba0-d1f7-e877-209e-588c3cd08625.png"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>IT未経験から3ヶ月ほど目に先輩より教えていただいた絶対知っておくべきネットワーク系コマンド7選です。<br>\n当時はあまり良く理解できませんでしたが(今も正直、、、)その時のメモをもとに再度まとめて見ました。</p>\n\n<p>間違いやそんなの古すぎるわ！と言ったコメント大歓迎です。</p>\n\n<h1>\n<span id="対象読者" class="fragment"></span><a href="#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85"><i class="fa fa-link"></i></a>対象読者</h1>\n\n<ul>\n<li>ネットワーク系のエンジニアじゃない人</li>\n<li>Linux触って1,2ヶ月くらいの人</li>\n<li>TCP/IPやDNS、HTTPといった概念をなんとなく知ってるレベルの人</li>\n</ul>\n\n<h1>\n<span id="取り上げるコマンド目次" class="fragment"></span><a href="#%E5%8F%96%E3%82%8A%E4%B8%8A%E3%81%92%E3%82%8B%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E7%9B%AE%E6%AC%A1"><i class="fa fa-link"></i></a>取り上げるコマンド目次</h1>\n\n<ul>\n<li>dig</li>\n<li>ifconfig(ip)</li>\n<li>ping</li>\n<li>traceroute</li>\n<li>route</li>\n<li>tcpdump</li>\n<li>curl</li>\n</ul>\n\n<h1>\n<span id="dig---ドメイン名からipアドレスを知る--" class="fragment"></span><a href="#dig---%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%90%8D%E3%81%8B%E3%82%89ip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E7%9F%A5%E3%82%8B--"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Dig_(UNIX)" rel="nofollow noopener" target="_blank">dig</a> - ドメイン名からIPアドレスを知る -</h1>\n\n<p>「dig」コマンドはDNSサーバに問い合わせることで、ドメイン名からIPアドレスを調べるコマンドです（逆も可能）</p>\n\n<p>正しく名前解決ができていれば、ANSWER SECTION という項目に google.com の IP アドレ スが表示されるはずです。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>dig www.google.co.jp\n\n<span class="p">;</span> &lt;&lt;<span class="o">&gt;&gt;</span> DiG 9.10.6 &lt;&lt;<span class="o">&gt;&gt;</span> <span class="nt">-x</span> 216.58.196.227\n<span class="p">;;</span> global options: +cmd\n<span class="p">;;</span> Got answer:\n<span class="p">;;</span> -&gt;&gt;HEADER<span class="o">&lt;&lt;-</span> <span class="no">opcode</span><span class="sh">: QUERY, status: NOERROR, id: 52158\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;227.196.58.216.in-addr.arpa.   IN  PTR\n\n;; ANSWER SECTION:\n227.196.58.216.in-addr.arpa. 15613 IN   PTR kix06s01-in-f3.1e100.net.\n227.196.58.216.in-addr.arpa. 15613 IN   PTR kix06s01-in-f227.1e100.net.\n\n;; Query time: 56 msec\n;; SERVER: 192.168.1.1#53(192.168.1.1)\n;; WHEN: Sun Nov 25 21:41:52 JST 2018\n;; MSG SIZE  rcvd: 125\n</span></pre></div></div>\n\n<h1>\n<span id="ifconfig---ネットワークインターフェースの状態確認--" class="fragment"></span><a href="#ifconfig---%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%AE%E7%8A%B6%E6%85%8B%E7%A2%BA%E8%AA%8D--"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Ifconfig" rel="nofollow noopener" target="_blank">ifconfig</a> - ネットワークインターフェースの状態確認 -</h1>\n\n<p>lo というインターフェースは「ループバック インターフェース」という特別なインターフェー スで、自分自身と通信するために利用されます。</p>\n\n<p><strong>注意</strong><br>\nCentOS 7 では標準では使えません。使えるように するためには、ifconfigコマンドなどが入っている<br>\n「net-tools」というパッケージをインストールする 必要があります。<br>\nnet-toolsパッケージはネットワーク機能追加への対応が不十分になってきている背景があり、<br>\n現在は移行が推奨されています。(教えていただいた当初からなのでさらに進んでいると思いますが現場だと未だに多く使われている印象がありますね)</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># ifconfig -a</span>\neth0      Link encap:Ethernet<span class="o">(</span>1<span class="o">)</span>  HWaddr 00:80:90:44:08:11<span class="o">(</span>2<span class="o">)</span>\n          inet addr:192.168.1.11<span class="o">(</span>3<span class="o">)</span>  Bcast:192.168.1.255<span class="o">(</span>4<span class="o">)</span>  Mask:255.255.255.0<span class="o">(</span>5<span class="o">)</span>\n          inet6 addr: fe80::3199:ff:fe01:3762/64 Scope:Link<span class="o">(</span>6<span class="o">)</span>\n          UP<span class="o">(</span>7<span class="o">)</span> BROADCAST<span class="o">(</span>8<span class="o">)</span> RUNNING<span class="o">(</span>9<span class="o">)</span> MULTICAST<span class="o">(</span>10<span class="o">)</span>  MTU:1500<span class="o">(</span>11<span class="o">)</span>  Metric:1<span class="o">(</span>12<span class="o">)</span>\n          RX packets:583312 errors:0 dropped:0 overruns:0 frame:0<span class="o">(</span>13<span class="o">)</span>\n          TX packets:28344 errors:0 dropped:0 overruns:0 carrier:0<span class="o">(</span>13<span class="o">)</span>\n          collisions:0 txqueuelen:100<span class="o">(</span>13<span class="o">)</span>\n          RX bytes:4987886272 <span class="o">(</span>4.9 GB<span class="o">)</span>  TX bytes:50440257 <span class="o">(</span>50.4 MB<span class="o">)(</span>14<span class="o">)</span>\neth1      Link encap:Ethernet  HWaddr 00:80:00:48:AA:88\n          BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:100\n          RX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>  TX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>\nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:3924  Metric:1\n          RX packets:16 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0\n</pre></div></div>\n\n<h1>\n<span id="ping---届いているかどうかを知る--" class="fragment"></span><a href="#ping---%E5%B1%8A%E3%81%84%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%82%92%E7%9F%A5%E3%82%8B--"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Ping" rel="nofollow noopener" target="_blank">ping</a> - 届いているかどうかを知る -</h1>\n\n<p>ping コマンドは、送ったパケッ トを相手にそのまま返送してもらうだけ、<br>\nというとてもシンプルなコマンドです。主に通信確認で使われたり遅延確認でも使われたりします。<br>\n-c オプションで ping を送る回数が指定でき ます。</p>\n\n<p>このコマンドの実行で下記2点が確認できます</p>\n\n<ul>\n<li>うまく通信できているのか？</li>\n<li>もし通信出来ていない場合、その原因はどこにあるのか？</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ping 192.168.1.1 <span class="nt">-c</span> 3\nPING 192.168.1.1 <span class="o">(</span>192.168.1.1<span class="o">)</span>: 56 data bytes\n64 bytes from 192.168.1.1: <span class="nv">icmp_seq</span><span class="o">=</span>0 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.347 ms\n64 bytes from 192.168.1.1: <span class="nv">icmp_seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.441 ms\n64 bytes from 192.168.1.1: <span class="nv">icmp_seq</span><span class="o">=</span>2 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.387 ms\n\n<span class="nt">---</span> 192.168.1.1 ping statistics <span class="nt">---</span>\n3 packets transmitted, 3 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev <span class="o">=</span> 0.347/0.392/0.441/0.039 ms\n</pre></div></div>\n\n<h1>\n<span id="traceroute---道筋を知る--" class="fragment"></span><a href="#traceroute---%E9%81%93%E7%AD%8B%E3%82%92%E7%9F%A5%E3%82%8B--"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Traceroute" rel="nofollow noopener" target="_blank">traceroute</a> - 道筋を知る -</h1>\n\n<p>パケットがどんな経路を通っているのかを知 るために、traceroute というコマンドがあります。</p>\n\n<p><strong>注意</strong><br>\nセキュリティ上の都合などで、tracerouteするのに必要なパケットがフィルタされていると、<br>\n「* * *」と表示されてうまく表示されない場合があります。</p>\n\n<p><strong>注意</strong><br>\nこのコマンドで知ることが出来るのは往路だけです。<br>\n復路はまた違った経路をたどっていることもあります。<br>\n復路を確かめるためには相手から自分のネットワークに対して traceroute をしてもらい、その結果を共有してもらわなければ知ることはできません。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>traceroute example.com\ntraceroute to example.com <span class="o">(</span>93.184.216.34<span class="o">)</span>, 64 hops max, 52 byte packets\n 1  router.asus.com <span class="o">(</span>192.168.1.1<span class="o">)</span>  0.536 ms  0.260 ms  0.248 ms\n 2  118.23.25.236 <span class="o">(</span>118.23.25.236<span class="o">)</span>  2.631 ms  1.928 ms  1.663 ms\n 3  118.23.25.93 <span class="o">(</span>118.23.25.93<span class="o">)</span>  1.776 ms  2.196 ms  2.225 ms\n 4  118.23.13.173 <span class="o">(</span>118.23.13.173<span class="o">)</span>  3.679 ms  2.721 ms  3.015 ms\n 5  61.207.25.193 <span class="o">(</span>61.207.25.193<span class="o">)</span>  2.522 ms  2.715 ms  2.448 ms\n 6  125.170.97.93 <span class="o">(</span>125.170.97.93<span class="o">)</span>  8.844 ms  9.269 ms  9.528 ms\n 7  125.170.97.130 <span class="o">(</span>125.170.97.130<span class="o">)</span>  12.273 ms  10.575 ms  11.420 ms\n 8  ae-5.r03.tokyjp05.jp.bb.gin.ntt.net <span class="o">(</span>120.88.53.25<span class="o">)</span>  18.236 ms  17.692 ms\n    ae-5.r02.tokyjp05.jp.bb.gin.ntt.net <span class="o">(</span>120.88.53.17<span class="o">)</span>  17.601 ms\n 9  ae-4.r30.tokyjp05.jp.bb.gin.ntt.net <span class="o">(</span>129.250.3.34<span class="o">)</span>  17.974 ms\n    ae-4.r31.tokyjp05.jp.bb.gin.ntt.net <span class="o">(</span>129.250.3.57<span class="o">)</span>  20.092 ms  17.709 ms\n10  ae-4.r23.snjsca04.us.bb.gin.ntt.net <span class="o">(</span>129.250.5.78<span class="o">)</span>  123.614 ms  123.561 ms\n    ae-4.r23.lsanca07.us.bb.gin.ntt.net <span class="o">(</span>129.250.3.193<span class="o">)</span>  114.419 ms\n11  ae-2.r00.lsanca07.us.bb.gin.ntt.net <span class="o">(</span>129.250.3.238<span class="o">)</span>  115.878 ms\n    ae-45.r01.snjsca04.us.bb.gin.ntt.net <span class="o">(</span>129.250.3.175<span class="o">)</span>  118.568 ms\n    ae-2.r01.lsanca07.us.bb.gin.ntt.net <span class="o">(</span>129.250.4.107<span class="o">)</span>  113.714 ms\n12  ce-0-12-0-1.r00.lsanca07.us.ce.gin.ntt.net <span class="o">(</span>128.241.4.218<span class="o">)</span>  114.933 ms  120.537 ms\n    ae-1.edgecast-networks.snjsca04.us.bb.gin.ntt.net <span class="o">(</span>129.250.193.250<span class="o">)</span>  118.488 ms\n13  152.195.77.133 <span class="o">(</span>152.195.77.133<span class="o">)</span>  119.171 ms\n    152.195.76.133 <span class="o">(</span>152.195.76.133<span class="o">)</span>  131.320 ms  137.378 ms\n14  93.184.216.34 <span class="o">(</span>93.184.216.34<span class="o">)</span>  127.325 ms  125.182 ms  132.246 ms\n</pre></div></div>\n\n<h1>\n<span id="route---ルータまでの経路を知る--" class="fragment"></span><a href="#route---%E3%83%AB%E3%83%BC%E3%82%BF%E3%81%BE%E3%81%A7%E3%81%AE%E7%B5%8C%E8%B7%AF%E3%82%92%E7%9F%A5%E3%82%8B--"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Route" rel="nofollow noopener" target="_blank">route</a> - ルータまでの経路を知る -</h1>\n\n<p>ホストがルータまでどのようにして到達している確認するためのコマンド<br>\niproute2的にはip routeコマンドが推奨されている。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>route\nKernel IP routing table \nDestination Gateway     Genmask      Flags Metric Ref Use Iface\n0.0.0.0     10.84.149.1 0.0.0.0      UG    0      0     0 eth0\n10.84.149.0 0.0.0.0 2   55.255.255.0 U     0      0     0 eth0\n</pre></div></div>\n\n<h1>\n<span id="tcpdump---パケットを覗き見--" class="fragment"></span><a href="#tcpdump---%E3%83%91%E3%82%B1%E3%83%83%E3%83%88%E3%82%92%E8%A6%97%E3%81%8D%E8%A6%8B--"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Tcpdump" rel="nofollow noopener" target="_blank">tcpdump</a> - パケットを覗き見 -</h1>\n\n<p>ネットワーク通信の生のデータをキャプチャし、その結果を出力してくれるキャプチャツールです。<br>\nHTTP通信をSSLで暗号化しないと危険であると言った話を聞いたことがあると思いますが、このコマンドを使えば生のパケットを覗くことができます。<br>\n実行してみればわかりますが実際にコマンドだけではあまり視認性が良くないので「WireShark」なんかで整形してデータを確認したりします。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nb">test</span>@test-vm-ubuntu:~<span class="nv">$ </span><span class="nb">sudo </span>tcpdump\n<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span><span class="nb">test</span>:\ntcpdump: verbose output suppressed, use <span class="nt">-v</span> or <span class="nt">-vv</span> <span class="k">for </span>full protocol decode\nlistening on eth0, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size 65535 bytes\n20:29:47.418564 IP 192.168.0.XXX.51682 <span class="o">&gt;</span> 192.168.0.YYY.902: Flags <span class="o">[</span>P.], <span class="nb">seq </span>106429704:106429741, ack 717766587, win 65335, length 37\n20:29:47.418576 IP 192.168.0.YYY.902 <span class="o">&gt;</span> 192.168.0.XXX.51682: Flags <span class="o">[</span>.], ack 37, win 128, length 0\n20:29:47.418755 IP 192.168.0.YYY.902 <span class="o">&gt;</span> 192.168.0.XXX.51682: Flags <span class="o">[</span>.], <span class="nb">seq </span>1:8448, ack 37, win 128, length 8447\n20:29:47.419099 IP 192.168.0.XXX.51682 <span class="o">&gt;</span> 192.168.0.YYY.902: Flags <span class="o">[</span>.], ack 8448, win 65335, length 0\n20:29:47.419249 IP 192.168.0.YYY.902 <span class="o">&gt;</span> 192.168.0.XXX.51682: Flags <span class="o">[</span>.], <span class="nb">seq </span>8448:19815, ack 37, win 128, length 11367\n20:29:47.419575 IP 192.168.0.XXX.51682 <span class="o">&gt;</span> 192.168.0.YYY.902: Flags <span class="o">[</span>.], ack 19815, win 64683, length 0\n20:29:47.419630 IP 192.168.0.XXX.51682 <span class="o">&gt;</span> 192.168.0.YYY.902: Flags <span class="o">[</span>.], ack 19815, win 65335, length 0\n20:29:47.419712 IP 192.168.0.YYY.902 <span class="o">&gt;</span> 192.168.0.XXX.51682: Flags <span class="o">[</span>.], <span class="nb">seq </span>19815:34102, ack 37, win 128, length 14287\n20:29:47.420129 IP 192.168.0.XXX.51682 <span class="o">&gt;</span> 192.168.0.YYY.902: Flags <span class="o">[</span>.], ack 34102, win 63223, length 0\n20:29:47.420184 IP 192.168.0.XXX.51682 <span class="o">&gt;</span> 192.168.0.YYY.902: Flags <span class="o">[</span>.], ack 34102, win 65335, length 0\n…\n</pre></div></div>\n\n<h1>\n<span id="curl---httpアクセスをしてコンテンツを取得--" class="fragment"></span><a href="#curl---http%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%92%E3%81%97%E3%81%A6%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%82%92%E5%8F%96%E5%BE%97--"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/CURL" rel="nofollow noopener" target="_blank">curl</a> - HTTPアクセスをしてコンテンツを取得 -</h1>\n\n<p>curlコマンドはHTTP、HTTPS、FTP、FTPS、SCP、IMAP、POP3 をはじめ、さまざまなプロトコルをサポートしている便利なコマンドで、 オプションもかなり豊富です。</p>\n\n<p>サーバなどブラ ウザが使えない環境でファイルをダウンロード したり、Webアプリケーション開発で HTTPのリクエスト/レスポンスの内容を詳しく見たりするときによく使います。</p>\n\n<p>curlはHTTPのPOSTリクエストを送信す ることもできて、-X POSTというオプション を使うことで POSTリクエストになります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">-I</span> https://google.com\nHTTP/2 301 \nlocation: https://www.google.com/\ncontent-type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8\n<span class="nb">date</span>: Sun, 25 Nov 2018 13:26:25 GMT\nexpires: Tue, 25 Dec 2018 13:26:25 GMT\ncache-control: public, max-age<span class="o">=</span>2592000\nserver: gws\ncontent-length: 220\nx-xss-protection: 1<span class="p">;</span> <span class="nv">mode</span><span class="o">=</span>block\nx-frame-options: SAMEORIGIN\nalt-svc: <span class="nv">quic</span><span class="o">=</span><span class="s2">":443"</span><span class="p">;</span> <span class="nv">ma</span><span class="o">=</span>2592000<span class="p">;</span> <span class="nv">v</span><span class="o">=</span><span class="s2">"44,43,39,35"</span>\n</pre></div></div>\n\n<h1>\n<span id="0000って何" class="fragment"></span><a href="#0000%E3%81%A3%E3%81%A6%E4%BD%95"><i class="fa fa-link"></i></a>0.0.0.0って何?</h1>\n\n<p>「0.0.0.0」は文脈によって用途が異なっており、<br>\nそれぞれのシーンでそれぞれの使い方をされてます。</p>\n\n<ul>\n<li>IPアドレスを保有していないことを示す</li>\n<li>マシンがTCP/IPネットワークに接続されていないことを示す</li>\n<li>デフォルトルート</li>\n<li>システムにおけるすべてのインタフェースのすべてのIPアドレス</li>\n<li>意味または不適切なターゲットを定義するために使われるルーティングの対象にならないメタアドレス</li>\n<li>ローカルマシンにおけるすべてのIPv4アドレス</li>\n</ul>\n\n<p>0.0.0.0/0 → 全てのホスト、任意の宛先を意味する。デフォルトルート<br>\n0.0.0.0/32 → ホスト自身を指す</p>\n\n<p>参考:<a href="https://news.mynavi.jp/article/20161025-a414/" rel="nofollow noopener" target="_blank">IPv4アドレス「0.0.0.0」の意味は? | マイナビニュース</a></p>\n\n<h1>\n<span id="net-toolsとiproute2のコマンド対応早見表" class="fragment"></span><a href="#net-tools%E3%81%A8iproute2%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AF%BE%E5%BF%9C%E6%97%A9%E8%A6%8B%E8%A1%A8"><i class="fa fa-link"></i></a>net-toolsとiproute2のコマンド対応早見表</h1>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">net-tools</th>\n<th style="text-align: left">iproute2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">arp</td>\n<td style="text-align: left">ip n (ip neighbor)</td>\n</tr>\n<tr>\n<td style="text-align: left">ifconfig</td>\n<td style="text-align: left">ip a (ip addr) <br>ip link <br>ip -s (ip -stats)</td>\n</tr>\n<tr>\n<td style="text-align: left">iptunnel</td>\n<td style="text-align: left">ip tunnel</td>\n</tr>\n<tr>\n<td style="text-align: left">iwconfig</td>\n<td style="text-align: left">iw</td>\n</tr>\n<tr>\n<td style="text-align: left">nameif</td>\n<td style="text-align: left">ip link, ifrename</td>\n</tr>\n<tr>\n<td style="text-align: left">netstat</td>\n<td style="text-align: left">ss<br>ip route (for netstat-r)<br>ip -s link (for netstat -i)<br>ip maddr (for netstat-g)</td>\n</tr>\n<tr>\n<td style="text-align: left">route</td>\n<td style="text-align: left">ip r (ip route)</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>まだまだ覚えるべきことは足りないが最低限中の最低限では事足りるって話でした。</p>\n\n<p>ネットワーク系の知識は下記サイトがまとまっていておすすめです。<br>\n<a href="https://www.infraexpert.com/" class="autolink" rel="nofollow noopener" target="_blank">https://www.infraexpert.com/</a></p>\n', 'body': '![20170828180932.png](https://qiita-image-store.s3.amazonaws.com/0/258841/71b47ba0-d1f7-e877-209e-588c3cd08625.png)\n# 背景\n\nIT未経験から3ヶ月ほど目に先輩より教えていただいた絶対知っておくべきネットワーク系コマンド7選です。\n当時はあまり良く理解できませんでしたが(今も正直、、、)その時のメモをもとに再度まとめて見ました。\n\n間違いやそんなの古すぎるわ！と言ったコメント大歓迎です。\n\n# 対象読者\n\n* ネットワーク系のエンジニアじゃない人\n* Linux触って1,2ヶ月くらいの人\n* TCP/IPやDNS、HTTPといった概念をなんとなく知ってるレベルの人\n\n# 取り上げるコマンド目次\n\n* dig\n* ifconfig(ip)\n* ping\n* traceroute\n* route\n* tcpdump\n* curl\n\n# [dig](https://ja.wikipedia.org/wiki/Dig_(UNIX)) - ドメイン名からIPアドレスを知る -\n\n「dig」コマンドはDNSサーバに問い合わせることで、ドメイン名からIPアドレスを調べるコマンドです（逆も可能）\n\n正しく名前解決ができていれば、ANSWER SECTION という項目に google.com の IP アドレ スが表示されるはずです。\n\n``` bash \n$ dig www.google.co.jp\n\n; <<>> DiG 9.10.6 <<>> -x 216.58.196.227\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 52158\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;227.196.58.216.in-addr.arpa.\tIN\tPTR\n\n;; ANSWER SECTION:\n227.196.58.216.in-addr.arpa. 15613 IN\tPTR\tkix06s01-in-f3.1e100.net.\n227.196.58.216.in-addr.arpa. 15613 IN\tPTR\tkix06s01-in-f227.1e100.net.\n\n;; Query time: 56 msec\n;; SERVER: 192.168.1.1#53(192.168.1.1)\n;; WHEN: Sun Nov 25 21:41:52 JST 2018\n;; MSG SIZE  rcvd: 125\n```\n\n# [ifconfig](https://ja.wikipedia.org/wiki/Ifconfig) - ネットワークインターフェースの状態確認 - \n\n\nlo というインターフェースは「ループバック インターフェース」という特別なインターフェー スで、自分自身と通信するために利用されます。\n\n__注意__\nCentOS 7 では標準では使えません。使えるように するためには、ifconfigコマンドなどが入っている\n「net-tools」というパッケージをインストールする 必要があります。\nnet-toolsパッケージはネットワーク機能追加への対応が不十分になってきている背景があり、\n現在は移行が推奨されています。(教えていただいた当初からなのでさらに進んでいると思いますが現場だと未だに多く使われている印象がありますね)\n\n``` bash \n# ifconfig -a\neth0      Link encap:Ethernet(1)  HWaddr 00:80:90:44:08:11(2)\n          inet addr:192.168.1.11(3)  Bcast:192.168.1.255(4)  Mask:255.255.255.0(5)\n          inet6 addr: fe80::3199:ff:fe01:3762/64 Scope:Link(6)\n          UP(7) BROADCAST(8) RUNNING(9) MULTICAST(10)  MTU:1500(11)  Metric:1(12)\n          RX packets:583312 errors:0 dropped:0 overruns:0 frame:0(13)\n          TX packets:28344 errors:0 dropped:0 overruns:0 carrier:0(13)\n          collisions:0 txqueuelen:100(13)\n          RX bytes:4987886272 (4.9 GB)  TX bytes:50440257 (50.4 MB)(14)\neth1      Link encap:Ethernet  HWaddr 00:80:00:48:AA:88\n          BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:100\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:3924  Metric:1\n          RX packets:16 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0\n```\n\n# [ping](https://ja.wikipedia.org/wiki/Ping) - 届いているかどうかを知る -\n\nping コマンドは、送ったパケッ トを相手にそのまま返送してもらうだけ、\nというとてもシンプルなコマンドです。主に通信確認で使われたり遅延確認でも使われたりします。\n-c オプションで ping を送る回数が指定でき ます。\n\nこのコマンドの実行で下記2点が確認できます\n\n* うまく通信できているのか？\n* もし通信出来ていない場合、その原因はどこにあるのか？\n\n``` bash\n$ ping 192.168.1.1 -c 3\nPING 192.168.1.1 (192.168.1.1): 56 data bytes\n64 bytes from 192.168.1.1: icmp_seq=0 ttl=64 time=0.347 ms\n64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=0.441 ms\n64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.387 ms\n\n--- 192.168.1.1 ping statistics ---\n3 packets transmitted, 3 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev = 0.347/0.392/0.441/0.039 ms\n```\n\n# [traceroute](https://ja.wikipedia.org/wiki/Traceroute) - 道筋を知る -\n\nパケットがどんな経路を通っているのかを知 るために、traceroute というコマンドがあります。\n\n__注意__\nセキュリティ上の都合などで、tracerouteするのに必要なパケットがフィルタされていると、\n「* * *」と表示されてうまく表示されない場合があります。\n\n__注意__\nこのコマンドで知ることが出来るのは往路だけです。\n復路はまた違った経路をたどっていることもあります。\n復路を確かめるためには相手から自分のネットワークに対して traceroute をしてもらい、その結果を共有してもらわなければ知ることはできません。\n\n``` bash\n$ traceroute example.com\ntraceroute to example.com (93.184.216.34), 64 hops max, 52 byte packets\n 1  router.asus.com (192.168.1.1)  0.536 ms  0.260 ms  0.248 ms\n 2  118.23.25.236 (118.23.25.236)  2.631 ms  1.928 ms  1.663 ms\n 3  118.23.25.93 (118.23.25.93)  1.776 ms  2.196 ms  2.225 ms\n 4  118.23.13.173 (118.23.13.173)  3.679 ms  2.721 ms  3.015 ms\n 5  61.207.25.193 (61.207.25.193)  2.522 ms  2.715 ms  2.448 ms\n 6  125.170.97.93 (125.170.97.93)  8.844 ms  9.269 ms  9.528 ms\n 7  125.170.97.130 (125.170.97.130)  12.273 ms  10.575 ms  11.420 ms\n 8  ae-5.r03.tokyjp05.jp.bb.gin.ntt.net (120.88.53.25)  18.236 ms  17.692 ms\n    ae-5.r02.tokyjp05.jp.bb.gin.ntt.net (120.88.53.17)  17.601 ms\n 9  ae-4.r30.tokyjp05.jp.bb.gin.ntt.net (129.250.3.34)  17.974 ms\n    ae-4.r31.tokyjp05.jp.bb.gin.ntt.net (129.250.3.57)  20.092 ms  17.709 ms\n10  ae-4.r23.snjsca04.us.bb.gin.ntt.net (129.250.5.78)  123.614 ms  123.561 ms\n    ae-4.r23.lsanca07.us.bb.gin.ntt.net (129.250.3.193)  114.419 ms\n11  ae-2.r00.lsanca07.us.bb.gin.ntt.net (129.250.3.238)  115.878 ms\n    ae-45.r01.snjsca04.us.bb.gin.ntt.net (129.250.3.175)  118.568 ms\n    ae-2.r01.lsanca07.us.bb.gin.ntt.net (129.250.4.107)  113.714 ms\n12  ce-0-12-0-1.r00.lsanca07.us.ce.gin.ntt.net (128.241.4.218)  114.933 ms  120.537 ms\n    ae-1.edgecast-networks.snjsca04.us.bb.gin.ntt.net (129.250.193.250)  118.488 ms\n13  152.195.77.133 (152.195.77.133)  119.171 ms\n    152.195.76.133 (152.195.76.133)  131.320 ms  137.378 ms\n14  93.184.216.34 (93.184.216.34)  127.325 ms  125.182 ms  132.246 ms\n```\n\n# [route](https://ja.wikipedia.org/wiki/Route) - ルータまでの経路を知る -\n\nホストがルータまでどのようにして到達している確認するためのコマンド\niproute2的にはip routeコマンドが推奨されている。\n\n``` bash\n$ route\nKernel IP routing table \nDestination Gateway     Genmask      Flags Metric Ref Use Iface\n0.0.0.0     10.84.149.1 0.0.0.0      UG    0      0     0 eth0\n10.84.149.0 0.0.0.0 2   55.255.255.0 U     0      0     0 eth0\n```\n\n# [tcpdump](https://ja.wikipedia.org/wiki/Tcpdump) - パケットを覗き見 -\n\nネットワーク通信の生のデータをキャプチャし、その結果を出力してくれるキャプチャツールです。\nHTTP通信をSSLで暗号化しないと危険であると言った話を聞いたことがあると思いますが、このコマンドを使えば生のパケットを覗くことができます。\n実行してみればわかりますが実際にコマンドだけではあまり視認性が良くないので「WireShark」なんかで整形してデータを確認したりします。\n\n``` bash\ntest@test-vm-ubuntu:~$ sudo tcpdump\n[sudo] password for test:\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes\n20:29:47.418564 IP 192.168.0.XXX.51682 > 192.168.0.YYY.902: Flags [P.], seq 106429704:106429741, ack 717766587, win 65335, length 37\n20:29:47.418576 IP 192.168.0.YYY.902 > 192.168.0.XXX.51682: Flags [.], ack 37, win 128, length 0\n20:29:47.418755 IP 192.168.0.YYY.902 > 192.168.0.XXX.51682: Flags [.], seq 1:8448, ack 37, win 128, length 8447\n20:29:47.419099 IP 192.168.0.XXX.51682 > 192.168.0.YYY.902: Flags [.], ack 8448, win 65335, length 0\n20:29:47.419249 IP 192.168.0.YYY.902 > 192.168.0.XXX.51682: Flags [.], seq 8448:19815, ack 37, win 128, length 11367\n20:29:47.419575 IP 192.168.0.XXX.51682 > 192.168.0.YYY.902: Flags [.], ack 19815, win 64683, length 0\n20:29:47.419630 IP 192.168.0.XXX.51682 > 192.168.0.YYY.902: Flags [.], ack 19815, win 65335, length 0\n20:29:47.419712 IP 192.168.0.YYY.902 > 192.168.0.XXX.51682: Flags [.], seq 19815:34102, ack 37, win 128, length 14287\n20:29:47.420129 IP 192.168.0.XXX.51682 > 192.168.0.YYY.902: Flags [.], ack 34102, win 63223, length 0\n20:29:47.420184 IP 192.168.0.XXX.51682 > 192.168.0.YYY.902: Flags [.], ack 34102, win 65335, length 0\n…\n```\n\n# [curl](https://ja.wikipedia.org/wiki/CURL) - HTTPアクセスをしてコンテンツを取得 - \n\ncurlコマンドはHTTP、HTTPS、FTP、FTPS、SCP、IMAP、POP3 をはじめ、さまざまなプロトコルをサポートしている便利なコマンドで、 オプションもかなり豊富です。\n\nサーバなどブラ ウザが使えない環境でファイルをダウンロード したり、Webアプリケーション開発で HTTPのリクエスト/レスポンスの内容を詳しく見たりするときによく使います。\n\ncurlはHTTPのPOSTリクエストを送信す ることもできて、-X POSTというオプション を使うことで POSTリクエストになります。\n\n``` bash\n$ curl -I https://google.com\nHTTP/2 301 \nlocation: https://www.google.com/\ncontent-type: text/html; charset=UTF-8\ndate: Sun, 25 Nov 2018 13:26:25 GMT\nexpires: Tue, 25 Dec 2018 13:26:25 GMT\ncache-control: public, max-age=2592000\nserver: gws\ncontent-length: 220\nx-xss-protection: 1; mode=block\nx-frame-options: SAMEORIGIN\nalt-svc: quic=":443"; ma=2592000; v="44,43,39,35"\n```\n\n# 0.0.0.0って何?\n\n「0.0.0.0」は文脈によって用途が異なっており、\nそれぞれのシーンでそれぞれの使い方をされてます。\n\n* IPアドレスを保有していないことを示す\n* マシンがTCP/IPネットワークに接続されていないことを示す\n* デフォルトルート\n* システムにおけるすべてのインタフェースのすべてのIPアドレス\n* 意味または不適切なターゲットを定義するために使われるルーティングの対象にならないメタアドレス\n* ローカルマシンにおけるすべてのIPv4アドレス\n\n0.0.0.0/0 → 全てのホスト、任意の宛先を意味する。デフォルトルート\n0.0.0.0/32 → ホスト自身を指す\n\n参考:[IPv4アドレス「0.0.0.0」の意味は? | マイナビニュース](https://news.mynavi.jp/article/20161025-a414/)\n\n# net-toolsとiproute2のコマンド対応早見表\n\n| net-tools | iproute2 |\n|:--|:--|\n| arp | ip n (ip neighbor) |\n| ifconfig | ip a (ip addr) <br>ip link <br>ip -s (ip -stats)|\n| iptunnel | ip tunnel |\n| iwconfig | iw |\n| nameif | ip link, ifrename |\n| netstat | ss<br>ip route (for netstat-r)<br>ip -s link (for netstat -i)<br>ip maddr (for netstat-g) |\n| route | ip r (ip route) |\n\n# まとめ\n\nまだまだ覚えるべきことは足りないが最低限中の最低限では事足りるって話でした。\n\nネットワーク系の知識は下記サイトがまとまっていておすすめです。\nhttps://www.infraexpert.com/\n', 'coediting': False, 'comments_count': 16, 'created_at': '2018-11-26T00:00:27+09:00', 'group': None, 'id': 'eeb98d5a94d71c55aa34', 'likes_count': 620, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'ネットワーク', 'versions': []}, {'name': 'ping', 'versions': []}, {'name': 'iP', 'versions': []}], 'title': '最低限知っておくべきネットワーク系コマンド', 'updated_at': '2018-11-28T09:07:31+09:00', 'url': 'https://qiita.com/ryuichi1208/items/eeb98d5a94d71c55aa34', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/c3e783e42d89ef5bdbc7e1c503a0307ab53d6061/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35386231313837652d623666662d323861662d663864312d6637656665393162303339372e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/c3e783e42d89ef5bdbc7e1c503a0307ab53d6061/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35386231313837652d623666662d323861662d663864312d6637656665393162303339372e706e67" alt="17418188.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/58b1187e-b6ff-28af-f8d1-f7efe91b0397.png"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>Python製のpython使い向けのUnixライクなシェルがあるって噂を聞き調べて見るとxonsh(コンシュ)なるものを見つけました。<br>\n使ってみたいと思い導入して使って見たので感想と導入方法を記載します。</p>\n\n<h1>\n<span id="xonshとは" class="fragment"></span><a href="#xonsh%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>xonshとは</h1>\n\n<p>Python製のシェル<br>\nCLI上でPythonコードの記述とシェルコマンドを利用できます。</p>\n\n<p>つまり下記みたいな事が出来る。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>                                                                               \ntotal 0\n<span class="nt">-rw-r--r--</span>  1 Ryuichi  staff  0 11 25 16:03 testfile.py\n\n<span class="nv">$ </span>a <span class="o">=</span> 20 <span class="p">;</span> b <span class="o">=</span> 40                                                                     \n<span class="nv">$ </span>print<span class="o">(</span>a + b<span class="o">)</span>                                                                        \n60\n</pre></div></div>\n\n<p>コマンド/Pythonコードが切り替え無しで実行できる！すごい！</p>\n\n<p>参考にしているサイトは下記です<br>\n◼ <a href="https://github.com/xonsh/xonsh" rel="nofollow noopener" target="_blank">GitHub</a><br>\n◼ <a href="https://xon.sh/sidebar.html" rel="nofollow noopener" target="_blank">公式サイト</a></p>\n\n<p>また<a href="https://twitter.com/vaaaaanquish" rel="nofollow noopener" target="_blank">@vaaaaanquish</a>さんが色々と為になる記事を<strong><em>日本語</em></strong>で書いているのでとても参考になるのでぜひともチェックしてみてください。(日本語の記事が大変少ないのでとても助かります)</p>\n\n<p>bashやzshとの比較に関しては公式にこんな感じでまとまっています。<br>\n<a href="https://camo.qiitausercontent.com/58a8a1fc45d5c0888a12c24fef35b55a89509368/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63373366623831652d353863642d353833662d376231322d3632383232393465316461372e706e67" target="_blank" rel="nofollow noopener"><img width="754" alt="スクリーンショット 2018-11-25 16.24.28.png" src="https://camo.qiitausercontent.com/58a8a1fc45d5c0888a12c24fef35b55a89509368/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f63373366623831652d353863642d353833662d376231322d3632383232393465316461372e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/c73fb81e-58cd-583f-7b12-6282294e1da7.png"></a></p>\n\n<p>bashやzshと比較してもIPythonと比較しても機能面で優秀ですね。<br>\nshellコマンドが使えるのはとても便利です。</p>\n\n<h1>\n<span id="導入" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>導入</h1>\n\n<p>とっても簡単です。<br>\n公式ガイドにはMac以外の導入方法もあるのでそちらをご参照ください。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>brew <span class="nb">install </span>xonsh\n<span class="nv">$ </span>which xonsh\n/usr/local/bin/xonsh\n\n<span class="c"># 最新バージョンは0.8.3</span>\n<span class="nv">$ $ </span>xonsh <span class="nt">--version</span>                                                      \nxonsh/0.8.3\n\n<span class="c"># インストールしたら「xonsh」で起動します</span>\n<span class="nv">$ </span>xonsh\n\n                            Welcome to the xonsh shell <span class="o">(</span>0.8.3<span class="o">)</span>                            \n\n                                ~ The xonsh is a symbol ~                                 \n\n<span class="nt">------------------------------------------------------------------------------------------</span>\nxonfig tutorial    -&gt;    Launch the tutorial <span class="k">in </span>the browser\nxonfig wizard      -&gt;    Run the configuration wizard and claim your shell \n<span class="o">(</span>Note: Run the Wizard or create a ~/.xonshrc file to suppress the welcome screen<span class="o">)</span>\n</pre></div></div>\n\n<p>Tab補完に「bash-completion2」が必要です。<br>\n1を導入済みの方は削除後にインストールしてください。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>brew <span class="nb">unlink </span>bash-completion\n<span class="nv">$ </span>brew <span class="nb">install </span>bash-completion2\n</pre></div></div>\n\n<p>Tab補完が下記のようになっていればインストール成功です。<br>\n<a href="https://camo.qiitausercontent.com/5957eaf28ce2997f92418032c92dcd12ec31fb76/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33643930666238642d393563322d393762622d306165642d3136323063653237373537372e706e67" target="_blank" rel="nofollow noopener"><img width="818" alt="スクリーンショット 2018-11-25 16.21.23.png" src="https://camo.qiitausercontent.com/5957eaf28ce2997f92418032c92dcd12ec31fb76/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33643930666238642d393563322d393762622d306165642d3136323063653237373537372e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/3d90fb8d-95c2-97bb-0aed-1620ce277577.png"></a></p>\n\n<h1>\n<span id="簡単に遊んでみる" class="fragment"></span><a href="#%E7%B0%A1%E5%8D%98%E3%81%AB%E9%81%8A%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>簡単に遊んでみる</h1>\n\n<h4>\n<span id="基本動作" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E5%8B%95%E4%BD%9C"><i class="fa fa-link"></i></a>基本動作</h4>\n\n<p>まずは基本的な操作を色々試してみました。</p>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">bashスクリプトを実行</span></div>\n<div class="highlight"><pre>Ryuichi@iMac8270 ~/work/tmp/xonsh <span class="nv">$ </span><span class="nb">cat </span>test.sh                                           \n<span class="c">#!/bin/bash</span>\n\n<span class="nb">date\npwd\nls</span> <span class="nt">-l</span>\n<span class="nb">echo</span> <span class="s1">\'hello xonsh\'</span> <span class="o">&gt;</span> test.tmp\n<span class="nb">cat </span>test.tmp\n<span class="nb">rm</span> <span class="nt">-f</span> test.tmp\n<span class="nb">ls</span> <span class="nt">-l</span> test.tmp\n\nRyuichi@iMac8270 ~/work/tmp/xonsh <span class="nv">$ </span>./test.sh                                             \n2018年 11月25日 日曜日 16時32分56秒 JST\n/Users/Ryuichi/work/tmp/xonsh\ntotal 8\n<span class="nt">-rwxr-xr-x</span>  1 Ryuichi  staff  101 11 25 16:32 test.sh\n<span class="nt">-rw-r--r--</span>  1 Ryuichi  staff    0 11 25 16:03 testfile.py\nhello xonsh\n<span class="nb">ls</span>: test.tmp: No such file or directory\n</pre></div>\n</div>\n\n<p>上記は実行できて当然で面白みもないので次はPythonの構文も混ぜて作ってみます。<br>\npythonとunameコマンドでOS名とホスト名を表示しています。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cat </span>testfile                                          \nimport platform\nimport socket\n\n<span class="nb">uname</span> <span class="nt">-s</span>\n<span class="nb">hostname\n</span>print<span class="o">(</span>platform.system<span class="o">())</span>\nprint<span class="o">(</span>socket.gethostname<span class="o">())</span>\n\n<span class="nv">$ </span>./testfile                                            \nDarwin\niMac8270\nDarwin\niMac8270\n</pre></div></div>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>とりあえず導入まで。<br>\nコマンド作成とかTab補完作成もしてみたが記事にまとめるのはまたいつかまとめます。</p>\n', 'body': '![17418188.png](https://qiita-image-store.s3.amazonaws.com/0/258841/58b1187e-b6ff-28af-f8d1-f7efe91b0397.png)\n\n# 背景\n\nPython製のpython使い向けのUnixライクなシェルがあるって噂を聞き調べて見るとxonsh(コンシュ)なるものを見つけました。\n使ってみたいと思い導入して使って見たので感想と導入方法を記載します。\n\n# xonshとは\n\nPython製のシェル\nCLI上でPythonコードの記述とシェルコマンドを利用できます。\n\nつまり下記みたいな事が出来る。\n\n``` bash\n$ ls -l                                                                               \ntotal 0\n-rw-r--r--  1 Ryuichi  staff  0 11 25 16:03 testfile.py\n\n$ a = 20 ; b = 40                                                                     \n$ print(a + b)                                                                        \n60\n```\n\nコマンド/Pythonコードが切り替え無しで実行できる！すごい！\n\n参考にしているサイトは下記です\n◼ [GitHub](https://github.com/xonsh/xonsh)\n◼ [公式サイト](https://xon.sh/sidebar.html)\n\nまた[@vaaaaanquish](https://twitter.com/vaaaaanquish)さんが色々と為になる記事を___日本語___で書いているのでとても参考になるのでぜひともチェックしてみてください。(日本語の記事が大変少ないのでとても助かります)\n\nbashやzshとの比較に関しては公式にこんな感じでまとまっています。\n<img width="754" alt="スクリーンショット 2018-11-25 16.24.28.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/c73fb81e-58cd-583f-7b12-6282294e1da7.png">\n\nbashやzshと比較してもIPythonと比較しても機能面で優秀ですね。\nshellコマンドが使えるのはとても便利です。\n\n# 導入\n\nとっても簡単です。\n公式ガイドにはMac以外の導入方法もあるのでそちらをご参照ください。\n\n``` bash\n$ brew install xonsh\n$ which xonsh\n/usr/local/bin/xonsh\n\n# 最新バージョンは0.8.3\n$ $ xonsh --version                                                      \nxonsh/0.8.3\n\n# インストールしたら「xonsh」で起動します\n$ xonsh\n\n                            Welcome to the xonsh shell (0.8.3)                            \n\n                                ~ The xonsh is a symbol ~                                 \n\n------------------------------------------------------------------------------------------\nxonfig tutorial    ->    Launch the tutorial in the browser\nxonfig wizard      ->    Run the configuration wizard and claim your shell \n(Note: Run the Wizard or create a ~/.xonshrc file to suppress the welcome screen)\n```\n\nTab補完に「bash-completion2」が必要です。\n1を導入済みの方は削除後にインストールしてください。\n\n``` bash\n$ brew unlink bash-completion\n$ brew install bash-completion2\n```\n\nTab補完が下記のようになっていればインストール成功です。\n<img width="818" alt="スクリーンショット 2018-11-25 16.21.23.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/3d90fb8d-95c2-97bb-0aed-1620ce277577.png">\n\n# 簡単に遊んでみる\n\n#### 基本動作\n\nまずは基本的な操作を色々試してみました。\n\n``` bash:bashスクリプトを実行\nRyuichi@iMac8270 ~/work/tmp/xonsh $ cat test.sh                                           \n#!/bin/bash\n\ndate\npwd\nls -l\necho \'hello xonsh\' > test.tmp\ncat test.tmp\nrm -f test.tmp\nls -l test.tmp\n\nRyuichi@iMac8270 ~/work/tmp/xonsh $ ./test.sh                                             \n2018年 11月25日 日曜日 16時32分56秒 JST\n/Users/Ryuichi/work/tmp/xonsh\ntotal 8\n-rwxr-xr-x  1 Ryuichi  staff  101 11 25 16:32 test.sh\n-rw-r--r--  1 Ryuichi  staff    0 11 25 16:03 testfile.py\nhello xonsh\nls: test.tmp: No such file or directory\n```\n\n上記は実行できて当然で面白みもないので次はPythonの構文も混ぜて作ってみます。\npythonとunameコマンドでOS名とホスト名を表示しています。\n\n``` bash\n$ cat testfile                                          \nimport platform\nimport socket\n\nuname -s\nhostname\nprint(platform.system())\nprint(socket.gethostname())\n\n$ ./testfile                                            \nDarwin\niMac8270\nDarwin\niMac8270\n```\n\n# まとめ\n\nとりあえず導入まで。\nコマンド作成とかTab補完作成もしてみたが記事にまとめるのはまたいつかまとめます。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-25T17:27:10+09:00', 'group': None, 'id': '1c127cf3dc827e76409f', 'likes_count': 21, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Python', 'versions': []}, {'name': 'Python3', 'versions': []}, {'name': 'xonsh', 'versions': []}], 'title': 'xonsh入門', 'updated_at': '2018-12-17T18:20:23+09:00', 'url': 'https://qiita.com/ryuichi1208/items/1c127cf3dc827e76409f', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="拝啓" class="fragment"></span><a href="#%E6%8B%9D%E5%95%93"><i class="fa fa-link"></i></a>拝啓</h2>\n\n<p>カーネルソース読んでるとよく出てくる「do {} while (0);」<br>\nこれが何なのか気になったので調べてみました。</p>\n\n<p><a href="https://github.com/torvalds/linux/blob/master/include/linux/kernel.h" rel="nofollow noopener" target="_blank">torvalds/linux</a></p>\n\n<p>以下swap関数のようなイメージ<br>\n至るところでdo {} while(0)が存在</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">include/linux/kernel.h</span></div>\n<div class="highlight"><pre><span class="cm">/**\n * swap - swap values of @a and @b\n * @a: first value\n * @b: second value\n */</span>\n<span class="cp">#define swap(a, b) \\\n    do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n</span></pre></div>\n</div>\n\n<h2>\n<span id="c言語におけるマクロとは" class="fragment"></span><a href="#c%E8%A8%80%E8%AA%9E%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%9E%E3%82%AF%E3%83%AD%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>C言語におけるマクロとは</h2>\n\n<p>プログラムの中の文字列を予め定義した規則にしたがって置換する機能のこと<br>\nマクロは「#define」というプリプロセッサ指令により定義される</p>\n\n<h2>\n<span id="プリプロセッサとは" class="fragment"></span><a href="#%E3%83%97%E3%83%AA%E3%83%97%E3%83%AD%E3%82%BB%E3%83%83%E3%82%B5%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>プリプロセッサとは</h2>\n\n<p>一般にある処理を行うソフトウェアに対して、<br>\nデータ入力やデータ整形などの準備的な処理を行うソフトウェアのことである。<br>\n特にコンパイラに対して使うことが多い</p>\n\n<h2>\n<span id="プリプロセッサ一覧" class="fragment"></span><a href="#%E3%83%97%E3%83%AA%E3%83%97%E3%83%AD%E3%82%BB%E3%83%83%E3%82%B5%E4%B8%80%E8%A6%A7"><i class="fa fa-link"></i></a>プリプロセッサ一覧</h2>\n\n<p>C言語には以下膿瘍名プリプロセッサ指令がある</p>\n\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#define</td>\n<td>マクロを定義</td>\n</tr>\n<tr>\n<td>#ifdef</td>\n<td>シンボルが定義されているときに定義する(類似で#infdef、#endif)</td>\n</tr>\n<tr>\n<td>#if</td>\n<td>式が真のときに実行する</td>\n</tr>\n<tr>\n<td>#include</td>\n<td>ヘッダファイルのインクルード</td>\n</tr>\n<tr>\n<td>#error</td>\n<td>コンパイラにエラーを発生させる</td>\n</tr>\n<tr>\n<td>#warning</td>\n<td>コンパイラに警告を発生させる</td>\n</tr>\n<tr>\n<td>#prgma</td>\n<td>マシンやOS固有の機能をサポートする</td>\n</tr>\n</tbody>\n</table>\n\n<p>今回ポイントとなるのは「#define」です。</p>\n\n<h2>\n<span id="defineについて" class="fragment"></span><a href="#define%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>#defineについて</h2>\n\n<p>defineで定義されるマクロいくつか種類があります。<br>\nその中でも今回は「関数形式マクロについて取り上げます」</p>\n\n<ul>\n<li>オブジェクト形式マクロ</li>\n<li>関数形式マクロ</li>\n</ul>\n\n<p>関数形式マクロとは、マクロ置換を行う時に引数を取ることができ、あたかも関数のように使用できるマクロです。<br>\n関数形式マクロは、次の書式で定義します。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">define.c</span></div>\n<div class="highlight"><pre><span class="cp">#define マクロ名(引数の並び) 置き換えられる処理\n</span></pre></div>\n</div>\n\n<p>上記を使った簡単なサンプルプログラム。<br>\n数字を入れ替えるマクロを定義し、mainで実行。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">main.c</span></div>\n<div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;\n</span>\n<span class="cp"># 引数2つを入れ替えるマクロ\n#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>\n    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>\n\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n    <span class="n">SWAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>実行結果は下記のようになります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>gcc main.c <span class="nt">-o</span> main\n<span class="nv">$ </span>./main\n<span class="o">(</span>x, y<span class="o">)</span> <span class="o">=</span> <span class="o">(</span>10, 20<span class="o">)</span>\n<span class="o">(</span>x, y<span class="o">)</span> <span class="o">=</span> <span class="o">(</span>20, 10<span class="o">)</span>\n</pre></div></div>\n\n<p>上記のような実装では特に問題はない事が分かりました。<br>\n自分で書いたマクロを自分で利用するだけなので今回は問題なし。<br>\nじゃあ何故do{}while(0)なんて入れてるんだろうってことで調べてみると<br>\n以下2点理由があった。</p>\n\n<ul>\n<li>処理の打ち切りテクニック</li>\n<li>マクロを使用する場所に依存するエラーを防ぐ</li>\n</ul>\n\n<p>今回は2点目の使用場所に依存するエラーを防ぐ目的がある模様。</p>\n\n<p>具体的にエラーが出る使用方法は下記</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">main.c</span></div>\n<div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;\n</span>\n<span class="cp">#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>\n    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>\n\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="n">SWAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>マクロが展開された状態のソースは下記となり</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">main.c</span></div>\n<div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;\n</span>\n<span class="cp">#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>\n    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>\n\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="n">typeof</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="n">__tmp</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span><span class="p">);</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="n">__tmp</span><span class="p">;</span> <span class="c1">//ここでエラー</span>\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>エラーとなる原因はマクロ展開後のif文が「if (x &gt; 20) typeof(a) __tmp = (a);」で完結しており<br>\n以降の行で出てくるa,bが未定義といったエラー</p>\n\n<p>do{}while(0)を使用することで使用場所に依存しないマクロの定義が可能となる。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">main.c</span></div>\n<div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;\n</span>\n<span class="cp">#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>\n    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>\n\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span> <span class="n">typeof</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="n">__tmp</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span><span class="p">);</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="n">__tmp</span><span class="p">;</span> <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"(x, y) = (%d, %d)</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>\n\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n', 'body': '## 拝啓\n\nカーネルソース読んでるとよく出てくる「do {} while (0);」\nこれが何なのか気になったので調べてみました。\n\n[torvalds/linux](https://github.com/torvalds/linux/blob/master/include/linux/kernel.h)\n\n以下swap関数のようなイメージ\n至るところでdo {} while(0)が存在\n\n``` c:include/linux/kernel.h\n/**\n * swap - swap values of @a and @b\n * @a: first value\n * @b: second value\n */\n#define swap(a, b) \\\n\tdo { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n```\n\n## C言語におけるマクロとは\n\nプログラムの中の文字列を予め定義した規則にしたがって置換する機能のこと\nマクロは「#define」というプリプロセッサ指令により定義される\n\n## プリプロセッサとは\n\n一般にある処理を行うソフトウェアに対して、\nデータ入力やデータ整形などの準備的な処理を行うソフトウェアのことである。\n特にコンパイラに対して使うことが多い\n\n## プリプロセッサ一覧\n\nC言語には以下膿瘍名プリプロセッサ指令がある\n\n|種類|説明|\n---------|----\n#define  |マクロを定義\n#ifdef   |シンボルが定義されているときに定義する(類似で#infdef、#endif)\n#if      |式が真のときに実行する\n#include |ヘッダファイルのインクルード\n#error   |コンパイラにエラーを発生させる\n#warning |コンパイラに警告を発生させる\n#prgma   |マシンやOS固有の機能をサポートする\n\n今回ポイントとなるのは「#define」です。\n\n## #defineについて\n\ndefineで定義されるマクロいくつか種類があります。\nその中でも今回は「関数形式マクロについて取り上げます」\n\n* オブジェクト形式マクロ\n* 関数形式マクロ\n\n関数形式マクロとは、マクロ置換を行う時に引数を取ることができ、あたかも関数のように使用できるマクロです。\n関数形式マクロは、次の書式で定義します。\n\n``` c:define.c\n#define マクロ名(引数の並び) 置き換えられる処理\n```\n\n上記を使った簡単なサンプルプログラム。\n数字を入れ替えるマクロを定義し、mainで実行。\n\n``` c:main.c\n#include<stdio.h>\n\n# 引数2つを入れ替えるマクロ\n#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n\nint main(int argc, char** argv) {\n    int x = 10;\n    int y = 20;\n\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n    SWAP(x, y);\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n\n    return 0;\n}\n```\n\n実行結果は下記のようになります。\n\n``` bash\n$ gcc main.c -o main\n$ ./main\n(x, y) = (10, 20)\n(x, y) = (20, 10)\n```\n\n上記のような実装では特に問題はない事が分かりました。\n自分で書いたマクロを自分で利用するだけなので今回は問題なし。\nじゃあ何故do{}while(0)なんて入れてるんだろうってことで調べてみると\n以下2点理由があった。\n\n* 処理の打ち切りテクニック\n* マクロを使用する場所に依存するエラーを防ぐ\n\n今回は2点目の使用場所に依存するエラーを防ぐ目的がある模様。\n\n具体的にエラーが出る使用方法は下記\n\n``` c:main.c\n#include<stdio.h>\n\n#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n\nint main(int argc, char** argv) {\n    int x = 10;\n    int y = 20;\n\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n\n    if (x > 20) SWAP(x, y);\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n\n    return 0;\n}\n```\n\nマクロが展開された状態のソースは下記となり\n\n``` c:main.c\n#include<stdio.h>\n\n#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n\nint main(int argc, char** argv) {\n    int x = 10;\n    int y = 20;\n\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n\n    if (x > 20) typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; //ここでエラー\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n\n    return 0;\n}\n```\n\nエラーとなる原因はマクロ展開後のif文が「if (x > 20) typeof(a) __tmp = (a);」で完結しており\n以降の行で出てくるa,bが未定義といったエラー\n\ndo{}while(0)を使用することで使用場所に依存しないマクロの定義が可能となる。\n\n``` c:main.c\n#include<stdio.h>\n\n#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n\nint main(int argc, char** argv) {\n    int x = 10;\n    int y = 20;\n\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n\n    if (x > 20) do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n    fprintf(stdout, "(x, y) = (%d, %d)\\n", x, y);\n\n    return 0;\n}\n```\n', 'coediting': False, 'comments_count': 1, 'created_at': '2018-11-24T17:25:59+09:00', 'group': None, 'id': '971c20f499bf8b324ab4', 'likes_count': 1, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'C言語', 'versions': []}, {'name': 'カーネル', 'versions': []}], 'title': 'do {} while (0); の意味', 'updated_at': '2018-11-24T17:25:59+09:00', 'url': 'https://qiita.com/ryuichi1208/items/971c20f499bf8b324ab4', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/2cd812a77c085331a66bc8e23af4f27948cbffcf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38383064343037662d626238392d623632332d366136642d6334646231373330613966302e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/2cd812a77c085331a66bc8e23af4f27948cbffcf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38383064343037662d626238392d623632332d366136642d6334646231373330613966302e6a706567" alt="apple-logo-thum.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/880d407f-bb89-b623-6a6d-c4db1730a9f0.jpeg"></a></p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>iMacやmacbookの買い替えなんかで購入直後に設定する項目のメモ<br>\nターミナルから設定できます。dotfileとして置いておいて端末購入時に実行するやり方が基本のようです。<br>\n一度書いてしまえば端末購入のたびに実行するだけで同じ設定のマシンが瞬時に出来あがるのは素晴らしいですね。<br>\nvimrc同様に育てていく感覚が大事なのかも知れませんね()。</p>\n\n<p>基本的には以下のリポジトリとサイトを参考に記載しています。</p>\n\n<ul>\n<li><a href="https://www.defaults-write.com/" class="autolink" rel="nofollow noopener" target="_blank">https://www.defaults-write.com/</a></li>\n<li><a href="https://github.com/divio/osx-bootstrap/tree/master/core" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/divio/osx-bootstrap/tree/master/core</a></li>\n<li><a href="https://github.com/mathiasbynens/dotfiles/blob/master/.macos" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/mathiasbynens/dotfiles/blob/master/.macos</a></li>\n</ul>\n\n<h2>\n<span id="defaultsコマンドとは" class="fragment"></span><a href="#defaults%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>defaultsコマンドとは</h2>\n\n<p>「plist」と呼ばれるアプリやシステムの設定ファイルに、設定値を追加、変更、削除、検索するコマンドです。<br>\n標準のGUI設定では届かないかゆいところの設定が可能になります。</p>\n\n<p>詳しくは下記をご参照ください<br>\n<a href="http://tukaikta.blog135.fc2.com/blog-entry-209.html" class="autolink" rel="nofollow noopener" target="_blank">http://tukaikta.blog135.fc2.com/blog-entry-209.html</a></p>\n\n<h2>\n<span id="注意" class="fragment"></span><a href="#%E6%B3%A8%E6%84%8F"><i class="fa fa-link"></i></a>注意①</h2>\n\n<p>上記すべてを同時に実行すると正直使い勝手が返って悪くなると思います。<br>\n自分に合った設定を徐々に適用することをお勧めします</p>\n\n<h2>\n<span id="注意-1" class="fragment"></span><a href="#%E6%B3%A8%E6%84%8F-1"><i class="fa fa-link"></i></a>注意②</h2>\n\n<p>アプリによっては設定がキャッシュされている場合があります。<br>\nプロセスの再起動が必要ですので下記のような操作が必要です。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>killall APPLICATION_NAME\n\n<span class="c"># Finderなら</span>\n<span class="nv">$ </span>killall Finder\n</pre></div></div>\n\n<h2>\n<span id="基本系" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E7%B3%BB"><i class="fa fa-link"></i></a>基本系</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># スタンバイまでの時間を24時間へ変更 (デフォルト1時間)</span>\n<span class="nv">$ </span><span class="nb">sudo </span>pmset <span class="nt">-a</span> standbydelay 86400\n\n<span class="c"># ブート時のサウンドの無効化 (寂しい気もしますが煩いので消しています)</span>\n<span class="nv">$ </span><span class="nb">sudo </span>nvram <span class="nv">SystemAudioVolume</span><span class="o">=</span><span class="s2">" "</span>\n\n<span class="c"># スクロールバーの常時表示</span>\n<span class="nv">$ </span>defaults write NSGlobalDomain AppleShowScrollBars <span class="nt">-string</span> <span class="s2">"Always"</span>\n\n<span class="c"># コンソールアプリケーションの画面サイズ変更を高速にする</span>\n<span class="nv">$ </span>defaults write NSGlobalDomain NSWindowResizeTime <span class="nt">-float</span> 0.001\n\n<span class="c"># フリーズすると自動的に再起動</span>\n<span class="nv">$ </span><span class="nb">sudo </span>systemsetup <span class="nt">-setrestartfreeze</span> on\n\n<span class="c"># スリープさせない</span>\n<span class="nv">$ </span><span class="nb">sudo </span>systemsetup <span class="nt">-setcomputersleep</span> Off <span class="o">&gt;</span> /dev/null\n\n<span class="c"># 自動大文字の無効化</span>\n<span class="nv">$ </span>defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># クラッシュレポートの無効化</span>\n<span class="nv">$ </span>defaults write com.apple.CrashReporter DialogType <span class="nt">-string</span> <span class="s2">"none"</span>\n\n<span class="c"># 時計アイコンクリック時にOSやホスト名ipを表示する</span>\n<span class="nv">$ </span><span class="nb">sudo </span>defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName\n\n<span class="c"># Bluetoothヘッドフォン/ヘッドセットの音質を向上させる</span>\n<span class="nv">$ </span>defaults write com.apple.BluetoothAudioAgent <span class="s2">"Apple Bitpool Min (editable)"</span> <span class="nt">-int</span> 40\n</pre></div></div>\n\n<h2>\n<span id="dock関連" class="fragment"></span><a href="#dock%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>Dock関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># window効果の最大/最小を変更</span>\n<span class="nv">$ </span>defaults write com.apple.dock mineffect <span class="nt">-string</span> <span class="s2">"scale"</span>\n\n<span class="c"># Dockで開いているアプリケーションのインジケータライトを表示する</span>\n<span class="nv">$ </span>defaults write com.apple.dock show-process-indicators <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 開いているアプリケーションのみをdockに表示</span>\n<span class="nv">$ </span>defaults write com.apple.dock static-only <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># アプリケーション起動時のアニメーションを無効化</span>\n<span class="nv">$ </span>defaults write com.apple.dock launchanim <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># すべての（デフォルトの）アプリアイコンをDockから消去する</span>\n<span class="nv">$ </span>defaults write com.apple.dock persistent-apps <span class="nt">-array</span>\n\n<span class="c"># Dashboard無効化</span>\n<span class="nv">$ </span>defaults write com.apple.dashboard mcx-disabled <span class="nt">-bool</span> <span class="nb">true</span>\n</pre></div></div>\n\n<h2>\n<span id="finder関連" class="fragment"></span><a href="#finder%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>Finder関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># アニメーションを無効化する</span>\n<span class="nv">$ </span>defaults write com.apple.finder DisableAllAnimations <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># デフォルトで隠しファイルを表示する</span>\n<span class="nv">$ </span>defaults write com.apple.finder AppleShowAllFiles <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 全ての拡張子のファイルを表示</span>\n<span class="nv">$ </span>defaults write NSGlobalDomain AppleShowAllExtensions <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># ステータスバーを表示</span>\n<span class="nv">$ </span>defaults write com.apple.finder ShowStatusBar <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># パスバーを表示</span>\n<span class="nv">$ </span>defaults write com.apple.finder ShowPathbar <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 名前で並べ替えを選択時にディレクトリを前に置くようにする</span>\n<span class="nv">$ </span>defaults write com.apple.finder FXDefaultSearchScope <span class="nt">-string</span> <span class="s2">"SCcf"</span>\n\n<span class="c"># 検索時にデフォルトでカレントディレクトリを検索</span>\n<span class="nv">$ </span>defaults write com.apple.finder FXDefaultSearchScope <span class="nt">-string</span> <span class="s2">"SCcf"</span>\n\n<span class="c"># 拡張子変更時の警告を無効化</span>\n<span class="nv">$ </span>defaults write com.apple.finder FXEnableExtensionChangeWarning <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># ディレクトリのスプリングロードを有効化</span>\n<span class="nv">$ </span>defaults write NSGlobalDomain com.apple.springing.enabled <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># スプリングロード遅延を除去</span>\n<span class="nv">$ </span>defaults write NSGlobalDomain com.apple.springing.delay <span class="nt">-float</span> 0\n\n<span class="c"># USBやネットワークストレージに.DS_Storeファイルを作成しない</span>\n<span class="nv">$ </span>defaults write com.apple.desktopservices DSDontWriteNetworkStores <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.apple.desktopservices DSDontWriteUSBStores <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># ディスク検証を無効化</span>\n<span class="nv">$ </span>defaults write com.apple.frameworks.diskimages skip-verify <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.apple.frameworks.diskimages skip-verify-locked <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.apple.frameworks.diskimages skip-verify-remote <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># ボリュームマウント時に自動的にFinderを表示</span>\n<span class="nv">$ </span>defaults write com.apple.frameworks.diskimages auto-open-ro-root <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.apple.frameworks.diskimages auto-open-rw-root <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.apple.finder OpenWindowForNewRemovableDisk <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># ゴミ箱を空にする前の警告の無効化</span>\n<span class="nv">$ </span>defaults write com.apple.finder WarnOnEmptyTrash <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># Show the ~/Library folder</span>\n<span class="nv">$ </span>chflags nohidden ~/Library\n\n<span class="c"># Show the /Volumes folder</span>\n<span class="nv">$ </span><span class="nb">sudo </span>chflags nohidden /Volumes\n</pre></div></div>\n\n<h2>\n<span id="spotlight関連" class="fragment"></span><a href="#spotlight%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>Spotlight関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># トレイアイコンを非表示</span>\n<span class="nv">$ </span><span class="nb">sudo chmod </span>600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search\n\n<span class="c"># メインディスクのインデックスの有効化</span>\n<span class="nv">$ </span><span class="nb">sudo </span>mdutil <span class="nt">-i</span> on / <span class="o">&gt;</span> /dev/null\n\n<span class="c"># インデックスの再構築</span>\n<span class="nv">$ </span><span class="nb">sudo </span>mdutil <span class="nt">-E</span> / <span class="o">&gt;</span> /dev/null\n</pre></div></div>\n\n<h2>\n<span id="safari関連" class="fragment"></span><a href="#safari%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>Safari関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 検索クエリをAppleへ送信しない</span>\n<span class="nv">$ </span>defaults write com.apple.Safari UniversalSearchEnabled <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.apple.Safari SuppressSearchSuggestions <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># tabキーでWebページの項目の強調</span>\n<span class="nv">$ </span>defaults write com.apple.Safari WebKitTabToLinksPreferenceKey <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># アドレスバーに表示されるURLを全表示</span>\n<span class="nv">$ </span>defaults write com.apple.Safari ShowFullURLInSmartSearchField <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># ファイルのダウンロード後に自動でファイルを開くのを無効化</span>\n<span class="nv">$ </span>defaults write com.apple.Safari AutoOpenSafeDownloads <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># Safariのデバッグメニューを有効化</span>\n<span class="nv">$ </span>defaults write com.apple.Safari IncludeInternalDebugMenu <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># Safariのブックマークバーから不要なアイコンを削除</span>\n<span class="nv">$ </span>defaults write com.apple.Safari ProxiesInBookmarksBar <span class="s2">"()"</span>\n\n<span class="c"># スペルチェックを継続的に行う</span>\n<span class="nv">$ </span>defaults write com.apple.Safari WebContinuousSpellCheckingEnabled <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 自動修正の無効化</span>\n<span class="nv">$ </span>defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># オートフィルの無効化</span>\n<span class="nv">$ </span>defaults write com.apple.Safari AutoFillFromAddressBook <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.apple.Safari AutoFillPasswords <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.apple.Safari AutoFillCreditCardData <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.apple.Safari AutoFillMiscellaneousForms <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># プラグインの無効化</span>\n<span class="nv">$ </span>defaults write com.apple.Safari WebKitPluginsEnabled <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># Javaの無効化</span>\n<span class="nv">$ </span>defaults write com.apple.Safari WebKitJavaEnabled <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># ポップアップウィンドウをブロック</span>\n<span class="nv">$ </span>defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># 追跡を無効化</span>\n<span class="nv">$ </span>defaults write com.apple.Safari SendDoNotTrackHTTPHeader <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 自動的に拡張機能を更新する</span>\n<span class="nv">$ </span>defaults write com.apple.Safari InstallExtensionUpdatesAutomatically <span class="nt">-bool</span> <span class="nb">true</span>\n</pre></div></div>\n\n<h2>\n<span id="メール関連" class="fragment"></span><a href="#%E3%83%A1%E3%83%BC%E3%83%AB%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>メール関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># 送信と返信のアニメーションを無効にする</span>\n<span class="nv">$ </span>defaults write com.apple.mail DisableReplyAnimations <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.apple.mail DisableSendAnimations <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># インライン添付ファイルの無効化</span>\n<span class="nv">$ </span>defaults write com.apple.mail DisableInlineAttachmentViewing <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 自動スペルチェックを無効化</span>\n<span class="nv">$ </span>defaults write com.apple.mail SpellCheckingBehavior <span class="nt">-string</span> <span class="s2">"NoSpellCheckingEnabled"</span>\n</pre></div></div>\n\n<h2>\n<span id="ターミナル関連" class="fragment"></span><a href="#%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>ターミナル関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># UTF-8のみを使用する</span>\n<span class="nv">$ </span>defaults write com.apple.terminal StringEncodings <span class="nt">-array</span> 4\n\n<span class="c"># iTermのダークテーマをインストール</span>\n<span class="nv">$ </span>open <span class="s2">"</span><span class="k">${</span><span class="nv">HOME</span><span class="k">}</span><span class="s2">/init/Solarized Dark.itermcolors"</span>\n\n<span class="c"># ターミナル終了時のプロンプトを非表示にする</span>\n<span class="nv">$ </span>defaults write com.googlecode.iterm2 PromptOnQuit <span class="nt">-bool</span> <span class="nb">false</span>\n</pre></div></div>\n\n<h2>\n<span id="app-store関連" class="fragment"></span><a href="#app-store%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>App Store関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># WebKitデベロッパーツールを有効にする</span>\n<span class="nv">$ </span>defaults write com.apple.appstore WebKitDeveloperExtras <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># デバッグメニューを有効にする</span>\n<span class="nv">$ </span>defaults write com.apple.appstore ShowDebugMenu <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 自動更新チェックを有効にする</span>\n<span class="nv">$ </span>defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 毎日アプリケーションのアップデートを確認する</span>\n<span class="nv">$ </span>defaults write com.apple.SoftwareUpdate ScheduleFrequency <span class="nt">-int</span> 1\n\n<span class="c"># アプリケーションのアップデートをバックグラウンドでダウンロードする</span>\n<span class="nv">$ </span>defaults write com.apple.SoftwareUpdate AutomaticDownload <span class="nt">-int</span> 1\n\n<span class="c"># システムデータファイルとセキュリティ更新プログラムをインストールする</span>\n<span class="nv">$ </span>defaults write com.apple.SoftwareUpdate CriticalUpdateInstall <span class="nt">-int</span> 1\n\n<span class="c"># 他のMacで購入したアプリを自動的にダウンロードする</span>\n<span class="nv">$ </span>defaults write com.apple.SoftwareUpdate ConfigDataInstall <span class="nt">-int</span> 1\n\n<span class="c"># アプリケーションの自動更新を有効化</span>\n<span class="nv">$ </span>defaults write com.apple.commerce AutoUpdate <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 再起動が必要なアプリケーションの場合自動で再起動を有効化する</span>\n<span class="nv">$ </span>defaults write com.apple.commerce AutoUpdateRestartRequired <span class="nt">-bool</span> <span class="nb">true</span>\n</pre></div></div>\n\n<h2>\n<span id="chrome関連" class="fragment"></span><a href="#chrome%E9%96%A2%E9%80%A3"><i class="fa fa-link"></i></a>chrome関連</h2>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># トラックパッドの感度の悪いバックスワイプをすべて無効にする</span>\n<span class="nv">$ </span>defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls <span class="nt">-bool</span> <span class="nb">false</span>\n<span class="nv">$ </span>defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls <span class="nt">-bool</span> <span class="nb">false</span>\n\n<span class="c"># システム固有の印刷プレビューダイアログを使用する</span>\n<span class="nv">$ </span>defaults write com.google.Chrome DisablePrintPreview <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.google.Chrome.canary DisablePrintPreview <span class="nt">-bool</span> <span class="nb">true</span>\n\n<span class="c"># 既定で印刷ダイアログを展開する</span>\n<span class="nv">$ </span>defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 <span class="nt">-bool</span> <span class="nb">true</span>\n<span class="nv">$ </span>defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 <span class="nt">-bool</span> <span class="nb">true</span>\n</pre></div></div>\n\n<h2>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>\n\n<p>書いてみると意外とあった<br>\ndotfilesを作成してGitHubあたりで公開する予定です。</p>\n\n<p>公開しました.<br>\n<a href="https://github.com/ryuichi1208/dotfiles/blob/master/.macos" rel="nofollow noopener" target="_blank">dotfiles/.macos</a></p>\n\n<p>何かおススメの設定等あれば教えてください。</p>\n', 'body': '![apple-logo-thum.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/880d407f-bb89-b623-6a6d-c4db1730a9f0.jpeg)\n\n## 背景\n\niMacやmacbookの買い替えなんかで購入直後に設定する項目のメモ\nターミナルから設定できます。dotfileとして置いておいて端末購入時に実行するやり方が基本のようです。\n一度書いてしまえば端末購入のたびに実行するだけで同じ設定のマシンが瞬時に出来あがるのは素晴らしいですね。\nvimrc同様に育てていく感覚が大事なのかも知れませんね()。\n\n基本的には以下のリポジトリとサイトを参考に記載しています。\n\n* https://www.defaults-write.com/\n* https://github.com/divio/osx-bootstrap/tree/master/core\n* https://github.com/mathiasbynens/dotfiles/blob/master/.macos\n\n## defaultsコマンドとは\n\n「plist」と呼ばれるアプリやシステムの設定ファイルに、設定値を追加、変更、削除、検索するコマンドです。\n標準のGUI設定では届かないかゆいところの設定が可能になります。\n\n詳しくは下記をご参照ください\nhttp://tukaikta.blog135.fc2.com/blog-entry-209.html\n\n## 注意①\n\n上記すべてを同時に実行すると正直使い勝手が返って悪くなると思います。\n自分に合った設定を徐々に適用することをお勧めします\n\n## 注意②\n\nアプリによっては設定がキャッシュされている場合があります。\nプロセスの再起動が必要ですので下記のような操作が必要です。\n\n``` bash\n$ killall APPLICATION_NAME\n\n# Finderなら\n$ killall Finder\n```\n\n## 基本系\n\n``` bash\n# スタンバイまでの時間を24時間へ変更 (デフォルト1時間)\n$ sudo pmset -a standbydelay 86400\n\n# ブート時のサウンドの無効化 (寂しい気もしますが煩いので消しています)\n$ sudo nvram SystemAudioVolume=" "\n\n# スクロールバーの常時表示\n$ defaults write NSGlobalDomain AppleShowScrollBars -string "Always"\n\n# コンソールアプリケーションの画面サイズ変更を高速にする\n$ defaults write NSGlobalDomain NSWindowResizeTime -float 0.001\n\n# フリーズすると自動的に再起動\n$ sudo systemsetup -setrestartfreeze on\n\n# スリープさせない\n$ sudo systemsetup -setcomputersleep Off > /dev/null\n\n# 自動大文字の無効化\n$ defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false\n\n# クラッシュレポートの無効化\n$ defaults write com.apple.CrashReporter DialogType -string "none"\n\n# 時計アイコンクリック時にOSやホスト名ipを表示する\n$ sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName\n\n# Bluetoothヘッドフォン/ヘッドセットの音質を向上させる\n$ defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40\n```\n\n## Dock関連\n\n``` bash\n# window効果の最大/最小を変更\n$ defaults write com.apple.dock mineffect -string "scale"\n\n# Dockで開いているアプリケーションのインジケータライトを表示する\n$ defaults write com.apple.dock show-process-indicators -bool true\n\n# 開いているアプリケーションのみをdockに表示\n$ defaults write com.apple.dock static-only -bool true\n\n# アプリケーション起動時のアニメーションを無効化\n$ defaults write com.apple.dock launchanim -bool false\n\n# すべての（デフォルトの）アプリアイコンをDockから消去する\n$ defaults write com.apple.dock persistent-apps -array\n\n# Dashboard無効化\n$ defaults write com.apple.dashboard mcx-disabled -bool true\n```\n\n## Finder関連\n\n``` bash\n# アニメーションを無効化する\n$ defaults write com.apple.finder DisableAllAnimations -bool true\n\n# デフォルトで隠しファイルを表示する\n$ defaults write com.apple.finder AppleShowAllFiles -bool true\n\n# 全ての拡張子のファイルを表示\n$ defaults write NSGlobalDomain AppleShowAllExtensions -bool true\n\n# ステータスバーを表示\n$ defaults write com.apple.finder ShowStatusBar -bool true\n\n# パスバーを表示\n$ defaults write com.apple.finder ShowPathbar -bool true\n\n# 名前で並べ替えを選択時にディレクトリを前に置くようにする\n$ defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"\n\n# 検索時にデフォルトでカレントディレクトリを検索\n$ defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"\n\n# 拡張子変更時の警告を無効化\n$ defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\n\n# ディレクトリのスプリングロードを有効化\n$ defaults write NSGlobalDomain com.apple.springing.enabled -bool true\n\n# スプリングロード遅延を除去\n$ defaults write NSGlobalDomain com.apple.springing.delay -float 0\n\n# USBやネットワークストレージに.DS_Storeファイルを作成しない\n$ defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true\n$ defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true\n\n# ディスク検証を無効化\n$ defaults write com.apple.frameworks.diskimages skip-verify -bool true\n$ defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true\n$ defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true\n\n# ボリュームマウント時に自動的にFinderを表示\n$ defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true\n$ defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true\n$ defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true\n\n# ゴミ箱を空にする前の警告の無効化\n$ defaults write com.apple.finder WarnOnEmptyTrash -bool false\n\n# Show the ~/Library folder\n$ chflags nohidden ~/Library\n\n# Show the /Volumes folder\n$ sudo chflags nohidden /Volumes\n```\n\n## Spotlight関連\n\n``` bash\n# トレイアイコンを非表示\n$ sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search\n\n# メインディスクのインデックスの有効化\n$ sudo mdutil -i on / > /dev/null\n\n# インデックスの再構築\n$ sudo mdutil -E / > /dev/null\n```\n\n## Safari関連\n\n``` bash\n# 検索クエリをAppleへ送信しない\n$ defaults write com.apple.Safari UniversalSearchEnabled -bool false\n$ defaults write com.apple.Safari SuppressSearchSuggestions -bool true\n\n# tabキーでWebページの項目の強調\n$ defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true\n$ defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true\n\n# アドレスバーに表示されるURLを全表示\n$ defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true\n\n# ファイルのダウンロード後に自動でファイルを開くのを無効化\n$ defaults write com.apple.Safari AutoOpenSafeDownloads -bool false\n\n# Safariのデバッグメニューを有効化\n$ defaults write com.apple.Safari IncludeInternalDebugMenu -bool true\n\n# Safariのブックマークバーから不要なアイコンを削除\n$ defaults write com.apple.Safari ProxiesInBookmarksBar "()"\n\n# スペルチェックを継続的に行う\n$ defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true\n\n# 自動修正の無効化\n$ defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false\n\n# オートフィルの無効化\n$ defaults write com.apple.Safari AutoFillFromAddressBook -bool false\n$ defaults write com.apple.Safari AutoFillPasswords -bool false\n$ defaults write com.apple.Safari AutoFillCreditCardData -bool false\n$ defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false\n\n# プラグインの無効化\n$ defaults write com.apple.Safari WebKitPluginsEnabled -bool false\n$ defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false\n\n# Javaの無効化\n$ defaults write com.apple.Safari WebKitJavaEnabled -bool false\n$ defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false\n\n# ポップアップウィンドウをブロック\n$ defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false\n$ defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false\n\n# 追跡を無効化\n$ defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true\n\n# 自動的に拡張機能を更新する\n$ defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true\n```\n\n## メール関連\n\n``` bash\n# 送信と返信のアニメーションを無効にする\n$ defaults write com.apple.mail DisableReplyAnimations -bool true\n$ defaults write com.apple.mail DisableSendAnimations -bool true\n\n# インライン添付ファイルの無効化\n$ defaults write com.apple.mail DisableInlineAttachmentViewing -bool true\n\n# 自動スペルチェックを無効化\n$ defaults write com.apple.mail SpellCheckingBehavior -string "NoSpellCheckingEnabled"\n```\n\n## ターミナル関連\n\n``` bash\n# UTF-8のみを使用する\n$ defaults write com.apple.terminal StringEncodings -array 4\n\n# iTermのダークテーマをインストール\n$ open "${HOME}/init/Solarized Dark.itermcolors"\n\n# ターミナル終了時のプロンプトを非表示にする\n$ defaults write com.googlecode.iterm2 PromptOnQuit -bool false\n```\n\n## App Store関連\n\n``` bash\n# WebKitデベロッパーツールを有効にする\n$ defaults write com.apple.appstore WebKitDeveloperExtras -bool true\n\n# デバッグメニューを有効にする\n$ defaults write com.apple.appstore ShowDebugMenu -bool true\n\n# 自動更新チェックを有効にする\n$ defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true\n\n# 毎日アプリケーションのアップデートを確認する\n$ defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1\n\n# アプリケーションのアップデートをバックグラウンドでダウンロードする\n$ defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1\n\n# システムデータファイルとセキュリティ更新プログラムをインストールする\n$ defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1\n\n# 他のMacで購入したアプリを自動的にダウンロードする\n$ defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1\n\n# アプリケーションの自動更新を有効化\n$ defaults write com.apple.commerce AutoUpdate -bool true\n\n# 再起動が必要なアプリケーションの場合自動で再起動を有効化する\n$ defaults write com.apple.commerce AutoUpdateRestartRequired -bool true\n```\n\n## chrome関連\n\n``` bash\n# トラックパッドの感度の悪いバックスワイプをすべて無効にする\n$ defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false\n$ defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false\n\n# システム固有の印刷プレビューダイアログを使用する\n$ defaults write com.google.Chrome DisablePrintPreview -bool true\n$ defaults write com.google.Chrome.canary DisablePrintPreview -bool true\n\n# 既定で印刷ダイアログを展開する\n$ defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true\n$ defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true\n```\n\n## \n\n## まとめ\n\n書いてみると意外とあった\ndotfilesを作成してGitHubあたりで公開する予定です。\n\n公開しました.\n[dotfiles/.macos](https://github.com/ryuichi1208/dotfiles/blob/master/.macos)\n\n何かおススメの設定等あれば教えてください。\n', 'coediting': False, 'comments_count': 4, 'created_at': '2018-11-21T18:58:00+09:00', 'group': None, 'id': '5905240f3bfce793b33d', 'likes_count': 1626, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Mac', 'versions': []}, {'name': 'MacOSX', 'versions': []}, {'name': 'ターミナル', 'versions': []}, {'name': 'dotfiles', 'versions': []}, {'name': 'defaults', 'versions': []}], 'title': 'iMac/MacBook購入後に必ず設定したい設定項目', 'updated_at': '2018-11-23T08:31:24+09:00', 'url': 'https://qiita.com/ryuichi1208/items/5905240f3bfce793b33d', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>ハードディスクから異音が聞こえ(約5年稼動しっぱなし)はじめました。<br>\n特に重要データがあるわけでもなかったので冗長化していない。<br>\nが、念のためバックアップを取ろうと思った今日この頃。<br>\nそこでddrescueなるものを最近知ったので使ってみました。</p>\n\n<p>公式マニュアルは下記<br>\n<a href="https://www.gnu.org/software/ddrescue/manual/ddrescue_manual.html" rel="nofollow noopener" target="_blank">GNU ddrescue Manual</a></p>\n\n<h1>\n<span id="対象読者" class="fragment"></span><a href="#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85"><i class="fa fa-link"></i></a>対象読者</h1>\n\n<ul>\n<li>壊れかけのHDDからデータをバックアップしたい人</li>\n</ul>\n\n<p>※物理障害のおきているHDDを修復するわけではありませんので注意！</p>\n\n<h1>\n<span id="ddrescueとは" class="fragment"></span><a href="#ddrescue%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>ddrescueとは</h1>\n\n<blockquote>\n<p>GNU ddrescue（グヌー\u3000ディーディーレスキュー）は、主に不良セクタのあるハードディスクドライブ (HDD) からのデータの救出に使われる、UNIX上で動作するフリーソフトである。macOSでも動作する。開発者はAntonio Diaz（アントニオ・ディアス）。</p>\n</blockquote>\n\n<p><a href="https://ja.wikipedia.org/wiki/Ddrescue" rel="nofollow noopener" target="_blank">wiki</a>より引用</p>\n\n<p>長々と書いてあるが要約すると不良セクタのあるHDDからのでデータの救出に使われるツールです。</p>\n\n<p>コピー用のツールにddは有名です。しかしddコマンドは不良セクタのある媒体からの読み出しが苦手であり、ストールなどが発生したりする。そもそも正常媒体を想定したコマンドなので当然といえば当然。</p>\n\n<p>その点ddrescueでは不良セクタに当たるとその箇所をマークしスキップしてコピーを行う。<br>\nスキップした箇所は最後に再度読み込むといった形で処理を行う。</p>\n\n<p>このときコピーのログはファイルに残るので途中で処理が中断した場合でも前の場所から再開することができる。</p>\n\n<p>また、fillモードという動作モードもありデバイスの特定の箇所をあるパターンで埋めつくすといった事も出来る。<br>\n(ddとの違いは「不良箇所のみ」といった範囲指定が出来る点である)</p>\n\n<h1>\n<span id="ddrescueメリット" class="fragment"></span><a href="#ddrescue%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88"><i class="fa fa-link"></i></a>ddrescueメリット</h1>\n\n<p>メリットは以下3点</p>\n\n<ul>\n<li>不良セクタを発見したらスキップし、不良セクタの位置がログに出力される</li>\n<li> 一旦全部書き出した後、ログに残った不良セクタだけを再度処理してくれる</li>\n<li>どのファイルが不良セクタの被害を受けたかが分かる</li>\n</ul>\n\n<h1>\n<span id="使い方オプション" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>使い方/オプション</h1>\n\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>上書き※ターゲットが物理ディスクでは必須</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>リードエラーを無視</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>詳細表示</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>不良セクタの再読み込み回数</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>ダイレクトアクセス(キャッシュを介さずにアクセス)</td>\n</tr>\n</tbody>\n</table>\n\n<p>コマンドイメージは下記のようになります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ddrescue <span class="nt">-f</span> <span class="nt">-d</span> <span class="nt">-r1</span> <span class="nt">-v</span> /dev/sda /dev/sdb logfile.log\n</pre></div></div>\n\n<h1>\n<span id="導入実行" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>導入/実行</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># インストール方法は下記.GNU版を入れるためパッケージ名は「gddrescue」</span>\n<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>gddrescue\n\n<span class="c"># 実行.オプションは下記を参照してください.</span>\n<span class="nv">$ </span>ddrescue <span class="nt">-r</span> 3 /dev/sdc /dev/sde rescue.log\n\nPress Ctrl-C to interrupt\nInitial status <span class="o">(</span><span class="nb">read </span>from logfile<span class="o">)</span>\nrescued:         0 B,  errsize:       0 B,  errors:       0\nCurrent status\nrescued:   500107 MB,  errsize:       0 B,  current rate:   110MB/s\n   ipos:   499466 MB,   errors:       0,    average rate:   120MB/s\n   opos:   499466 MB\n\n</pre></div></div>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>壊れかけのHDDからデータを救い出す方法を記載しました。<br>\nただし完璧で救えるわけでは無いので注意が必要です。<br>\nそもそも壊れかける以前に壊れても良いように冗長化ないし、<br>\nバックアップは普段から取りましょうってお話ですね。<br>\n(学生時代そんなお金は無かった。。。)</p>\n', 'body': '# 背景\n\nハードディスクから異音が聞こえ(約5年稼動しっぱなし)はじめました。\n特に重要データがあるわけでもなかったので冗長化していない。\nが、念のためバックアップを取ろうと思った今日この頃。\nそこでddrescueなるものを最近知ったので使ってみました。\n\n公式マニュアルは下記\n[GNU ddrescue Manual](https://www.gnu.org/software/ddrescue/manual/ddrescue_manual.html)\n\n# 対象読者\n\n* 壊れかけのHDDからデータをバックアップしたい人\n\n※物理障害のおきているHDDを修復するわけではありませんので注意！\n\n# ddrescueとは\n\n> GNU ddrescue（グヌー\u3000ディーディーレスキュー）は、主に不良セクタのあるハードディスクドライブ (HDD) からのデータの救出に使われる、UNIX上で動作するフリーソフトである。macOSでも動作する。開発者はAntonio Diaz（アントニオ・ディアス）。\n\n[wiki](https://ja.wikipedia.org/wiki/Ddrescue)より引用\n\n長々と書いてあるが要約すると不良セクタのあるHDDからのでデータの救出に使われるツールです。\n\nコピー用のツールにddは有名です。しかしddコマンドは不良セクタのある媒体からの読み出しが苦手であり、ストールなどが発生したりする。そもそも正常媒体を想定したコマンドなので当然といえば当然。\n\nその点ddrescueでは不良セクタに当たるとその箇所をマークしスキップしてコピーを行う。\nスキップした箇所は最後に再度読み込むといった形で処理を行う。\n\nこのときコピーのログはファイルに残るので途中で処理が中断した場合でも前の場所から再開することができる。\n\nまた、fillモードという動作モードもありデバイスの特定の箇所をあるパターンで埋めつくすといった事も出来る。\n(ddとの違いは「不良箇所のみ」といった範囲指定が出来る点である)\n\n# ddrescueメリット\n\nメリットは以下3点\n\n* 不良セクタを発見したらスキップし、不良セクタの位置がログに出力される\n*  一旦全部書き出した後、ログに残った不良セクタだけを再度処理してくれる\n* どのファイルが不良セクタの被害を受けたかが分かる\n\n\n# 使い方/オプション\n\n|オプション|概要|\n-----------|----\n-f         |上書き※ターゲットが物理ディスクでは必須\n-n         |リードエラーを無視\n-v         |詳細表示\n-r         |不良セクタの再読み込み回数\n-d         |ダイレクトアクセス(キャッシュを介さずにアクセス)\n\nコマンドイメージは下記のようになります。\n\n``` bash\n$ ddrescue -f -d -r1 -v /dev/sda /dev/sdb logfile.log\n```\n\n\n# 導入/実行\n\n``` bash\n# インストール方法は下記.GNU版を入れるためパッケージ名は「gddrescue」\n$ sudo apt-get install gddrescue\n\n# 実行.オプションは下記を参照してください.\n$ ddrescue -r 3 /dev/sdc /dev/sde rescue.log\n\nPress Ctrl-C to interrupt\nInitial status (read from logfile)\nrescued:         0 B,  errsize:       0 B,  errors:       0\nCurrent status\nrescued:   500107 MB,  errsize:       0 B,  current rate:   110MB/s\n   ipos:   499466 MB,   errors:       0,    average rate:   120MB/s\n   opos:   499466 MB\n\n```\n\n# まとめ\n\n壊れかけのHDDからデータを救い出す方法を記載しました。\nただし完璧で救えるわけでは無いので注意が必要です。\nそもそも壊れかける以前に壊れても良いように冗長化ないし、\nバックアップは普段から取りましょうってお話ですね。\n(学生時代そんなお金は無かった。。。)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-20T18:40:29+09:00', 'group': None, 'id': '76806a1547fb94da2bca', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'UNIX', 'versions': []}, {'name': 'HDD', 'versions': []}, {'name': 'ddrescue', 'versions': []}], 'title': '故障してそうなディスクからデータを取り出す方法(ddrescue)', 'updated_at': '2018-11-20T18:40:29+09:00', 'url': 'https://qiita.com/ryuichi1208/items/76806a1547fb94da2bca', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>pythonの文字列操作チートシート<br>\n実行環境は下記</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>python <span class="nt">-V</span>\nPython 3.6.6\n</pre></div></div>\n\n<h2>\n<span id="文字列基礎" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E5%9F%BA%E7%A4%8E"><i class="fa fa-link"></i></a>文字列基礎</h2>\n\n<p>文字列は 「 ‘ 」（シングルクォーテーション）と「 ” 」（ダブルクォーテーション）の両方で表現する<br>\nクォート記号３つで複数行に分けて書く事も出来ます。</p>\n\n<h2>\n<span id="文字列結合" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E7%B5%90%E5%90%88"><i class="fa fa-link"></i></a>文字列結合</h2>\n\n<p>2つの文字列を1つの文字列へする方法</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="n">str1</span> <span class="o">=</span> <span class="s">"hello"</span>\n<span class="n">str2</span> <span class="o">=</span> <span class="s">"world"</span>\n\n<span class="c">#「+」演算子</span>\n<span class="n">str1</span> <span class="o">=</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span>\n<span class="c"># or</span>\n<span class="n">str1</span> <span class="o">+=</span> <span class="n">str2</span> \n\n<span class="c"># リテラルを並べて書いても連結される(変数は不可)</span>\n<span class="n">str4</span> <span class="o">=</span> <span class="s">\'aaa\'\'bbb\'\'ccc\'</span>\n\n<span class="c"># sprint風な書き方もできる</span>\n<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">s </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">str2</span><span class="p">))</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'{} {}\'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">str2</span><span class="p">))</span> <span class="c">#python3ではこちら推奨</span>\n<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">\'{str1} {str2}\'</span><span class="p">)</span> <span class="c">#Python3.6以降で使える</span>\n\n<span class="c"># 型の違う文字列でも結合可能</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'{} {}\'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">int1</span><span class="p">))</span>\n<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">\'{str1} {int1}\'</span><span class="p">)</span>\n\n<span class="c"># 「join()」使用</span>\n<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Hello"</span><span class="p">,</span> <span class="s">"World"</span><span class="p">,</span> <span class="s">"!"</span><span class="p">]</span>\n<span class="k">print</span><span class="p">(</span><span class="s">" "</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">))</span> \n<span class="c">## =&gt; Hello World !</span>\n</pre></div></div>\n\n<h2>\n<span id="文字列分割" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E5%88%86%E5%89%B2"><i class="fa fa-link"></i></a>文字列分割</h2>\n\n<p>指定の文字列に対して，区切り文字で分割したリストを返します．</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="nb">str</span> <span class="o">=</span> <span class="s">"A B C D"</span>\n<span class="c">## 「split」使用 .split(区切り文字, 分割数)</span>\n<span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>\n<span class="c">## =&gt; ["A", "B", "C", "D"]</span>\n\n<span class="nb">str</span> <span class="o">=</span> <span class="s">"HelloWorld"</span>\n<span class="c">## 「rsplit」使用 .rsplit(区切り文字, 分割数)</span>\n<span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s">"l"</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="c">## =&gt; [\'HelloWor\', \'d\']</span>\n</pre></div></div>\n\n<h2>\n<span id="文字列置換" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E7%BD%AE%E6%8F%9B"><i class="fa fa-link"></i></a>文字列置換</h2>\n\n<p>文字列を置換する方法について説明します。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># replace()を使用</span>\n<span class="nb">str</span> <span class="o">=</span> <span class="s">"123123123"</span>\n<span class="c">## 指定文字列を置換する(指定したワード全て)</span>\n<span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"123"</span><span class="p">,</span> <span class="s">"hoge"</span><span class="p">))</span> \n<span class="c">## =&gt; hogehogehoge</span>\n\n<span class="c"># 置換回数を1回にして指定文字列を置換する</span>\n<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"123"</span><span class="p">,</span> <span class="s">"hoge"</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> \n<span class="c">## =&gt; hoge123123</span>\n<span class="kn">import</span> <span class="nn">re</span>\n\n<span class="c"># 正規表現を使用しての置換</span>\n<span class="n">str1</span> <span class="o">=</span> <span class="s">\'I like orange.\'</span>\n<span class="k">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r\'[a-z]+\'</span><span class="p">,</span> <span class="s">\'xxx\'</span><span class="p">,</span> <span class="n">str1</span><span class="p">))</span>\n<span class="c"># =&gt; \'I xxx xxx.\'</span>\n</pre></div></div>\n\n<p>正規表現に関しては以下にまとまっていますのでご参照ください<br>\n<a href="https://docs.python.jp/3/library/re.html" class="autolink" rel="nofollow noopener" target="_blank">https://docs.python.jp/3/library/re.html</a></p>\n\n<h2>\n<span id="文字列検査" class="fragment"></span><a href="#%E6%96%87%E5%AD%97%E5%88%97%E6%A4%9C%E6%9F%BB"><i class="fa fa-link"></i></a>文字列検査</h2>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># find()メソッド</span>\n<span class="c"># 一致する文字列が出現する位置を返す</span>\n<span class="n">str1</span> <span class="o">=</span> <span class="s">"hello world"</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">\'o\'</span><span class="p">))</span>\n<span class="c"># =&gt; 4</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">rfind</span><span class="p">(</span><span class="s">\'o\'</span><span class="p">))</span> <span class="c">#逆側から検索</span>\n<span class="c"># =&gt; 10</span>\n\n<span class="c"># 第二引数で位置を指定すること出来る</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">\'o\'</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>\n<span class="c"># =&gt; 7</span>\n\n<span class="c"># 単純に存在の有無を調べるなら「in」を使用</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'hello\'</span> <span class="ow">in</span> <span class="s">\'hello world\'</span><span class="p">)</span>\n<span class="c"># =&gt; True</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'hello Japan\'</span> <span class="ow">in</span> <span class="s">\'hello world\'</span><span class="p">)</span>\n<span class="c"># =&gt; False</span>\n\n<span class="c"># findall()メソッド 正規表現使用</span>\n<span class="k">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">\'o.\'</span><span class="p">,</span> <span class="s">\'hello world\'</span><span class="p">))</span>\n<span class="c"># =&gt; [\'o \', \'or\']</span>\n<span class="k">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">\'oh\'</span><span class="p">,</span> <span class="s">\'hello world\'</span><span class="p">))</span>\n<span class="c"># =&gt; []</span>\n</pre></div></div>\n\n<h2>\n<span id="パディング" class="fragment"></span><a href="#%E3%83%91%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>パディング</h2>\n\n<p>桁合わせするにはいくつか方法があります。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># 右寄せゼロ埋め: zfill()</span>\n\n<span class="n">str1</span> <span class="o">=</span> <span class="mi">1234</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>\n<span class="c">## =&gt; 00001234</span>\n\n<span class="c"># 数字以外でも可</span>\n<span class="n">str2</span> <span class="o">=</span> <span class="s">\'abcd\'</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str2</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>\n<span class="c">## =&gt; 0000abcd</span>\n\n<span class="c"># 右寄せ、左寄せ、中央寄せ: rjust(), ljust(), center()</span>\n<span class="n">str1</span> <span class="o">=</span> <span class="s">\'1234\'</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">\'0\'</span><span class="p">))</span>\n<span class="c"># 00001234</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">\'0\'</span><span class="p">))</span>\n<span class="c"># 12340000</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">center</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">\'0\'</span><span class="p">))</span>\n<span class="c"># 00123400</span>\n\n<span class="c"># %演算子を使う方法もある</span>\n<span class="n">num</span> <span class="o">=</span> <span class="mi">50</span>\n<span class="n">num_pad</span> <span class="o">=</span> <span class="s">\'</span><span class="si">%04</span><span class="s">d\'</span> <span class="o">%</span> <span class="n">number</span>\n<span class="k">print</span><span class="p">(</span><span class="n">number_pad</span><span class="p">)</span>\n<span class="c">## =&gt; \'0050\'</span>\n\n<span class="c"># formatを使う方法もある</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'{:0&gt;8}\'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">str1</span><span class="p">))</span>\n<span class="c">## =&gt; 00001234</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'{:0^8}\'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">str1</span><span class="p">))</span>\n<span class="c">## =&gt; 00123400</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'{:0&lt;8}\'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">str1</span><span class="p">))</span>\n<span class="c">## =&gt; 12340000</span>\n<span class="k">print</span><span class="p">(</span><span class="s">\'{:04}\'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>\n<span class="c">## =&gt; 0050</span>\n\n<span class="c"># f-string を使う方法もある</span>\n<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">\'{str1:0&gt;8}\'</span><span class="p">)</span>\n<span class="c">## =&gt; 00001234</span>\n<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">\'{str1:0^8}\'</span><span class="p">)</span>\n<span class="c">## =&gt; 00123400</span>\n<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">\'{str1:0&lt;8}\'</span><span class="p">)</span>\n<span class="c">## =&gt; 12340000</span>\n<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">\'{num:04}\'</span><span class="p">)</span>\n<span class="c">## =&gt; 0050</span>\n</pre></div></div>\n\n<h1>\n<span id="空白削除" class="fragment"></span><a href="#%E7%A9%BA%E7%99%BD%E5%89%8A%E9%99%A4"><i class="fa fa-link"></i></a>空白削除</h1>\n\n<p>文字列の中に存在する空白が不要なときの処理</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="n">str1</span> <span class="o">=</span> <span class="s">"    Hello World!!    "</span>\n\n<span class="c"># 単語の間にある空白は削除したくない場合</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>\n<span class="c"># =&gt; "Hello World!!"</span>\n\n<span class="c"># 左側にある空白のみ削除したい場合</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">lstrip</span><span class="p">())</span>\n<span class="c"># =&gt; "Hello World!!    "</span>\n\n<span class="c"># 右側にある空白のみ削除したい場合</span>\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">rstrip</span><span class="p">())</span>\n<span class="c"># =&gt; "    Hello World!!"</span>\n</pre></div></div>\n\n<h1>\n<span id="大文字小文字変換" class="fragment"></span><a href="#%E5%A4%A7%E6%96%87%E5%AD%97%E5%B0%8F%E6%96%87%E5%AD%97%E5%A4%89%E6%8F%9B"><i class="fa fa-link"></i></a>大文字/小文字変換</h1>\n\n<p>文字列を大文字から小文字へ変換するメソッドとして「lower」があります。<br>\n逆に小文字から大文字へ変換するメソッドとして「upper」があります。</p>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="n">str1</span> <span class="o">=</span> <span class="s">"abcDEfg"</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">upper</span><span class="p">())</span>\n<span class="c"># =&gt; ABCDEFG</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">str1</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>\n<span class="c"># =&gt; abcdefg</span>\n</pre></div></div>\n\n<h1>\n<span id="型変換" class="fragment"></span><a href="#%E5%9E%8B%E5%A4%89%E6%8F%9B"><i class="fa fa-link"></i></a>型変換</h1>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># intからstrへ変換</span>\n<span class="n">str1</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">int1</span><span class="p">)</span>\n\n<span class="c"># floatも可</span>\n<span class="n">str2</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">float1</span><span class="p">)</span>\n</pre></div></div>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>大体覚えていますがとりあえずまとめて見ました。</p>\n', 'body': 'pythonの文字列操作チートシート\n実行環境は下記\n\n``` bash\n$ python -V\nPython 3.6.6\n```\n## 文字列基礎\n\n文字列は 「 ‘ 」（シングルクォーテーション）と「 ” 」（ダブルクォーテーション）の両方で表現する\nクォート記号３つで複数行に分けて書く事も出来ます。\n\n## 文字列結合\n\n2つの文字列を1つの文字列へする方法\n\n``` python\nstr1 = "hello"\nstr2 = "world"\n\n#「+」演算子\nstr1 = str1 + str2\n# or\nstr1 += str2 \n\n# リテラルを並べて書いても連結される(変数は不可)\nstr4 = \'aaa\'\'bbb\'\'ccc\'\n\n# sprint風な書き方もできる\nprint("%s %s" % (str1, str2))\nprint(\'{} {}\'.format(str1, str2)) #python3ではこちら推奨\nprint(f\'{str1} {str2}\') #Python3.6以降で使える\n\n# 型の違う文字列でも結合可能\nprint(\'{} {}\'.format(str1, int1))\nprint(f\'{str1} {int1}\')\n\n# 「join()」使用\nwords = ["Hello", "World", "!"]\nprint(" ".join(words)) \n## => Hello World !\n```\n\n## 文字列分割\n\n指定の文字列に対して，区切り文字で分割したリストを返します．\n\n``` python\nstr = "A B C D"\n## 「split」使用 .split(区切り文字, 分割数)\nprint(str.split())\n## => ["A", "B", "C", "D"]\n\nstr = "HelloWorld"\n## 「rsplit」使用 .rsplit(区切り文字, 分割数)\nprint(str.rsplit("l",1)) ## => [\'HelloWor\', \'d\']\n```\n\n## 文字列置換\n\n文字列を置換する方法について説明します。\n\n``` python\n# replace()を使用\nstr = "123123123"\n## 指定文字列を置換する(指定したワード全て)\nprint(str.replace("123", "hoge")) \n## => hogehogehoge\n\n# 置換回数を1回にして指定文字列を置換する\nprint(a.replace("123", "hoge", 1)) \n## => hoge123123\nimport re\n\n# 正規表現を使用しての置換\nstr1 = \'I like orange.\'\nprint(re.sub(r\'[a-z]+\', \'xxx\', str1))\n# => \'I xxx xxx.\'\n```\n\n正規表現に関しては以下にまとまっていますのでご参照ください\nhttps://docs.python.jp/3/library/re.html\n\n## 文字列検査\n\n``` python\n# find()メソッド\n# 一致する文字列が出現する位置を返す\nstr1 = "hello world"\nprint(str1.find(\'o\'))\n# => 4\nprint(str1.rfind(\'o\')) #逆側から検索\n# => 10\n\n# 第二引数で位置を指定すること出来る\nprint(str1.find(\'o\', 5))\n# => 7\n\n# 単純に存在の有無を調べるなら「in」を使用\nprint(\'hello\' in \'hello world\')\n# => True\nprint(\'hello Japan\' in \'hello world\')\n# => False\n\n# findall()メソッド 正規表現使用\nprint(re.findall(\'o.\', \'hello world\'))\n# => [\'o \', \'or\']\nprint(re.findall(\'oh\', \'hello world\'))\n# => []\n```\n\n## パディング\n\n桁合わせするにはいくつか方法があります。\n\n``` python\n# 右寄せゼロ埋め: zfill()\n\nstr1 = 1234\nprint(str1.zfill(8))\n## => 00001234\n\n# 数字以外でも可\nstr2 = \'abcd\'\nprint(str2.zfill(8))\n## => 0000abcd\n\n# 右寄せ、左寄せ、中央寄せ: rjust(), ljust(), center()\nstr1 = \'1234\'\n\nprint(str1.rjust(8, \'0\'))\n# 00001234\n\nprint(str1.ljust(8, \'0\'))\n# 12340000\n\nprint(str1.center(8, \'0\'))\n# 00123400\n\n# %演算子を使う方法もある\nnum = 50\nnum_pad = \'%04d\' % number\nprint(number_pad)\n## => \'0050\'\n\n# formatを使う方法もある\nprint(\'{:0>8}\'.format(str1))\n## => 00001234\nprint(\'{:0^8}\'.format(str1))\n## => 00123400\nprint(\'{:0<8}\'.format(str1))\n## => 12340000\nprint(\'{:04}\'.format(num))\n## => 0050\n\n# f-string を使う方法もある\nprint(f\'{str1:0>8}\')\n## => 00001234\nprint(f\'{str1:0^8}\')\n## => 00123400\nprint(f\'{str1:0<8}\')\n## => 12340000\nprint(f\'{num:04}\')\n## => 0050\n```\n\n# 空白削除\n\n文字列の中に存在する空白が不要なときの処理\n\n``` python\nstr1 = "    Hello World!!    "\n\n# 単語の間にある空白は削除したくない場合\nprint(str1.strip())\n# => "Hello World!!"\n\n# 左側にある空白のみ削除したい場合\nprint(str1.lstrip())\n# => "Hello World!!    "\n\n# 右側にある空白のみ削除したい場合\nprint(str1.rstrip())\n# => "    Hello World!!"\n```\n\n# 大文字/小文字変換\n\n文字列を大文字から小文字へ変換するメソッドとして「lower」があります。\n逆に小文字から大文字へ変換するメソッドとして「upper」があります。\n\n``` python\nstr1 = "abcDEfg"\n\nprint(str1.upper())\n# => ABCDEFG\n\nprint(str1.lower())\n# => abcdefg\n```\n\n# 型変換\n\n``` python\n# intからstrへ変換\nstr1 = str(int1)\n\n# floatも可\nstr2 = str(float1)\n```\n\n# まとめ\n\n大体覚えていますがとりあえずまとめて見ました。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-19T18:45:40+09:00', 'group': None, 'id': 'ab7e8cc3b5e36001590a', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Python', 'versions': []}, {'name': 'Python3', 'versions': []}, {'name': '文字列操作', 'versions': []}], 'title': 'Python 文字列操作チートシート', 'updated_at': '2018-11-20T08:36:58+09:00', 'url': 'https://qiita.com/ryuichi1208/items/ab7e8cc3b5e36001590a', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/51e4c33153ad7bb5c101091f4e3692a305c915a0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31333734373832352d663361332d303765662d373063372d3363353533333363666161662e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/51e4c33153ad7bb5c101091f4e3692a305c915a0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f31333734373832352d663361332d303765662d373063372d3363353533333363666161662e706e67" alt="ansible-282283.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/13747825-f3a3-07ef-70c7-3c55333cfaaf.png"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>RaspberryPiを2台をものの弾みで処分し再度購入しました。<br>\nその際に設定が面倒だしまたいつか処分して再購入する際に設定が発生する可能性があるので<br>\nせっかくなので自動化しておこうと思い使ってみました。</p>\n\n<p><a href="https://github.com/ansible/ansible" rel="nofollow noopener" target="_blank">ansible/ansible</a></p>\n\n<p>今回はインストールから動作確認までと概要を記載</p>\n\n<p>具体的な使用と実践は次回以降から記載していきます。</p>\n\n<p>書く予定のこと</p>\n\n<ul>\n<li>Ansible概要</li>\n<li>Ansibleを試す</li>\n<li>Ansibleの実践的な利用 (次回)</li>\n</ul>\n\n<h1>\n<span id="ansible" class="fragment"></span><a href="#ansible"><i class="fa fa-link"></i></a>Ansible？</h1>\n\n<blockquote>\n<p>Ansible（アンシブル）は、レッドハットが開発するオープンソースの構成管理ツールである。サーバを立ち上げる際、あらかじめ用意した設定ファイルに従って、ソフトウェアのインストールや設定を自動的に実行する事が出来る[1]。特に大規模なコンピュータ・クラスターを構築する時に、時間の短縮やミスの削減に有用である。構成管理に加え、オーケストレーションやソフトウェアデプロイメントの機能を持つ[2]。</p>\n</blockquote>\n\n<p><a href="https://ja.wikipedia.org/wiki/Ansible_(%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2)" rel="nofollow noopener" target="_blank">wiki</a>より引用</p>\n\n<p>ansibleは簡単に言えばサーバー構成自動化ツールです。<br>\n構成管理ツールといえばChef, Puppetを想像しますがその一角といった認識で間違いないはずです。<br>\n<em>Infrastructure as a Code</em>ってやつです</p>\n\n<p>Ansible は端的に言えば</p>\n\n<ul>\n<li>hostsファイル</li>\n<li>playbook</li>\n<li>モジュール</li>\n</ul>\n\n<p>の、3点で成り立っている。<br>\nちなみに読み方は「アンシブル」</p>\n\n<h1>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n\n<p>■Ansiblesサーバ<br>\nUbuntu(18.04)</p>\n\n<p>■Ansibleホスト<br>\nraspberry pi * 2</p>\n\n<p>AnsibleはSSH接続したサーバに対して、ミドルウェアのインストールや設定ファイルの更新を行うツールです。なのでsshはパス無し必須なので設定を行っておいてください。</p>\n\n<h1>\n<span id="導入手順" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>導入手順</h1>\n\n<h3>\n<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h3>\n\n<p>サーバに下記をインストール</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>apt <span class="nb">install</span> <span class="nt">-y</span> epel-release\n<span class="nv">$ </span>apt <span class="nb">install</span> <span class="nt">-y</span> ansible\n</pre></div></div>\n\n<p>インストールが正しく行われたかを確認<br>\n指定してホストへpingを実行する</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>ansible <span class="nt">--version</span>\nansible 2.7.2\n\n<span class="c"># SUCCESSが出ればインストールは成功</span>\n<span class="nv">$ </span>ansible <span class="nt">-m</span> ping 192.168.1.136\n192.168.1.136 | SUCCESS <span class="o">=&gt;</span> <span class="o">{</span>\n    <span class="s2">"changed"</span>: <span class="nb">false</span>,\n    <span class="s2">"ping"</span>: <span class="s2">"pong"</span>\n<span class="o">}</span>\n</pre></div></div>\n\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i INVENTORY</td>\n<td>インベントリファイルのパスを指定。デフォルトは「/etc/ansible/hosts」</td>\n</tr>\n<tr>\n<td>--help</td>\n<td>ansibleコマンドのヘルプを表示</td>\n</tr>\n<tr>\n<td>-m MODULE_NAME</td>\n<td>モジュールを指定</td>\n</tr>\n</tbody>\n</table>\n\n<p>モジュールはたくさんある。<br>\nよく使うのはここらへん</p>\n\n<ul>\n<li>file</li>\n<li>copy</li>\n<li>template</li>\n<li>service</li>\n<li>lineinfile</li>\n</ul>\n\n<h3>\n<span id="ディレクトリ構成" class="fragment"></span><a href="#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90"><i class="fa fa-link"></i></a>ディレクトリ構成</h3>\n\n<p>ベストプラクティスは公式より下記のようになっている<br>\n特別特殊なことをやりたい訳ではないのでとりあえずこちらを使用する</p>\n\n<p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html" class="autolink" rel="nofollow noopener" target="_blank">https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html</a></p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>playbooks\n├── development\n├── others.yml\n├── production\n├── roles\n│   ├── common\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── ntp.conf.j2\n│   └── nginx\n│       ├── handlers\n│       │   └── main.yml\n│       └── templates\n│           └── default.j2\n├── site.yml\n├── staging\n└── webservers.yml\n</pre></div></div>\n\n<h3>\n<span id="hostsを編集" class="fragment"></span><a href="#hosts%E3%82%92%E7%B7%A8%E9%9B%86"><i class="fa fa-link"></i></a>hostsを編集</h3>\n\n<p>今回使用するhostを記載する</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>[webservers]\nraspberrpi01\nraspberrpi02\n\n[dbservers]\nraspberrpi03\n</pre></div></div>\n\n<h3>\n<span id="playbookを編集" class="fragment"></span><a href="#playbook%E3%82%92%E7%B7%A8%E9%9B%86"><i class="fa fa-link"></i></a>Playbookを編集</h3>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>---\n- hosts: webservers\nroles:\n  - common\n  - webapp\n\n- hosts: dbservers\nroles:\n  - common\n  - db_middleware\n</pre></div></div>\n\n<h2>\n<span id="実際に使ってみる" class="fragment"></span><a href="#%E5%AE%9F%E9%9A%9B%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>実際に使ってみる</h2>\n\n<p>上まででとりあえず導入は完了。</p>\n\n<h1>\n<span id="参考url" class="fragment"></span><a href="#%E5%8F%82%E8%80%83url"><i class="fa fa-link"></i></a>参考URL</h1>\n\n<p><a href="http://www.dn-web64.com/archives/web/ansible_how_to_use/" rel="nofollow noopener" target="_blank">Ansibleの基本的な使い方</a></p>\n', 'body': '![ansible-282283.png](https://qiita-image-store.s3.amazonaws.com/0/258841/13747825-f3a3-07ef-70c7-3c55333cfaaf.png)\n\n# 背景\n\nRaspberryPiを2台をものの弾みで処分し再度購入しました。\nその際に設定が面倒だしまたいつか処分して再購入する際に設定が発生する可能性があるので\nせっかくなので自動化しておこうと思い使ってみました。\n\n[ansible/ansible](https://github.com/ansible/ansible)\n\n今回はインストールから動作確認までと概要を記載\n\n具体的な使用と実践は次回以降から記載していきます。\n\n書く予定のこと\n\n* Ansible概要\n* Ansibleを試す\n* Ansibleの実践的な利用 (次回)\n\n# Ansible？\n\n> Ansible（アンシブル）は、レッドハットが開発するオープンソースの構成管理ツールである。サーバを立ち上げる際、あらかじめ用意した設定ファイルに従って、ソフトウェアのインストールや設定を自動的に実行する事が出来る[1]。特に大規模なコンピュータ・クラスターを構築する時に、時間の短縮やミスの削減に有用である。構成管理に加え、オーケストレーションやソフトウェアデプロイメントの機能を持つ[2]。\n\n[wiki](https://ja.wikipedia.org/wiki/Ansible_(%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2))より引用\n\nansibleは簡単に言えばサーバー構成自動化ツールです。\n構成管理ツールといえばChef, Puppetを想像しますがその一角といった認識で間違いないはずです。\n_Infrastructure as a Code_ってやつです\n\nAnsible は端的に言えば\n\n* hostsファイル\n* playbook\n* モジュール\n\nの、3点で成り立っている。\nちなみに読み方は「アンシブル」\n\n# 環境\n\n■Ansiblesサーバ\nUbuntu(18.04)\n\n■Ansibleホスト\nraspberry pi * 2\n\nAnsibleはSSH接続したサーバに対して、ミドルウェアのインストールや設定ファイルの更新を行うツールです。なのでsshはパス無し必須なので設定を行っておいてください。\n\n# 導入手順\n\n### インストール\n\nサーバに下記をインストール\n\n``` bash\n$ apt install -y epel-release\n$ apt install -y ansible\n```\n\nインストールが正しく行われたかを確認\n指定してホストへpingを実行する\n\n``` bash\n$ ansible --version\nansible 2.7.2\n\n# SUCCESSが出ればインストールは成功\n$ ansible -m ping 192.168.1.136\n192.168.1.136 | SUCCESS => {\n    "changed": false,\n    "ping": "pong"\n}\n```\n\n|オプション|説明|\n----------|----\n|-i INVENTORY|インベントリファイルのパスを指定。デフォルトは「/etc/ansible/hosts」|\n|--help|ansibleコマンドのヘルプを表示|\n|-m MODULE_NAME|モジュールを指定|\n\nモジュールはたくさんある。\nよく使うのはここらへん\n\n* file\n* copy\n* template\n* service\n* lineinfile\n\n### ディレクトリ構成\n\nベストプラクティスは公式より下記のようになっている\n特別特殊なことをやりたい訳ではないのでとりあえずこちらを使用する\n\nhttps://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\n\n```\nplaybooks\n├── development\n├── others.yml\n├── production\n├── roles\n│   ├── common\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── ntp.conf.j2\n│   └── nginx\n│       ├── handlers\n│       │   └── main.yml\n│       └── templates\n│           └── default.j2\n├── site.yml\n├── staging\n└── webservers.yml\n```\n\n### hostsを編集\n\n今回使用するhostを記載する\n\n``` \n[webservers]\nraspberrpi01\nraspberrpi02\n\n[dbservers]\nraspberrpi03\n```\n\n### Playbookを編集\n\n```\n---\n- hosts: webservers\nroles:\n  - common\n  - webapp\n\n- hosts: dbservers\nroles:\n  - common\n  - db_middleware\n```\n\n## 実際に使ってみる\n\n上まででとりあえず導入は完了。\n\n# 参考URL\n\n[Ansibleの基本的な使い方](http://www.dn-web64.com/archives/web/ansible_how_to_use/)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-18T22:11:00+09:00', 'group': None, 'id': '60f958f5e49f92a37e7f', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'RaspberryPi', 'versions': []}, {'name': 'ツール', 'versions': []}, {'name': '自動化', 'versions': []}, {'name': 'Ansible', 'versions': []}], 'title': 'Ansibleでraspberry piの設定を自動化しよう [2.7対応]', 'updated_at': '2018-12-02T17:05:51+09:00', 'url': 'https://qiita.com/ryuichi1208/items/60f958f5e49f92a37e7f', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/8f11df07445d817eab461ed0d981f3d8c376e067/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66316266666263382d373536342d313831662d666332302d3932646434336539613337362e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/8f11df07445d817eab461ed0d981f3d8c376e067/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f66316266666263382d373536342d313831662d666332302d3932646434336539613337362e6a706567" alt="programing.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/f1bffbc8-7564-181f-fc20-92dd43e9a376.jpeg"></a></p>\n\n<h1>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h1>\n\n<p>待ち時間の暇つぶしにひたすら書いてみた。<br>\nネット情報の雑学なので間違い等あればご指摘ください。</p>\n\n<p>言語のリンクはwikiに行ってます。</p>\n\n<h2>\n<span id="アセンブラ-不明" class="fragment"></span><a href="#%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%A9-%E4%B8%8D%E6%98%8E"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E8%A8%80%E8%AA%9E" rel="nofollow noopener" target="_blank">アセンブラ</a> (不明)</h2>\n\n<p>CPUが理解できるマシン語用の言語。<br>\n低級言語。使ってる現場は見たことない</p>\n\n<h2>\n<span id="awk-1977年" class="fragment"></span><a href="#awk-1977%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/AWK" rel="nofollow noopener" target="_blank">AWK</a> (1977年)</h2>\n\n<p>スクリプト言語</p>\n\n<p>CSVやTSVだったりCLIでの結果加工用言語<br>\nシェル芸するときに重宝</p>\n\n<div class="code-frame" data-lang="awk">\n<div class="code-lang"><span class="bold">hello.awk</span></div>\n<div class="highlight"><pre><span class="c1">#!/usr/bin/awk -f</span>\n\n<span class="kr">BEGIN</span> <span class="p">{</span>\n  <span class="k">print</span> <span class="s2">"Hello World!"</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="bash-1988年" class="fragment"></span><a href="#bash-1988%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Bash" rel="nofollow noopener" target="_blank">Bash</a> (1988年)</h2>\n\n<p>スクリプト言語</p>\n\n<p>シェルに対しての操作をするための言語<br>\n無きゃ死ぬレベルで簡単に自動化できる。<br>\n最近だとWSLがあってwindowsでも使える。</p>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">hello.sh</span></div>\n<div class="highlight"><pre><span class="c">#!/bin/bash</span>\n\n<span class="nb">echo</span> <span class="s2">"Hello World!"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="basic-1964年" class="fragment"></span><a href="#basic-1964%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/BASIC" rel="nofollow noopener" target="_blank">BASIC</a> (1964年)</h2>\n\n<p>プログラミング入門言語(いつの時代)<br>\nベーマガが有名(BASICマガジン)<br>\n「初心者向け汎用記号命令コード(Beginner\'s All-purpose Symbolic Instruction Code)」で、<br>\nその頭文字をとってBASICと命名<br>\n高水準言語である。</p>\n\n<h2>\n<span id="c-1972年" class="fragment"></span><a href="#c-1972%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E" rel="nofollow noopener" target="_blank">C</a> (1972年)</h2>\n\n<p>言語の原点。手続き型言語<br>\nC言語を極めれば他の言語の習得は余裕になるらしい<br>\n極めるとは何をもって言えるのかは不明<br>\n組み込み/カーネル界隈では必須の言語</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">hello.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">args</span><span class="p">)</span> <span class="p">{</span>\n    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, world!</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="c-2000年" class="fragment"></span><a href="#c-2000%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/C_Sharp" rel="nofollow noopener" target="_blank">C#</a> (2000年)</h2>\n\n<p>構造化, 命令型, オブジェクト指向, 関数型, イベント駆動型, ジェネリック, リフレクション, 並行計算</p>\n\n<p>.NET Frameworkでの標準言語<br>\n割と新し目な言語でJavaやC++のいいとこどりな言語<br>\nUnityなどを使う人は習得必須の言語</p>\n\n<div class="code-frame" data-lang="c#">\n<div class="code-lang"><span class="bold">hello.cs</span></div>\n<div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>\n\n<span class="k">namespace</span> <span class="nn">Hello</span> <span class="p">{</span>\n  <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>\n    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>\n      <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="c-1983年" class="fragment"></span><a href="#c-1983%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/C%2B%2B" rel="nofollow noopener" target="_blank">C++</a> (1983年)</h2>\n\n<p>マルチパラダイム（手続き型プログラミング、データ抽象、オブジェクト指向プログラミング、ジェネリックプログラミングの組み合わせ）</p>\n\n<p>Cの登場以来10年後に開発された言語<br>\nC言語にオブジェクト指向を追加しさらにライブラリも豊富かつ処理も高速<br>\n見た目だけではCの上位互換っぽいが欠点もある<br>\nカーネル開発でC++を使わない理由について言及したMLは有名</p>\n\n<p><a href="https://cpplover.blogspot.com/2013/05/linus-torvalsc.html" class="autolink" rel="nofollow noopener" target="_blank">https://cpplover.blogspot.com/2013/05/linus-torvalsc.html</a></p>\n\n<div class="code-frame" data-lang="c++">\n<div class="code-lang"><span class="bold">hello.cpp</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="cobol-1959年" class="fragment"></span><a href="#cobol-1959%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/COBOL" rel="nofollow noopener" target="_blank">COBOL</a> (1959年)</h2>\n\n<p>金融系システムではいまだ健在<br>\n1行が80桁のコーディングスタイルはここから<br>\n正式名称はCommon Business Oriented Language</p>\n\n<p>以下は世界一有名といわれることもあるCOBOLで「Hello world!」を出力するプログラム</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>000010 IDENTIFICATION                   DIVISION.\n000020 PROGRAM-ID.                      SAMPLE-01.\n000030*\n000040 ENVIRONMENT                      DIVISION.\n000050*\n000060 DATA                             DIVISION.\n000070*\n000080 PROCEDURE                        DIVISION.\n000090 MAIN.\n000100     DISPLAY "Hello world!"  UPON CONSOLE.\n000110     STOP RUN.\n</pre></div></div>\n\n<h2>\n<span id="csh-1978年" class="fragment"></span><a href="#csh-1978%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/C_Shell" rel="nofollow noopener" target="_blank">csh</a> (1978年)</h2>\n\n<p>シェルスクリプトをC言語風に書くための言語<br>\nビルジョイっていうviを作った人が製作者の言語<br>\nUnixには標準で搭載</p>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">hello.sh</span></div>\n<div class="highlight"><pre><span class="c">#!/bin/csh -f</span>\n<span class="nb">echo</span> <span class="s2">"Hello World"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="d-2001年" class="fragment"></span><a href="#d-2001%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/D%E8%A8%80%E8%AA%9E" rel="nofollow noopener" target="_blank">D</a> (2001年)</h2>\n\n<p>C/C++のいいとこどり言語<br>\n言語レベルで単体テストをサポートしている<br>\nD言語くんはD言語知らない人でも聞いた事あるかも</p>\n\n<div class="code-frame" data-lang="D">\n<div class="code-lang"><span class="bold">hello.d</span></div>\n<div class="highlight"><pre><span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">stdio</span><span class="p">;</span>\n\n<span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>\n    <span class="n">writeln</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="dart-2011年" class="fragment"></span><a href="#dart-2011%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Dart" rel="nofollow noopener" target="_blank">Dart</a> (2011年)</h2>\n\n<p>オブジェクト指向</p>\n\n<p>サーバサイドでもフロントエンドでも使える言語<br>\n流行りそうで流行らない<br>\nJavaScriptとの共存/適材適所で選ばれる言語<br>\nインストールが手軽なので試してみる価値はあります</p>\n\n<div class="code-frame" data-lang="dart">\n<div class="code-lang"><span class="bold">hello.dart</span></div>\n<div class="highlight"><pre><span class="n">main</span><span class="o">()</span> <span class="o">{</span>\n  <span class="n">print</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">);</span>\n<span class="o">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="elixirエリクサー-2012年" class="fragment"></span><a href="#elixir%E3%82%A8%E3%83%AA%E3%82%AF%E3%82%B5%E3%83%BC-2012%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Elixir_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)" rel="nofollow noopener" target="_blank">Elixir(エリクサー)</a> (2012年)</h2>\n\n<p>Rubyっぽい関数型言語。並行処理の機能が特徴的。<br>\n資生堂のエリクシールではない。</p>\n\n<div class="code-frame" data-lang="elixir">\n<div class="code-lang"><span class="bold">hello.exs</span></div>\n<div class="highlight"><pre><span class="k">defmodule</span> <span class="no">Hello</span> <span class="k">do</span>\n\n    <span class="k">def</span> <span class="n">world</span> <span class="k">do</span>\n        <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="sd">"</span><span class="s2">Hello world"</span>\n    <span class="k">end</span>\n<span class="k">end</span>\n\n<span class="no">Hello</span><span class="o">.</span><span class="n">world</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="fortran-1957年" class="fragment"></span><a href="#fortran-1957%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/FORTRAN" rel="nofollow noopener" target="_blank">Fortran</a> (1957年)</h2>\n\n<p>手続き型・構造化・命令型・オブジェクト指向</p>\n\n<p>高水準言語の元祖！<br>\n大学の研究などではいまだに現役<br>\n教授の教授が引き継いだ言語がFortranでそこから引き継ぎって感じで<br>\n残っているらしいです。<br>\n数値計算のライブラリが豊富で乗り換えできないって声が多々聞こえます。<br>\n母校の大学でも使ってる研究室がある。</p>\n\n<div class="code-frame" data-lang="fortran">\n<div class="code-lang"><span class="bold">hello.f90</span></div>\n<div class="highlight"><pre><span class="k">program</span><span class="w"> </span><span class="n">hello</span><span class="w">\n  </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="s1">\'Hello World!\'</span><span class="w">\n</span><span class="k">end</span><span class="w"> </span><span class="k">program</span><span class="w"> </span><span class="n">hello</span><span class="w">\n</span></pre></div>\n</div>\n\n<h2>\n<span id="go-2009年" class="fragment"></span><a href="#go-2009%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Go_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)" rel="nofollow noopener" target="_blank">Go</a> (2009年)</h2>\n\n<p>コンパイラ型言語、構造化プログラミング、手続き型プログラミング、命令型プログラミング、並行計算、マルチパラダイムプログラミング</p>\n\n<p>処理速度、学習コストの低さ、豊富なライブラリ！<br>\n現在流れが来てる言語といった感じでしょうか。<br>\nDockerなどもGoで書かれています。<br>\nメインはWebサーバー・アプリケーションの開発でしょう。</p>\n\n<div class="code-frame" data-lang="go">\n<div class="code-lang"><span class="bold">hello.go</span></div>\n<div class="highlight"><pre><span class="k">package</span><span class="x"> </span><span class="n">main</span><span class="x">\n\n</span><span class="k">import</span><span class="x"> </span><span class="s">"fmt"</span><span class="x">\n\n</span><span class="k">func</span><span class="x"> </span><span class="n">main</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">\n  </span><span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Hello world</span><span class="se">\\n</span><span class="s">"</span><span class="p">)</span><span class="x">\n</span><span class="p">}</span><span class="x">\n</span></pre></div>\n</div>\n\n<h2>\n<span id="haskell-1990年" class="fragment"></span><a href="#haskell-1990%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Haskell" rel="nofollow noopener" target="_blank">Haskell</a> (1990年)</h2>\n\n<p>純粋関数言語。<br>\n全ての式や関数が副作用を持たないのが特徴<br>\n上級者向け言語。いつか入門したいです。</p>\n\n<div class="code-frame" data-lang="haskell">\n<div class="code-lang"><span class="bold">hello.hs</span></div>\n<div class="highlight"><pre><span class="n">main</span> <span class="o">=</span> <span class="n">putStrLn</span> <span class="s">"Hello World!"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="java-1995年" class="fragment"></span><a href="#java-1995%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Java" rel="nofollow noopener" target="_blank">Java</a> (1995年)</h2>\n\n<p>オブジェクト指向・構造化・手続き型</p>\n\n<p>あらゆる業界からの人気No.1言語。<br>\n業務系アプリやwebアプリ、モバイルアプリまで色々用途があります。<br>\n入門するならとりあえずこれから始めておけばご飯は食べてけます。<br>\n衰退傾向にあるらしいですがまだまだしばらくは需要があることは間違いないでしょう。</p>\n\n<p>Write once, run anywhere。OS依存がほぼない言語</p>\n\n<div class="code-frame" data-lang="Hello.java">\n<div class="code-lang"><span class="bold">java</span></div>\n<div class="highlight"><pre>public class Hello{\n   public static void main(String[] args){\n     System.out.println("Hello World!!");\n   }\n}\n</pre></div>\n</div>\n\n<h2>\n<span id="javascript-1995年" class="fragment"></span><a href="#javascript-1995%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/JavaScript" rel="nofollow noopener" target="_blank">JavaScript</a> (1995年)</h2>\n\n<p>マルチパラダイム</p>\n\n<p>フロント/サーバサイドどっちもこなす優等生。<br>\nテキストエディタとwebブラウザのみで開発を進められるのでホントの初心者からしたら大変ありがたいうえに上級者にも使われるため学習価値はとても高い</p>\n\n<h2>\n<span id="julia-2012年" class="fragment"></span><a href="#julia-2012%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Julia_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)" rel="nofollow noopener" target="_blank">Julia</a> (2012年)</h2>\n\n<p>手続き型プログラミング, 多重ディスパッチ, 関数型言語, メタプログラミング</p>\n\n<p>科学技術系の計算言語。<br>\nPythonやRの対抗馬。<br>\nスクリプト言語かつコンパイル言語でもある</p>\n\n<div class="code-frame" data-lang="julia">\n<div class="code-lang"><span class="bold">hello.jl</span></div>\n<div class="highlight"><pre><span class="n">println</span><span class="x">(</span><span class="s">"Hello World"</span><span class="x">)</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="kotlin-2011年" class="fragment"></span><a href="#kotlin-2011%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Kotlin" rel="nofollow noopener" target="_blank">Kotlin</a> (2011年)</h2>\n\n<p>オブジェクト指向</p>\n\n<p>Androidアプリの開発言語として注目されている。<br>\nScalaのライバル的な感じ。最近だと大分リードしている。<br>\n今後注目の言語です。</p>\n\n<div class="code-frame" data-lang="kotlin"><div class="highlight"><pre><span class="k">fun</span> <span class="n">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span><span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>\n    <span class="n">println</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">)</span>\n<span class="p">}</span>\n</pre></div></div>\n\n<h2>\n<span id="lisp-1958年" class="fragment"></span><a href="#lisp-1958%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/LISP" rel="nofollow noopener" target="_blank">Lisp</a> (1958年)</h2>\n\n<p>マルチパラダイム、関数型、手続き型、自己言及、メタ</p>\n\n<p>名言集は読んでおくべき<br>\n<a href="http://www.geekpage.jp/blog/?id=2007/8/21" class="autolink" rel="nofollow noopener" target="_blank">http://www.geekpage.jp/blog/?id=2007/8/21</a></p>\n\n<h2>\n<span id="nim-2008年" class="fragment"></span><a href="#nim-2008%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Nim" rel="nofollow noopener" target="_blank">Nim</a> (2008年)</h2>\n\n<p>マルチパラダイム: コンパイル言語、並行プログラミング言語、手続き型、命令型、オブジェクト指向</p>\n\n<p>説明省きます。<br>\nこの記事をぜひ読んでください。とても面白い</p>\n\n<p><a href="https://qiita.com/tlllune/items/4aafa56818c3c814939f" id="reference-dd6d263ed6ac5792fd06">全ての開発者が学ぶべき1つのNim</a></p>\n\n<div class="code-frame" data-lang="hello.nim">\n<div class="code-lang"><span class="bold">nim</span></div>\n<div class="highlight"><pre>stdout.write("hello, world")\n</pre></div>\n</div>\n\n<h2>\n<span id="objective-c-1983年" class="fragment"></span><a href="#objective-c-1983%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Objective-C" rel="nofollow noopener" target="_blank">Objective-C</a> (1983年)</h2>\n\n<p>オブジェクト指向プログラミング</p>\n\n<p>iOS/macOSの開発言語<br>\nCライクな言語というよりCをそのまま使える言語<br>\nswiftが出て人気は減ってきているが地方の業務系iOSアプリ案件では<br>\nいまだに根強い人気がある(swiftエンジニアの育成ができていないだけ？)</p>\n\n<div class="code-frame" data-lang="objective-c">\n<div class="code-lang"><span class="bold">main.m</span></div>\n<div class="highlight"><pre><span class="cp">#import &lt;Foundation/Foundation.h&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>\n<span class="p">{</span>\n\n    <span class="err">@autoreleasepool</span> <span class="p">{</span>\n\n        <span class="c1">// insert code here...</span>\n        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Hello, World!"</span><span class="p">);</span>\n\n    <span class="p">}</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="pascal-1970年" class="fragment"></span><a href="#pascal-1970%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Pascal" rel="nofollow noopener" target="_blank">Pascal</a> (1970年)</h2>\n\n<p>命令型、構造化プログラミング</p>\n\n<p>教育用の入門言語<br>\nアルゴリズムの学習などに最適で構造化言語といった呼び方もされる</p>\n\n<div class="code-frame" data-lang="pascal">\n<div class="code-lang"><span class="bold">hello.pas</span></div>\n<div class="highlight"><pre><span class="k">program</span> <span class="n">hello</span><span class="p">;</span>\n<span class="k">begin</span>\n    <span class="k">writeln</span><span class="p">(</span> <span class="s">\'Hello World!\'</span> <span class="p">);</span>\n<span class="k">end</span><span class="p">.</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="perl-1987年" class="fragment"></span><a href="#perl-1987%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Perl" rel="nofollow noopener" target="_blank">Perl</a> (1987年)</h2>\n\n<p>マルチパラダイム</p>\n\n<p>CGI時代に一世を風靡した言語<br>\n保守案件がメインだがテキスト整形においてはいまだに強い人気がある<br>\n可読性がとても低いことで有名</p>\n\n<p>こんな名言もある<br>\n<strong>Perlは、スキルがあるが、性格の歪んだプロフェッショナルによって創られた、巨大で陰湿な悪である。</strong></p>\n\n<div class="code-frame" data-lang="perl">\n<div class="code-lang"><span class="bold">hello.pl</span></div>\n<div class="highlight"><pre><span class="k">print</span> <span class="s">"Hello World!"</span><span class="p">;</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="php-1995年" class="fragment"></span><a href="#php-1995%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/PHP_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)" rel="nofollow noopener" target="_blank">PHP</a> (1995年)</h2>\n\n<p>命令型プログラミング</p>\n\n<p>豊富なフレームワーク＆学習コストの低さ＆環境構築の容易さで入門向け言語<br>\nHTMLソースに埋め込んで使えるのも魅力的な言語です。</p>\n\n<p>案件数もいまだに多い印象。バージョンアップで後方互換性が無くなることもあり<br>\n移行案件が多いのも事実。(東京の事情は分かりません。。。)</p>\n\n<div class="code-frame" data-lang="php">\n<div class="code-lang"><span class="bold">hello.php</span></div>\n<div class="highlight"><pre><span class="k">echo</span> <span class="s2">"Hello World"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="python-1991年" class="fragment"></span><a href="#python-1991%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Python" rel="nofollow noopener" target="_blank">Python</a> (1991年)</h2>\n\n<p>オブジェクト指向、命令型、手続き型、関数型</p>\n\n<p>Webアプリから人工知能、CLIでの簡単なツールまで何でもいけます。<br>\n学習コストが大変低くかつ豊富なライブラリで非エンジニアの方でも事務処理を自動化したなんて話をよく聞きます。ブラウザ操作やexcelの自動入力なんかも簡単にできます。<br>\n本格的人工知能なんかもいけるようです。</p>\n\n<p>ただ適材適所という言葉あるように何でもPythonでやるのはエンジニアとしての視野が狭くなるのでお勧めできません。</p>\n\n<div class="code-frame" data-lang="python">\n<div class="code-lang"><span class="bold">hello.py</span></div>\n<div class="highlight"><pre><span class="k">print</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">)</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="r-1995年" class="fragment"></span><a href="#r-1995%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/R%E8%A8%80%E8%AA%9E" rel="nofollow noopener" target="_blank">R</a> (1995年)</h2>\n\n<p>マルチパラダイム 関数型 オブジェクト指向 命令型</p>\n\n<p>データ分析やデータの可視化などに一躍買っている。<br>\nデータサイエンティストを目指すなら習得必須の言語。</p>\n\n<div class="code-frame" data-lang="r">\n<div class="code-lang"><span class="bold">hello.R</span></div>\n<div class="highlight"><pre><span class="n">print</span><span class="p">(</span><span class="s2">"Hello world"</span><span class="p">)</span><span class="w">\n</span></pre></div>\n</div>\n\n<h2>\n<span id="ruby-1995年" class="fragment"></span><a href="#ruby-1995%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Ruby" rel="nofollow noopener" target="_blank">Ruby</a> (1995年)</h2>\n\n<p>構造化、命令型、オブジェクト指向</p>\n\n<p>プログラミングを楽しむための言語。<br>\n作者は日本人の<a href="https://twitter.com/yukihiro_matz" rel="nofollow noopener" target="_blank">Yukihiro Matsumoto</a>さん。<br>\n若手エンジニア向けの講演は大変心に響きます。</p>\n\n<p>フレームRuby on Railsはweb業界の入門に個人的には適していると思う。<br>\n純粋なオブジェクト指向言語である。</p>\n\n<div class="code-frame" data-lang="ruby">\n<div class="code-lang"><span class="bold">hello.rb</span></div>\n<div class="highlight"><pre><span class="nb">print</span> <span class="s2">"hello world!"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="rust-2010年" class="fragment"></span><a href="#rust-2010%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Rust_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)" rel="nofollow noopener" target="_blank">Rust</a> (2010年)</h2>\n\n<p>コンパイラ型言語、システムプログラミング言語、マルチパラダイムプログラミング、関数型言語、オブジェクト指向プログラミング</p>\n\n<p>安全で高速な汎用言語<br>\nC言語風の制御構造が特徴的</p>\n\n<p>公式ドキュメントのレイアウトが個人的に好きです。<br>\n<a href="https://doc.rust-lang.org/stable/reference/notation.html" class="autolink" rel="nofollow noopener" target="_blank">https://doc.rust-lang.org/stable/reference/notation.html</a></p>\n\n<div class="code-frame" data-lang="rust">\n<div class="code-lang"><span class="bold">hello.rs</span></div>\n<div class="highlight"><pre><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>\n    <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="scala-2003年" class="fragment"></span><a href="#scala-2003%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Scala" rel="nofollow noopener" target="_blank">Scala</a> (2003年)</h2>\n\n<p>オブジェクト指向言語、関数型言語</p>\n\n<p>Javaからのスキルアップに最適な言語<br>\n関数型とオブジェクト指向型の二刀流。<br>\nインタプリタも備えており対話的にCLIからも使える。<br>\nちなみにJavaも最近JShellなるもので同様なことができる。</p>\n\n<div class="code-frame" data-lang="scala">\n<div class="code-lang"><span class="bold">hello.scala</span></div>\n<div class="highlight"><pre><span class="k">object</span> <span class="nc">hello</span> <span class="o">{</span>\n  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">:</span><span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>\n    <span class="n">println</span><span class="o">(</span><span class="s">"Hello World"</span><span class="o">)</span>\n  <span class="o">}</span>\n<span class="o">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id="sed-1973年" class="fragment"></span><a href="#sed-1973%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Sed_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)" rel="nofollow noopener" target="_blank">sed</a> (1973年)</h2>\n\n<p>スクリプト言語</p>\n\n<p>テキスト成型言語<br>\nシェル芸/ワンライナーをやるなら習得必須<br>\n正直awkだけでも良いが可読性重視するときは使い分けが必要</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> | <span class="nb">sed</span> <span class="s1">\'s/.*/Hello World!/\'</span>\n</pre></div></div>\n\n<h2>\n<span id="smalltalk-1972" class="fragment"></span><a href="#smalltalk-1972"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Smalltalk" rel="nofollow noopener" target="_blank">Smalltalk</a> (1972)</h2>\n\n<p>オブジェクト指向言語</p>\n\n<p>オブジェクト指向言語の元祖！<br>\nその他オブジェクト指向言語に大きな影響を与えた言語</p>\n\n<h2>\n<span id="sql-1976年" class="fragment"></span><a href="#sql-1976%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/SQL" rel="nofollow noopener" target="_blank">SQL</a> (1976年)</h2>\n\n<p>色褪せないデータベース操作言語。<br>\nNoSQLが出てきて大分勢いありますが正直消えることはないでしょう。<br>\nベンダー毎に全く違う拡張性を持つので都度学習が必要だが<br>\n一つ習得しておけばあとは応用のみなので何か一つ学習する必要はある。</p>\n\n<h2>\n<span id="swift-2014年" class="fragment"></span><a href="#swift-2014%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Swift_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)" rel="nofollow noopener" target="_blank">Swift</a> (2014年)</h2>\n\n<p>関数型言語、命令型プログラミング、オブジェクト指向プログラミング</p>\n\n<p>Apple推しの最新言語<br>\niOSアプリを作るなら習得必須言語で学習がすぐに画面に出るので<br>\n学習のモチベーションも保ちやすい。<br>\nバージョン変更で大分互換性が無くなる。</p>\n\n<h2>\n<span id="typescript-2012年" class="fragment"></span><a href="#typescript-2012%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/TypeScript" rel="nofollow noopener" target="_blank">Typescript</a> (2012年)</h2>\n\n<p>マルチパラダイム : スクリプト、オブジェクト指向、構造化、命令型、関数型、ジェネリック<br>\nMicrosoft製の言語。Javascriptへ変換するための中間言語。<br>\nHaxeと比較される。</p>\n\n<h2>\n<span id="visual-basic-2001年" class="fragment"></span><a href="#visual-basic-2001%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Microsoft_Visual_Basic#Visual_Basic_%E8%A8%80%E8%AA%9E%E3%81%8C%E6%8E%A1%E7%94%A8%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E7%92%B0%E5%A2%83" rel="nofollow noopener" target="_blank">Visual Basic</a> (2001年)</h2>\n\n<p>Windows業務アプリでの必須言語<br>\n今でも現役バリバリの言語<br>\nマイクロソフト社作</p>\n\n<h2>\n<span id="whitespace-2003年" class="fragment"></span><a href="#whitespace-2003%E5%B9%B4"><i class="fa fa-link"></i></a><a href="https://ja.wikipedia.org/wiki/Whitespace" rel="nofollow noopener" target="_blank">Whitespace</a> (2003年)</h2>\n\n<p>スペース/タブ/改行のみで構成されている言語<br>\n所謂「難解プログラミング言語」ってやつ<br>\n使ってる人は見たことないがヒープやスタックといった学習にはいいかもしれな(嘘です)</p>\n', 'body': '![programing.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/f1bffbc8-7564-181f-fc20-92dd43e9a376.jpeg)\n\n# 概要\n\n待ち時間の暇つぶしにひたすら書いてみた。\nネット情報の雑学なので間違い等あればご指摘ください。\n\n言語のリンクはwikiに行ってます。\n\n## [アセンブラ](https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E8%A8%80%E8%AA%9E) (不明)\n\nCPUが理解できるマシン語用の言語。\n低級言語。使ってる現場は見たことない\n\n## [AWK](https://ja.wikipedia.org/wiki/AWK) (1977年)\n\nスクリプト言語\n\nCSVやTSVだったりCLIでの結果加工用言語\nシェル芸するときに重宝\n\n``` awk:hello.awk\n#!/usr/bin/awk -f\n\nBEGIN {\n  print "Hello World!"\n}\n```\n\n## [Bash](https://ja.wikipedia.org/wiki/Bash) (1988年)\n\nスクリプト言語\n\nシェルに対しての操作をするための言語\n無きゃ死ぬレベルで簡単に自動化できる。\n最近だとWSLがあってwindowsでも使える。\n\n``` bash:hello.sh\n#!/bin/bash\n\necho "Hello World!"\n```\n\n## [BASIC](https://ja.wikipedia.org/wiki/BASIC) (1964年)\n\nプログラミング入門言語(いつの時代)\nベーマガが有名(BASICマガジン)\n「初心者向け汎用記号命令コード(Beginner\'s All-purpose Symbolic Instruction Code)」で、\nその頭文字をとってBASICと命名\n高水準言語である。\n\n## [C](https://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E) (1972年)\n\n言語の原点。手続き型言語\nC言語を極めれば他の言語の習得は余裕になるらしい\n極めるとは何をもって言えるのかは不明\n組み込み/カーネル界隈では必須の言語\n\n``` c:hello.c\n#include <stdio.h>\n\nint main(int argc, char **args) {\n    printf("Hello, world!\\n");\n    return 0;\n}\n```\n\n## [C#](https://ja.wikipedia.org/wiki/C_Sharp) (2000年)\n\n構造化, 命令型, オブジェクト指向, 関数型, イベント駆動型, ジェネリック, リフレクション, 並行計算\n\n.NET Frameworkでの標準言語\n割と新し目な言語でJavaやC++のいいとこどりな言語\nUnityなどを使う人は習得必須の言語\n\n``` c#:hello.cs\nusing System;\n\nnamespace Hello {\n  class Program {\n    static void Main(string[] args) {\n      Console.WriteLine("Hello, World!");\n    }\n  }\n}\n```\n\n## [C++](https://ja.wikipedia.org/wiki/C%2B%2B) (1983年)\n\nマルチパラダイム（手続き型プログラミング、データ抽象、オブジェクト指向プログラミング、ジェネリックプログラミングの組み合わせ）\n\nCの登場以来10年後に開発された言語\nC言語にオブジェクト指向を追加しさらにライブラリも豊富かつ処理も高速\n見た目だけではCの上位互換っぽいが欠点もある\nカーネル開発でC++を使わない理由について言及したMLは有名\n\nhttps://cpplover.blogspot.com/2013/05/linus-torvalsc.html\n\n``` c++:hello.cpp\n#include <iostream>\n\nint main() {\n    std::cout << "Hello World!" << std::endl;\n    return 0;\n}\n```\n\n## [COBOL](https://ja.wikipedia.org/wiki/COBOL) (1959年)\n\n金融系システムではいまだ健在\n1行が80桁のコーディングスタイルはここから\n正式名称はCommon Business Oriented Language\n\n以下は世界一有名といわれることもあるCOBOLで「Hello world!」を出力するプログラム\n\n```\n000010 IDENTIFICATION                   DIVISION.\n000020 PROGRAM-ID.                      SAMPLE-01.\n000030*\n000040 ENVIRONMENT                      DIVISION.\n000050*\n000060 DATA                             DIVISION.\n000070*\n000080 PROCEDURE                        DIVISION.\n000090 MAIN.\n000100     DISPLAY "Hello world!"  UPON CONSOLE.\n000110     STOP RUN.\n```\n\n## [csh](https://ja.wikipedia.org/wiki/C_Shell) (1978年)\n\nシェルスクリプトをC言語風に書くための言語\nビルジョイっていうviを作った人が製作者の言語\nUnixには標準で搭載\n\n``` bash:hello.sh\n#!/bin/csh -f\necho "Hello World"\n```\n\n## [D](https://ja.wikipedia.org/wiki/D%E8%A8%80%E8%AA%9E) (2001年)\n\nC/C++のいいとこどり言語\n言語レベルで単体テストをサポートしている\nD言語くんはD言語知らない人でも聞いた事あるかも\n\n``` D:hello.d\nimport std.stdio;\n\nvoid main() {\n    writeln("Hello World!");\n}\n```\n\n## [Dart](https://ja.wikipedia.org/wiki/Dart) (2011年)\n\nオブジェクト指向\n\nサーバサイドでもフロントエンドでも使える言語\n流行りそうで流行らない\nJavaScriptとの共存/適材適所で選ばれる言語\nインストールが手軽なので試してみる価値はあります\n\n``` dart:hello.dart\nmain() {\n  print("Hello World!");\n}\n```\n\n## [Elixir(エリクサー)](https://ja.wikipedia.org/wiki/Elixir_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)) (2012年)\n\nRubyっぽい関数型言語。並行処理の機能が特徴的。\n資生堂のエリクシールではない。\n\n``` elixir:hello.exs\ndefmodule Hello do\n\n    def world do\n        IO.puts "Hello world"\n    end\nend\n\nHello.world\n```\n\n## [Fortran](https://ja.wikipedia.org/wiki/FORTRAN) (1957年)\n\n手続き型・構造化・命令型・オブジェクト指向\n\n高水準言語の元祖！\n大学の研究などではいまだに現役\n教授の教授が引き継いだ言語がFortranでそこから引き継ぎって感じで\n残っているらしいです。\n数値計算のライブラリが豊富で乗り換えできないって声が多々聞こえます。\n母校の大学でも使ってる研究室がある。\n\n``` fortran:hello.f90\nprogram hello\n  print *, \'Hello World!\'\nend program hello\n```\n\n## [Go](https://ja.wikipedia.org/wiki/Go_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)) (2009年)\n\nコンパイラ型言語、構造化プログラミング、手続き型プログラミング、命令型プログラミング、並行計算、マルチパラダイムプログラミング\n\n処理速度、学習コストの低さ、豊富なライブラリ！\n現在流れが来てる言語といった感じでしょうか。\nDockerなどもGoで書かれています。\nメインはWebサーバー・アプリケーションの開発でしょう。\n\n``` go:hello.go\npackage main\n\nimport "fmt"\n\nfunc main() {\n  fmt.Printf("Hello world\\n")\n}\n```\n\n## [Haskell](https://ja.wikipedia.org/wiki/Haskell) (1990年)\n\n純粋関数言語。\n全ての式や関数が副作用を持たないのが特徴\n上級者向け言語。いつか入門したいです。\n\n``` haskell:hello.hs\nmain = putStrLn "Hello World!"\n```\n\n## [Java](https://ja.wikipedia.org/wiki/Java) (1995年)\n\nオブジェクト指向・構造化・手続き型\n\nあらゆる業界からの人気No.1言語。\n業務系アプリやwebアプリ、モバイルアプリまで色々用途があります。\n入門するならとりあえずこれから始めておけばご飯は食べてけます。\n衰退傾向にあるらしいですがまだまだしばらくは需要があることは間違いないでしょう。\n\nWrite once, run anywhere。OS依存がほぼない言語\n\n``` Hello.java:java\npublic class Hello{\n   public static void main(String[] args){\n     System.out.println("Hello World!!");\n   }\n}\n```\n\n## [JavaScript](https://ja.wikipedia.org/wiki/JavaScript) (1995年)\n\nマルチパラダイム\n\nフロント/サーバサイドどっちもこなす優等生。\nテキストエディタとwebブラウザのみで開発を進められるのでホントの初心者からしたら大変ありがたいうえに上級者にも使われるため学習価値はとても高い\n\n## [Julia](https://ja.wikipedia.org/wiki/Julia_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)) (2012年)\n\n手続き型プログラミング, 多重ディスパッチ, 関数型言語, メタプログラミング\n\n科学技術系の計算言語。\nPythonやRの対抗馬。\nスクリプト言語かつコンパイル言語でもある\n\n``` julia:hello.jl\nprintln("Hello World")\n```\n\n## [Kotlin](https://ja.wikipedia.org/wiki/Kotlin) (2011年)\n\nオブジェクト指向\n\nAndroidアプリの開発言語として注目されている。\nScalaのライバル的な感じ。最近だと大分リードしている。\n今後注目の言語です。\n\n``` kotlin\nfun main(args:Array<String>) {\n    println("Hello World!")\n}\n```\n\n## [Lisp](https://ja.wikipedia.org/wiki/LISP) (1958年)\n\nマルチパラダイム、関数型、手続き型、自己言及、メタ\n\n名言集は読んでおくべき\nhttp://www.geekpage.jp/blog/?id=2007/8/21\n\n## [Nim](https://ja.wikipedia.org/wiki/Nim) (2008年)\n\nマルチパラダイム: コンパイル言語、並行プログラミング言語、手続き型、命令型、オブジェクト指向\n\n説明省きます。\nこの記事をぜひ読んでください。とても面白い\n\n[全ての開発者が学ぶべき1つのNim](https://qiita.com/tlllune/items/4aafa56818c3c814939f)\n\n``` hello.nim:nim\nstdout.write("hello, world")\n```\n\n## [Objective-C](https://ja.wikipedia.org/wiki/Objective-C) (1983年)\n\nオブジェクト指向プログラミング\n\niOS/macOSの開発言語\nCライクな言語というよりCをそのまま使える言語\nswiftが出て人気は減ってきているが地方の業務系iOSアプリ案件では\nいまだに根強い人気がある(swiftエンジニアの育成ができていないだけ？)\n\n``` objective-c:main.m\n#import <Foundation/Foundation.h>\n \nint main(int argc, const char * argv[])\n{\n \n    @autoreleasepool {\n \n        // insert code here...\n        NSLog(@"Hello, World!");\n \n    }\n    return 0;\n}\n```\n\n## [Pascal](https://ja.wikipedia.org/wiki/Pascal) (1970年)\n\n命令型、構造化プログラミング\n\n教育用の入門言語\nアルゴリズムの学習などに最適で構造化言語といった呼び方もされる\n\n``` pascal:hello.pas\nprogram hello;\nbegin\n    writeln( \'Hello World!\' );\nend.\n```\n\n## [Perl](https://ja.wikipedia.org/wiki/Perl) (1987年)\n\nマルチパラダイム\n\nCGI時代に一世を風靡した言語\n保守案件がメインだがテキスト整形においてはいまだに強い人気がある\n可読性がとても低いことで有名\n\nこんな名言もある\n__Perlは、スキルがあるが、性格の歪んだプロフェッショナルによって創られた、巨大で陰湿な悪である。__\n\n``` perl:hello.pl\nprint "Hello World!";\n```\n\n## [PHP](https://ja.wikipedia.org/wiki/PHP_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)) (1995年)\n\n命令型プログラミング\n\n豊富なフレームワーク＆学習コストの低さ＆環境構築の容易さで入門向け言語\nHTMLソースに埋め込んで使えるのも魅力的な言語です。\n\n案件数もいまだに多い印象。バージョンアップで後方互換性が無くなることもあり\n移行案件が多いのも事実。(東京の事情は分かりません。。。)\n\n``` php:hello.php\necho "Hello World"\n```\n\n## [Python](https://ja.wikipedia.org/wiki/Python) (1991年)\n\nオブジェクト指向、命令型、手続き型、関数型\n\nWebアプリから人工知能、CLIでの簡単なツールまで何でもいけます。\n学習コストが大変低くかつ豊富なライブラリで非エンジニアの方でも事務処理を自動化したなんて話をよく聞きます。ブラウザ操作やexcelの自動入力なんかも簡単にできます。\n本格的人工知能なんかもいけるようです。\n\nただ適材適所という言葉あるように何でもPythonでやるのはエンジニアとしての視野が狭くなるのでお勧めできません。\n\n``` python:hello.py\nprint("Hello World!")\n```\n\n## [R](https://ja.wikipedia.org/wiki/R%E8%A8%80%E8%AA%9E) (1995年)\n\nマルチパラダイム 関数型 オブジェクト指向 命令型\n\nデータ分析やデータの可視化などに一躍買っている。\nデータサイエンティストを目指すなら習得必須の言語。\n\n``` r:hello.R\nprint("Hello world")\n```\n\n## [Ruby](https://ja.wikipedia.org/wiki/Ruby) (1995年)\n\n構造化、命令型、オブジェクト指向\n\nプログラミングを楽しむための言語。\n作者は日本人の[Yukihiro Matsumoto](https://twitter.com/yukihiro_matz)さん。\n若手エンジニア向けの講演は大変心に響きます。\n\nフレームRuby on Railsはweb業界の入門に個人的には適していると思う。\n純粋なオブジェクト指向言語である。\n\n``` ruby:hello.rb\nprint "hello world!"\n```\n\n## [Rust](https://ja.wikipedia.org/wiki/Rust_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)) (2010年)\n\nコンパイラ型言語、システムプログラミング言語、マルチパラダイムプログラミング、関数型言語、オブジェクト指向プログラミング\n\n安全で高速な汎用言語\nC言語風の制御構造が特徴的\n\n公式ドキュメントのレイアウトが個人的に好きです。\nhttps://doc.rust-lang.org/stable/reference/notation.html\n\n``` rust:hello.rs\nfn main() {\n    println!("Hello World!");\n}\n```\n\n## [Scala](https://ja.wikipedia.org/wiki/Scala) (2003年)\n\nオブジェクト指向言語、関数型言語\n\nJavaからのスキルアップに最適な言語\n関数型とオブジェクト指向型の二刀流。\nインタプリタも備えており対話的にCLIからも使える。\nちなみにJavaも最近JShellなるもので同様なことができる。\n\n``` scala:hello.scala\nobject hello {\n  def main(args: Array[String]) :Unit = {\n    println("Hello World")\n  }\n}\n```\n\n## [sed](https://ja.wikipedia.org/wiki/Sed_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)) (1973年)\n\nスクリプト言語\n\nテキスト成型言語\nシェル芸/ワンライナーをやるなら習得必須\n正直awkだけでも良いが可読性重視するときは使い分けが必要\n\n``` bash\n$ echo | sed \'s/.*/Hello World!/\'\n```\n\n## [Smalltalk](https://ja.wikipedia.org/wiki/Smalltalk) (1972)\n\nオブジェクト指向言語\n\nオブジェクト指向言語の元祖！\nその他オブジェクト指向言語に大きな影響を与えた言語\n\n## [SQL](https://ja.wikipedia.org/wiki/SQL) (1976年)\n\n色褪せないデータベース操作言語。\nNoSQLが出てきて大分勢いありますが正直消えることはないでしょう。\nベンダー毎に全く違う拡張性を持つので都度学習が必要だが\n一つ習得しておけばあとは応用のみなので何か一つ学習する必要はある。\n\n## [Swift](https://ja.wikipedia.org/wiki/Swift_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)) (2014年)\n\n関数型言語、命令型プログラミング、オブジェクト指向プログラミング\n\nApple推しの最新言語\niOSアプリを作るなら習得必須言語で学習がすぐに画面に出るので\n学習のモチベーションも保ちやすい。\nバージョン変更で大分互換性が無くなる。\n\n## [Typescript](https://ja.wikipedia.org/wiki/TypeScript) (2012年)\n\nマルチパラダイム : スクリプト、オブジェクト指向、構造化、命令型、関数型、ジェネリック\nMicrosoft製の言語。Javascriptへ変換するための中間言語。\nHaxeと比較される。\n\n## [Visual Basic](https://ja.wikipedia.org/wiki/Microsoft_Visual_Basic#Visual_Basic_%E8%A8%80%E8%AA%9E%E3%81%8C%E6%8E%A1%E7%94%A8%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E7%92%B0%E5%A2%83) (2001年)\n\nWindows業務アプリでの必須言語\n今でも現役バリバリの言語\nマイクロソフト社作\n\n## [Whitespace](https://ja.wikipedia.org/wiki/Whitespace) (2003年)\n\nスペース/タブ/改行のみで構成されている言語\n所謂「難解プログラミング言語」ってやつ\n使ってる人は見たことないがヒープやスタックといった学習にはいいかもしれな(嘘です)\n', 'coediting': False, 'comments_count': 15, 'created_at': '2018-11-16T22:56:59+09:00', 'group': None, 'id': 'cecd868dfa53c9808777', 'likes_count': 310, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Java', 'versions': []}, {'name': 'Python', 'versions': []}, {'name': 'JavaScript', 'versions': []}, {'name': 'Haskell', 'versions': []}, {'name': 'Go', 'versions': []}], 'title': '[初心者向け]流行りのプログラミング言語の一言概要(2018年版)', 'updated_at': '2018-11-26T09:12:00+09:00', 'url': 'https://qiita.com/ryuichi1208/items/cecd868dfa53c9808777', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/cb48f12d8f7a8859211fd91870e4e75c20dceef5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65313432613237652d303338642d306232322d313062652d3437356661663865646562322e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/cb48f12d8f7a8859211fd91870e4e75c20dceef5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65313432613237652d303338642d306232322d313062652d3437356661663865646562322e706e67" alt="computer_hacker_black1.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/e142a27e-038d-0b22-10be-475faf8edeb2.png"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>動的ライブラリ関数をフックして独自関数を呼び出してっていうのが面白そうなのでやってみた。<br>\n動的ライブラリ関数を独自関数に置き換えてhackしてみます。<br>\n対象関数はwrite(2)</p>\n\n<h1>\n<span id="どうやってやるの" class="fragment"></span><a href="#%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E3%82%84%E3%82%8B%E3%81%AE"><i class="fa fa-link"></i></a>どうやってやるの？</h1>\n\n<p>プログラムは通常同じ名前の関数は定義できないが、<br>\n動的リンクされたプログラムでは、同じ関数が複数のライブラリに存在することがあり得る。<br>\nその際は、最初に見つかった関数が利用される。</p>\n\n<p>環境変数 LD_PRELOAD で指定した共有ライブラリは最優先で読み込まれるため、簡単にプログラムの挙動を変えることができます。</p>\n\n<p>ちなみに何もせずgccでコンパイルすると、glibc(libc.so.6)が動的にリンクされます</p>\n\n<h1>\n<span id="動的ライブラリ" class="fragment"></span><a href="#%E5%8B%95%E7%9A%84%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA"><i class="fa fa-link"></i></a>動的ライブラリ？</h1>\n\n<p>プログラム実行中の任意の時点で読み込まれるライブラリ。</p>\n\n<ul>\n<li>必要と判断されるまで、読み込まれない。</li>\n<li>プラグインやモジュールの実装に役立つ。</li>\n<li>動的ライブラリの作成は、共有ライブラリと同様の方法で作成する。</li>\n</ul>\n\n<p>詳しくは下記でご確認を<br>\n<a href="http://archive.linux.or.jp/JF/JFdocs/Program-Library-HOWTO/dl-libraries.html" class="autolink" rel="nofollow noopener" target="_blank">http://archive.linux.or.jp/JF/JFdocs/Program-Library-HOWTO/dl-libraries.html</a></p>\n\n<h1>\n<span id="実行環境必要なもの" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>実行環境/必要なもの</h1>\n\n<ul>\n<li>gccとlddを使ってますのでこれら2点があれば大丈夫です。</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>gcc <span class="nt">--version</span>\ngcc <span class="o">(</span>GCC<span class="o">)</span> 4.4.7 20120313 <span class="o">(</span>Red Hat 4.4.7-16<span class="o">)</span>\n\n<span class="nv">$ </span>ldd <span class="nt">--version</span>\nldd <span class="o">(</span>GNU libc<span class="o">)</span> 2.12\n</pre></div></div>\n\n<h1>\n<span id="実践例" class="fragment"></span><a href="#%E5%AE%9F%E8%B7%B5%E4%BE%8B"><i class="fa fa-link"></i></a>実践例</h1>\n\n<p>まずはhackされるプログラム<br>\n標準出力に「hello world」のみを出力するだけ。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">main.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n</span>\n<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="kt">char</span> <span class="n">s</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Hello World!</span><span class="se">\\n</span><span class="s">"</span><span class="p">;</span>\n    <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">));</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>次はライブラリ<br>\nmainで呼んでいるwrite(2)はこちらで定義されているwriteが優先されることを確認。<br>\n「hello world」の前に「hello hack」を出力する。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">write.c(ライブラリ)</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;unistd.h&gt;\n#include &lt;dlfcn.h&gt;\n#include &lt;stdio.h&gt;\n</span>\n<span class="kt">int</span> <span class="n">g_first</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n<span class="kt">void</span> <span class="o">*</span><span class="n">g_h</span><span class="p">;</span>\n<span class="kt">ssize_t</span> <span class="p">(</span><span class="o">*</span><span class="n">g_f</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>\n\n<span class="c1">//子プロセスに引き継がないよう設定</span>\n<span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">unset_ld_preload</span><span class="p">()</span> <span class="p">{</span>\n    <span class="n">unsetenv</span><span class="p">(</span><span class="s">"LD_PRELOAD"</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="kt">ssize_t</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span><span class="p">(</span><span class="n">g_first</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>\n        <span class="n">g_first</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>\n\n        <span class="c1">// 動的ライブラリへの内部ハンドルを取得</span>\n        <span class="n">g_h</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="s">"libc.so.6"</span><span class="p">,</span> <span class="n">RTLD_LAZY</span><span class="p">);</span>\n\n        <span class="c1">// シンボルがロードされたメモリのアドレスを取得</span>\n        <span class="n">g_f</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">g_h</span><span class="p">,</span> <span class="s">"write"</span><span class="p">);</span>\n    <span class="p">}</span>\n\n    <span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">"Hello Hack</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">g_f</span><span class="p">)(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>上記で独自のwrite関数を定義しています。<br>\n<strong>attribute</strong>((constructor)) は GCC の拡張機能で<br>\nmain関数の前に行いたい処理がある場合に使います。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># コンパイル(ライブラリ作成)</span>\n<span class="nv">$ </span>gcc <span class="nt">-fPIC</span> <span class="nt">-shared</span> <span class="nt">-o</span> write.o write.c <span class="nt">-ldl</span>\n\n<span class="c"># コンパイル</span>\n<span class="nv">$ </span>gcc main.c <span class="nt">-o</span> main\n\n<span class="c"># 実行</span>\n<span class="nv">$ LD_PRELOAD</span><span class="o">=</span>./write.o ./main\nHello Hack\nHello World!\n</pre></div></div>\n\n<p>結果はこの通り<br>\nmain.cでは「Hello World」のみの出力のはずが<br>\nその直前に「Hello Hack」が出力されています。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># lddコマンドでライブラリの依存関係を確認</span>\n<span class="nv">$ </span>ldd main\n        linux-vdso.so.1 <span class="o">=&gt;</span>  <span class="o">(</span>0x00007fff619d1000<span class="o">)</span>\n        libc.so.6 <span class="o">=&gt;</span> /lib64/libc.so.6 <span class="o">(</span>0x0000003edae00000<span class="o">)</span>\n        /lib64/ld-linux-x86-64.so.2 <span class="o">(</span>0x0000003edaa00000<span class="o">)</span>\n\n<span class="nv">$ </span><span class="nb">export </span><span class="nv">LD_PRELOAD</span><span class="o">=</span>./write.o\n<span class="nv">$ </span>ldd main\nHello Hack\n        linux-vdso.so.1 <span class="o">=&gt;</span>  <span class="o">(</span>0x00007fff643a7000<span class="o">)</span>\n        ./write.o <span class="o">(</span>0x00002b947289c000<span class="o">)</span>\n        libc.so.6 <span class="o">=&gt;</span> /lib64/libc.so.6 <span class="o">(</span>0x0000003edae00000<span class="o">)</span>\n        libdl.so.2 <span class="o">=&gt;</span> /lib64/libdl.so.2 <span class="o">(</span>0x0000003edb600000<span class="o">)</span>\n        /lib64/ld-linux-x86-64.so.2 <span class="o">(</span>0x0000003edaa00000<span class="o">)</span>\n</pre></div></div>\n\n<h1>\n<span id="まとめ感想" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>まとめ/感想</h1>\n\n<p>今回の方法を使えば独自printf等が作成できます。<br>\n完成されたプログラムが使用しているライブラリ関数を<br>\nプログラム本体を修正せずに手を加えることが出来るので<br>\n使う機会はあまり無いですが面白いのでおすすめです。</p>\n\n<h1>\n<span id="参考文献リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考文献/リンク</h1>\n\n<p><a href="http://07c00.hatenablog.com/entry/2013/09/02/003629" rel="nofollow noopener" target="_blank">LD_PRELOADで関数フックしてみよう！</a><br>\n<a href="https://kazmax.zpp.jp/cmd/d/dlopen.3.html" rel="nofollow noopener" target="_blank">dlopen - ライブラリコールの説明</a></p>\n', 'body': '![computer_hacker_black1.png](https://qiita-image-store.s3.amazonaws.com/0/258841/e142a27e-038d-0b22-10be-475faf8edeb2.png)\n\n# 背景\n\n動的ライブラリ関数をフックして独自関数を呼び出してっていうのが面白そうなのでやってみた。\n動的ライブラリ関数を独自関数に置き換えてhackしてみます。\n対象関数はwrite(2)\n\n# どうやってやるの？\n\nプログラムは通常同じ名前の関数は定義できないが、\n動的リンクされたプログラムでは、同じ関数が複数のライブラリに存在することがあり得る。\nその際は、最初に見つかった関数が利用される。\n\n環境変数 LD_PRELOAD で指定した共有ライブラリは最優先で読み込まれるため、簡単にプログラムの挙動を変えることができます。\n\nちなみに何もせずgccでコンパイルすると、glibc(libc.so.6)が動的にリンクされます\n\n# 動的ライブラリ？\n\nプログラム実行中の任意の時点で読み込まれるライブラリ。\n\n* 必要と判断されるまで、読み込まれない。\n* プラグインやモジュールの実装に役立つ。\n* 動的ライブラリの作成は、共有ライブラリと同様の方法で作成する。\n\n詳しくは下記でご確認を\nhttp://archive.linux.or.jp/JF/JFdocs/Program-Library-HOWTO/dl-libraries.html\n\n# 実行環境/必要なもの\n\n* gccとlddを使ってますのでこれら2点があれば大丈夫です。\n\n``` bash\n$ gcc --version\ngcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-16)\n\n$ ldd --version\nldd (GNU libc) 2.12\n```\n\n# 実践例\n\nまずはhackされるプログラム\n標準出力に「hello world」のみを出力するだけ。\n\n``` c:main.c\n#include <string.h>\n#include <unistd.h>\n\nint main()\n{\n    char s[] = "Hello World!\\n";\n    write(1, s, strlen(s));\n    return 0;\n}\n```\n\n次はライブラリ\nmainで呼んでいるwrite(2)はこちらで定義されているwriteが優先されることを確認。\n「hello world」の前に「hello hack」を出力する。\n\n``` c:write.c(ライブラリ)\n#include <unistd.h>\n#include <dlfcn.h>\n#include <stdio.h>\n\nint g_first = 0;\nvoid *g_h;\nssize_t (*g_f)(int, const void *, size_t);\n\n//子プロセスに引き継がないよう設定\nvoid __attribute__((constructor)) unset_ld_preload() {\n    unsetenv("LD_PRELOAD");\n}\n\nssize_t write(int fd, const void *buf, size_t count) {\n    if(g_first == 0){\n        g_first = 1;\n\n        // 動的ライブラリへの内部ハンドルを取得\n        g_h = dlopen("libc.so.6", RTLD_LAZY);\n\n        // シンボルがロードされたメモリのアドレスを取得\n        g_f = dlsym(g_h, "write");\n    }\n\n    fprintf(stdout, "Hello Hack\\n");\n    return (*g_f)(fd, buf, count);\n}\n```\n\n上記で独自のwrite関数を定義しています。\n__attribute__((constructor)) は GCC の拡張機能で\nmain関数の前に行いたい処理がある場合に使います。\n\n``` bash\n# コンパイル(ライブラリ作成)\n$ gcc -fPIC -shared -o write.o write.c -ldl\n\n# コンパイル\n$ gcc main.c -o main\n\n# 実行\n$ LD_PRELOAD=./write.o ./main\nHello Hack\nHello World!\n```\n\n結果はこの通り\nmain.cでは「Hello World」のみの出力のはずが\nその直前に「Hello Hack」が出力されています。\n\n``` bash\n# lddコマンドでライブラリの依存関係を確認\n$ ldd main\n        linux-vdso.so.1 =>  (0x00007fff619d1000)\n        libc.so.6 => /lib64/libc.so.6 (0x0000003edae00000)\n        /lib64/ld-linux-x86-64.so.2 (0x0000003edaa00000)\n\n$ export LD_PRELOAD=./write.o\n$ ldd main\nHello Hack\n        linux-vdso.so.1 =>  (0x00007fff643a7000)\n        ./write.o (0x00002b947289c000)\n        libc.so.6 => /lib64/libc.so.6 (0x0000003edae00000)\n        libdl.so.2 => /lib64/libdl.so.2 (0x0000003edb600000)\n        /lib64/ld-linux-x86-64.so.2 (0x0000003edaa00000)\n```\n\n# まとめ/感想\n\n今回の方法を使えば独自printf等が作成できます。\n完成されたプログラムが使用しているライブラリ関数を\nプログラム本体を修正せずに手を加えることが出来るので\n使う機会はあまり無いですが面白いのでおすすめです。\n\n# 参考文献/リンク\n\n[LD_PRELOADで関数フックしてみよう！](http://07c00.hatenablog.com/entry/2013/09/02/003629)\n[dlopen - ライブラリコールの説明](https://kazmax.zpp.jp/cmd/d/dlopen.3.html)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-14T20:50:53+09:00', 'group': None, 'id': '57eb41d5943ae746f0a4', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'C言語', 'versions': []}, {'name': 'ライブラリ', 'versions': []}, {'name': 'hack', 'versions': []}, {'name': 'LD_PRELOAD', 'versions': []}], 'title': '動的ライブラリ関数をhackしよう', 'updated_at': '2018-11-14T20:50:53+09:00', 'url': 'https://qiita.com/ryuichi1208/items/57eb41d5943ae746f0a4', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/ecff6af6697b7beb93069cf106eb3dffc4d561ae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65393661626664662d363936342d333531382d663263312d6332623061363932306532342e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/ecff6af6697b7beb93069cf106eb3dffc4d561ae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65393661626664662d363936342d333531382d663263312d6332623061363932306532342e706e67" alt="linux.min_.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/e96abfdf-6964-3518-f2c1-c2b0a6920e24.png"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>iPadのターミナル用アプリを探していたらサーバへ接続しなくてもローカルで遊べるシェルをたまたま見つけました。(OSS)</p>\n\n<p>実装自体はまだまだこれからだと思いますがとても期待です。<br>\nディストリビューションはAlpine Linuxのようです。</p>\n\n<p>もちろん実装はC言語</p>\n\n<p>GitHubのURLは下記です。2017年ごろから開始しているプロジェクト<br>\n<a href="https://github.com/tbodt/ish" rel="nofollow noopener" target="_blank">tbodt/ish</a></p>\n\n<p>ちなみに個人的にターミナルアプリは下記が好き。</p>\n\n<p><strong>Terminal for iOS</strong>_<br>\n<a href="https://github.com/louisdh/openterm" rel="nofollow noopener" target="_blank">louisdh/openterm</a></p>\n\n<h1>\n<span id="必要なもの" class="fragment"></span><a href="#%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>必要なもの</h1>\n\n<ul>\n<li>iOSが動く機器(iPhone6SとiPad Air2でやってみました)</li>\n<li><a href="https://developer.apple.com/testflight/" rel="nofollow noopener" target="_blank">TestFlight</a></li>\n<li>CLIのちょっとした知識</li>\n</ul>\n\n<h1>\n<span id="導入手順" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>導入手順</h1>\n\n<ul>\n<li>iPhoneにTestflightをインストール(AppStoreから出来ます)</li>\n<li>インストール後にiOS端末から下記URLへアクセス</li>\n</ul>\n\n<p><a href="https://testflight.apple.com/join/97i7KM8O" class="autolink" rel="nofollow noopener" target="_blank">https://testflight.apple.com/join/97i7KM8O</a></p>\n\n<p>導入後は下記画面になるのでopenを選択すれば自動的にSHELLが起動します。</p>\n\n<p><a href="https://camo.qiitausercontent.com/325ea89416a3ae6133b1c016aafaddc8ce553980/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38323266393333352d333335322d383532622d336465652d6261393831303138636165312e706e67" target="_blank" rel="nofollow noopener"><img width="375" alt="B1E47F9B-0F76-47E5-A9B4-8A4DABADD9AC.png" src="https://camo.qiitausercontent.com/325ea89416a3ae6133b1c016aafaddc8ce553980/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38323266393333352d333335322d383532622d336465652d6261393831303138636165312e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/822f9335-3352-852b-3dee-ba981018cae1.png"></a></p>\n\n<h1>\n<span id="実行" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>実行</h1>\n\n<p><a href="https://camo.qiitausercontent.com/df554082e2f3f3c18e760be7012ca4170d8fe44c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33353335316662612d633138342d653166612d643230642d3935346566306531666436342e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/df554082e2f3f3c18e760be7012ca4170d8fe44c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33353335316662612d633138342d653166612d643230642d3935346566306531666436342e706e67" alt="81F09582-EF4E-4DD8-8275-8868E337E121.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/35351fba-c184-e1fa-d20d-954ef0e1fd64.png"></a></p>\n\n<p>基本的なコマンドは一通りそろっているイメージ<br>\n残念ながらapk等のパッケージマネージャは使えませんでした(使い方の問題でしょうか？)</p>\n\n<h1>\n<span id="まとめ感想" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>まとめ/感想</h1>\n\n<p>lsはもちろんvi等でドキュメント修正が出来ます。<br>\nLinuxの学習やちょっとした話題作り程度に面白そうでした。<br>\nalpineについての学習にもいいかもしれませんね。</p>\n', 'body': '![linux.min_.png](https://qiita-image-store.s3.amazonaws.com/0/258841/e96abfdf-6964-3518-f2c1-c2b0a6920e24.png)\n\n# 背景\n\niPadのターミナル用アプリを探していたらサーバへ接続しなくてもローカルで遊べるシェルをたまたま見つけました。(OSS)\n\n実装自体はまだまだこれからだと思いますがとても期待です。\nディストリビューションはAlpine Linuxのようです。\n\nもちろん実装はC言語\n\nGitHubのURLは下記です。2017年ごろから開始しているプロジェクト\n[tbodt/ish](https://github.com/tbodt/ish)\n\nちなみに個人的にターミナルアプリは下記が好き。\n\n__Terminal for iOS___\n[louisdh/openterm](https://github.com/louisdh/openterm)\n\n# 必要なもの\n\n* iOSが動く機器(iPhone6SとiPad Air2でやってみました)\n* [TestFlight](https://developer.apple.com/testflight/)\n* CLIのちょっとした知識\n\n# 導入手順\n\n* iPhoneにTestflightをインストール(AppStoreから出来ます)\n* インストール後にiOS端末から下記URLへアクセス\n\nhttps://testflight.apple.com/join/97i7KM8O\n\n導入後は下記画面になるのでopenを選択すれば自動的にSHELLが起動します。\n\n<img width="375" alt="B1E47F9B-0F76-47E5-A9B4-8A4DABADD9AC.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/822f9335-3352-852b-3dee-ba981018cae1.png">\n\n\n# 実行\n\n![81F09582-EF4E-4DD8-8275-8868E337E121.png](https://qiita-image-store.s3.amazonaws.com/0/258841/35351fba-c184-e1fa-d20d-954ef0e1fd64.png)\n\n\n基本的なコマンドは一通りそろっているイメージ\n残念ながらapk等のパッケージマネージャは使えませんでした(使い方の問題でしょうか？)\n\n# まとめ/感想\n\nlsはもちろんvi等でドキュメント修正が出来ます。\nLinuxの学習やちょっとした話題作り程度に面白そうでした。\nalpineについての学習にもいいかもしれませんね。\n', 'coediting': False, 'comments_count': 1, 'created_at': '2018-11-12T20:05:30+09:00', 'group': None, 'id': '42796fb43fae07d6be14', 'likes_count': 18, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'iOS', 'versions': []}, {'name': 'shell', 'versions': []}, {'name': 'C言語', 'versions': []}, {'name': 'alpine', 'versions': []}], 'title': '「Linux shell for iOS」iPhoneで動かすシェルが予想以上に面白かった', 'updated_at': '2018-11-12T20:07:12+09:00', 'url': 'https://qiita.com/ryuichi1208/items/42796fb43fae07d6be14', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/c0b7aec1000811196958e33829a138c7f2119e11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36643638623730372d663835662d653434332d353763352d3334626461353634376661392e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/c0b7aec1000811196958e33829a138c7f2119e11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36643638623730372d663835662d653434332d353763352d3334626461353634376661392e6a706567" alt="highres_254333778.jpeg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/6d68b707-f85f-e443-57c5-34bda5647fa9.jpeg"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>進化の早いElastic製品群<br>\n今までは5系を使用していたがせっかくなので最新版を再度インストールから実施してみました。<br>\nその際のインストール手順メモです。</p>\n\n<p>5回編成予定で導入2回、入門1回、実践2回を書く予定(気力があれば。。)</p>\n\n<h1>\n<span id="elastic-stackって" class="fragment"></span><a href="#elastic-stack%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>Elastic Stackって？</h1>\n\n<p>オランダのElastic社が提供しているログ収集や解析などを可視化するための<br>\nオープンソースソフトウェア群</p>\n\n<p>「Elasticsearch」「kibana」「logstash」「beats」の4つで構成されている。</p>\n\n<h3>\n<span id="elasticsearch" class="fragment"></span><a href="#elasticsearch"><i class="fa fa-link"></i></a>Elasticsearch</h3>\n\n<p>分散処理型の検索エンジンです。<br>\n大量のドキュメントから目的の単語を含むドキュメントを高速に抽出することができます。</p>\n\n<h3>\n<span id="logstash" class="fragment"></span><a href="#logstash"><i class="fa fa-link"></i></a>Logstash</h3>\n\n<p>各環境に散らばっているログを集め、指定した対象に連携できるツールです。<br>\nログの連携だけではなく、ログの加工機能も持ち合わせています。</p>\n\n<h3>\n<span id="kibana" class="fragment"></span><a href="#kibana"><i class="fa fa-link"></i></a>kibana</h3>\n\n<p>ElasticSearchで集めたデータを可視化するためのツール<br>\n折れ線グラフ・棒グラフ・円グラフを用いてログの詳細な情報を解析し、色分けして表示することが可能</p>\n\n<h3>\n<span id="beats" class="fragment"></span><a href="#beats"><i class="fa fa-link"></i></a>Beats</h3>\n\n<p>機器のデータをElasticsearchやLogstashに転送する簡易的なデータ収集ツールです。<br>\n例えばネットワークのパケット情報・Windowsのイベントログ・死活監視の情報などを収集可能なため、<br>\nLogstashでカバーできないような情報を集めてくることができます。</p>\n\n<h3>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h3>\n\n<table>\n<thead>\n<tr>\n<th>製品名</th>\n<th>機能</th>\n<th>開発言語</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Elasticsearch</td>\n<td>ドキュメントを保存・検索</td>\n<td>Java</td>\n</tr>\n<tr>\n<td>Kibana</td>\n<td>データの可視化</td>\n<td>JavaScript</td>\n</tr>\n<tr>\n<td>Logstash</td>\n<td>データ取り込み・変換</td>\n<td>Ruby</td>\n</tr>\n<tr>\n<td>Beats</td>\n<td>データ取り込み</td>\n<td>Go言語</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="導入手順" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>導入手順</h1>\n\n<p>Elasticsearch→Logstash（Beats）→Kibanaの順にインストールします。</p>\n\n<h1>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># OSとカーネルバージョン</span>\n<span class="nv">$ </span><span class="nb">cat</span> /etc/lsb-release | <span class="nb">grep </span>RELEASE <span class="p">;</span> <span class="nb">uname</span> <span class="nt">-r</span>\n<span class="nv">DISTRIB_RELEASE</span><span class="o">=</span>18.04\n4.15.0-36-generic\n\n<span class="c"># javaは必須です。なければインストールしてください</span>\n<span class="nv">$ </span>java <span class="nt">-version</span>\nopenjdk version <span class="s2">"1.8.0_181"</span>\nOpenJDK Runtime Environment <span class="o">(</span>build 1.8.0_181-8u181-b13-1ubuntu0.18.04.1-b13<span class="o">)</span>\nOpenJDK 64-Bit Server VM <span class="o">(</span>build 25.181-b13, mixed mode<span class="o">)</span>\n\n</pre></div></div>\n\n<h1>\n<span id="導入-elasticsearch" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5-elasticsearch"><i class="fa fa-link"></i></a>導入① Elasticsearch</h1>\n\n<p>Elasticsearchのインストール</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># パッケージの取得</span>\n<span class="nv">$ </span>curl <span class="nt">-L</span> <span class="nt">-O</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.deb\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 93.2M  100 93.2M    0     0   548k      0  0:02:54  0:02:54 <span class="nt">--</span>:--:--  502k\n\n<span class="c"># インストール</span>\n<span class="nv">$ </span><span class="nb">sudo </span>dpkg <span class="nt">-i</span> elasticsearch-6.4.3.deb\n以前に未選択のパッケージ elasticsearch を選択しています。\n<span class="o">(</span>データベースを読み込んでいます ... 現在 207005 個のファイルとディレクトリがインストールされています。<span class="o">)</span>\nelasticsearch-6.4.3.deb を展開する準備をしています ...\nelasticsearch <span class="o">(</span>6.4.3<span class="o">)</span> を展開しています...\nelasticsearch <span class="o">(</span>6.4.3<span class="o">)</span> を設定しています ...\n<span class="o">(</span>省略<span class="o">)</span>\n新バージョンの設定ファイル /etc/elasticsearch/elasticsearch.yml をインストールしています ...\n新バージョンの設定ファイル /etc/elasticsearch/jvm.options をインストールしています ...\n新バージョンの設定ファイル /etc/elasticsearch/log4j2.properties をインストールしています ...\n新バージョンの設定ファイル /etc/default/elasticsearch をインストールしています ...\n新バージョンの設定ファイル /usr/lib/systemd/system/elasticsearch.service をインストールしています ...\n新バージョンの設定ファイル /etc/init.d/elasticsearch をインストールしています ...\nCreated elasticsearch keystore <span class="k">in</span> /etc/elasticsearch\nsystemd <span class="o">(</span>237-3ubuntu10.4<span class="o">)</span> のトリガを処理しています ...\nureadahead <span class="o">(</span>0.100.0-20<span class="o">)</span> のトリガを処理しています ...\nureadahead will be reprofiled on next reboot\n\n<span class="c"># サービス起動</span>\n<span class="nv">$ </span><span class="nb">sudo </span>systemctl start elasticsearch.service\n\n<span class="c"># 起動確認。下記のようにリクエストを送ればレスポンスが来ます</span>\n<span class="nv">$ </span>curl <span class="nt">-XGET</span> <span class="s1">\'localhost:9200/?pretty\'</span>\n<span class="o">{</span>\n  <span class="s2">"name"</span> : <span class="s2">"uIaLhsy"</span>,\n  <span class="s2">"cluster_name"</span> : <span class="s2">"elasticsearch"</span>,\n  <span class="s2">"cluster_uuid"</span> : <span class="s2">"9gpCm_fWRDCQ1Lk4vSn_oQ"</span>,\n  <span class="s2">"version"</span> : <span class="o">{</span>\n    <span class="s2">"number"</span> : <span class="s2">"6.4.3"</span>,\n    <span class="s2">"build_flavor"</span> : <span class="s2">"default"</span>,\n    <span class="s2">"build_type"</span> : <span class="s2">"deb"</span>,\n    <span class="s2">"build_hash"</span> : <span class="s2">"fe40335"</span>,\n    <span class="s2">"build_date"</span> : <span class="s2">"2018-10-30T23:17:19.084789Z"</span>,\n    <span class="s2">"build_snapshot"</span> : <span class="nb">false</span>,\n    <span class="s2">"lucene_version"</span> : <span class="s2">"7.4.0"</span>,\n    <span class="s2">"minimum_wire_compatibility_version"</span> : <span class="s2">"5.6.0"</span>,\n    <span class="s2">"minimum_index_compatibility_version"</span> : <span class="s2">"5.0.0"</span>\n  <span class="o">}</span>,\n  <span class="s2">"tagline"</span> : <span class="s2">"You Know, for Search"</span>\n<span class="o">}</span>\n</pre></div></div>\n\n<h1>\n<span id="導入-logstash" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5-logstash"><i class="fa fa-link"></i></a>導入② Logstash</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre>パッケージの取得\n<span class="nv">$ </span>curl <span class="nt">-L</span> <span class="nt">-O</span> https://artifacts.elastic.co/downloads/logstash/logstash-6.4.3.deb\n\n<span class="c"># インストール</span>\n<span class="nv">$ </span><span class="nb">sudo </span>dpkg <span class="nt">-i</span> logstash-6.4.3.deb\n以前に未選択のパッケージ logstash を選択しています。\n<span class="o">(</span>データベースを読み込んでいます ... 現在 207390 個のファイルとディレクトリがインストールされています。<span class="o">)</span>\nlogstash-6.4.3.deb を展開する準備をしています ...\nlogstash <span class="o">(</span>1:6.4.3-1<span class="o">)</span> を展開しています...\nlogstash <span class="o">(</span>1:6.4.3-1<span class="o">)</span> を設定しています ...\nUsing provided startup.options file: /etc/logstash/startup.options\nSuccessfully created system startup script <span class="k">for </span>Logstash\n\n<span class="c"># サービス起動</span>\n<span class="nv">$ </span><span class="nb">sudo </span>systemctl start logstash.service\n\n</pre></div></div>\n\n<h1>\n<span id="導入-kibana" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5-kibana"><i class="fa fa-link"></i></a>導入③ Kibana</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># パッケージ取得</span>\n<span class="nv">$ </span>curl <span class="nt">-L</span> <span class="nt">-O</span> https://artifacts.elastic.co/downloads/kibana/kibana-6.4.3-amd64.deb\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  225M  100  225M    0     0   859k      0  0:04:29  0:04:29 <span class="nt">--</span>:--:--  984k\n\n<span class="c"># インストール</span>\n<span class="nv">$ </span>root@ubuntu0827:~/iog/elastic_stack# dpkg <span class="nt">-i</span> kibana-6.4.3-amd64.deb \n以前に未選択のパッケージ kibana を選択しています。\n<span class="o">(</span>データベースを読み込んでいます ... 現在 222723 個のファイルとディレクトリがインストールされています。<span class="o">)</span>\nkibana-6.4.3-amd64.deb を展開する準備をしています ...\nkibana <span class="o">(</span>6.4.3<span class="o">)</span> を展開しています...\nkibana <span class="o">(</span>6.4.3<span class="o">)</span> を設定しています ...\n<span class="o">(</span>省略<span class="o">)</span>\n新バージョンの設定ファイル /etc/kibana/kibana.yml をインストールしています ...\nsystemd <span class="o">(</span>237-3ubuntu10.4<span class="o">)</span> のトリガを処理しています ...\nureadahead <span class="o">(</span>0.100.0-20<span class="o">)</span> のトリガを処理しています ...\n\n<span class="c"># kibana.ymlの編集</span>\n<span class="c"># サーバ名だったりアクセス許可ホストを設定します。</span>\n<span class="nv">$ </span>diff \n-#server.host: <span class="s2">"localhost"</span>\n+server.host: <span class="s2">"0.0.0.0"</span>\n\n-#server.name: <span class="s2">"your-hostname"</span>\n+server.name: <span class="s2">"ubuntu0827"</span>\n\n<span class="c"># サービス起動</span>\n<span class="nv">$ </span>systemctl start kibana.service\n</pre></div></div>\n\n<h1>\n<span id="全体動作確認" class="fragment"></span><a href="#%E5%85%A8%E4%BD%93%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"><i class="fa fa-link"></i></a>全体動作確認</h1>\n\n<p>上記の設定でリモートアクセスも許可しているので他クライアントからでもアクセスできます。</p>\n\n<p><a href="http://192.168.1.156:5601" class="autolink" rel="nofollow noopener" target="_blank">http://192.168.1.156:5601</a><br>\nといった形でIPとポートを指定すればアクセスできます。</p>\n\n<p><a href="https://camo.qiitausercontent.com/330b1be3fae3d4c1b90191837ebca0b02570ab98/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35633662366237392d653361352d643631622d643466662d3762356164326437613333362e706e67" target="_blank" rel="nofollow noopener"><img width="1516" alt="スクリーンショット 2018-11-11 17.12.41.png" src="https://camo.qiitausercontent.com/330b1be3fae3d4c1b90191837ebca0b02570ab98/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35633662366237392d653361352d643631622d643466662d3762356164326437613333362e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/5c6b6b79-e3a5-d61b-d4ff-7b5ad2d7a336.png"></a></p>\n\n<p>次はBeatsを設定します</p>\n\n<h1>\n<span id="beatsとは" class="fragment"></span><a href="#beats%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Beatsとは？</h1>\n\n<p>Beatsはデータ取り込みを行うプラットフォームとなります。<br>\n同じ位置付にLogstashがありますが違いはLogstashは多くの機能を一つで賄うのに対し<br>\nBeatsではそれぞれがインプットに特化したシンプルかつ軽量なデータ取り込みツールです。<br>\nちなみに実装はGoです。なんとJVM不要！(Elasticsearchやら動かしているのでまあ。。。)</p>\n\n<p>とても簡単に言うとモニタリングツールのエージェント</p>\n\n<h1>\n<span id="beatsファミリー" class="fragment"></span><a href="#beats%E3%83%95%E3%82%A1%E3%83%9F%E3%83%AA%E3%83%BC"><i class="fa fa-link"></i></a>Beatsファミリー</h1>\n\n<p>Beatsは下記6つの種類があります</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">名前</th>\n<th style="text-align: left">概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">Metricbeat</td>\n<td style="text-align: left">CPU,メモリ等の情報収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Filebeat</td>\n<td style="text-align: left">ログファイルの収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Packetbeat</td>\n<td style="text-align: left">パケット情報の収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Auditbeat</td>\n<td style="text-align: left">監査データの収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Heartbeat</td>\n<td style="text-align: left">リモートから稼働状況の監視</td>\n</tr>\n<tr>\n<td style="text-align: left">Winlogbeat</td>\n<td style="text-align: left">Windowsのイベントログの収集</td>\n</tr>\n</tbody>\n</table>\n\n<p>詳細は公式をご確認ください<br>\n<a href="https://www.elastic.co/jp/products/beats" class="autolink" rel="nofollow noopener" target="_blank">https://www.elastic.co/jp/products/beats</a></p>\n\n<h1>\n<span id="環境-1" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83-1"><i class="fa fa-link"></i></a>環境</h1>\n\n<p>Elasticsearch 6.4.3<br>\nKibana 6.4.3<br>\nMetricbeat 6.4.3</p>\n\n<h1>\n<span id="導入" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5"><i class="fa fa-link"></i></a>導入</h1>\n\n<p>今回はメトリクスを対象としているのでMetricBeatを導入します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># バイナリ取得</span>\n<span class="nv">$ </span>curl <span class="nt">-L</span> <span class="nt">-O</span> https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-6.4.3-amd64.deb\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 18.5M  100 18.5M    0     0   542k      0  0:00:35  0:00:35 <span class="nt">--</span>:--:--  593k\n\n<span class="c"># インストール</span>\n<span class="nv">$ </span>dpkg <span class="nt">-i</span> metricbeat-6.4.3-amd64.deb\n</pre></div></div>\n\n<p>導入は以上です。<br>\n次は設定ファイルを書き換えます。</p>\n\n<p>公式の手順で下記のように設定を追記してください。</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">/etc/metricbeat/metricbeat.yml</span></div>\n<div class="highlight"><pre><span class="s">output.elasticsearch</span><span class="pi">:</span>\n  <span class="na">hosts</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">&lt;es_url&gt;"</span><span class="pi">]</span>\n  <span class="na">username</span><span class="pi">:</span> <span class="s2">"</span><span class="s">elastic"</span>\n  <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;password&gt;"</span>\n<span class="s">setup.kibana</span><span class="pi">:</span>\n  <span class="na">host</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;kibana_url&gt;"</span>\n</pre></div>\n</div>\n\n<p>次にmetricbeatを起動します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>metricbeat setup\n<span class="nv">$ </span>metricbeat <span class="nt">-e</span>\n</pre></div></div>\n\n<p>コンソールでデータの送信が確認できるのでこの状態で下記URLへアクセス。</p>\n\n<p><a href="http://192.168.1.156:5601" class="autolink" rel="nofollow noopener" target="_blank">http://192.168.1.156:5601</a></p>\n\n<p>あとはDashboardを開き下記を選択</p>\n\n<p><a href="https://camo.qiitausercontent.com/f4c22c355f747925d92724b7f8ce5005ea21fa15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36326666646537612d363961312d643130642d376435352d6666646665313934646537352e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/f4c22c355f747925d92724b7f8ce5005ea21fa15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36326666646537612d363961312d643130642d376435352d6666646665313934646537352e706e67" alt="スクリーンショット 2018-11-13 20.51.53.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/62ffde7a-69a1-d10d-7d55-ffdfe194de75.png"></a></p>\n\n<p>そうすることで下記のようにCPU使用率やメモリ使用率、トラフィックなどが表示されます。</p>\n\n<p><a href="https://camo.qiitausercontent.com/5df6536f6e25551b8e498e267a0e65bea6574aa8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f61396462396265612d366438322d313062622d646630362d6335643965643233323335382e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/5df6536f6e25551b8e498e267a0e65bea6574aa8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f61396462396265612d366438322d313062622d646630362d6335643965643233323335382e706e67" alt="スクリーンショット 2018-11-13 20.50.16.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/a9db9bea-6d82-10bb-df06-c5d9ed232358.png"></a></p>\n\n<p>あとはサービスとして起動するために下記コマンドを実行します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>systemctl status metricbeat.service\n</pre></div></div>\n\n<p>※ここでエラーが出る場合は前回の導入時に失敗している可能性があります。</p>\n\n<h1>\n<span id="まとめ-1" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81-1"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>とりあえずElastic Stackの導入が完了<br>\n次回からはこれらを使っていろいろ遊んだ結果を記載していきます。</p>\n\n<p>Elasticsearch : データを検索、分析、保存<br>\nKibana : データを可視化<br>\nLogstash : 動的なデータ収集パイプライン<br>\nBeats : データシッパープラットフォーム</p>\n\n<p>もちろんノード数を増やせばそれに応じて自動でメトリクスを取得してくれます。<br>\n下記はノード数:2のときの表示例です。</p>\n\n<p><a href="https://camo.qiitausercontent.com/42aa4e27e2f521e9872c993badddc53dafb8ab66/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37633935346530622d643864332d346131302d343065662d3565336539363135353032312e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/42aa4e27e2f521e9872c993badddc53dafb8ab66/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f37633935346530622d643864332d346131302d343065662d3565336539363135353032312e706e67" alt="スクリーンショット 2018-11-13 22.46.34.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/7c954e0b-d8d3-4a10-40ef-5e3e96155021.png"></a></p>\n\n<h1>\n<span id="参考" class="fragment"></span><a href="#%E5%8F%82%E8%80%83"><i class="fa fa-link"></i></a>参考</h1>\n\n<p>◼\u3000<a href="https://www.elastic.co/jp/products" rel="nofollow noopener" target="_blank">公式</a><br>\n◼\u3000<a href="https://thinkit.co.jp/article/13857" rel="nofollow noopener" target="_blank">Elastic Stackって何？</a></p>\n', 'body': '![highres_254333778.jpeg](https://qiita-image-store.s3.amazonaws.com/0/258841/6d68b707-f85f-e443-57c5-34bda5647fa9.jpeg)\n\n# 背景\n\n進化の早いElastic製品群\n今までは5系を使用していたがせっかくなので最新版を再度インストールから実施してみました。\nその際のインストール手順メモです。\n\n5回編成予定で導入2回、入門1回、実践2回を書く予定(気力があれば。。)\n\n# Elastic Stackって？\n\nオランダのElastic社が提供しているログ収集や解析などを可視化するための\nオープンソースソフトウェア群\n\n「Elasticsearch」「kibana」「logstash」「beats」の4つで構成されている。\n\n### Elasticsearch\n\n分散処理型の検索エンジンです。\n大量のドキュメントから目的の単語を含むドキュメントを高速に抽出することができます。\n\n### Logstash\n各環境に散らばっているログを集め、指定した対象に連携できるツールです。\nログの連携だけではなく、ログの加工機能も持ち合わせています。\n\n### kibana\n\nElasticSearchで集めたデータを可視化するためのツール\n折れ線グラフ・棒グラフ・円グラフを用いてログの詳細な情報を解析し、色分けして表示することが可能\n\n### Beats\n機器のデータをElasticsearchやLogstashに転送する簡易的なデータ収集ツールです。\n例えばネットワークのパケット情報・Windowsのイベントログ・死活監視の情報などを収集可能なため、\nLogstashでカバーできないような情報を集めてくることができます。\n\n### まとめ\n\n|製品名       |機能                    |開発言語  |\n|-------------|------------------------|----------|\n|Elasticsearch|ドキュメントを保存・検索|Java      |\n|Kibana       |データの可視化          |JavaScript|\n|Logstash     |データ取り込み・変換    |Ruby      |\n|Beats        |データ取り込み          |Go言語    |\n\n# 導入手順\nElasticsearch→Logstash（Beats）→Kibanaの順にインストールします。\n\n# 環境\n\n``` bash\n# OSとカーネルバージョン\n$ cat /etc/lsb-release | grep RELEASE ; uname -r\nDISTRIB_RELEASE=18.04\n4.15.0-36-generic\n\n# javaは必須です。なければインストールしてください\n$ java -version\nopenjdk version "1.8.0_181"\nOpenJDK Runtime Environment (build 1.8.0_181-8u181-b13-1ubuntu0.18.04.1-b13)\nOpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)\n\n```\n\n# 導入① Elasticsearch\n\nElasticsearchのインストール\n\n``` bash\n# パッケージの取得\n$ curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.deb\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 93.2M  100 93.2M    0     0   548k      0  0:02:54  0:02:54 --:--:--  502k\n\n# インストール\n$ sudo dpkg -i elasticsearch-6.4.3.deb\n以前に未選択のパッケージ elasticsearch を選択しています。\n(データベースを読み込んでいます ... 現在 207005 個のファイルとディレクトリがインストールされています。)\nelasticsearch-6.4.3.deb を展開する準備をしています ...\nelasticsearch (6.4.3) を展開しています...\nelasticsearch (6.4.3) を設定しています ...\n(省略)\n新バージョンの設定ファイル /etc/elasticsearch/elasticsearch.yml をインストールしています ...\n新バージョンの設定ファイル /etc/elasticsearch/jvm.options をインストールしています ...\n新バージョンの設定ファイル /etc/elasticsearch/log4j2.properties をインストールしています ...\n新バージョンの設定ファイル /etc/default/elasticsearch をインストールしています ...\n新バージョンの設定ファイル /usr/lib/systemd/system/elasticsearch.service をインストールしています ...\n新バージョンの設定ファイル /etc/init.d/elasticsearch をインストールしています ...\nCreated elasticsearch keystore in /etc/elasticsearch\nsystemd (237-3ubuntu10.4) のトリガを処理しています ...\nureadahead (0.100.0-20) のトリガを処理しています ...\nureadahead will be reprofiled on next reboot\n\n# サービス起動\n$ sudo systemctl start elasticsearch.service\n\n# 起動確認。下記のようにリクエストを送ればレスポンスが来ます\n$ curl -XGET \'localhost:9200/?pretty\'\n{\n  "name" : "uIaLhsy",\n  "cluster_name" : "elasticsearch",\n  "cluster_uuid" : "9gpCm_fWRDCQ1Lk4vSn_oQ",\n  "version" : {\n    "number" : "6.4.3",\n    "build_flavor" : "default",\n    "build_type" : "deb",\n    "build_hash" : "fe40335",\n    "build_date" : "2018-10-30T23:17:19.084789Z",\n    "build_snapshot" : false,\n    "lucene_version" : "7.4.0",\n    "minimum_wire_compatibility_version" : "5.6.0",\n    "minimum_index_compatibility_version" : "5.0.0"\n  },\n  "tagline" : "You Know, for Search"\n}\n```\n\n# 導入② Logstash\n\n``` bash\nパッケージの取得\n$ curl -L -O https://artifacts.elastic.co/downloads/logstash/logstash-6.4.3.deb\n\n# インストール\n$ sudo dpkg -i logstash-6.4.3.deb\n以前に未選択のパッケージ logstash を選択しています。\n(データベースを読み込んでいます ... 現在 207390 個のファイルとディレクトリがインストールされています。)\nlogstash-6.4.3.deb を展開する準備をしています ...\nlogstash (1:6.4.3-1) を展開しています...\nlogstash (1:6.4.3-1) を設定しています ...\nUsing provided startup.options file: /etc/logstash/startup.options\nSuccessfully created system startup script for Logstash\n\n# サービス起動\n$ sudo systemctl start logstash.service\n\n```\n\n# 導入③ Kibana\n\n``` bash\n# パッケージ取得\n$ curl -L -O https://artifacts.elastic.co/downloads/kibana/kibana-6.4.3-amd64.deb\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  225M  100  225M    0     0   859k      0  0:04:29  0:04:29 --:--:--  984k\n\n# インストール\n$ root@ubuntu0827:~/iog/elastic_stack# dpkg -i kibana-6.4.3-amd64.deb \n以前に未選択のパッケージ kibana を選択しています。\n(データベースを読み込んでいます ... 現在 222723 個のファイルとディレクトリがインストールされています。)\nkibana-6.4.3-amd64.deb を展開する準備をしています ...\nkibana (6.4.3) を展開しています...\nkibana (6.4.3) を設定しています ...\n(省略)\n新バージョンの設定ファイル /etc/kibana/kibana.yml をインストールしています ...\nsystemd (237-3ubuntu10.4) のトリガを処理しています ...\nureadahead (0.100.0-20) のトリガを処理しています ...\n\n# kibana.ymlの編集\n# サーバ名だったりアクセス許可ホストを設定します。\n$ diff \n-#server.host: "localhost"\n+server.host: "0.0.0.0"\n\n-#server.name: "your-hostname"\n+server.name: "ubuntu0827"\n\n# サービス起動\n$ systemctl start kibana.service\n```\n\n# 全体動作確認\n\n上記の設定でリモートアクセスも許可しているので他クライアントからでもアクセスできます。\n\nhttp://192.168.1.156:5601\nといった形でIPとポートを指定すればアクセスできます。\n\n<img width="1516" alt="スクリーンショット 2018-11-11 17.12.41.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/5c6b6b79-e3a5-d61b-d4ff-7b5ad2d7a336.png">\n\n次はBeatsを設定します\n\n# Beatsとは？\n\nBeatsはデータ取り込みを行うプラットフォームとなります。\n同じ位置付にLogstashがありますが違いはLogstashは多くの機能を一つで賄うのに対し\nBeatsではそれぞれがインプットに特化したシンプルかつ軽量なデータ取り込みツールです。\nちなみに実装はGoです。なんとJVM不要！(Elasticsearchやら動かしているのでまあ。。。)\n\nとても簡単に言うとモニタリングツールのエージェント\n\n# Beatsファミリー\n\nBeatsは下記6つの種類があります\n\n| 名前 | 概要 |\n|:--|:--|\n| Metricbeat | CPU,メモリ等の情報収集 |\n| Filebeat | ログファイルの収集 |\n| Packetbeat | パケット情報の収集 |\n| Auditbeat | 監査データの収集 |\n| Heartbeat | リモートから稼働状況の監視 |\n| Winlogbeat | Windowsのイベントログの収集 |\n\n詳細は公式をご確認ください\nhttps://www.elastic.co/jp/products/beats\n\n# 環境\n\nElasticsearch 6.4.3\nKibana 6.4.3\nMetricbeat 6.4.3\n\n# 導入\n\n今回はメトリクスを対象としているのでMetricBeatを導入します。\n\n``` bash\n# バイナリ取得\n$ curl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-6.4.3-amd64.deb\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 18.5M  100 18.5M    0     0   542k      0  0:00:35  0:00:35 --:--:--  593k\n\n# インストール\n$ dpkg -i metricbeat-6.4.3-amd64.deb\n```\n\n導入は以上です。\n次は設定ファイルを書き換えます。\n\n公式の手順で下記のように設定を追記してください。\n\n``` /etc/metricbeat/metricbeat.yml\noutput.elasticsearch:\n  hosts: ["<es_url>"]\n  username: "elastic"\n  password: "<password>"\nsetup.kibana:\n  host: "<kibana_url>"\n```\n\n次にmetricbeatを起動します。\n\n``` bash\n$ metricbeat setup\n$ metricbeat -e\n```\n\nコンソールでデータの送信が確認できるのでこの状態で下記URLへアクセス。\n\nhttp://192.168.1.156:5601\n\nあとはDashboardを開き下記を選択\n\n![スクリーンショット 2018-11-13 20.51.53.png](https://qiita-image-store.s3.amazonaws.com/0/258841/62ffde7a-69a1-d10d-7d55-ffdfe194de75.png)\n\nそうすることで下記のようにCPU使用率やメモリ使用率、トラフィックなどが表示されます。\n\n![スクリーンショット 2018-11-13 20.50.16.png](https://qiita-image-store.s3.amazonaws.com/0/258841/a9db9bea-6d82-10bb-df06-c5d9ed232358.png)\n\nあとはサービスとして起動するために下記コマンドを実行します。\n\n``` bash\n$ systemctl status metricbeat.service\n```\n\n※ここでエラーが出る場合は前回の導入時に失敗している可能性があります。\n\n# まとめ\n\nとりあえずElastic Stackの導入が完了\n次回からはこれらを使っていろいろ遊んだ結果を記載していきます。\n\nElasticsearch : データを検索、分析、保存\nKibana : データを可視化\nLogstash : 動的なデータ収集パイプライン\nBeats : データシッパープラットフォーム\n\nもちろんノード数を増やせばそれに応じて自動でメトリクスを取得してくれます。\n下記はノード数:2のときの表示例です。\n\n![スクリーンショット 2018-11-13 22.46.34.png](https://qiita-image-store.s3.amazonaws.com/0/258841/7c954e0b-d8d3-4a10-40ef-5e3e96155021.png)\n\n\n# 参考\n\n◼\u3000[公式](https://www.elastic.co/jp/products)\n◼\u3000[Elastic Stackって何？](https://thinkit.co.jp/article/13857)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-11T17:17:04+09:00', 'group': None, 'id': '55ca9048ee55073bfada', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Elasticsearch', 'versions': []}, {'name': 'Kibana', 'versions': []}, {'name': 'Logstash', 'versions': []}, {'name': 'beats', 'versions': []}, {'name': 'ElasticStack', 'versions': []}], 'title': 'Ubuntu18.04でElastic Stack(6.4.x)', 'updated_at': '2018-12-28T11:08:24+09:00', 'url': 'https://qiita.com/ryuichi1208/items/55ca9048ee55073bfada', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/49eb4b111eb3bc4bb8cb1754bf3b7576220decda/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35383766333331332d353533652d666630352d366336302d6263306133346334636263342e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/49eb4b111eb3bc4bb8cb1754bf3b7576220decda/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f35383766333331332d353533652d666630352d366336302d6263306133346334636263342e706e67" alt="687474703a2f2f6861646f6c696e742e6c756b61736d617274696e656c6c692e63682f696d672f6361745f636f6e7461696e65722e706e67.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/587f3313-553e-ff05-6c60-bc0a34c4cbc4.png"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>Dockerfileを静的解析したいと思い便利なツールがないかと探していたら発見しました。<br>\nDockerfileのLintツール</p>\n\n<p>◆ <a href="https://github.com/hadolint/hadolint" rel="nofollow noopener" target="_blank">hadolint/hadolint</a></p>\n\n<p>エラーが出るDockerfileをビルド前に検知してくれます。<br>\nちなみにHaskellで書かれているようです。<br>\n現時点での最新バージョンはv1.15.0でmac等にも対応している。<br>\nGitHubのスター数は1000程である。</p>\n\n<h1>\n<span id="lintとは" class="fragment"></span><a href="#lint%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>lintとは</h1>\n\n<p>wikiより引用</p>\n\n<blockquote>\n<p>lint とは、主にC言語のソースコードに対し、コンパイラよりも詳細かつ厳密なチェックを行うプログラムである。<br>\n型の一致しない関数呼び出し<br>\n初期化されていない変数の参照<br>\n宣言されているが使われていない変数<br>\n同じ関数を参照しているが、戻り値を使う場合と使わない場合がある[疑問点 – ノート]<br>\n関数が戻り値を返す場合と返さない場合がある<br>\nなど、コンパイラではチェックされないが、バグの原因になるような曖昧な記述についても警告される</p>\n</blockquote>\n\n<h1>\n<span id="導入手順" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>導入手順</h1>\n\n<p>特に特別な手順はありません<br>\nバイナリをダウンロードして実行するだけで解析が始まります。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>curl <span class="nt">-L</span> <span class="nt">-O</span> https://github.com/hadolint/hadolint/releases/download/v1.15.0/hadolint-Linux-x86_64\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   611    0   611    0     0    935      0 <span class="nt">--</span>:--:-- <span class="nt">--</span>:--:-- <span class="nt">--</span>:--:--   935\n100 3561k  100 3561k    0     0   536k      0  0:00:06  0:00:06 <span class="nt">--</span>:--:--  767k\n\n<span class="nv">$ </span><span class="nb">chmod</span> +x hadolint-Linux-x86_64\n</pre></div></div>\n\n<h1>\n<span id="実行" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>実行</h1>\n\n<p>実行はバイナリを実行し引数にdockerfileを与えるのみで解析してくれます。</p>\n\n<div class="code-frame" data-lang="yaml"><div class="highlight"><pre><span class="s">FROM debian:latest</span>\n<span class="s">MAINTAINER ryuichi1208</span>\n\n<span class="s">COPY package.json usr/src/app</span>\n<span class="s">RUN cd /usr/src/app \\</span>\n    <span class="s">&amp;&amp; npm install node-static</span>\n\n<span class="s">EXPOSE 80</span>\n<span class="s">EXPOSE 80000</span>\n</pre></div></div>\n\n<p>上記のようなDockerfileを解析かけてみます</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>./hadolint-Linux-x86_64 Dockerfile\nDockerfile:1 DL3007 Using latest is prone to errors <span class="k">if </span>the image will ever update. Pin the version explicitly to a release tag\nDockerfile:2 DL4000 MAINTAINER is deprecated\nDockerfile:5 SC2164 Use <span class="s1">\'cd ... || exit\'</span> or <span class="s1">\'cd ... || return\'</span> <span class="k">in case</span> <span class="nb">cd </span>fails.\nDockerfile:5 SC1109 This is an unquoted HTML entity. Replace with corresponding character.\nDockerfile:5 SC1070 Parsing stopped here. Mismatched keywords or invalid parentheses?\nDockerfile:5 DL3003 Use WORKDIR to switch to a directory\nDockerfile:9 DL3011 Valid UNIX ports range from 0 to 65535\n</pre></div></div>\n\n<p>はい結果は上記の通り。<br>\nポートの範囲がおかしいよとか<br>\n現行では推奨しない書き方だったり<br>\nコンテナサイズについてまでコメントしてくれます。<br>\nもちろんエラーも出してくれます。</p>\n\n<p>ルールの一覧は<a href="https://github.com/hadolint/hadolint/blob/master/README.md" rel="nofollow noopener" target="_blank">README</a>をご確認ください。</p>\n\n<p>意図的にやってるんだよ！ってメッセージは除外できるような機能もありますのでそちらを。</p>\n\n<div class="code-frame" data-lang="DL3006を除外"><div class="highlight"><pre>$ hadolint --ignore DL3003 --ignore DL3006 &lt;Dockerfile&gt;\n</pre></div></div>\n\n<p>ちなみに指摘が一切ない場合は下記のように終了ステータスは0を返してくれる。<br>\nこれをもとに何らかの自動化処理を入れるのもありですね。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>./hadolint-Linux-x86_64 Dockerfile <span class="p">;</span> <span class="nb">echo</span> <span class="nv">$?</span>\n0\n</pre></div></div>\n\n<h2>\n<span id="ルール集" class="fragment"></span><a href="#%E3%83%AB%E3%83%BC%E3%83%AB%E9%9B%86"><i class="fa fa-link"></i></a>ルール集</h2>\n\n<p>GitHubより転載</p>\n\n<table>\n<thead>\n<tr>\n<th>ルール</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DL3000</td>\n<td>絶対パスを使用してください</td>\n</tr>\n<tr>\n<td>DL3001</td>\n<td>For some bash commands it makes no sense running them in a Docker container like ssh, vim, shutdown, service, ps, free, top, kill, mount, ifconfig.</td>\n</tr>\n<tr>\n<td>DL3002</td>\n<td>Last user should not be root.</td>\n</tr>\n<tr>\n<td>DL3003</td>\n<td>WORKDIRを使用してディレクトリに切り替えます。</td>\n</tr>\n<tr>\n<td>DL3004</td>\n<td>Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.</td>\n</tr>\n<tr>\n<td>DL3005</td>\n<td>apt-get upgradeまたはdist-upgradeを使用しないでください。</td>\n</tr>\n<tr>\n<td>DL3007</td>\n<td>Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.</td>\n</tr>\n<tr>\n<td>DL3006</td>\n<td>Always tag the version of an image explicitly.</td>\n</tr>\n<tr>\n<td>DL3008</td>\n<td>Pin versions in apt-get install.</td>\n</tr>\n<tr>\n<td>DL3009</td>\n<td>Delete the apt-get lists after installing something.</td>\n</tr>\n<tr>\n<td>DL3010</td>\n<td>アーカイブにイメージを抽出するには、ADDを使用してください</td>\n</tr>\n<tr>\n<td>DL3011</td>\n<td>Valid UNIX ports range from 0 to 65535.</td>\n</tr>\n<tr>\n<td>DL3012</td>\n<td>Provide an email address or URL as maintainer.</td>\n</tr>\n<tr>\n<td>DL3013</td>\n<td>Pin versions in pip.</td>\n</tr>\n<tr>\n<td>DL3014</td>\n<td>-yスイッチを使用します。</td>\n</tr>\n<tr>\n<td>DL3015</td>\n<td>Avoid additional packages by specifying --no-install-recommends.</td>\n</tr>\n<tr>\n<td>DL3016</td>\n<td>Pin versions in npm.</td>\n</tr>\n<tr>\n<td>DL3017</td>\n<td>apk upgradeを使用しないでください。</td>\n</tr>\n<tr>\n<td>DL3018</td>\n<td>Pin versions in apk add. Instead of apk add  use apk add =.</td>\n</tr>\n<tr>\n<td>DL3019</td>\n<td>Use the --no-cache switch to avoid the need to use --update and remove /var/cache/apk/* when done installing packages.</td>\n</tr>\n<tr>\n<td>DL3020</td>\n<td>Use COPY instead of ADD for files and folders.</td>\n</tr>\n<tr>\n<td>DL3021</td>\n<td>COPY with more than 2 arguments requires the last argument to end with /</td>\n</tr>\n<tr>\n<td>DL3022</td>\n<td>COPY --from should reference a previously defined FROM alias</td>\n</tr>\n<tr>\n<td>DL3023</td>\n<td>COPY --from cannot reference its own FROM alias</td>\n</tr>\n<tr>\n<td>DL3024</td>\n<td>FROM aliases (stage names) must be unique</td>\n</tr>\n<tr>\n<td>DL3025</td>\n<td>Use arguments JSON notation for CMD and ENTRYPOINT arguments</td>\n</tr>\n<tr>\n<td>DL3026</td>\n<td>Use only an allowed registry in the FROM image</td>\n</tr>\n<tr>\n<td>DL4000</td>\n<td>MAINTAINERは推奨されていません。</td>\n</tr>\n<tr>\n<td>DL4001</td>\n<td>WgetまたはCurlを使用しますが、両方を使用することはできません。</td>\n</tr>\n<tr>\n<td>DL4003</td>\n<td>複数のCMD命令が見つかりました。</td>\n</tr>\n<tr>\n<td>DL4004</td>\n<td>Multiple ENTRYPOINT instructions found.</td>\n</tr>\n<tr>\n<td>DL4005</td>\n<td>Use SHELL to change the default shell.</td>\n</tr>\n<tr>\n<td>DL4006</td>\n<td>Set the SHELL option -o pipefail before RUN with a pipe in it</td>\n</tr>\n<tr>\n<td>SC1000</td>\n<td>$ is not used specially and should therefore be escaped.</td>\n</tr>\n<tr>\n<td>SC1001</td>\n<td>This \\c will be a regular \'c\' in this context.</td>\n</tr>\n<tr>\n<td>SC1007</td>\n<td>Remove space after = if trying to assign a value (or for empty string, use var=\'\' ...).</td>\n</tr>\n<tr>\n<td>SC1010</td>\n<td>Use semicolon or linefeed before done (or quote to make it literal).</td>\n</tr>\n<tr>\n<td>SC1018</td>\n<td>This is a unicode non-breaking space. Delete it and retype as space.</td>\n</tr>\n<tr>\n<td>SC1035</td>\n<td>You need a space here</td>\n</tr>\n<tr>\n<td>SC1045</td>\n<td>It\'s not foo &amp;; bar, just foo &amp; bar.</td>\n</tr>\n<tr>\n<td>SC1065</td>\n<td>Trying to declare parameters? Don\'t. Use () and refer to params as $1, $2 etc.</td>\n</tr>\n<tr>\n<td>SC1066</td>\n<td>代入の左側に$を使用しないでください。</td>\n</tr>\n<tr>\n<td>SC1068</td>\n<td>Don\'t put spaces around the = in assignments.</td>\n</tr>\n<tr>\n<td>SC1077</td>\n<td>For command expansion, the tick should slant left (` vs ´).</td>\n</tr>\n<tr>\n<td>SC1078</td>\n<td>Did you forget to close this double-quoted string?</td>\n</tr>\n<tr>\n<td>SC1079</td>\n<td>This is actually an end quote, but due to next char, it looks suspect.</td>\n</tr>\n<tr>\n<td>SC1081</td>\n<td>Scripts are case sensitive. Use if, not If.</td>\n</tr>\n<tr>\n<td>SC1083</td>\n<td>This {/} is literal. Check expression (missing ;/\\n?) or quote it.</td>\n</tr>\n<tr>\n<td>SC1086</td>\n<td>forループのイテレータ名に$を使用しないでください。</td>\n</tr>\n<tr>\n<td>SC1087</td>\n<td>Braces are required when expanding arrays, as in ${array[idx]}.</td>\n</tr>\n<tr>\n<td>SC1095</td>\n<td>You need a space or linefeed between the function name and body.</td>\n</tr>\n<tr>\n<td>SC1097</td>\n<td>Unexpected ==. For assignment, use =. For comparison, use [/[[.</td>\n</tr>\n<tr>\n<td>SC1098</td>\n<td>Quote/escape special characters when using eval, e.g. eval "a=(b)".</td>\n</tr>\n<tr>\n<td>SC1099</td>\n<td>＃の前にスペースが必要です。</td>\n</tr>\n<tr>\n<td>SC2026</td>\n<td>This word is outside of quotes. Did you intend to \'nest \'"\'single quotes\'"\' instead\'?</td>\n</tr>\n<tr>\n<td>SC2028</td>\n<td>echo won\'t expand escape sequences. Consider printf.</td>\n</tr>\n<tr>\n<td>SC2035</td>\n<td>Use ./<em>glob</em> or -- <em>glob</em> so names with dashes won\'t become options.</td>\n</tr>\n<tr>\n<td>SC2046</td>\n<td>Quote this to prevent word splitting</td>\n</tr>\n<tr>\n<td>SC2086</td>\n<td>Double quote to prevent globbing and word splitting.</td>\n</tr>\n<tr>\n<td>SC2140</td>\n<td>Word is in the form "A"B"C" (B indicated). Did you mean "ABC" or "A\\"B\\"C"?</td>\n</tr>\n<tr>\n<td>SC2154</td>\n<td>varは参照されますが割り当てられません。</td>\n</tr>\n<tr>\n<td>SC2155</td>\n<td>Declare and assign separately to avoid masking return values.</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>いちいちbuildする手間も省けるので個人的には大活躍している。<br>\nアップデートは現在も続いており簡単なDockerfile作成時はパスを通したディレクトリへ置いておくことで<br>\nサクッとチェックできるのでお勧めです。</p>\n', 'body': '![687474703a2f2f6861646f6c696e742e6c756b61736d617274696e656c6c692e63682f696d672f6361745f636f6e7461696e65722e706e67.png](https://qiita-image-store.s3.amazonaws.com/0/258841/587f3313-553e-ff05-6c60-bc0a34c4cbc4.png)\n\n# 背景\n\nDockerfileを静的解析したいと思い便利なツールがないかと探していたら発見しました。\nDockerfileのLintツール\n\n◆ [hadolint/hadolint](https://github.com/hadolint/hadolint)\n\nエラーが出るDockerfileをビルド前に検知してくれます。\nちなみにHaskellで書かれているようです。\n現時点での最新バージョンはv1.15.0でmac等にも対応している。\nGitHubのスター数は1000程である。\n\n# lintとは\n\nwikiより引用\n\n> lint とは、主にC言語のソースコードに対し、コンパイラよりも詳細かつ厳密なチェックを行うプログラムである。\n型の一致しない関数呼び出し\n初期化されていない変数の参照\n宣言されているが使われていない変数\n同じ関数を参照しているが、戻り値を使う場合と使わない場合がある[疑問点 – ノート]\n関数が戻り値を返す場合と返さない場合がある\nなど、コンパイラではチェックされないが、バグの原因になるような曖昧な記述についても警告される\n\n# 導入手順\n\n特に特別な手順はありません\nバイナリをダウンロードして実行するだけで解析が始まります。\n\n``` bash\n$ curl -L -O https://github.com/hadolint/hadolint/releases/download/v1.15.0/hadolint-Linux-x86_64\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   611    0   611    0     0    935      0 --:--:-- --:--:-- --:--:--   935\n100 3561k  100 3561k    0     0   536k      0  0:00:06  0:00:06 --:--:--  767k\n\n$ chmod +x hadolint-Linux-x86_64\n```\n\n# 実行\n\n実行はバイナリを実行し引数にdockerfileを与えるのみで解析してくれます。\n\n``` yaml\nFROM debian:latest\nMAINTAINER ryuichi1208\n\nCOPY package.json usr/src/app\nRUN cd /usr/src/app \\\n    && npm install node-static\n\nEXPOSE 80\nEXPOSE 80000\n```\n\n上記のようなDockerfileを解析かけてみます\n\n``` bash\n$ ./hadolint-Linux-x86_64 Dockerfile\nDockerfile:1 DL3007 Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag\nDockerfile:2 DL4000 MAINTAINER is deprecated\nDockerfile:5 SC2164 Use \'cd ... || exit\' or \'cd ... || return\' in case cd fails.\nDockerfile:5 SC1109 This is an unquoted HTML entity. Replace with corresponding character.\nDockerfile:5 SC1070 Parsing stopped here. Mismatched keywords or invalid parentheses?\nDockerfile:5 DL3003 Use WORKDIR to switch to a directory\nDockerfile:9 DL3011 Valid UNIX ports range from 0 to 65535\n```\n\nはい結果は上記の通り。\nポートの範囲がおかしいよとか\n現行では推奨しない書き方だったり\nコンテナサイズについてまでコメントしてくれます。\nもちろんエラーも出してくれます。\n\nルールの一覧は[README](https://github.com/hadolint/hadolint/blob/master/README.md)をご確認ください。\n\n意図的にやってるんだよ！ってメッセージは除外できるような機能もありますのでそちらを。\n\n``` DL3006を除外\n$ hadolint --ignore DL3003 --ignore DL3006 <Dockerfile>\n```\n\nちなみに指摘が一切ない場合は下記のように終了ステータスは0を返してくれる。\nこれをもとに何らかの自動化処理を入れるのもありですね。\n\n``` bash\n$ ./hadolint-Linux-x86_64 Dockerfile ; echo $?\n0\n```\n\n## ルール集\n\nGitHubより転載\n\n|ルール\t|説明|\n--------|-----------|\n|DL3000\t|絶対パスを使用してください\n|DL3001\t|For some bash commands it makes no sense running them in a Docker container like ssh, vim, shutdown, service, ps, free, top, kill, mount, ifconfig.\n|DL3002\t|Last user should not be root.\n|DL3003\t|WORKDIRを使用してディレクトリに切り替えます。\n|DL3004\t|Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.\n|DL3005\t|apt-get upgradeまたはdist-upgradeを使用しないでください。\n|DL3007\t|Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.\n|DL3006\t|Always tag the version of an image explicitly.\n|DL3008\t|Pin versions in apt-get install.\n|DL3009\t|Delete the apt-get lists after installing something.\n|DL3010\t|アーカイブにイメージを抽出するには、ADDを使用してください\n|DL3011\t|Valid UNIX ports range from 0 to 65535.\n|DL3012\t|Provide an email address or URL as maintainer.\n|DL3013\t|Pin versions in pip.\n|DL3014\t|-yスイッチを使用します。\n|DL3015\t|Avoid additional packages by specifying --no-install-recommends.\n|DL3016\t|Pin versions in npm.\n|DL3017\t|apk upgradeを使用しないでください。\n|DL3018\t|Pin versions in apk add. Instead of apk add <package> use apk add <package>=<version>.\n|DL3019\t|Use the --no-cache switch to avoid the need to use --update and remove /var/cache/apk/* when done installing packages.\n|DL3020\t|Use COPY instead of ADD for files and folders.\n|DL3021\t|COPY with more than 2 arguments requires the last argument to end with /\n|DL3022\t|COPY --from should reference a previously defined FROM alias\n|DL3023\t|COPY --from cannot reference its own FROM alias\n|DL3024\t|FROM aliases (stage names) must be unique\n|DL3025\t|Use arguments JSON notation for CMD and ENTRYPOINT arguments\n|DL3026\t|Use only an allowed registry in the FROM image\n|DL4000\t|MAINTAINERは推奨されていません。\n|DL4001\t|WgetまたはCurlを使用しますが、両方を使用することはできません。\n|DL4003\t|複数のCMD命令が見つかりました。\n|DL4004\t|Multiple ENTRYPOINT instructions found.\n|DL4005\t|Use SHELL to change the default shell.\n|DL4006\t|Set the SHELL option -o pipefail before RUN with a pipe in it\n|SC1000\t|$ is not used specially and should therefore be escaped.\n|SC1001\t|This \\c will be a regular \'c\' in this context.\n|SC1007\t|Remove space after = if trying to assign a value (or for empty string, use var=\'\' ...).\n|SC1010\t|Use semicolon or linefeed before done (or quote to make it literal).\n|SC1018\t|This is a unicode non-breaking space. Delete it and retype as space.\n|SC1035\t|You need a space here\n|SC1045\t|It\'s not foo &; bar, just foo & bar.\n|SC1065\t|Trying to declare parameters? Don\'t. Use () and refer to params as $1, $2 etc.\n|SC1066\t|代入の左側に$を使用しないでください。\n|SC1068\t|Don\'t put spaces around the = in assignments.\n|SC1077\t|For command expansion, the tick should slant left (` vs ´).\n|SC1078\t|Did you forget to close this double-quoted string?\n|SC1079\t|This is actually an end quote, but due to next char, it looks suspect.\n|SC1081\t|Scripts are case sensitive. Use if, not If.\n|SC1083\t|This {/} is literal. Check expression (missing ;/\\n?) or quote it.\n|SC1086\t|forループのイテレータ名に$を使用しないでください。\n|SC1087\t|Braces are required when expanding arrays, as in ${array[idx]}.\n|SC1095\t|You need a space or linefeed between the function name and body.\n|SC1097\t|Unexpected ==. For assignment, use =. For comparison, use [/[[.\n|SC1098\t|Quote/escape special characters when using eval, e.g. eval "a=(b)".\n|SC1099\t|＃の前にスペースが必要です。\n|SC2026\t|This word is outside of quotes. Did you intend to \'nest \'"\'single quotes\'"\' instead\'?\n|SC2028\t|echo won\'t expand escape sequences. Consider printf.\n|SC2035\t|Use ./*glob* or -- *glob* so names with dashes won\'t become options.\n|SC2046\t|Quote this to prevent word splitting\n|SC2086\t|Double quote to prevent globbing and word splitting.\n|SC2140\t|Word is in the form "A"B"C" (B indicated). Did you mean "ABC" or "A\\"B\\"C"?\n|SC2154\t|varは参照されますが割り当てられません。\n|SC2155\t|Declare and assign separately to avoid masking return values.\n\n\n\n# まとめ\n\nいちいちbuildする手間も省けるので個人的には大活躍している。\nアップデートは現在も続いており簡単なDockerfile作成時はパスを通したディレクトリへ置いておくことで\nサクッとチェックできるのでお勧めです。\n', 'coediting': False, 'comments_count': 2, 'created_at': '2018-11-09T20:53:27+09:00', 'group': None, 'id': 'd49f3f6ba39c88899049', 'likes_count': 705, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'dockerfile', 'versions': []}, {'name': 'kubernetes', 'versions': []}, {'name': 'docker-compose', 'versions': []}, {'name': '静的解析', 'versions': []}], 'title': 'Dockerfileの静的解析ツールが便利すぎた', 'updated_at': '2018-12-09T09:47:07+09:00', 'url': 'https://qiita.com/ryuichi1208/items/d49f3f6ba39c88899049', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/7f011dea3a5bb59f827e46c0a3a7f7cb98dbc147/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65353862306662332d376431642d336239392d653337362d6635313762663035333265652e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/7f011dea3a5bb59f827e46c0a3a7f7cb98dbc147/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f65353862306662332d376431642d336239392d653337362d6635313762663035333265652e6a706567" alt="Q9jiI1pL_400x400.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/e58b0fb3-7d1d-3b99-e376-f517bf0532ee.jpeg"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>cgroups編でも書いたがdockerとは以前にコンテナとは何か良く分からなかったので<br>\n体系的に学んでみました。今回は主要な機能でるカーネルの「namespace」を中心にまとめてみました。</p>\n\n<p>ちなみにmanで見ることもできます<br>\n<a href="https://linuxjm.osdn.jp/html/LDP_man-pages/man7/namespaces.7.html" rel="nofollow noopener" target="_blank">NAMESPACE(7)</a></p>\n\n<h1>\n<span id="namespaceとは" class="fragment"></span><a href="#namespace%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>namespaceとは</h1>\n\n<p>名前空間は、特定の ID 集合に範囲を絞る方法です。<br>\n名前空間を使うと、名前空間が異なれば同じ ID を何回も使用できます。<br>\nまた、特定のプロセスに見える ID 集合を限定することもできます。</p>\n\n<p>例えば、 Linux は、他にもありますが、ネットワークとプロセスの名前空間を提供しています。<br>\nプロセスがプロセス名前空間内で実行されている場合、そのプロセスには同じ名前空間内の他のプロセスだけが見え、通信できるのも名前空間内のプロセスだけです。<br>\nそのため、あるプロセス名前空間内のシェルで ps waux を実行すると、同じ名前空間内の他のプロセスだけが表示されます。</p>\n\n<p>dockerにおけるnamespaceの役割は公式に下記のように記載されています</p>\n\n<blockquote>\n<p>Docker は名前空間（ネームスペース）と呼ばれる技術を利用し、コンテナ （container） と呼ぶワークスペース（作業空間）の分離をもたらします。<br>\nDocker はコンテナ毎に 名前空間 の集まりを作成します。</p>\n</blockquote>\n\n<h1>\n<span id="dockerとカーネル" class="fragment"></span><a href="#docker%E3%81%A8%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB"><i class="fa fa-link"></i></a>dockerとカーネル</h1>\n\n<p>dockerからカーネルに関わる操作は可能です。しかしコンテナごとに異なる操作を行うことはできません。<br>\nカーネルの機能で実現している環境ですので，当然全コンテナから見えるカーネルは同一です。<br>\nしたがって，コンテナから見えるデバイスやロードされているカーネルモジュールは同じになります。</p>\n\n<h1>\n<span id="名前空間api" class="fragment"></span><a href="#%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93api"><i class="fa fa-link"></i></a>名前空間API</h1>\n\n<p>名前空間 API として以下のシステムコールがある。</p>\n\n<ul>\n<li>clone(2) - 新しいプロセスを作成</li>\n<li>setns(2) - 呼び出したプロセスを既存の名前空間に参加させることができる</li>\n<li>unshare(2) -  呼び出したプロセスを新しい名前空間に移動する</li>\n</ul>\n\n<p>上記システムコールを用いてコンテナは独自の名前空間を作成し<br>\nコンテナとしている。</p>\n\n<h1>\n<span id="名前空間一覧" class="fragment"></span><a href="#%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E4%B8%80%E8%A6%A7"><i class="fa fa-link"></i></a>名前空間一覧</h1>\n\n<p>じゃあ具体的に何が分離されているのかを確認。</p>\n\n<table>\n<thead>\n<tr>\n<th>名前空間</th>\n<th>定数</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IPC名前空間</td>\n<td>CLONE_NEWIPC</td>\n<td>IPC(Inter-Process Communication:プロセス間通信)リソースであるSystem V IPCオブジェクト、POSIXメッセージキューを分離する。</td>\n</tr>\n<tr>\n<td>マウント名前空間</td>\n<td>CLONE_NEWNS</td>\n<td>ファイルシステムツリーを分離する</td>\n</tr>\n<tr>\n<td>ネットワーク名前空間</td>\n<td>CLONE_NEWNET</td>\n<td>ネットワークデバイスやIPアドレス、ルーティングテーブルなどのネットワークインタフェースを分離する</td>\n</tr>\n<tr>\n<td>PID名前空間</td>\n<td>CLONE_NEWPID</td>\n<td>PID(プロセスID)空間を分離する</td>\n</tr>\n<tr>\n<td>ユーザー名前空間</td>\n<td>CLONE_NEWUSER</td>\n<td>UID/GIDを分離する</td>\n</tr>\n<tr>\n<td>UTS名前空間</td>\n<td>CLONE_NEWUTS</td>\n<td>uname() システムコールから返される2つのシステム識別子(nodename および domainname)を分離する</td>\n</tr>\n</tbody>\n</table>\n\n<p>ちなみに/proc/{pid}/ns/ 以下で名前空間の一覧が確認できます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /proc/<span class="nv">$$</span>/ns/\n合計 0\nlrwxrwxrwx 1 root root 0 11月  8 16:54 ipc -&gt; ipc:[4026531839]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 mnt -&gt; mnt:[4026531840]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 net -&gt; net:[4026531968]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 pid -&gt; pid:[4026531836]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 user -&gt; user:[4026531837]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 uts -&gt; uts:[4026531838]\n</pre></div></div>\n\n<p>実際の実装方法は「include/kernel/nsproxy.h」で定義されている、<br>\nnsproxy 構造体で確認も出来る。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">include/linux/nsproxy.h</span></div>\n<div class="highlight"><pre><span class="cm">/*\n * A structure to contain pointers to all per-process\n * namespaces - fs (mount), uts, network, sysvipc, etc.\n *\n * The pid namespace is an exception -- it\'s accessed using\n * task_active_pid_ns.  The pid namespace here is the\n * namespace that children will use.\n *\n * \'count\' is the number of tasks holding a reference.\n * The count for each namespace, then, will be the number\n * of nsproxies pointing to it, not the number of tasks.\n *\n * The nsproxy is shared by tasks which share all namespaces.\n * As soon as a single namespace is cloned or unshared, the\n * nsproxy is copied.\n */</span>\n<span class="k">struct</span> <span class="n">nsproxy</span> <span class="p">{</span>\n    <span class="n">atomic_t</span> <span class="n">count</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">uts_namespace</span> <span class="o">*</span><span class="n">uts_ns</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">ipc_namespace</span> <span class="o">*</span><span class="n">ipc_ns</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">mnt_namespace</span> <span class="o">*</span><span class="n">mnt_ns</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">pid_namespace</span> <span class="o">*</span><span class="n">pid_ns_for_children</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">net</span>       <span class="o">*</span><span class="n">net_ns</span><span class="p">;</span>\n    <span class="k">struct</span> <span class="n">cgroup_namespace</span> <span class="o">*</span><span class="n">cgroup_ns</span><span class="p">;</span>\n<span class="p">};</span>\n<span class="k">extern</span> <span class="k">struct</span> <span class="n">nsproxy</span> <span class="n">init_nsproxy</span><span class="p">;</span>\n</pre></div>\n</div>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>Docker はコンテナごとに 名前空間 の集まりを作成し<br>\n作業空間を作成する。</p>\n\n<p>階層型仮想化って言う人もいるけれどなんとなく意味が分かりました。</p>\n\n<p>docckerはカーネルが持つ複数の機能を利用して実装している。</p>\n\n<p>ホスト型/ハイパーバイザー型の仮想化を学んだあとに学習していくと<br>\nここが混乱を招きそうですね。</p>\n\n<h1>\n<span id="参考リンク" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>参考リンク</h1>\n\n<p>◆ <a href="https://docs.docker.com/engine/security/userns-remap/" rel="nofollow noopener" target="_blank">公式ドキュメント</a><br>\n◆ <a href="https://rest-term.com/archives/3287/" rel="nofollow noopener" target="_blank">Linuxカーネル Docker関連 namespaceのメモ</a><br>\n◆ <a href="https://qiita.com/tajima_taso/items/28938415846dcc2e83ff" id="reference-db1d65f3de3e0f14e7e2">原理原則で理解するDocker</a></p>\n', 'body': "![Q9jiI1pL_400x400.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/e58b0fb3-7d1d-3b99-e376-f517bf0532ee.jpeg)\n\n# 背景\n\ncgroups編でも書いたがdockerとは以前にコンテナとは何か良く分からなかったので\n体系的に学んでみました。今回は主要な機能でるカーネルの「namespace」を中心にまとめてみました。\n\nちなみにmanで見ることもできます\n[NAMESPACE(7)](https://linuxjm.osdn.jp/html/LDP_man-pages/man7/namespaces.7.html)\n\n# namespaceとは\n\n名前空間は、特定の ID 集合に範囲を絞る方法です。\n名前空間を使うと、名前空間が異なれば同じ ID を何回も使用できます。\nまた、特定のプロセスに見える ID 集合を限定することもできます。\n\n例えば、 Linux は、他にもありますが、ネットワークとプロセスの名前空間を提供しています。\nプロセスがプロセス名前空間内で実行されている場合、そのプロセスには同じ名前空間内の他のプロセスだけが見え、通信できるのも名前空間内のプロセスだけです。\nそのため、あるプロセス名前空間内のシェルで ps waux を実行すると、同じ名前空間内の他のプロセスだけが表示されます。\n\ndockerにおけるnamespaceの役割は公式に下記のように記載されています\n\n> Docker は名前空間（ネームスペース）と呼ばれる技術を利用し、コンテナ （container） と呼ぶワークスペース（作業空間）の分離をもたらします。\n> Docker はコンテナ毎に 名前空間 の集まりを作成します。\n\n# dockerとカーネル\n\ndockerからカーネルに関わる操作は可能です。しかしコンテナごとに異なる操作を行うことはできません。\nカーネルの機能で実現している環境ですので，当然全コンテナから見えるカーネルは同一です。\nしたがって，コンテナから見えるデバイスやロードされているカーネルモジュールは同じになります。\n\n# 名前空間API\n\n名前空間 API として以下のシステムコールがある。\n\n* clone(2) - 新しいプロセスを作成\n* setns(2) - 呼び出したプロセスを既存の名前空間に参加させることができる\n* unshare(2) -  呼び出したプロセスを新しい名前空間に移動する\n\n上記システムコールを用いてコンテナは独自の名前空間を作成し\nコンテナとしている。\n\n# 名前空間一覧\n\nじゃあ具体的に何が分離されているのかを確認。\n\n|名前空間|定数|概要|\n---------|----|----|\n|IPC名前空間|CLONE_NEWIPC|IPC(Inter-Process Communication:プロセス間通信)リソースであるSystem V IPCオブジェクト、POSIXメッセージキューを分離する。\n|マウント名前空間|CLONE_NEWNS|ファイルシステムツリーを分離する\n|ネットワーク名前空間|CLONE_NEWNET|ネットワークデバイスやIPアドレス、ルーティングテーブルなどのネットワークインタフェースを分離する\n|PID名前空間|CLONE_NEWPID|PID(プロセスID)空間を分離する\n|ユーザー名前空間|CLONE_NEWUSER|UID/GIDを分離する\n|UTS名前空間|CLONE_NEWUTS|uname() システムコールから返される2つのシステム識別子(nodename および domainname)を分離する\n\nちなみに/proc/{pid}/ns/ 以下で名前空間の一覧が確認できます。\n\n``` bash\n$ ls -l /proc/$$/ns/\n合計 0\nlrwxrwxrwx 1 root root 0 11月  8 16:54 ipc -> ipc:[4026531839]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 mnt -> mnt:[4026531840]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 net -> net:[4026531968]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 pid -> pid:[4026531836]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 user -> user:[4026531837]\nlrwxrwxrwx 1 root root 0 11月  8 16:54 uts -> uts:[4026531838]\n```\n\n実際の実装方法は「include/kernel/nsproxy.h」で定義されている、\nnsproxy 構造体で確認も出来る。\n\n``` c:include/linux/nsproxy.h\n/*\n * A structure to contain pointers to all per-process\n * namespaces - fs (mount), uts, network, sysvipc, etc.\n *\n * The pid namespace is an exception -- it's accessed using\n * task_active_pid_ns.  The pid namespace here is the\n * namespace that children will use.\n *\n * 'count' is the number of tasks holding a reference.\n * The count for each namespace, then, will be the number\n * of nsproxies pointing to it, not the number of tasks.\n *\n * The nsproxy is shared by tasks which share all namespaces.\n * As soon as a single namespace is cloned or unshared, the\n * nsproxy is copied.\n */\nstruct nsproxy {\n\tatomic_t count;\n\tstruct uts_namespace *uts_ns;\n\tstruct ipc_namespace *ipc_ns;\n\tstruct mnt_namespace *mnt_ns;\n\tstruct pid_namespace *pid_ns_for_children;\n\tstruct net \t     *net_ns;\n\tstruct cgroup_namespace *cgroup_ns;\n};\nextern struct nsproxy init_nsproxy;\n```\n\n# まとめ\n\nDocker はコンテナごとに 名前空間 の集まりを作成し\n作業空間を作成する。\n\n階層型仮想化って言う人もいるけれどなんとなく意味が分かりました。\n\ndocckerはカーネルが持つ複数の機能を利用して実装している。\n\nホスト型/ハイパーバイザー型の仮想化を学んだあとに学習していくと\nここが混乱を招きそうですね。\n\n# 参考リンク\n◆ [公式ドキュメント](https://docs.docker.com/engine/security/userns-remap/)\n◆ [Linuxカーネル Docker関連 namespaceのメモ](https://rest-term.com/archives/3287/)\n◆ [原理原則で理解するDocker](https://qiita.com/tajima_taso/items/28938415846dcc2e83ff)\n", 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-08T18:54:39+09:00', 'group': None, 'id': '11b6bd3b0445fcf21aab', 'likes_count': 9, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'kernel', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'cgroups', 'versions': []}, {'name': 'namespace', 'versions': []}], 'title': 'Dockerの実装確認 - namespace編 -', 'updated_at': '2018-11-09T20:54:38+09:00', 'url': 'https://qiita.com/ryuichi1208/items/11b6bd3b0445fcf21aab', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/262d69bacf75ea20bc68c72320241fde660fb2c8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33383933336561302d396366382d376331322d373561642d6262393938383961303835302e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/262d69bacf75ea20bc68c72320241fde660fb2c8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f33383933336561302d396366382d376331322d373561642d6262393938383961303835302e6a706567" alt="Q9jiI1pL_400x400.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/38933ea0-9cf8-7c12-75ad-bb99889a0850.jpeg"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>カーネルにはコンテナという機能はなく、<br>\nDockerはカーネルの機能の組み合わせで実装されている。<br>\nその中でも主要なものが「cgroups」と「namespace」である。</p>\n\n<p>今回はcgroupsについて調べてみたことを記載します。</p>\n\n<h1>\n<span id="cgroupsって" class="fragment"></span><a href="#cgroups%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>cgroupsって？</h1>\n\n<p>cgroupsは control groups の略でタスクをグループ化したり、<br>\nそのグループ内のタスクに対して様々なリソース制御を行うための仕組みです。<br>\nnamespaceとの違いは名前空間の制御ではなくCPUやメモリといった物理的なリソースを<br>\n制御する機能である点。</p>\n\n<p>具体的には各コンテナに対するCPU時間の割り当て優先度や、メモリ使用量、<br>\nデータ転送に伴う帯域などを調整している。</p>\n\n<h1>\n<span id="大正義wikipedia様より引用" class="fragment"></span><a href="#%E5%A4%A7%E6%AD%A3%E7%BE%A9wikipedia%E6%A7%98%E3%82%88%E3%82%8A%E5%BC%95%E7%94%A8"><i class="fa fa-link"></i></a>大正義wikipedia様より引用</h1>\n\n<p>ちょっと正確に知りたい方用へcgroupsについて引用</p>\n\n<blockquote>\n<p>cgroups (control groups) とは、プロセスグループのリソース(CPU、メモリ、ディスクI/Oなど)の利用を制限・隔離するLinuxカーネルの機能。"process containers" という名称で Rohit Seth が2006年9月から開発を開始し[1]、2007年に cgroups と名称変更され、2008年1月に Linux カーネル 2.6.24 にマージされた[2]。それ以来、多くの機能とコントローラが追加された。</p>\n</blockquote>\n\n<h1>\n<span id="実際に制御可能なリソース" class="fragment"></span><a href="#%E5%AE%9F%E9%9A%9B%E3%81%AB%E5%88%B6%E5%BE%A1%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9"><i class="fa fa-link"></i></a>実際に制御可能なリソース</h1>\n\n<p>/sys/fs/cgroup 以下に仮想的なファイルシステムとしてのインタフェースが提供されています.<br>\nここでファイル/ディレクトリ操作をすることで様々なリソース制御を行います。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /sys/fs/cgroup/\ntotal 0\ndr-xr-xr-x 6 root root  0 Nov  3  2016 blkio\nlrwxrwxrwx 1 root root 11 Nov  3  2016 cpu -&gt; cpu,cpuacct\nlrwxrwxrwx 1 root root 11 Nov  3  2016 cpuacct -&gt; cpu,cpuacct\ndr-xr-xr-x 6 root root  0 Nov  3  2016 cpu,cpuacct\ndr-xr-xr-x 3 root root  0 Nov  3  2016 cpuset\ndr-xr-xr-x 6 root root  0 Nov  3  2016 devices\ndr-xr-xr-x 3 root root  0 Nov  3  2016 freezer\ndr-xr-xr-x 6 root root  0 Nov  3  2016 memory\ndr-xr-xr-x 3 root root  0 Nov  3  2016 net_cls\ndr-xr-xr-x 6 root root  0 Nov  3  2016 systemd\n</pre></div></div>\n\n<p>これらはサブシステムと呼ばれています。<br>\nそれぞれについては下記をご参照ください。</p>\n\n<table>\n<thead>\n<tr>\n<th>サブシステム</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blkio</td>\n<td>ブロックデバイスの入出力</td>\n</tr>\n<tr>\n<td>cpu</td>\n<td>CPUリソースの割り当て・制限</td>\n</tr>\n<tr>\n<td>cpuacct</td>\n<td>タスクが消費するCPU時間をレポート</td>\n</tr>\n<tr>\n<td>cpuset</td>\n<td>グループへのCPU，メモリノードの割り当て</td>\n</tr>\n<tr>\n<td>devices</td>\n<td>デバイスへのアクセス制限</td>\n</tr>\n<tr>\n<td>freezer</td>\n<td>グループに属するプロセスの一時停止/再開</td>\n</tr>\n<tr>\n<td>hugetlb</td>\n<td>cgroupからのhugetlbの使用</td>\n</tr>\n<tr>\n<td>memory</td>\n<td>タスクが消費するメモリリソースのレポートと制限</td>\n</tr>\n<tr>\n<td>perf_event</td>\n<td>cgroup単位でのperfツールの使用</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="cgroupの実装" class="fragment"></span><a href="#cgroup%E3%81%AE%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>cgroupの実装</h1>\n\n<p>実際にコードを読もう！って思ったのですが特にやる気が起きませんでしたので割愛<br>\n読むとしたら</p>\n\n<ul>\n<li>kernel/cgroup/cgroup.c</li>\n<li>security/device_cgroup.c</li>\n<li>mm/hugetlb_cgroup.c</li>\n</ul>\n\n<p>あたりでしょうか(詳しい方教えてください)</p>\n\n<h1>\n<span id="ちょっとだけ詳しく" class="fragment"></span><a href="#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%A0%E3%81%91%E8%A9%B3%E3%81%97%E3%81%8F"><i class="fa fa-link"></i></a>ちょっとだけ詳しく</h1>\n\n<p>Linux のプロセスは、task_struct 構造体というデータ構造で表現されている。<br>\nその構造体のメンバである「css_set」がcgroupを管理するための構造体。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">include/linux/sched.h</span></div>\n<div class="highlight"><pre><span class="cp">#ifdef CONFIG_CGROUPS\n</span>  <span class="cm">/* Control Group info protected by css_set_lock */</span>\n  <span class="k">struct</span> <span class="n">css_set</span> <span class="n">__rcu</span> <span class="o">*</span><span class="n">cgroups</span><span class="p">;</span>\n  <span class="cm">/* cg_list protected by css_set_lock and tsk-&gt;alloc_lock */</span>\n  <span class="k">struct</span> <span class="n">list_head</span> <span class="n">cg_list</span><span class="p">;</span>\n<span class="cp">#endif\n</span></pre></div>\n</div>\n\n<p>この構造体を追っていけば処理は見えそうです。(追いませんが)</p>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>dockerで実装されているcpu 割り当てだったりリソースの割り当てが<br>\nどのように行われているかの概要だけでもつかめたので個人的には満足。</p>\n\n<p>これ以上は深入りしない(できない)</p>\n', 'body': '![Q9jiI1pL_400x400.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/38933ea0-9cf8-7c12-75ad-bb99889a0850.jpeg)\n\n# 背景\n\nカーネルにはコンテナという機能はなく、\nDockerはカーネルの機能の組み合わせで実装されている。\nその中でも主要なものが「cgroups」と「namespace」である。\n\n今回はcgroupsについて調べてみたことを記載します。\n\n# cgroupsって？\n\ncgroupsは control groups の略でタスクをグループ化したり、\nそのグループ内のタスクに対して様々なリソース制御を行うための仕組みです。\nnamespaceとの違いは名前空間の制御ではなくCPUやメモリといった物理的なリソースを\n制御する機能である点。\n\n具体的には各コンテナに対するCPU時間の割り当て優先度や、メモリ使用量、\nデータ転送に伴う帯域などを調整している。\n\n# 大正義wikipedia様より引用\n\nちょっと正確に知りたい方用へcgroupsについて引用\n\n> cgroups (control groups) とは、プロセスグループのリソース(CPU、メモリ、ディスクI/Oなど)の利用を制限・隔離するLinuxカーネルの機能。"process containers" という名称で Rohit Seth が2006年9月から開発を開始し[1]、2007年に cgroups と名称変更され、2008年1月に Linux カーネル 2.6.24 にマージされた[2]。それ以来、多くの機能とコントローラが追加された。\n\n# 実際に制御可能なリソース\n\n/sys/fs/cgroup 以下に仮想的なファイルシステムとしてのインタフェースが提供されています.\nここでファイル/ディレクトリ操作をすることで様々なリソース制御を行います。\n\n``` bash\n$ ls -l /sys/fs/cgroup/\ntotal 0\ndr-xr-xr-x 6 root root  0 Nov  3  2016 blkio\nlrwxrwxrwx 1 root root 11 Nov  3  2016 cpu -> cpu,cpuacct\nlrwxrwxrwx 1 root root 11 Nov  3  2016 cpuacct -> cpu,cpuacct\ndr-xr-xr-x 6 root root  0 Nov  3  2016 cpu,cpuacct\ndr-xr-xr-x 3 root root  0 Nov  3  2016 cpuset\ndr-xr-xr-x 6 root root  0 Nov  3  2016 devices\ndr-xr-xr-x 3 root root  0 Nov  3  2016 freezer\ndr-xr-xr-x 6 root root  0 Nov  3  2016 memory\ndr-xr-xr-x 3 root root  0 Nov  3  2016 net_cls\ndr-xr-xr-x 6 root root  0 Nov  3  2016 systemd\n```\n\nこれらはサブシステムと呼ばれています。\nそれぞれについては下記をご参照ください。\n\n|サブシステム|概要|\n----|----\n|blkio|ブロックデバイスの入出力\n|cpu|CPUリソースの割り当て・制限\n|cpuacct|タスクが消費するCPU時間をレポート\n|cpuset|グループへのCPU，メモリノードの割り当て\n|devices|デバイスへのアクセス制限\n|freezer|グループに属するプロセスの一時停止/再開\n|hugetlb|cgroupからのhugetlbの使用\n|memory|タスクが消費するメモリリソースのレポートと制限\n|perf_event|cgroup単位でのperfツールの使用\n\n# cgroupの実装\n\n実際にコードを読もう！って思ったのですが特にやる気が起きませんでしたので割愛\n読むとしたら\n\n* kernel/cgroup/cgroup.c\n* security/device_cgroup.c\n* mm/hugetlb_cgroup.c\n\nあたりでしょうか(詳しい方教えてください)\n\n# ちょっとだけ詳しく\n\nLinux のプロセスは、task_struct 構造体というデータ構造で表現されている。\nその構造体のメンバである「css_set」がcgroupを管理するための構造体。\n\n``` c:include/linux/sched.h\n#ifdef CONFIG_CGROUPS\n  /* Control Group info protected by css_set_lock */\n  struct css_set __rcu *cgroups;\n  /* cg_list protected by css_set_lock and tsk->alloc_lock */\n  struct list_head cg_list;\n#endif\n```\n\nこの構造体を追っていけば処理は見えそうです。(追いませんが)\n\n# まとめ\n\ndockerで実装されているcpu 割り当てだったりリソースの割り当てが\nどのように行われているかの概要だけでもつかめたので個人的には満足。\n\nこれ以上は深入りしない(できない)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-07T21:50:16+09:00', 'group': None, 'id': 'c14233d6604eafc46cbf', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'kernel', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'cgroups', 'versions': []}, {'name': 'namespace', 'versions': []}], 'title': 'Dockerの実装確認 - cgroups編 -', 'updated_at': '2018-11-09T20:54:57+09:00', 'url': 'https://qiita.com/ryuichi1208/items/c14233d6604eafc46cbf', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/450d62b05f54a3a00b3c9c89b394ea5cd8093e1f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64356132353537342d353932392d633065372d333964352d3234323161666332356530372e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/450d62b05f54a3a00b3c9c89b394ea5cd8093e1f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64356132353537342d353932392d633065372d333964352d3234323161666332356530372e706e67" alt="circleci.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/d5a25574-5929-c0e7-39d5-2421afc25e07.png"></a></p>\n\n<h1>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h1>\n\n<p>普段はCIなんて言葉目にしないけどなんとなく知っておこうと思いCircleCIなるサービスを<br>\n知り実施してみました。<br>\n普段はJenkinsでCIのような事はやってます。</p>\n\n<h1>\n<span id="circleciって" class="fragment"></span><a href="#circleci%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>CircleCIって？</h1>\n\n<p>GitHub / BitBucketのPUSHに反応して、ビルドからテストを自動化してくれるCIサービス<br>\njenkinsと比較して一番にあがるのは、Jenkinsは自前でJenkinsサーバを立てる必要があるのに対してCircleCIはクラウドのwebサービスって言う点です。</p>\n\n<p>他にもいろいろメリット/デメリットはあるようです。</p>\n\n<p><a href="https://circleci.com/" class="autolink" rel="nofollow noopener" target="_blank">https://circleci.com/</a></p>\n\n<h1>\n<span id="ci継続的インテグレーションとは" class="fragment"></span><a href="#ci%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>CI(継続的インテグレーション)とは</h1>\n\n<p>特に言及せずwikiを引用</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>CI（英: continuous integration）とは、主にプログラマーのアプリケーション作成時の品質改善や納期の短縮のための習慣のことである。\nエクストリーム・プログラミング (XP) のプラクティスの一つで、狭義にはビルドやテスト、\nインスペクションなどを継続的に実行していくことを意味する[1]。\n特に、1990年代後半以降の開発においては、継続的インテグレーションをサポートするソフトウェアを使用する傾向が強まってきた。\n</pre></div></div>\n\n<h1>\n<span id="ネイティブdockerのサポート" class="fragment"></span><a href="#%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96docker%E3%81%AE%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88"><i class="fa fa-link"></i></a>ネイティブDockerのサポート</h1>\n\n<p>1.0でもDockerサポートは存在しています。しかし、CircleCI自身がベースコンテナとしてLXCを利用していることの影響で、独自パッチを当てた古いバージョンに限定されています。</p>\n\n<p>2.0では仮想マシンが起動して純粋なDockerを動かせるようになったため、最新の機能がフルに利用できるようになりました。CIのベースとしてこの仮想マシンを起動することも、Dockerイメージをベースにしつつ、途中でこの仮想マシンを起動することもできます。</p>\n\n<h1>\n<span id="必要なもの前提知識" class="fragment"></span><a href="#%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE%E5%89%8D%E6%8F%90%E7%9F%A5%E8%AD%98"><i class="fa fa-link"></i></a>必要なもの/前提知識</h1>\n\n<ul>\n<li>GitHubのアカウント</li>\n<li>gitの知識(pushできればオッケー)</li>\n</ul>\n\n<h1>\n<span id="流れ" class="fragment"></span><a href="#%E6%B5%81%E3%82%8C"><i class="fa fa-link"></i></a>流れ</h1>\n\n<ul>\n<li>① githubアカウントを作る</li>\n<li>② githubでCI対象のリポジトリを作成</li>\n<li>③ CircleCI上でgithubアカウントと連携する</li>\n<li>④ ローカルでリポジトリに設定ファイル（.circleci/config.yml）を作る</li>\n<li>⑤ pushしたら自動でビルド/実行して結果が見れる</li>\n</ul>\n\n<p>手順①②は割愛します。</p>\n\n<h1>\n<span id="-circleci上でgithubアカウントと連携する" class="fragment"></span><a href="#-circleci%E4%B8%8A%E3%81%A7github%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%A8%E9%80%A3%E6%90%BA%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>③ CircleCI上でgithubアカウントと連携する</h1>\n\n<p><a href="https://camo.qiitausercontent.com/82adfb616c2d7cfac2b9063f4812f89e171cbb89/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62646631633365322d393761302d303230332d306366662d6439346437363731313639302e706e67" target="_blank" rel="nofollow noopener"><img width="1186" alt="スクリーンショット 2018-11-06 20.17.41.png" src="https://camo.qiitausercontent.com/82adfb616c2d7cfac2b9063f4812f89e171cbb89/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f62646631633365322d393761302d303230332d306366662d6439346437363731313639302e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/bdf1c3e2-97a0-0203-0cff-d94d76711690.png"></a></p>\n\n<p>リポジトリを作成したらCircleCIのホームから「ADD Project」を選択し、<br>\n先程作成したリポジトリをSet UPします。</p>\n\n<h1>\n<span id="-ローカルでリポジトリに設定ファイルcircleciconfigymlを作る" class="fragment"></span><a href="#-%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABcircleciconfigyml%E3%82%92%E4%BD%9C%E3%82%8B"><i class="fa fa-link"></i></a>④ ローカルでリポジトリに設定ファイル（.circleci/config.yml）を作る</h1>\n\n<p>リポジトリのルートディレクトリ配下に下記ファイルを作成してください。<br>\nこのファイルが設定ファイルとなりビルド命令等をもとに実行されます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># pwd</span>\ncircleci_sample\n\n<span class="c"># ls .circleci/config.yml </span>\n.circleci/config.yml\n</pre></div></div>\n\n<p>とりあえず「Hello world」を出力する</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">config.yml</span></div>\n<div class="highlight"><pre><span class="na">version</span><span class="pi">:</span> <span class="s">2</span>\n<span class="na">jobs</span><span class="pi">:</span>\n  <span class="na">build</span><span class="pi">:</span>\n    <span class="na">docker</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">alpine</span>\n\n    <span class="na">steps</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">checkout</span>\n      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>\n          <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>\n          <span class="na">command</span><span class="pi">:</span> <span class="s">echo "hello world!"</span>\n</pre></div>\n</div>\n\n<h1>\n<span id="-pushしたら自動でビルド実行して結果が見れる" class="fragment"></span><a href="#-push%E3%81%97%E3%81%9F%E3%82%89%E8%87%AA%E5%8B%95%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E7%B5%90%E6%9E%9C%E3%81%8C%E8%A6%8B%E3%82%8C%E3%82%8B"><i class="fa fa-link"></i></a>⑤ pushしたら自動でビルド/実行して結果が見れる</h1>\n\n<p>あとはgithubへpushすれば自動的に上記の命令が実行されます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>git add <span class="nt">-A</span> <span class="nb">.</span>\n<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"hello world!"</span>\n<span class="nv">$ </span>git push\n</pre></div></div>\n\n<p>push後は再度CircleCIのページへ戻りJobを確認。<br>\nエラー等がなければ実行完了です。</p>\n\n<p><a href="https://camo.qiitausercontent.com/49a74b72c0b5f81211d61c5778496ede6677186c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32386566303031372d363230312d353462372d623234642d3338636539643237656565392e706e67" target="_blank" rel="nofollow noopener"><img width="804" alt="スクリーンショット 2018-11-06 20.28.25.png" src="https://camo.qiitausercontent.com/49a74b72c0b5f81211d61c5778496ede6677186c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32386566303031372d363230312d353462372d623234642d3338636539643237656565392e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/28ef0017-6201-54b7-b24d-38ce9d27eee9.png"></a></p>\n\n<p>実行結果を簡単に取得可能です。</p>\n\n<p><a href="https://camo.qiitausercontent.com/c8d12d13a0152933efc2d6bfdd5be3327e373f59/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36343634623331302d343032332d363331612d366166342d3464386334313530636136392e706e67" target="_blank" rel="nofollow noopener"><img width="1021" alt="スクリーンショット 2018-11-06 20.30.12.png" src="https://camo.qiitausercontent.com/c8d12d13a0152933efc2d6bfdd5be3327e373f59/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f36343634623331302d343032332d363331612d366166342d3464386334313530636136392e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/6464b310-4023-631a-6af4-4d8c4150ca69.png"></a></p>\n\n<h1>\n<span id="yamlのローカルテスト方法" class="fragment"></span><a href="#yaml%E3%81%AE%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%86%E3%82%B9%E3%83%88%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>yamlのローカルテスト方法</h1>\n\n<p>上記yamlの確認はgithubへのpushが必須だと思っていましたがそんな事はなく<br>\nローカルでのテスト実行も可能。素晴らしい。。。</p>\n\n<p>以下のように「circleci」をインストール</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># インストール</span>\n<span class="nv">$ </span>curl <span class="nt">-o</span> /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> +x /usr/local/bin/circleci\n\n<span class="c"># アップデート</span>\n<span class="nv">$ </span>circleci update\n\n<span class="c"># テスト</span>\n<span class="nv">$ </span><span class="nb">cd</span> <span class="k">${</span><span class="p">プロジェクトroot</span><span class="k">}</span>\n<span class="nv">$ </span>circleci build\n~\n  <span class="c">#!/bin/sh -eo pipefail</span>\n<span class="nb">echo</span> <span class="s2">"hello world!"</span>\nhello world!\nSuccess!\n</pre></div></div>\n\n<h1>\n<span id="所感" class="fragment"></span><a href="#%E6%89%80%E6%84%9F"><i class="fa fa-link"></i></a>所感</h1>\n\n<p>Jenkinsのような面倒な手順なくCIが出来るのはすごいと思う<br>\n凝ったことをやらない限りは十分な機能だと思いました。</p>\n', 'body': '![circleci.png](https://qiita-image-store.s3.amazonaws.com/0/258841/d5a25574-5929-c0e7-39d5-2421afc25e07.png)\n\n# 背景\n\n普段はCIなんて言葉目にしないけどなんとなく知っておこうと思いCircleCIなるサービスを\n知り実施してみました。\n普段はJenkinsでCIのような事はやってます。\n\n# CircleCIって？\n\nGitHub / BitBucketのPUSHに反応して、ビルドからテストを自動化してくれるCIサービス\njenkinsと比較して一番にあがるのは、Jenkinsは自前でJenkinsサーバを立てる必要があるのに対してCircleCIはクラウドのwebサービスって言う点です。\n\n他にもいろいろメリット/デメリットはあるようです。\n\nhttps://circleci.com/\n\n# CI(継続的インテグレーション)とは\n\n特に言及せずwikiを引用\n\n```\nCI（英: continuous integration）とは、主にプログラマーのアプリケーション作成時の品質改善や納期の短縮のための習慣のことである。\nエクストリーム・プログラミング (XP) のプラクティスの一つで、狭義にはビルドやテスト、\nインスペクションなどを継続的に実行していくことを意味する[1]。\n特に、1990年代後半以降の開発においては、継続的インテグレーションをサポートするソフトウェアを使用する傾向が強まってきた。\n```\n\n# ネイティブDockerのサポート\n\n1.0でもDockerサポートは存在しています。しかし、CircleCI自身がベースコンテナとしてLXCを利用していることの影響で、独自パッチを当てた古いバージョンに限定されています。\n\n2.0では仮想マシンが起動して純粋なDockerを動かせるようになったため、最新の機能がフルに利用できるようになりました。CIのベースとしてこの仮想マシンを起動することも、Dockerイメージをベースにしつつ、途中でこの仮想マシンを起動することもできます。\n\n# 必要なもの/前提知識\n\n* GitHubのアカウント\n* gitの知識(pushできればオッケー)\n\n# 流れ\n\n* ① githubアカウントを作る\n* ② githubでCI対象のリポジトリを作成\n* ③ CircleCI上でgithubアカウントと連携する\n* ④ ローカルでリポジトリに設定ファイル（.circleci/config.yml）を作る\n* ⑤ pushしたら自動でビルド/実行して結果が見れる\n\n手順①②は割愛します。\n\n# ③ CircleCI上でgithubアカウントと連携する\n\n<img width="1186" alt="スクリーンショット 2018-11-06 20.17.41.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/bdf1c3e2-97a0-0203-0cff-d94d76711690.png">\n\nリポジトリを作成したらCircleCIのホームから「ADD Project」を選択し、\n先程作成したリポジトリをSet UPします。\n\n# ④ ローカルでリポジトリに設定ファイル（.circleci/config.yml）を作る\n\nリポジトリのルートディレクトリ配下に下記ファイルを作成してください。\nこのファイルが設定ファイルとなりビルド命令等をもとに実行されます。\n\n``` bash\n# pwd\ncircleci_sample\n\n# ls .circleci/config.yml \n.circleci/config.yml\n```\n\nとりあえず「Hello world」を出力する\n\n``` yaml:config.yml\nversion: 2\njobs:\n  build:\n    docker:\n      - image: alpine\n\n    steps:\n      - checkout\n      - run:\n          name: Install dependencies\n          command: echo "hello world!"\n```\n\n# ⑤ pushしたら自動でビルド/実行して結果が見れる\n\nあとはgithubへpushすれば自動的に上記の命令が実行されます。\n\n``` bash\n$ git add -A .\n$ git commit -m "hello world!"\n$ git push\n```\n\npush後は再度CircleCIのページへ戻りJobを確認。\nエラー等がなければ実行完了です。\n\n<img width="804" alt="スクリーンショット 2018-11-06 20.28.25.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/28ef0017-6201-54b7-b24d-38ce9d27eee9.png">\n\n実行結果を簡単に取得可能です。\n\n<img width="1021" alt="スクリーンショット 2018-11-06 20.30.12.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/6464b310-4023-631a-6af4-4d8c4150ca69.png">\n\n# yamlのローカルテスト方法\n\n上記yamlの確認はgithubへのpushが必須だと思っていましたがそんな事はなく\nローカルでのテスト実行も可能。素晴らしい。。。\n\n以下のように「circleci」をインストール\n\n``` bash\n# インストール\n$ curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci && chmod +x /usr/local/bin/circleci\n\n# アップデート\n$ circleci update\n\n# テスト\n$ cd ${プロジェクトroot}\n$ circleci build\n~\n  #!/bin/sh -eo pipefail\necho "hello world!"\nhello world!\nSuccess!\n```\n\n# 所感\n\nJenkinsのような面倒な手順なくCIが出来るのはすごいと思う\n凝ったことをやらない限りは十分な機能だと思いました。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-06T20:39:14+09:00', 'group': None, 'id': 'a83241c97519bc84c507', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'CI', 'versions': []}, {'name': 'CircleCI2.0', 'versions': []}], 'title': 'CircleCIでGitHubのプッシュをフック', 'updated_at': '2018-11-09T21:36:05+09:00', 'url': 'https://qiita.com/ryuichi1208/items/a83241c97519bc84c507', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="elasticsearchとは" class="fragment"></span><a href="#elasticsearch%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Elasticsearchとは</h1>\n\n<p>Elasticsearch社が開発を主導するオープンソースソフトウェア（OSS）</p>\n\n<h1>\n<span id="elastic-stackとは" class="fragment"></span><a href="#elastic-stack%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Elastic Stackとは</h1>\n\n<p>「Elastic Stack」とは、Webサービスの効率的な運営・管理を実現するオープンソースソフトウェア製品群。<br>\nBeats, Logstash, Elasticsearch, Kibanaの組合せを示し，大量データの収集 ・ 蓄積 ・ 可視化技術の基盤ツー<br>\nルとして注目されているものの 1 つ。</p>\n\n<h1>\n<span id="今回主題のmetricbeatとは" class="fragment"></span><a href="#%E4%BB%8A%E5%9B%9E%E4%B8%BB%E9%A1%8C%E3%81%AEmetricbeat%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>今回主題のMetricbeatとは</h1>\n\n<p>システムの統計情報（Metric）を収集するbeatです。 いわゆるOSで取得できるCPUやメモリなどの情報、および、モジュールを通してApacheやMySQLその他の統計情報も、ちょっとした設定をするだけで収集できる様になっています。</p>\n\n<p>コンテナの可視化もできます。</p>\n\n<h1>\n<span id="beats" class="fragment"></span><a href="#beats"><i class="fa fa-link"></i></a>beats</h1>\n\n<p>データの収集、送信をするBeatsというのがあります。<br>\nBeatsには、下記6種類がある。</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">名前</th>\n<th style="text-align: left">概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">Filebeat</td>\n<td style="text-align: left">ログファイルの収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Metricbeat</td>\n<td style="text-align: left">CPU,メモリ等の情報収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Packetbeat</td>\n<td style="text-align: left">パケット情報の収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Winlogbeat</td>\n<td style="text-align: left">Windowsのイベントログの収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Auditbeat</td>\n<td style="text-align: left">監査データの収集</td>\n</tr>\n<tr>\n<td style="text-align: left">Heartbeat</td>\n<td style="text-align: left">リモートから稼働状況の監視</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="必要なもの" class="fragment"></span><a href="#%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>必要なもの</h1>\n\n<ul>\n<li>docker-ce</li>\n<li>docker-compose</li>\n</ul>\n\n<h1>\n<span id="参考リンク等" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF%E7%AD%89"><i class="fa fa-link"></i></a>参考リンク等</h1>\n\n<ul>\n<li><a href="https://www.elastic.co/jp/" rel="nofollow noopener" target="_blank">Elasticsearch公式</a></li>\n<li><a href="https://qiita.com/nskydiving/items/1c2dc4e0b9c98d164329" id="reference-0e39fbc3a4a6518b6054">はじめての Elasticsearch</a></li>\n</ul>\n\n<h1>\n<span id="手順" class="fragment"></span><a href="#%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>手順</h1>\n\n<h3>\n<span id="githubからイメージを取得" class="fragment"></span><a href="#github%E3%81%8B%E3%82%89%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92%E5%8F%96%E5%BE%97"><i class="fa fa-link"></i></a>GitHubからイメージを取得</h3>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># git clone https://github.com/elastic/stack-docker.git</span>\n</pre></div></div>\n\n<h3>\n<span id="vmメモリ設定" class="fragment"></span><a href="#vm%E3%83%A1%E3%83%A2%E3%83%AA%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>VMメモリ設定</h3>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># sysctl -w vm.max_map_count = 262144</span>\n</pre></div></div>\n\n<h3>\n<span id="キーストアを作成" class="fragment"></span><a href="#%E3%82%AD%E3%83%BC%E3%82%B9%E3%83%88%E3%82%A2%E3%82%92%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>キーストアを作成</h3>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># docker-compose -f setup.yml up</span>\n</pre></div></div>\n\n<p>この時にデフォルトのパスワードが生成される。<br>\nこのあとのkibanaへのアクセスで必要になるのでメモしておきましょう。</p>\n\n<h3>\n<span id="起動" class="fragment"></span><a href="#%E8%B5%B7%E5%8B%95"><i class="fa fa-link"></i></a>起動</h3>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># docker-compose up -d</span>\n</pre></div></div>\n\n<p>たったのこれだけでElasticsearch、Kibana、Logstash、Auditbeat、Metricbeat、Filebeat、Packetbeat、およびHeartbeatを起動できます。</p>\n\n<h3>\n<span id="下記へブラウザからアクセス" class="fragment"></span><a href="#%E4%B8%8B%E8%A8%98%E3%81%B8%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9"><i class="fa fa-link"></i></a>下記へブラウザからアクセス</h3>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>http://localhost:5601\n</pre></div></div>\n\n<p>上記の設定のみであとはCPU情報やメモリ使用率と言ったメトリック情報を取得し可視化してくれます。</p>\n\n<p><a href="https://camo.qiitausercontent.com/1bc62e2095eb130ef743a3f4a4a1eb6270fbf5d8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32303661333533642d343461612d333165302d316462312d3762356664636630383064642e706e67" target="_blank" rel="nofollow noopener"><img width="1479" alt="スクリーンショット 2018-11-04 20.24.52.png" src="https://camo.qiitausercontent.com/1bc62e2095eb130ef743a3f4a4a1eb6270fbf5d8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f32303661333533642d343461612d333165302d316462312d3762356664636630383064642e706e67" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/206a353d-44aa-31e0-1db1-7b5fdcf080dd.png"></a></p>\n\n<h1>\n<span id="所感" class="fragment"></span><a href="#%E6%89%80%E6%84%9F"><i class="fa fa-link"></i></a>所感</h1>\n\n<p>インストールからお試し実行まで簡単に出来るかつオープンで無料。</p>\n\n<p>BeatsとLogstashの棲み分けに関しては正直良くわかっていないのでこれから更に学習は必要</p>\n', 'body': '# Elasticsearchとは\nElasticsearch社が開発を主導するオープンソースソフトウェア（OSS）\n\n# Elastic Stackとは\n「Elastic Stack」とは、Webサービスの効率的な運営・管理を実現するオープンソースソフトウェア製品群。\nBeats, Logstash, Elasticsearch, Kibanaの組合せを示し，大量データの収集 ・ 蓄積 ・ 可視化技術の基盤ツー\nルとして注目されているものの 1 つ。\n\n# 今回主題のMetricbeatとは\nシステムの統計情報（Metric）を収集するbeatです。 いわゆるOSで取得できるCPUやメモリなどの情報、および、モジュールを通してApacheやMySQLその他の統計情報も、ちょっとした設定をするだけで収集できる様になっています。\n\nコンテナの可視化もできます。\n\n# beats\n\nデータの収集、送信をするBeatsというのがあります。\nBeatsには、下記6種類がある。\n\n| 名前 | 概要 |\n|:--|:--|\n| Filebeat | ログファイルの収集 |\n| Metricbeat | CPU,メモリ等の情報収集 |\n| Packetbeat | パケット情報の収集 |\n| Winlogbeat | Windowsのイベントログの収集 |\n| Auditbeat | 監査データの収集 |\n| Heartbeat | リモートから稼働状況の監視 |\n\n# 必要なもの\n* docker-ce\n* docker-compose\n\n\n# 参考リンク等\n* [Elasticsearch公式](https://www.elastic.co/jp/)\n* [はじめての Elasticsearch](https://qiita.com/nskydiving/items/1c2dc4e0b9c98d164329)\n\n# 手順\n\n### GitHubからイメージを取得\n\n``` bash\n# git clone https://github.com/elastic/stack-docker.git\n```\n\n### VMメモリ設定\n\n``` bash\n# sysctl -w vm.max_map_count = 262144\n```\n\n### キーストアを作成\n``` bash\n# docker-compose -f setup.yml up\n```\n\nこの時にデフォルトのパスワードが生成される。\nこのあとのkibanaへのアクセスで必要になるのでメモしておきましょう。\n\n### 起動\n\n``` bash\n# docker-compose up -d\n```\n\nたったのこれだけでElasticsearch、Kibana、Logstash、Auditbeat、Metricbeat、Filebeat、Packetbeat、およびHeartbeatを起動できます。\n\n### 下記へブラウザからアクセス\n```\nhttp://localhost:5601\n```\n\n上記の設定のみであとはCPU情報やメモリ使用率と言ったメトリック情報を取得し可視化してくれます。\n\n<img width="1479" alt="スクリーンショット 2018-11-04 20.24.52.png" src="https://qiita-image-store.s3.amazonaws.com/0/258841/206a353d-44aa-31e0-1db1-7b5fdcf080dd.png">\n\n# 所感\n\nインストールからお試し実行まで簡単に出来るかつオープンで無料。\n\nBeatsとLogstashの棲み分けに関しては正直良くわかっていないのでこれから更に学習は必要\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-11-04T20:37:50+09:00', 'group': None, 'id': 'c23f3d2b9eba19569433', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Elasticsearch', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'docker-compose', 'versions': []}], 'title': 'Elastic Stack, on Dockerを動かしてみた[Metricbeat編]', 'updated_at': '2018-11-05T09:35:37+09:00', 'url': 'https://qiita.com/ryuichi1208/items/c23f3d2b9eba19569433', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="背景目的" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF%E7%9B%AE%E7%9A%84"><i class="fa fa-link"></i></a>背景/目的</h1>\n\n<p>約半年ほど前からAWSを使用してwebアプリを作成していたが毎度毎度<br>\n付け焼刃の知識でやりくりしてきたのでここら辺で体系立ててまとめようと重い執筆</p>\n\n<h1>\n<span id="クラウドとは" class="fragment"></span><a href="#%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>クラウドとは</h1>\n\n<p>「クラウド」とは、クラウドサービスプラットフォームからインターネット経由でコンピューティング、データベース、ストレージ、アプリケーションをはじめとした、さまざまな IT リソースをオンデマンドで利用することができるサービスの総称</p>\n\n<p>AWSは現在40 以上のクラウドサービスがある。<br>\nこれらのサービスを組み合わせることで一つのサービスを作ることが出来る。</p>\n\n<p>dropboxやyoutubeをはじめheroku,GKE,AKS何かもクラウドサービス</p>\n\n<p>IaaSやPaaSだったり、SaaS、DaaSなどのクラウドサービスがあるがAWSは<br>\nAWSのEC2はIaaSの代表でそれぞれ専門のサービスはIaaSのものもある。<br>\nさらにいうとAWS LambdaはFaaS(Function as a Service)だ。<br>\n(これが複雑にしている要因でもありそうですね。。)</p>\n\n<p><a href="https://aws.amazon.com/jp/types-of-cloud-computing/" rel="nofollow noopener" target="_blank">クラウドコンピューティングのタイプ</a></p>\n\n<h1>\n<span id="awsとは" class="fragment"></span><a href="#aws%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>AWSとは</h1>\n\n<p>Amazon Web Servicesの略<br>\nAWSとは、Amazonが提供しているWebサービスの総称。<br>\nAmazonが自社サイト「Amazon.com」を運営しているノウハウを活用して、開始されたサービス</p>\n\n<p>下記記事なんかにはAWSの歴史等が公式で書かれている。面白いので是非。<br>\n<a href="https://aws.amazon.com/jp/aws_history/details/" rel="nofollow noopener" target="_blank">AWS 10年の歩み ~沿革~</a></p>\n\n<h1>\n<span id="何がいいの" class="fragment"></span><a href="#%E4%BD%95%E3%81%8C%E3%81%84%E3%81%84%E3%81%AE"><i class="fa fa-link"></i></a>何がいいの？</h1>\n\n<ul>\n<li>必要なサービスのみを選べる！</li>\n<li>従量課金制！</li>\n<li>セキュリティレベルの高さ！</li>\n<li>パフォーマンスが高い！</li>\n</ul>\n\n<h1>\n<span id="何があるの" class="fragment"></span><a href="#%E4%BD%95%E3%81%8C%E3%81%82%E3%82%8B%E3%81%AE"><i class="fa fa-link"></i></a>何があるの？</h1>\n\n<h3>\n<span id="コンピューティング" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>コンピューティング</h3>\n\n<h4>\n<span id="amazon-ec220068-" class="fragment"></span><a href="#amazon-ec220068-"><i class="fa fa-link"></i></a>Amazon EC2\u3000(2006/8 ~)</h4>\n\n<p>仮想サーバー<br>\nAWSを利用する９割くらいの人がこの機能を使用しているのではないでしょうか？</p>\n\n<h5>\n<span id="amazon-lightsail" class="fragment"></span><a href="#amazon-lightsail"><i class="fa fa-link"></i></a>Amazon Lightsail</h5>\n\n<p>仮想サーバ<br>\nLightsailでは、ユーザーインタフェースが極力簡略化されており、<br>\n少ない操作で簡単にサーバーを作成することができる。</p>\n\n<h5>\n<span id="amazon-elastic-container-service" class="fragment"></span><a href="#amazon-elastic-container-service"><i class="fa fa-link"></i></a>Amazon Elastic Container Service</h5>\n\n<p>Dockerベースのアプリケーションのビルド、実行とそしてスケールを助けるためのサービス</p>\n\n<h5>\n<span id="aws-lambda" class="fragment"></span><a href="#aws-lambda"><i class="fa fa-link"></i></a>AWS Lambda</h5>\n\n<p>サーバーをプロビジョニングしたり管理しなくてもコードを実行できるコンピューティングサービス</p>\n\n<h5>\n<span id="aws-batch" class="fragment"></span><a href="#aws-batch"><i class="fa fa-link"></i></a>AWS Batch</h5>\n\n<p>科学技術計算・ハイパフォーマンスコンピューティング用途で真価を発揮する、<br>\n大規模なスケール、ジョブの依存定義 が可能なマネージド 並列分散 処理基盤。</p>\n\n<h5>\n<span id="aws-elastic-beanstalk" class="fragment"></span><a href="#aws-elastic-beanstalk"><i class="fa fa-link"></i></a>AWS Elastic Beanstalk</h5>\n\n<p>ウェブアプリケーションやサービスを、Apache、Nginx、Passenger、IIS など使い慣れたサーバーでデプロイおよびスケーリングするための、使いやすいサービス</p>\n\n<h3>\n<span id="ストレージ" class="fragment"></span><a href="#%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8"><i class="fa fa-link"></i></a>ストレージ</h3>\n\n<h5>\n<span id="amazon-s3-20063-" class="fragment"></span><a href="#amazon-s3-20063-"><i class="fa fa-link"></i></a>Amazon S3 (2006/3 ～)</h5>\n\n<p>安さと高可用性を兼ね備えたインターネットストレージサービス<br>\n99.999999999%の耐久性を公式で謳っている。</p>\n\n<h5>\n<span id="amazon-efs" class="fragment"></span><a href="#amazon-efs"><i class="fa fa-link"></i></a>Amazon EFS</h5>\n\n<p>AWS クラウドサービスおよびオンプレミスリソースで利用できる、シンプル、スケーラブル、伸縮自在なファイルストレージ<br>\n完全マネージド型のクラウドファイルストレージサービス</p>\n\n<h5>\n<span id="amazon-glacier" class="fragment"></span><a href="#amazon-glacier"><i class="fa fa-link"></i></a>Amazon Glacier</h5>\n\n<p>安全性と耐久性に優れ、きわめて低コストのクラウドストレージサービスで、<br>\nデータのアーカイブや長期バックアップに使用できる。</p>\n\n<h5>\n<span id="aws-storage-gateway" class="fragment"></span><a href="#aws-storage-gateway"><i class="fa fa-link"></i></a>AWS Storage Gateway</h5>\n\n<p>オンプレミスアプリケーションによる AWS クラウドストレージのシームレスな使用を可能にするハイブリッドストレージサービス</p>\n\n<h3>\n<span id="データベース" class="fragment"></span><a href="#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9"><i class="fa fa-link"></i></a>データベース</h3>\n\n<h5>\n<span id="amazon-rds" class="fragment"></span><a href="#amazon-rds"><i class="fa fa-link"></i></a>Amazon RDS</h5>\n\n<p>リレーショナルデータベース（RDB）のサービス<br>\nPostgreSQL、MySQL、MariaDB、Oracle、Microsoft SQL Serverに対応。OSS系から商用DBまでひと通り揃っている。</p>\n\n<h5>\n<span id="amazon-dynamodb" class="fragment"></span><a href="#amazon-dynamodb"><i class="fa fa-link"></i></a>Amazon DynamoDB</h5>\n\n<p>どのような規模でも信頼性が高いパフォーマンスを維持できる、非リレーショナルデータベース<br>\nマネージド型のNoSQLデータベース<br>\nデータ構造も、RDSのテーブルとは異なった持ち方をします。</p>\n\n<h5>\n<span id="amazon-elasticache" class="fragment"></span><a href="#amazon-elasticache"><i class="fa fa-link"></i></a>Amazon ElastiCache</h5>\n\n<p>Memcached または Redis プロトコルに準拠するサーバーノードのデプロイと実行をクラウド内で簡単に実行できるウェブサービス</p>\n\n<h5>\n<span id="amazon-redshift" class="fragment"></span><a href="#amazon-redshift"><i class="fa fa-link"></i></a>Amazon Redshift</h5>\n\n<p>データウェアハウスサービス<br>\n特徴<br>\nテラバイトあたりの価格が10分の1以下であり，さらにクラウド上に構築されるためメンテナンスコストなどの追加費用が必要ない</p>\n\n<h5>\n<span id="amazon-aurora" class="fragment"></span><a href="#amazon-aurora"><i class="fa fa-link"></i></a>Amazon Aurora</h5>\n\n<p>クラウド向けに構築された、MySQL や PostgreSQL と互換性のあるリレーショナルデータベース。<br>\n高性能の商業用データベースの速度や信頼性と、オープンソースデータベースのシンプルさや費用対効果を兼ね備えている。</p>\n\n<h3>\n<span id="移行" class="fragment"></span><a href="#%E7%A7%BB%E8%A1%8C"><i class="fa fa-link"></i></a>移行</h3>\n\n<h5>\n<span id="aws-migration-hub" class="fragment"></span><a href="#aws-migration-hub"><i class="fa fa-link"></i></a>AWS Migration Hub</h5>\n\n<p>AWS およびパートナーの複数のソリューション間におけるアプリケーション移行の進行状況を 1 つの場所で追跡できるサービス</p>\n\n<h5>\n<span id="aws-application-discovery-service" class="fragment"></span><a href="#aws-application-discovery-service"><i class="fa fa-link"></i></a>AWS Application Discovery Service</h5>\n\n<p>企業のお客様が自社の IT 環境内のサーバーの設定、使用、動作の状態を把握できるようデータを収集し、提供するサービス</p>\n\n<h5>\n<span id="aws-database-migration-service" class="fragment"></span><a href="#aws-database-migration-service"><i class="fa fa-link"></i></a>AWS Database Migration Service</h5>\n\n<p>リレーショナルデータベース、データウェアハウス、NoSQL データベース、他の種類のデータストアを移行しやすくするクラウドサービス</p>\n\n<h5>\n<span id="aws-server-migration-service" class="fragment"></span><a href="#aws-server-migration-service"><i class="fa fa-link"></i></a>AWS Server Migration Service</h5>\n\n<p>数千のオンプレミスワークロードを従来よりも簡単に、かつ短時間で AWS に移行できるエージェントレスサービス</p>\n\n<h5>\n<span id="aws-snowball" class="fragment"></span><a href="#aws-snowball"><i class="fa fa-link"></i></a>AWS Snowball</h5>\n\n<p>物理的な輸送をセキュアに行うことができるように設計されたストレージアプライアンスを使用して、テラバイト規模からペタバイト規模のデータを AWS との間で移動するためのデータ転送ソリューション</p>\n\n<h3>\n<span id="ネットワーキング--コンテンツ配信" class="fragment"></span><a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0--%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E9%85%8D%E4%BF%A1"><i class="fa fa-link"></i></a>ネットワーキング ＆ コンテンツ配信</h3>\n\n<h5>\n<span id="amazon-vpc" class="fragment"></span><a href="#amazon-vpc"><i class="fa fa-link"></i></a>Amazon VPC</h5>\n\n<p>ユーザー専用のプライベートなクラウド環境を提供するサービス</p>\n\n<h5>\n<span id="amazon-cloudfront" class="fragment"></span><a href="#amazon-cloudfront"><i class="fa fa-link"></i></a>Amazon CloudFront</h5>\n\n<p>データ、動画、アプリケーション、および API をすべて開発者にとって使いやすい環境で、低レイテンシーの高速転送により視聴者に安全に配信する高速コンテンツ配信ネットワーク (CDN) サービス</p>\n\n<h5>\n<span id="amazon-route-53" class="fragment"></span><a href="#amazon-route-53"><i class="fa fa-link"></i></a>Amazon Route 53</h5>\n\n<p>Route53はDNS（ドメインネームサービス）と呼ばれるサービス。<br>\nドメインからIPアドレスを参照する</p>\n\n<h5>\n<span id="amazon-api-gateway" class="fragment"></span><a href="#amazon-api-gateway"><i class="fa fa-link"></i></a>Amazon API Gateway</h5>\n\n<p>規模の大きさに関係なく、開発者が API を作成、配布、保守、監視、保護できる AWS サービス</p>\n\n<h5>\n<span id="aws-direct-connect" class="fragment"></span><a href="#aws-direct-connect"><i class="fa fa-link"></i></a>AWS Direct Connect</h5>\n\n<p>プレミスから AWS への専用ネットワーク接続の構築をシンプルにするクラウドサービスソリューション</p>\n\n<h3>\n<span id="開発者用ツール" class="fragment"></span><a href="#%E9%96%8B%E7%99%BA%E8%80%85%E7%94%A8%E3%83%84%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>開発者用ツール</h3>\n\n<h5>\n<span id="aws-codestar" class="fragment"></span><a href="#aws-codestar"><i class="fa fa-link"></i></a>AWS CodeStar</h5>\n\n<p>WS でソフトウェア開発プロジェクトを作成、管理、および操作するクラウドベースのサービス</p>\n\n<h5>\n<span id="aws-codecommit" class="fragment"></span><a href="#aws-codecommit"><i class="fa fa-link"></i></a>AWS CodeCommit</h5>\n\n<p>Git ベースのリポジトリをセキュアにホストする完全マネージド型のソース管理サービス</p>\n\n<h5>\n<span id="aws-codebuild" class="fragment"></span><a href="#aws-codebuild"><i class="fa fa-link"></i></a>AWS CodeBuild</h5>\n\n<p>ソースコードをコンパイルし、テストを実行し、デプロイ可能なソフトウェアパッケージを作成できる完全マネージド型のビルドサービス</p>\n\n<h5>\n<span id="aws-codedeploy" class="fragment"></span><a href="#aws-codedeploy"><i class="fa fa-link"></i></a>AWS CodeDeploy</h5>\n\n<p>Amazon EC2 インスタンスやオンプレミスインスタンス、サーバーレス Lambda 関数に対するアプリケーションのデプロイを自動化するデプロイメントサービス</p>\n\n<h5>\n<span id="aws-codepipeline" class="fragment"></span><a href="#aws-codepipeline"><i class="fa fa-link"></i></a>AWS CodePipeline</h5>\n\n<p>完全マネージド型の継続的デリバリーサービス</p>\n\n<h5>\n<span id="aws-cloud9" class="fragment"></span><a href="#aws-cloud9"><i class="fa fa-link"></i></a>AWS Cloud9</h5>\n\n<p>ブラウザのみでコードを記述、実行、デバッグできるクラウドベースの統合開発環境 (IDE) <br>\nクラウド上に開発環境を設けることによって、WindowsやMacの依存関係をなくすことができ、<br>\n共通の開発環境で開発が進められる最高の環境となります。</p>\n\n<h5>\n<span id="aws-x-ray" class="fragment"></span><a href="#aws-x-ray"><i class="fa fa-link"></i></a>AWS X-Ray</h5>\n\n<h3>\n<span id="管理ツール" class="fragment"></span><a href="#%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>管理ツール</h3>\n\n<h5>\n<span id="amazon-cloudwatch" class="fragment"></span><a href="#amazon-cloudwatch"><i class="fa fa-link"></i></a>Amazon CloudWatch</h5>\n\n<p>AWSリソースとAWSで実行するアプリケーションのモニタリングサービス</p>\n\n<h5>\n<span id="aws-waf" class="fragment"></span><a href="#aws-waf"><i class="fa fa-link"></i></a>AWS WAF</h5>\n\n<p>ウェブアプリケーションの脆弱性を悪用した攻撃からウェブアプリケーションを保護するセキュリティ対策の一つ</p>\n\n<h5>\n<span id="aws-cloudformation" class="fragment"></span><a href="#aws-cloudformation"><i class="fa fa-link"></i></a>AWS CloudFormation</h5>\n\n<p>AWSの構築をオートメーション化するサービスの代表格<br>\nInfrastructure as Code！</p>\n\n<h5>\n<span id="aws-cloudtrail" class="fragment"></span><a href="#aws-cloudtrail"><i class="fa fa-link"></i></a>AWS CloudTrail</h5>\n\n<p>AWS アカウントのガバナンス、コンプライアンス、運用監査、リスク監査を行うためのサービス</p>\n\n<h5>\n<span id="aws-config" class="fragment"></span><a href="#aws-config"><i class="fa fa-link"></i></a>AWS Config</h5>\n\n<p>セキュリティとガバナンスを可能にする構成変更の通知、構成履歴、<br>\nAWSリソースのインベントリーをお客様へ提供する完全マネージド型のサービス</p>\n\n<h5>\n<span id="aws-opsworks" class="fragment"></span><a href="#aws-opsworks"><i class="fa fa-link"></i></a>AWS OpsWorks</h5>\n\n<p>Chef や Puppet のマネージド型インスタンスを利用できるようになる構成管理サービス</p>\n\n<h5>\n<span id="aws-service-catalog" class="fragment"></span><a href="#aws-service-catalog"><i class="fa fa-link"></i></a>AWS Service Catalog</h5>\n\n<p>IT管理部門が、組織としてのガバナンスに則った構成のCloudFormationテンプレートを製品として登録し、<br>\nユーザー部門が、その製品を使うことで、組織のガバナンスに則った形で、欲しい機能をすぐに手に入れることが出来る</p>\n\n<h5>\n<span id="aws-systems-manager" class="fragment"></span><a href="#aws-systems-manager"><i class="fa fa-link"></i></a>AWS Systems Manager</h5>\n\n<p>AWS で利用しているインフラストラクチャを可視化し、制御するためのサービス</p>\n\n<h5>\n<span id="aws-trusted-advisor" class="fragment"></span><a href="#aws-trusted-advisor"><i class="fa fa-link"></i></a>AWS Trusted Advisor</h5>\n\n<p>EC2 や RDS などのサービスをコストやセキュリティに関する Best Practice に基づいたアドバイスを自動的に行なってくれるサービス</p>\n\n<h5>\n<span id="aws-managed-services-201612-" class="fragment"></span><a href="#aws-managed-services-201612-"><i class="fa fa-link"></i></a>AWS Managed Services (2016/12 ~)</h5>\n\n<p>「ITILベースのIT運用管理なら体制ができており、ノウハウも社内に蓄積されているが、AWSにはこれを適用できないので困る」という組織に向けたサービス。</p>\n', 'body': '# 背景/目的\n\n約半年ほど前からAWSを使用してwebアプリを作成していたが毎度毎度\n付け焼刃の知識でやりくりしてきたのでここら辺で体系立ててまとめようと重い執筆\n\n# クラウドとは\n\n「クラウド」とは、クラウドサービスプラットフォームからインターネット経由でコンピューティング、データベース、ストレージ、アプリケーションをはじめとした、さまざまな IT リソースをオンデマンドで利用することができるサービスの総称\n\nAWSは現在40 以上のクラウドサービスがある。\nこれらのサービスを組み合わせることで一つのサービスを作ることが出来る。\n\ndropboxやyoutubeをはじめheroku,GKE,AKS何かもクラウドサービス\n\nIaaSやPaaSだったり、SaaS、DaaSなどのクラウドサービスがあるがAWSは\nAWSのEC2はIaaSの代表でそれぞれ専門のサービスはIaaSのものもある。\nさらにいうとAWS LambdaはFaaS(Function as a Service)だ。\n(これが複雑にしている要因でもありそうですね。。)\n\n[クラウドコンピューティングのタイプ](https://aws.amazon.com/jp/types-of-cloud-computing/)\n\n# AWSとは\n\nAmazon Web Servicesの略\nAWSとは、Amazonが提供しているWebサービスの総称。\nAmazonが自社サイト「Amazon.com」を運営しているノウハウを活用して、開始されたサービス\n\n下記記事なんかにはAWSの歴史等が公式で書かれている。面白いので是非。\n[AWS 10年の歩み ~沿革~](https://aws.amazon.com/jp/aws_history/details/)\n\n# 何がいいの？\n\n* 必要なサービスのみを選べる！\n* 従量課金制！\n* セキュリティレベルの高さ！\n* パフォーマンスが高い！\n\n# 何があるの？\n\n### コンピューティング\n#### Amazon EC2\u3000(2006/8 ~)\n仮想サーバー\nAWSを利用する９割くらいの人がこの機能を使用しているのではないでしょうか？\n\n##### Amazon Lightsail\n仮想サーバ\nLightsailでは、ユーザーインタフェースが極力簡略化されており、\n少ない操作で簡単にサーバーを作成することができる。\n\n##### Amazon Elastic Container Service\nDockerベースのアプリケーションのビルド、実行とそしてスケールを助けるためのサービス\n\n##### AWS Lambda\nサーバーをプロビジョニングしたり管理しなくてもコードを実行できるコンピューティングサービス\n\n##### AWS Batch\n科学技術計算・ハイパフォーマンスコンピューティング用途で真価を発揮する、\n大規模なスケール、ジョブの依存定義 が可能なマネージド 並列分散 処理基盤。\n\n##### AWS Elastic Beanstalk\nウェブアプリケーションやサービスを、Apache、Nginx、Passenger、IIS など使い慣れたサーバーでデプロイおよびスケーリングするための、使いやすいサービス\n\n### ストレージ\n##### Amazon S3 (2006/3 ～)\n安さと高可用性を兼ね備えたインターネットストレージサービス\n99.999999999%の耐久性を公式で謳っている。\n\n##### Amazon EFS\nAWS クラウドサービスおよびオンプレミスリソースで利用できる、シンプル、スケーラブル、伸縮自在なファイルストレージ\n完全マネージド型のクラウドファイルストレージサービス\n\n##### Amazon Glacier\n安全性と耐久性に優れ、きわめて低コストのクラウドストレージサービスで、\nデータのアーカイブや長期バックアップに使用できる。\n\n##### AWS Storage Gateway\nオンプレミスアプリケーションによる AWS クラウドストレージのシームレスな使用を可能にするハイブリッドストレージサービス\n\n### データベース\n##### Amazon RDS\nリレーショナルデータベース（RDB）のサービス\nPostgreSQL、MySQL、MariaDB、Oracle、Microsoft SQL Serverに対応。OSS系から商用DBまでひと通り揃っている。\n\n##### Amazon DynamoDB\nどのような規模でも信頼性が高いパフォーマンスを維持できる、非リレーショナルデータベース\nマネージド型のNoSQLデータベース\nデータ構造も、RDSのテーブルとは異なった持ち方をします。\n\n##### Amazon ElastiCache\nMemcached または Redis プロトコルに準拠するサーバーノードのデプロイと実行をクラウド内で簡単に実行できるウェブサービス\n\n##### Amazon Redshift\nデータウェアハウスサービス\n特徴\nテラバイトあたりの価格が10分の1以下であり，さらにクラウド上に構築されるためメンテナンスコストなどの追加費用が必要ない\n\n##### Amazon Aurora\nクラウド向けに構築された、MySQL や PostgreSQL と互換性のあるリレーショナルデータベース。\n高性能の商業用データベースの速度や信頼性と、オープンソースデータベースのシンプルさや費用対効果を兼ね備えている。\n\n### 移行\n##### AWS Migration Hub\nAWS およびパートナーの複数のソリューション間におけるアプリケーション移行の進行状況を 1 つの場所で追跡できるサービス\n\n##### AWS Application Discovery Service\n企業のお客様が自社の IT 環境内のサーバーの設定、使用、動作の状態を把握できるようデータを収集し、提供するサービス\n\n##### AWS Database Migration Service\nリレーショナルデータベース、データウェアハウス、NoSQL データベース、他の種類のデータストアを移行しやすくするクラウドサービス\n\n##### AWS Server Migration Service\n数千のオンプレミスワークロードを従来よりも簡単に、かつ短時間で AWS に移行できるエージェントレスサービス\n\n##### AWS Snowball\n物理的な輸送をセキュアに行うことができるように設計されたストレージアプライアンスを使用して、テラバイト規模からペタバイト規模のデータを AWS との間で移動するためのデータ転送ソリューション\n\n### ネットワーキング ＆ コンテンツ配信\n##### Amazon VPC\nユーザー専用のプライベートなクラウド環境を提供するサービス\n\n##### Amazon CloudFront\nデータ、動画、アプリケーション、および API をすべて開発者にとって使いやすい環境で、低レイテンシーの高速転送により視聴者に安全に配信する高速コンテンツ配信ネットワーク (CDN) サービス\n\n##### Amazon Route 53\nRoute53はDNS（ドメインネームサービス）と呼ばれるサービス。\nドメインからIPアドレスを参照する\n\n##### Amazon API Gateway\n規模の大きさに関係なく、開発者が API を作成、配布、保守、監視、保護できる AWS サービス\n\n##### AWS Direct Connect\nプレミスから AWS への専用ネットワーク接続の構築をシンプルにするクラウドサービスソリューション\n\n### 開発者用ツール\n##### AWS CodeStar\nWS でソフトウェア開発プロジェクトを作成、管理、および操作するクラウドベースのサービス\n\n##### AWS CodeCommit\nGit ベースのリポジトリをセキュアにホストする完全マネージド型のソース管理サービス\n\n##### AWS CodeBuild\nソースコードをコンパイルし、テストを実行し、デプロイ可能なソフトウェアパッケージを作成できる完全マネージド型のビルドサービス\n\n##### AWS CodeDeploy\nAmazon EC2 インスタンスやオンプレミスインスタンス、サーバーレス Lambda 関数に対するアプリケーションのデプロイを自動化するデプロイメントサービス\n\n##### AWS CodePipeline\n完全マネージド型の継続的デリバリーサービス\n\n##### AWS Cloud9\nブラウザのみでコードを記述、実行、デバッグできるクラウドベースの統合開発環境 (IDE) \nクラウド上に開発環境を設けることによって、WindowsやMacの依存関係をなくすことができ、\n共通の開発環境で開発が進められる最高の環境となります。\n\n##### AWS X-Ray\n\n\n### 管理ツール\n##### Amazon CloudWatch\nAWSリソースとAWSで実行するアプリケーションのモニタリングサービス\n\n##### AWS WAF\nウェブアプリケーションの脆弱性を悪用した攻撃からウェブアプリケーションを保護するセキュリティ対策の一つ\n\n##### AWS CloudFormation\nAWSの構築をオートメーション化するサービスの代表格\nInfrastructure as Code！\n\n##### AWS CloudTrail\nAWS アカウントのガバナンス、コンプライアンス、運用監査、リスク監査を行うためのサービス\n\n##### AWS Config\nセキュリティとガバナンスを可能にする構成変更の通知、構成履歴、\nAWSリソースのインベントリーをお客様へ提供する完全マネージド型のサービス\n\n##### AWS OpsWorks\nChef や Puppet のマネージド型インスタンスを利用できるようになる構成管理サービス\n\n##### AWS Service Catalog\nIT管理部門が、組織としてのガバナンスに則った構成のCloudFormationテンプレートを製品として登録し、\nユーザー部門が、その製品を使うことで、組織のガバナンスに則った形で、欲しい機能をすぐに手に入れることが出来る\n\n##### AWS Systems Manager\nAWS で利用しているインフラストラクチャを可視化し、制御するためのサービス\n\n##### AWS Trusted Advisor\nEC2 や RDS などのサービスをコストやセキュリティに関する Best Practice に基づいたアドバイスを自動的に行なってくれるサービス\n\n##### AWS Managed Services (2016/12 ~)\n「ITILベースのIT運用管理なら体制ができており、ノウハウも社内に蓄積されているが、AWSにはこれを適用できないので困る」という組織に向けたサービス。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-23T00:04:13+09:00', 'group': None, 'id': '1b8fa187334f5de1d74f', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'AWS', 'versions': []}, {'name': 'Paas', 'versions': []}, {'name': 'SaaS', 'versions': []}, {'name': 'IaaS', 'versions': []}, {'name': 'faas', 'versions': []}], 'title': 'AWS について簡単にまとめてみた', 'updated_at': '2018-10-30T11:55:11+09:00', 'url': 'https://qiita.com/ryuichi1208/items/1b8fa187334f5de1d74f', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>gdb について調べていると、 gcoreというコマンドを見つけました。</p>\n\n<p>gcore は実行中のプロセスの core を生成する gdb のコマンドです。<br>\n通常、 core ファイルはプログラムが異常終了したときにカーネルによって生成されますが、<br>\ngdb の gcore コマンドを使えば実行中のプロセスを終了させることなく core ファイルを生成できます。 </p>\n\n<p>gcore コマンドは次のように使います。</p>\n\n<h1>\n<span id="実行例" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E4%BE%8B"><i class="fa fa-link"></i></a>実行例</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># gdb</span>\n<span class="o">(</span>gdb<span class="o">)</span> attach PID\n<span class="o">(</span>gdb<span class="o">)</span> gcore core\n<span class="o">(</span>gdb<span class="o">)</span> detach\n</pre></div></div>\n\n<p>まず attach コマンドで PID を指定して実行中のプロセスにアタッチします。次に、 gcore コマンドで core ファイルを生成します。このとき、任意のファイル名を指定できます。core の生成が終わったらデタッチします。</p>\n\n<p>gdb によってアタッチされたプロセスは gdb による制御下に入り、実行が停止します。 step, next, continue, detach などのコマンドで意図的に実行を再開しない限り、プログラムは完全に停止しています。gcore コマンドのメリットはプログラムの停止時間を最小限に抑えて、デバッグできるところにあります。</p>\n\n<p>たとえば、実行中のサーバプロセスをデバッグしたい場合、ローカル変数などの各種のインスペクションを行うために gdb で長時間アタッチしてその間、サービスを止めてしまうのはできるだけ避けたいところです。このようなとき、 gcore コマンドを使えば、 core を生成したのちにただちにデタッチできるので、サービスの停止時間を最小限に抑えることができます。</p>\n\n<h1>\n<span id="コアファイルデバッグ" class="fragment"></span><a href="#%E3%82%B3%E3%82%A2%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0"><i class="fa fa-link"></i></a>コアファイルデバッグ</h1>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># BackTrace</span>\n<span class="o">(</span>gdb<span class="o">)</span> bt\n\n<span class="c"># 関数指定</span>\n<span class="o">(</span>gdb<span class="o">)</span> frame 0\n\n<span class="c"># 変数表示</span>\n<span class="o">(</span>gdb<span class="o">)</span> p var\n\n<span class="c"># ソースプログラムを表示</span>\n<span class="o">(</span>gdb<span class="o">)</span> list\n\n<span class="c"># ステップアウト実行</span>\n<span class="o">(</span>gdb<span class="o">)</span> next\n\n<span class="c"># ステップイン実行</span>\n<span class="o">(</span>gdb<span class="o">)</span> step\n</pre></div></div>\n\n<h1>\n<span id="その他" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96"><i class="fa fa-link"></i></a>その他</h1>\n\n<p>gdb のパッケージには gdb_gcore.sh というスクリプトが含まれており、attatch, gcore, detatch をバッチで実行します。手作業でこれらのコマンドを実行するよりもこのスクリプトを使ったほうがいいでしょう。Linuxディストリビューションによっては gcore というコマンド名で /usr/bin などにインストールされているものもあるようです。</p>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>gdb の gcore コマンドについて紹介しました。実行中のプロセスをできるだけ停止させずにデバッグしたいというときに役立つのではないかと思います。</p>\n', 'body': 'gdb について調べていると、 gcoreというコマンドを見つけました。\n\ngcore は実行中のプロセスの core を生成する gdb のコマンドです。\n通常、 core ファイルはプログラムが異常終了したときにカーネルによって生成されますが、\ngdb の gcore コマンドを使えば実行中のプロセスを終了させることなく core ファイルを生成できます。 \n\ngcore コマンドは次のように使います。\n\n# 実行例\n\n``` bash\n# gdb\n(gdb) attach PID\n(gdb) gcore core\n(gdb) detach\n```\n\nまず attach コマンドで PID を指定して実行中のプロセスにアタッチします。次に、 gcore コマンドで core ファイルを生成します。このとき、任意のファイル名を指定できます。core の生成が終わったらデタッチします。\n\ngdb によってアタッチされたプロセスは gdb による制御下に入り、実行が停止します。 step, next, continue, detach などのコマンドで意図的に実行を再開しない限り、プログラムは完全に停止しています。gcore コマンドのメリットはプログラムの停止時間を最小限に抑えて、デバッグできるところにあります。\n\nたとえば、実行中のサーバプロセスをデバッグしたい場合、ローカル変数などの各種のインスペクションを行うために gdb で長時間アタッチしてその間、サービスを止めてしまうのはできるだけ避けたいところです。このようなとき、 gcore コマンドを使えば、 core を生成したのちにただちにデタッチできるので、サービスの停止時間を最小限に抑えることができます。\n\n# コアファイルデバッグ\n\n``` bash\n# BackTrace\n(gdb) bt\n\n# 関数指定\n(gdb) frame 0\n\n# 変数表示\n(gdb) p var\n\n# ソースプログラムを表示\n(gdb) list\n\n# ステップアウト実行\n(gdb) next\n\n# ステップイン実行\n(gdb) step\n```\n\n# その他\n\ngdb のパッケージには gdb_gcore.sh というスクリプトが含まれており、attatch, gcore, detatch をバッチで実行します。手作業でこれらのコマンドを実行するよりもこのスクリプトを使ったほうがいいでしょう。Linuxディストリビューションによっては gcore というコマンド名で /usr/bin などにインストールされているものもあるようです。\n\n# まとめ\ngdb の gcore コマンドについて紹介しました。実行中のプロセスをできるだけ停止させずにデバッグしたいというときに役立つのではないかと思います。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-22T23:53:55+09:00', 'group': None, 'id': '751c400e3312479ae537', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'C言語', 'versions': []}, {'name': 'gdb', 'versions': []}, {'name': 'ダンプ', 'versions': []}], 'title': 'GDBの「gcore」について (コア解析)', 'updated_at': '2018-11-13T23:04:43+09:00', 'url': 'https://qiita.com/ryuichi1208/items/751c400e3312479ae537', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>スクレイピング/クローリングする際によく利用するAPIのリファレンスです。</p>\n\n<h1>\n<span id="スクレイピング基本動作" class="fragment"></span><a href="#%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E5%9F%BA%E6%9C%AC%E5%8B%95%E4%BD%9C"><i class="fa fa-link"></i></a>スクレイピング基本動作</h1>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="c"># htmlパース用のオブジェクト作成</span>\n<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="s">"html.parser"</span><span class="p">)</span>\n\n<span class="c"># HTMLの中からAタグをすべて取得する(存在しなければNoneが返る)</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">"a"</span><span class="p">)</span>\n\n<span class="c"># HTMLの中から1番目のAタグを取得する</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">"a"</span><span class="p">)</span>\n\n<span class="c"># 条件を付けて取得</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="s">"link"</span><span class="p">,</span> <span class="n">href</span><span class="o">=</span><span class="s">"/link"</span><span class="p">)</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="s">"link"</span><span class="p">,</span> <span class="n">href</span><span class="o">=</span><span class="s">"/link"</span><span class="p">)</span>\n\n<span class="c"># テーブルを取得</span>\n<span class="n">table</span> <span class="o">=</span> <span class="n">soap</span><span class="o">.</span><span class="n">find_All</span><span class="p">(</span><span class="s">"table"</span><span class="p">,{</span><span class="s">"class"</span><span class="p">:</span><span class="s">"tablesorter"</span><span class="p">})[</span><span class="mi">0</span><span class="p">]</span>\n\n<span class="c"># URLから取</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">href</span><span class="o">=</span><span class="s">"http://zombie-hunting-club.com"</span><span class="p">))</span>\n</pre></div></div>\n\n<h1>\n<span id="正規表現を使ってタグ指定" class="fragment"></span><a href="#%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%BF%E3%82%B0%E6%8C%87%E5%AE%9A"><i class="fa fa-link"></i></a>正規表現を使ってタグ指定</h1>\n\n<div class="code-frame" data-lang="python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">re</span>\n\n<span class="c"># BタグやBODYタグなどbで始まるタグをすべて取得</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">"^b"</span><span class="p">))</span>\n\n<span class="c"># ”link”を含むhref属性を持っているタグをすべて取得するには</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">href</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">"link"</span><span class="p">))</span>\n\n<span class="c"># タグの中の文字列に"hello"を含むAタグをすべて取得するには</span>\n<span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">"hello"</span><span class="p">))</span>\n</pre></div></div>\n\n<h1>\n<span id="出力" class="fragment"></span><a href="#%E5%87%BA%E5%8A%9B"><i class="fa fa-link"></i></a>出力</h1>\n\n<p>prettifyを呼び出すことできれいに整形して文字列として出力が出来ます。</p>\n\n<h1>\n<span id="その他関数" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96%E9%96%A2%E6%95%B0"><i class="fa fa-link"></i></a>その他関数</h1>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>find_all_previous() と find_previous()\n\nfind_next_siblings() と find_next_sibling()\n\nind_previous_siblings() と find_previous_sibling()\n\nfind_parent() と find_parents()\n</pre></div></div>\n\n<h1>\n<span id="xpathについて" class="fragment"></span><a href="#xpath%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>XPathについて</h1>\n\n<p>XPathはXML文章中の要素、属性値などを指定するための言語です。<br>\nXPathではXML文章をツリーとして捉えることで、要素や属性の位置を指定することができます。<br>\nHTMLもXMLの一種とみなすことができるため、XPathを使ってHTML文章中の要素を指定することができます。</p>\n', 'body': 'スクレイピング/クローリングする際によく利用するAPIのリファレンスです。\n\n# スクレイピング基本動作\n\n```python\n# htmlパース用のオブジェクト作成\nsoup = BeautifulSoup(html, "html.parser")\n\n# HTMLの中からAタグをすべて取得する(存在しなければNoneが返る)\nsoup.find_all("a")\n\n# HTMLの中から1番目のAタグを取得する\nsoup.find("a")\n\n# 条件を付けて取得\nsoup.find_all("a", class_="link", href="/link")\nsoup.find_all(class_="link", href="/link")\n\n# テーブルを取得\ntable = soap.find_All("table",{"class":"tablesorter"})[0]\n\n# URLから取\nsoup.find_all(href="http://zombie-hunting-club.com"))\n```\n\n# 正規表現を使ってタグ指定\n\n``` python\nimport re\n\n# BタグやBODYタグなどbで始まるタグをすべて取得\nsoup.find_all(re.compile("^b"))\n\n# ”link”を含むhref属性を持っているタグをすべて取得するには\nsoup.find_all(href=re.compile("link"))\n\n# タグの中の文字列に"hello"を含むAタグをすべて取得するには\nsoup.find_all("a", text=re.compile("hello"))\n```\n\n# 出力\n\nprettifyを呼び出すことできれいに整形して文字列として出力が出来ます。\n\n# その他関数\n\n```\nfind_all_previous() と find_previous()\n\nfind_next_siblings() と find_next_sibling()\n\nind_previous_siblings() と find_previous_sibling()\n\nfind_parent() と find_parents()\n```\n\n# XPathについて\n\nXPathはXML文章中の要素、属性値などを指定するための言語です。\nXPathではXML文章をツリーとして捉えることで、要素や属性の位置を指定することができます。\nHTMLもXMLの一種とみなすことができるため、XPathを使ってHTML文章中の要素を指定することができます。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-21T22:25:28+09:00', 'group': None, 'id': '0f7e4e424d2eff8de1f8', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Python', 'versions': []}, {'name': 'Selenium', 'versions': []}, {'name': 'BeautifulSoup', 'versions': []}], 'title': 'Python スクレイピング/クローリングリファレンス', 'updated_at': '2018-10-23T00:03:07+09:00', 'url': 'https://qiita.com/ryuichi1208/items/0f7e4e424d2eff8de1f8', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="minishiftとは" class="fragment"></span><a href="#minishift%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>minishiftとは？</h2>\n\n<p>Red Hat OpenShiftはDockerおよびKubernetesを基盤としたPaaSを提供するソフトウェアです。オープンソースで開発されており、Red Hat社によるサポートが提供されます。</p>\n\n<p>MinishiftはOpenShiftをローカルで実行するのに役立つツールです。</p>\n\n<p>詳しくは「<a href="https://docs.okd.io/latest/welcome/index.html" rel="nofollow noopener" target="_blank">公式ドキュメント</a>」をどうぞ</p>\n\n<h2>\n<span id="導入手順" class="fragment"></span><a href="#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>導入手順</h2>\n\n<p>minishift 導入</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># brew cask install minishift</span>\n<span class="c"># minishift version</span>\n</pre></div></div>\n\n<p>mac用の仮想化ドライバー導入</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># brew install docker-machine-driver-xhyve</span>\n<span class="c"># sudo chown root:wheel /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve</span>\n<span class="c"># chmod u+s /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve</span>\n<span class="c"># git -C "$(brew --repo homebrew/core)" fetch --unshallow</span>\n</pre></div></div>\n\n<p>minishift 起動</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># minishift start --vm-driver xhyve</span>\n</pre></div></div>\n\n<p>oc コマンドのパスを通す</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># eval $(minishift oc-env)</span>\n</pre></div></div>\n\n<p>ブラウザで動作確認</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># minishift openshift service nodejs-ex --in-browser</span>\n</pre></div></div>\n\n<p>ログイン</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># oc login -u developer -p developer</span>\n</pre></div></div>\n\n<p>minishift 停止</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># minishift stop</span>\n</pre></div></div>\n\n<h2>\n<span id="その他メモ" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96%E3%83%A1%E3%83%A2"><i class="fa fa-link"></i></a>その他(メモ)</h2>\n\n<p>/var/lib/minishift/ 配下には以下のファイルがある</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># ls -1 /var/lib/minishift/</span>\nhostdata\nopenshift.local.config\nopenshift.local.pv\nopenshift.local.volumes\n</pre></div></div>\n\n<p>●\u3000hostdata<br>\netcdのデータ</p>\n\n<p>●\u3000openshift.local.config<br>\nOpenShiftの設定ファイル群</p>\n\n<p>●\u3000openshift.local.pv<br>\nhostPath指定で作成されたPV</p>\n\n<p>●\u3000openshift.local.volumes<br>\npodにマウントされるVolume類</p>\n', 'body': '## minishiftとは？\n\nRed Hat OpenShiftはDockerおよびKubernetesを基盤としたPaaSを提供するソフトウェアです。オープンソースで開発されており、Red Hat社によるサポートが提供されます。\n\nMinishiftはOpenShiftをローカルで実行するのに役立つツールです。\n\n詳しくは「[公式ドキュメント](https://docs.okd.io/latest/welcome/index.html)」をどうぞ\n\n## 導入手順\n\nminishift 導入\n\n``` bash\n# brew cask install minishift\n# minishift version\n```\n\nmac用の仮想化ドライバー導入\n\n``` bash\n# brew install docker-machine-driver-xhyve\n# sudo chown root:wheel /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve\n# chmod u+s /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve\n# git -C "$(brew --repo homebrew/core)" fetch --unshallow\n```\n\nminishift 起動\n\n``` bash\n# minishift start --vm-driver xhyve\n```\n\noc コマンドのパスを通す\n\n``` bash\n# eval $(minishift oc-env)\n```\n\nブラウザで動作確認\n\n``` bash\n# minishift openshift service nodejs-ex --in-browser\n```\n\nログイン\n\n``` bash\n# oc login -u developer -p developer\n```\n\nminishift 停止\n\n``` bash\n# minishift stop\n```\n\n## その他(メモ)\n\n/var/lib/minishift/ 配下には以下のファイルがある\n\n``` bash\n# ls -1 /var/lib/minishift/\nhostdata\nopenshift.local.config\nopenshift.local.pv\nopenshift.local.volumes\n```\n\n●\u3000hostdata\netcdのデータ\n\n●\u3000openshift.local.config\nOpenShiftの設定ファイル群\n\n●\u3000openshift.local.pv\nhostPath指定で作成されたPV\n\n●\u3000openshift.local.volumes\npodにマウントされるVolume類\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-17T21:50:33+09:00', 'group': None, 'id': '8df4fc39392d40775e2d', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'openshift', 'versions': []}, {'name': 'kubernetes', 'versions': []}], 'title': 'macOS で minishift [導入から起動まで]', 'updated_at': '2018-11-13T23:06:11+09:00', 'url': 'https://qiita.com/ryuichi1208/items/8df4fc39392d40775e2d', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="目的" class="fragment"></span><a href="#%E7%9B%AE%E7%9A%84"><i class="fa fa-link"></i></a>目的</h1>\n\n<p>Raspberry piを使用して並列計算を行う<br>\nMPIについての学習兼並列処理についても学習</p>\n\n<h1>\n<span id="用意するもの" class="fragment"></span><a href="#%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>用意するもの</h1>\n\n<p>Raspberry Pi * 2台以上</p>\n\n<p>以下<br>\npi-cluster01\u3000：\u3000master<br>\npi-cluster02\u3000：\u3000node<br>\npi-cluster03\u3000：\u3000node</p>\n\n<p>と、して、同一ネットワーク上かつssh通信が出来ること。</p>\n\n<h1>\n<span id="mpiとは" class="fragment"></span><a href="#mpi%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>MPIとは</h1>\n\n<p>MPI(Message Passing Interface)<br>\n１つの目的を複数のコンピュータで分散・並列処理する際に、この実行基盤の１つが MPI （Message Passing Interface）と呼ばれる仕様・規格。<br>\nMPICH, Open MPI など複数の実装系が存在しています。</p>\n\n<p>有名所でいうと「32 ノード構成・ド派手な The RPiCluster」<br>\n動画もあります。</p>\n\n<p><a href="http://netbuffalo.doorblog.jp/archives/4783572.html" class="autolink" rel="nofollow noopener" target="_blank">http://netbuffalo.doorblog.jp/archives/4783572.html</a></p>\n\n<p>上記の実行には「python-mpi4py」を使用しています。</p>\n\n<h1>\n<span id="お試しで1ノードで並列hello-world" class="fragment"></span><a href="#%E3%81%8A%E8%A9%A6%E3%81%97%E3%81%A71%E3%83%8E%E3%83%BC%E3%83%89%E3%81%A7%E4%B8%A6%E5%88%97hello-world"><i class="fa fa-link"></i></a>お試しで1ノードで並列Hello World</h1>\n\n<p>まずは1ノードで環境を作成していきます。<br>\n必要なパッケージを各ノードへインストールします</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># apt-get install python-mpi4py</span>\n</pre></div></div>\n\n<p>次に並列処理に対応したプログラムを作成します。</p>\n\n<div class="code-frame" data-lang="Python">\n<div class="code-lang"><span class="bold">hello_world.py</span></div>\n<div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>\n<span class="s">"""\nParallel Hello World\n"""</span>\n\n<span class="kn">from</span> <span class="nn">mpi4py</span> <span class="kn">import</span> <span class="n">MPI</span>\n<span class="kn">import</span> <span class="nn">sys</span>\n\n<span class="n">size</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span><span class="o">.</span><span class="n">Get_size</span><span class="p">()</span>\n<span class="n">rank</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span><span class="o">.</span><span class="n">Get_rank</span><span class="p">()</span>\n<span class="n">name</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">Get_processor_name</span><span class="p">()</span>\n\n<span class="k">print</span> <span class="s">"Hello, World! I am process </span><span class="si">%</span><span class="s">d of </span><span class="si">%</span><span class="s">d on </span><span class="si">%</span><span class="s">s."</span> <span class="o">%</span> <span class="p">(</span><span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>\n</pre></div>\n</div>\n\n<p>上記の実行結果はこちら</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># mpirun -np 4 hello.py </span>\nHello, World! I am process 0 of 4 on rasko01.\nHello, World! I am process 1 of 4 on rasko01.\nHello, World! I am process 2 of 4 on rasko01.\nHello, World! I am process 3 of 4 on rasko01.\n</pre></div></div>\n\n<h5>\n<span id="簡単にプログラムの解説" class="fragment"></span><a href="#%E7%B0%A1%E5%8D%98%E3%81%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E8%A7%A3%E8%AA%AC"><i class="fa fa-link"></i></a>簡単にプログラムの解説</h5>\n\n<ul>\n<li>MPI_COMM_WORLDは、コミュニケータとよばれる概念を保存する変数</li>\n<li>コミュニケータは、操作を行う対象のプロセッサ群を定める</li>\n<li>初期状態では、０番～numprocs –１番までのプロセッサが、１つのコミュニケータに割り当てられる\nこの名前が、“MPI_COMM_WORLD”</li>\n<li>RANKとは各「MPIプロセス」の「識別番号」のこと。</li>\n</ul>\n\n<h5>\n<span id="補足" class="fragment"></span><a href="#%E8%A3%9C%E8%B6%B3"><i class="fa fa-link"></i></a>補足</h5>\n\n<p>ちょっとMPIを勉強してる人なら疑問に思うと思いますが、<br>\nMPI_Init()と、MPI_Finalize()がありません。<br>\nこれらの関数はmpi4pyモジュールの初回import時と、プロセス終了時に、それぞれ自動的に呼ばれているとのことです。</p>\n\n<hr>\n\n<p>今回はここまで<br>\n第二回からは実際に複数ノードを使用してプログラムを実行します。</p>\n', 'body': '# 目的\n\nRaspberry piを使用して並列計算を行う\nMPIについての学習兼並列処理についても学習\n\n# 用意するもの\nRaspberry Pi * 2台以上\n\n以下\npi-cluster01\u3000：\u3000master\npi-cluster02\u3000：\u3000node\npi-cluster03\u3000：\u3000node\n\nと、して、同一ネットワーク上かつssh通信が出来ること。\n\n# MPIとは\n\nMPI(Message Passing Interface)\n１つの目的を複数のコンピュータで分散・並列処理する際に、この実行基盤の１つが MPI （Message Passing Interface）と呼ばれる仕様・規格。\nMPICH, Open MPI など複数の実装系が存在しています。\n\n有名所でいうと「32 ノード構成・ド派手な The RPiCluster」\n動画もあります。\n\nhttp://netbuffalo.doorblog.jp/archives/4783572.html\n\n上記の実行には「python-mpi4py」を使用しています。\n\n# お試しで1ノードで並列Hello World\n\nまずは1ノードで環境を作成していきます。\n必要なパッケージを各ノードへインストールします\n\n``` bash\n# apt-get install python-mpi4py\n```\n\n次に並列処理に対応したプログラムを作成します。\n\n``` Python:hello_world.py\n#!/usr/bin/env python\n"""\nParallel Hello World\n"""\n \nfrom mpi4py import MPI\nimport sys\n \nsize = MPI.COMM_WORLD.Get_size()\nrank = MPI.COMM_WORLD.Get_rank()\nname = MPI.Get_processor_name()\n \nprint "Hello, World! I am process %d of %d on %s." % (rank, size, name)\n```\n\n上記の実行結果はこちら\n\n``` bash\n# mpirun -np 4 hello.py \nHello, World! I am process 0 of 4 on rasko01.\nHello, World! I am process 1 of 4 on rasko01.\nHello, World! I am process 2 of 4 on rasko01.\nHello, World! I am process 3 of 4 on rasko01.\n```\n\n##### 簡単にプログラムの解説\n* MPI_COMM_WORLDは、コミュニケータとよばれる概念を保存する変数\n* コミュニケータは、操作を行う対象のプロセッサ群を定める\n* 初期状態では、０番～numprocs –１番までのプロセッサが、１つのコミュニケータに割り当てられる\n  この名前が、“MPI_COMM_WORLD”\n* RANKとは各「MPIプロセス」の「識別番号」のこと。\n\n##### 補足\nちょっとMPIを勉強してる人なら疑問に思うと思いますが、\nMPI_Init()と、MPI_Finalize()がありません。\nこれらの関数はmpi4pyモジュールの初回import時と、プロセス終了時に、それぞれ自動的に呼ばれているとのことです。\n\n---\n\n今回はここまで\n第二回からは実際に複数ノードを使用してプログラムを実行します。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-10T23:08:39+09:00', 'group': None, 'id': 'c78a33d7929389083547', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Python', 'versions': []}, {'name': 'RaspberryPi', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'mpich', 'versions': []}], 'title': '【第一回】Raspberry piで並列処理を行う', 'updated_at': '2018-10-10T23:08:39+09:00', 'url': 'https://qiita.com/ryuichi1208/items/c78a33d7929389083547', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="仮想化のメリット" class="fragment"></span><a href="#%E4%BB%AE%E6%83%B3%E5%8C%96%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88"><i class="fa fa-link"></i></a>仮想化のメリット</h1>\n\n<ul>\n<li>物理サーバ及びサーバの設置スペース</li>\n<li>物理サーバの調達や運用・管理コスト</li>\n<li>消費電力などのランニングコスト</li>\n</ul>\n\n<h4>\n<span id="ホストos型" class="fragment"></span><a href="#%E3%83%9B%E3%82%B9%E3%83%88os%E5%9E%8B"><i class="fa fa-link"></i></a>ホストOS型</h4>\n\n<ul>\n<li>ホストOSの上に構築するタイプ</li>\n</ul>\n\n<h4>\n<span id="ハイパーバイザー型" class="fragment"></span><a href="#%E3%83%8F%E3%82%A4%E3%83%91%E3%83%BC%E3%83%90%E3%82%A4%E3%82%B6%E3%83%BC%E5%9E%8B"><i class="fa fa-link"></i></a>ハイパーバイザー型</h4>\n\n<ul>\n<li>ホストOSを介するオーバーヘッドがない</li>\n<li>準仮想化：ゲストOSのコードに改変が必要、デバイスドライバはゲストOS上にインストール</li>\n<li>完全仮想化：windowsなども使える、パフォーマンスは劣化する</li>\n<li>ゲストOSが特権CPU命令を出すにはバイナリトランスレーション、CPU仮想化支援機能を使用する</li>\n<li>CPUの仮想化支援機能では仮想化ソフトウェアの処理を一部担うことでパフォーマンスを向上させる</li>\n<li>AMD-V, Intel Vt</li>\n</ul>\n\n<h4>\n<span id="コンテナ型" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%9E%8B"><i class="fa fa-link"></i></a>コンテナ型</h4>\n\n<ul>\n<li>OS上で仮想環境を動かす</li>\n<li>ゲストOSや仮想ハードウェアは含まれない</li>\n</ul>\n\n<h1>\n<span id="xen" class="fragment"></span><a href="#xen"><i class="fa fa-link"></i></a>Xen</h1>\n\n<h2>\n<span id="特徴" class="fragment"></span><a href="#%E7%89%B9%E5%BE%B4"><i class="fa fa-link"></i></a>特徴</h2>\n\n<ul>\n<li>ハイパーバイザー型仮想化テクノロジー</li>\n<li>各種デバイスの操作はカーネルへ依存</li>\n<li>SMP(Symmetrical Multi Processing)にも対応</li>\n<li>準仮想化ゲストと完全仮想化ゲストをサポート</li>\n<li>完全仮想化ドメインをHVMと呼ぶ</li>\n<li>管理用OSを実行するドメインをDomain-0</li>\n<li>ゲストOSを実行するドメインをDomain-U</li>\n<li>ブリッジモードがデフォルト</li>\n<li>ネットワークインターフェースはDomain-0側にvif1.0</li>\n</ul>\n\n<h2>\n<span id="設定ファイル" class="fragment"></span><a href="#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB"><i class="fa fa-link"></i></a>設定ファイル</h2>\n\n<p>/etc/xen/domain1</p>\n\n<p>例)完全仮想化ゲストを動かすための設定ファイル例<br>\nbuilder=\'hvm\'</p>\n\n<p>/etc/xen/xl.conf(グローバル設定ファイル)<br>\n/etc/xen/xl.cfg(ドメイン個別の設定ファイル)</p>\n\n<h2>\n<span id="コマンド類" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E9%A1%9E"><i class="fa fa-link"></i></a>コマンド類</h2>\n\n<h5>\n<span id="xlxmの拡張" class="fragment"></span><a href="#xlxm%E3%81%AE%E6%8B%A1%E5%BC%B5"><i class="fa fa-link"></i></a>xl(xmの拡張)</h5>\n\n<p>xl &lt;サブコマンド&gt; [引数]<br>\nXenを操作するためのコマンドラインユーティリティ</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">サブコマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">block-attach</td>\n<td style="text-align: left">新しい仮想ブロックデバイスの作成</td>\n</tr>\n<tr>\n<td style="text-align: left">block-detach</td>\n<td style="text-align: left">ドメインの仮想ブロックデバイスの切り離し</td>\n</tr>\n<tr>\n<td style="text-align: left">block-list</td>\n<td style="text-align: left">ドメインにアタッチされているブロックデバイスを表示</td>\n</tr>\n<tr>\n<td style="text-align: left">cd-eject</td>\n<td style="text-align: left">ゲストドメインの仮想CDドライブからのCD取り出し</td>\n</tr>\n<tr>\n<td style="text-align: left">cd-insert</td>\n<td style="text-align: left">CD挿入</td>\n</tr>\n<tr>\n<td style="text-align: left">console</td>\n<td style="text-align: left">ドメインの仮想コンソールを開く</td>\n</tr>\n<tr>\n<td style="text-align: left">create</td>\n<td style="text-align: left">ドメイン起動</td>\n</tr>\n<tr>\n<td style="text-align: left">destroy</td>\n<td style="text-align: left">ドメイン強制終了</td>\n</tr>\n<tr>\n<td style="text-align: left">info</td>\n<td style="text-align: left">Xenホストの情報を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">list</td>\n<td style="text-align: left">現在動作しているドメインの基本情報を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">migrate</td>\n<td style="text-align: left">ドメインを別ホストに以降</td>\n</tr>\n<tr>\n<td style="text-align: left">shutdown</td>\n<td style="text-align: left">ドメインの正常終了</td>\n</tr>\n<tr>\n<td style="text-align: left">vcpu-set</td>\n<td style="text-align: left">仮想CPU数の変更</td>\n</tr>\n</tbody>\n</table>\n\n<h4>\n<span id="xe" class="fragment"></span><a href="#xe"><i class="fa fa-link"></i></a>xe</h4>\n\n<p>xe &lt;サブコマンド&gt; &lt;引数=値&gt;</p>\n\n<p>XAPIはXenのサブプロジェクトとして開発されており、XenServerのためのデフォルト管理ツールの拡張</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">サブコマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">cd-list</td>\n<td style="text-align: left">CDの一覧表示</td>\n</tr>\n<tr>\n<td style="text-align: left">sr-destroy</td>\n<td style="text-align: left">ストレージリポジトリ削除</td>\n</tr>\n<tr>\n<td style="text-align: left">sr-list</td>\n<td style="text-align: left">ストレージリポジトリ一覧表示</td>\n</tr>\n<tr>\n<td style="text-align: left">vm-cd-insert</td>\n<td style="text-align: left">ISOファイルのマウント</td>\n</tr>\n<tr>\n<td style="text-align: left">vm-destroy</td>\n<td style="text-align: left">ホスト上の仮想マシン削除</td>\n</tr>\n<tr>\n<td style="text-align: left">vm-list</td>\n<td style="text-align: left">ホスト上の仮想マシン一覧表示</td>\n</tr>\n<tr>\n<td style="text-align: left">vm-start</td>\n<td style="text-align: left">仮想マシンの起動</td>\n</tr>\n</tbody>\n</table>\n\n<h4>\n<span id="xentop" class="fragment"></span><a href="#xentop"><i class="fa fa-link"></i></a>xentop</h4>\n\n<p>xentop &lt;オプション&gt;<br>\nXenシステム及びドメインにおける利用状況をリアルタイムで表示するためのコマンド</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">-b, --batch</td>\n<td style="text-align: left">出力データをコンソールへリダイレクト</td>\n</tr>\n<tr>\n<td style="text-align: left">-d, --delay</td>\n<td style="text-align: left">更新間隔を秒数で表示</td>\n</tr>\n<tr>\n<td style="text-align: left">-f, --full-name</td>\n<td style="text-align: left">完全ドメイン名を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">-n, --networks</td>\n<td style="text-align: left">ネットワーク情報を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">-v, --vcpus</td>\n<td style="text-align: left">VCPUの情報を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">-x, --bbds</td>\n<td style="text-align: left">ブロックデバイスを表示</td>\n</tr>\n</tbody>\n</table>\n\n<h4>\n<span id="xebstore-ls" class="fragment"></span><a href="#xebstore-ls"><i class="fa fa-link"></i></a>xebstore-ls</h4>\n\n<p>xenstore-ls [オプション] [パス|UUID] [引数]<br>\nXenStoreに格納されているキーと値を情報を一覧表示するためのコマンド</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">-f</td>\n<td style="text-align: left">すべてのキーのフルパスを表示</td>\n</tr>\n<tr>\n<td style="text-align: left">-p</td>\n<td style="text-align: left">パーミッションを表示</td>\n</tr>\n<tr>\n<td style="text-align: left">-s</td>\n<td style="text-align: left">ローカルソケットのみを使用してxenstoredに接続</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="kvm-kernel-based-virtual-machine" class="fragment"></span><a href="#kvm-kernel-based-virtual-machine"><i class="fa fa-link"></i></a>KVM (Kernel-based Virtual Machine)</h1>\n\n<h2>\n<span id="特徴-1" class="fragment"></span><a href="#%E7%89%B9%E5%BE%B4-1"><i class="fa fa-link"></i></a>特徴</h2>\n\n<ul>\n<li>完全仮想化をサポート</li>\n<li>CPUの仮想化支援機能を前提に設計/開発</li>\n<li>Intel VT\u3000及びAMD-Vが必要</li>\n<li>ハードウェアデバイスのエミュレータが必要</li>\n<li>QEMUが使用されている</li>\n<li>カーネルの一部として組み込まれている為カーネルのデバイスドライバをそのまま利用できる</li>\n<li>kvm.ko, qemu, libvirt, brige-utilsが必要</li>\n<li>ホストOS上にvirb0という仮想ブリッジとTAPデバイスが作成される</li>\n<li>Libvirtのlibvirtdデーモンによって管理される</li>\n</ul>\n\n<h2>\n<span id="設定ファイル-1" class="fragment"></span><a href="#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB-1"><i class="fa fa-link"></i></a>設定ファイル</h2>\n\n<p>/etc/kvm<br>\n/dev/kvm</p>\n\n<h2>\n<span id="コマンド類-1" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E9%A1%9E-1"><i class="fa fa-link"></i></a>コマンド類</h2>\n\n<h4>\n<span id="qemu-img" class="fragment"></span><a href="#qemu-img"><i class="fa fa-link"></i></a>qemu-img</h4>\n\n<p>スナップショットのファイル形式はqcow,qcow2</p>\n\n<p>qemu-img &lt;サブコマンド&gt; [オプション]</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">サブコマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">check</td>\n<td style="text-align: left">ディスクイメージにエラーがないかどうかのチェック</td>\n</tr>\n<tr>\n<td style="text-align: left">commit</td>\n<td style="text-align: left">変更のコミット</td>\n</tr>\n<tr>\n<td style="text-align: left">convert</td>\n<td style="text-align: left">ディスクイメージの変換</td>\n</tr>\n<tr>\n<td style="text-align: left">create</td>\n<td style="text-align: left">指定したファイル名で新しいディスクイメージを作成</td>\n</tr>\n<tr>\n<td style="text-align: left">info</td>\n<td style="text-align: left">ディスクイメージに関する情報の表示</td>\n</tr>\n<tr>\n<td style="text-align: left">snapshot</td>\n<td style="text-align: left">スナップショットの表示(-l), 適用(-a), 作成(-c)</td>\n</tr>\n</tbody>\n</table>\n\n<h4>\n<span id="qemuモニタ" class="fragment"></span><a href="#qemu%E3%83%A2%E3%83%8B%E3%82%BF"><i class="fa fa-link"></i></a>QEMUモニタ</h4>\n\n<p>Ctrl + Alt + 2でモニタ切り替え</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">change</td>\n<td style="text-align: left">メディアの変更</td>\n</tr>\n<tr>\n<td style="text-align: left">commit</td>\n<td style="text-align: left">ディスクイメージに対する変更を確定</td>\n</tr>\n<tr>\n<td style="text-align: left">delvm</td>\n<td style="text-align: left">スナップショットの削除</td>\n</tr>\n<tr>\n<td style="text-align: left">eject</td>\n<td style="text-align: left">メディアの取り出し</td>\n</tr>\n<tr>\n<td style="text-align: left">info &lt;引数&gt;</td>\n<td style="text-align: left">情報の表示</td>\n</tr>\n<tr>\n<td style="text-align: left">loadvm</td>\n<td style="text-align: left">スナップショットから仮想マシンを復元</td>\n</tr>\n<tr>\n<td style="text-align: left">savevm</td>\n<td style="text-align: left">スナップショットの作成</td>\n</tr>\n</tbody>\n</table>\n\n<h4>\n<span id="qemu-kvm" class="fragment"></span><a href="#qemu-kvm"><i class="fa fa-link"></i></a>qemu-kvm</h4>\n\n<p>KVMを管理/操作するための基本ユーティリティ</p>\n\n<p>qemu-kvm [オプション]</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">-drive</td>\n<td style="text-align: left">新しいドライブを定義</td>\n</tr>\n<tr>\n<td style="text-align: left">-boot</td>\n<td style="text-align: left">ドライブの起動順序を定義</td>\n</tr>\n<tr>\n<td style="text-align: left">-cdrom</td>\n<td style="text-align: left">指定したファイルをCD-ROMイメージとして使用</td>\n</tr>\n<tr>\n<td style="text-align: left">-snapshot</td>\n<td style="text-align: left">ディスクイメージファイルの代わりに一時ファイルを書き出し</td>\n</tr>\n<tr>\n<td style="text-align: left">-usb</td>\n<td style="text-align: left">USBドライバを有効化</td>\n</tr>\n<tr>\n<td style="text-align: left">-uuid UUID</td>\n<td style="text-align: left">UUIDを設定</td>\n</tr>\n</tbody>\n</table>\n\n<h4>\n<span id="brctl" class="fragment"></span><a href="#brctl"><i class="fa fa-link"></i></a>brctl</h4>\n\n<p>ブリッジを管理するコマンド</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">addbr</td>\n<td style="text-align: left">新しいブリッジの作成</td>\n</tr>\n<tr>\n<td style="text-align: left">addif</td>\n<td style="text-align: left">ブリッジにインターフェースを接続</td>\n</tr>\n<tr>\n<td style="text-align: left">show</td>\n<td style="text-align: left">ブリッジの状態を確認</td>\n</tr>\n</tbody>\n</table>\n\n<h4>\n<span id="tunctlコマンド" class="fragment"></span><a href="#tunctl%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"><i class="fa fa-link"></i></a>tunctlコマンド</h4>\n\n<p>TUN/TAPデバイスを作成/管理するためのコマンド</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">-b</td>\n<td style="text-align: left">インターフェース名の表示</td>\n</tr>\n<tr>\n<td style="text-align: left">-n</td>\n<td style="text-align: left">TUNインターフェースの作成</td>\n</tr>\n<tr>\n<td style="text-align: left">-p</td>\n<td style="text-align: left">TAPインターフェースの作成</td>\n</tr>\n<tr>\n<td style="text-align: left">-d</td>\n<td style="text-align: left">指定したインターフェースの削除</td>\n</tr>\n<tr>\n<td style="text-align: left">-t</td>\n<td style="text-align: left">インターフェース名を定義</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="opebvz" class="fragment"></span><a href="#opebvz"><i class="fa fa-link"></i></a>OpebVZ</h1>\n\n<h2>\n<span id="特徴-2" class="fragment"></span><a href="#%E7%89%B9%E5%BE%B4-2"><i class="fa fa-link"></i></a>特徴</h2>\n\n<ul>\n<li>Linuxカーネルをベースとしたオープンソースのコンテナ型仮想化ソフト</li>\n<li>Windowsは動かせない</li>\n</ul>\n\n<h2>\n<span id="コマンド類-2" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E9%A1%9E-2"><i class="fa fa-link"></i></a>コマンド類</h2>\n\n<h4>\n<span id="vzpkg" class="fragment"></span><a href="#vzpkg"><i class="fa fa-link"></i></a>vzpkg</h4>\n\n<p>EZテンプレートのインストール等</p>\n\n<h4>\n<span id="vzctl" class="fragment"></span><a href="#vzctl"><i class="fa fa-link"></i></a>vzctl</h4>\n\n<p>OpenVZの操作</p>\n\n<p>vzctl &lt;サブコマンド&gt; &lt;コンテナID&gt;</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">create</td>\n<td style="text-align: left">コンテナ作成</td>\n</tr>\n<tr>\n<td style="text-align: left">destroy</td>\n<td style="text-align: left">コンテナ破棄</td>\n</tr>\n<tr>\n<td style="text-align: left">exec</td>\n<td style="text-align: left">OS上の任意のコマンドの実行</td>\n</tr>\n<tr>\n<td style="text-align: left">exec2</td>\n<td style="text-align: left">上記＋exitコードを返す</td>\n</tr>\n<tr>\n<td style="text-align: left">restart</td>\n<td style="text-align: left">コンテナの再起動</td>\n</tr>\n<tr>\n<td style="text-align: left">set</td>\n<td style="text-align: left">各種設定</td>\n</tr>\n<tr>\n<td style="text-align: left">start</td>\n<td style="text-align: left">コンテナ起動</td>\n</tr>\n<tr>\n<td style="text-align: left">stop</td>\n<td style="text-align: left">コンテナ停止</td>\n</tr>\n<tr>\n<td style="text-align: left">suspend</td>\n<td style="text-align: left">コンテナ一時停止</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="lxclinux-container" class="fragment"></span><a href="#lxclinux-container"><i class="fa fa-link"></i></a>LXC(Linux Container)</h1>\n\n<h2>\n<span id="特徴-3" class="fragment"></span><a href="#%E7%89%B9%E5%BE%B4-3"><i class="fa fa-link"></i></a>\u3000特徴</h2>\n\n<ul>\n<li>カーネルの機能(cgroups)を用いてコンテナを実現</li>\n<li>高性能</li>\n<li>テンプレートファイルを使用してコンテナを作成</li>\n</ul>\n\n<h2>\n<span id="設定ファイル-2" class="fragment"></span><a href="#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB-2"><i class="fa fa-link"></i></a>設定ファイル</h2>\n\n<p>テンプレート<br>\n/usr/share/lxc/templates</p>\n\n<h2>\n<span id="コマンド類-3" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E9%A1%9E-3"><i class="fa fa-link"></i></a>コマンド類</h2>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">lxc-console</td>\n<td style="text-align: left">コンテナにコンソール接続</td>\n</tr>\n<tr>\n<td style="text-align: left">lxc-create</td>\n<td style="text-align: left">コンテナ作成</td>\n</tr>\n<tr>\n<td style="text-align: left">lxc-destroy</td>\n<td style="text-align: left">コンテナ破棄</td>\n</tr>\n<tr>\n<td style="text-align: left">lxc-start</td>\n<td style="text-align: left">コンテナ起動</td>\n</tr>\n<tr>\n<td style="text-align: left">lxc-stop</td>\n<td style="text-align: left">コンテナ停止</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="その他ツール類の説明" class="fragment"></span><a href="#%E3%81%9D%E3%81%AE%E4%BB%96%E3%83%84%E3%83%BC%E3%83%AB%E9%A1%9E%E3%81%AE%E8%AA%AC%E6%98%8E"><i class="fa fa-link"></i></a>その他ツール類の説明</h1>\n\n<ul>\n<li>Docker ： コンテナ仮想化ツール</li>\n<li>Chef ：\u3000サーバーの環境構築、運用などを自動化するためのツール</li>\n<li>Puppet\u3000:\u3000構成管理ツール。Rubyで書かれている</li>\n<li>Ansible : 構成管理ツール</li>\n<li>Packer\u3000：\u3000サーバーイメージを作成するためのツール</li>\n</ul>\n\n<h1>\n<span id="libvirt" class="fragment"></span><a href="#libvirt"><i class="fa fa-link"></i></a>Libvirt</h1>\n\n<h2>\n<span id="概要特徴" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81%E7%89%B9%E5%BE%B4"><i class="fa fa-link"></i></a>概要/特徴</h2>\n\n<ul>\n<li>Xenに対応するAPIとして開発がスタート</li>\n<li>仮想化環境を操作/管理するための共通インターフェス(抽象化ライブラリ)</li>\n<li>libvitrdが内部で動いている</li>\n<li>起動すると「default」というNATブリッジが作成される</li>\n<li>SASL/Kerberos/SSHのプロトコルをサポート</li>\n</ul>\n\n<h2>\n<span id="設定ファイル-3" class="fragment"></span><a href="#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB-3"><i class="fa fa-link"></i></a>設定ファイル</h2>\n\n<p>/etc/libvirt/libvirtd.conf</p>\n\n<h2>\n<span id="関連ツール" class="fragment"></span><a href="#%E9%96%A2%E9%80%A3%E3%83%84%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>関連ツール</h2>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">ツール</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">virt-clone</td>\n<td style="text-align: left">イメージ複製ツール</td>\n</tr>\n<tr>\n<td style="text-align: left">virt-image</td>\n<td style="text-align: left">XMLファイルから仮想マシンを作成するためのツール</td>\n</tr>\n<tr>\n<td style="text-align: left">virt-install</td>\n<td style="text-align: left">メディアから新しい仮想マシンを作成するためのツール</td>\n</tr>\n<tr>\n<td style="text-align: left">virt-manager</td>\n<td style="text-align: left">GUI管理ツール</td>\n</tr>\n<tr>\n<td style="text-align: left">virt-viewer</td>\n<td style="text-align: left">グラフィカルコンソール</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="コマンド類-4" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E9%A1%9E-4"><i class="fa fa-link"></i></a>コマンド類</h2>\n\n<h4>\n<span id="virsh-サブコマンド-引数" class="fragment"></span><a href="#virsh-%E3%82%B5%E3%83%96%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89-%E5%BC%95%E6%95%B0"><i class="fa fa-link"></i></a>virsh &lt;サブコマンド&gt; [引数]</h4>\n\n<p>libvirtが提供する標準のコマンドラインツール\u3000</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">autostart</td>\n<td style="text-align: left">libvirtdの起動時にゲストの仮想マシンを自動起動</td>\n</tr>\n<tr>\n<td style="text-align: left">change-media</td>\n<td style="text-align: left">仮想マシンにアタッチされたCD-ROMイメージファイルを変更</td>\n</tr>\n<tr>\n<td style="text-align: left">console</td>\n<td style="text-align: left">ゲストの仮想マシンのコンソールに接続</td>\n</tr>\n<tr>\n<td style="text-align: left">create</td>\n<td style="text-align: left">XMLファイルからゲストの仮想マシンを作成</td>\n</tr>\n<tr>\n<td style="text-align: left">destroy</td>\n<td style="text-align: left">ゲストの仮想マシンを強制停止</td>\n</tr>\n<tr>\n<td style="text-align: left">dump</td>\n<td style="text-align: left">ゲストの仮想マシンのコアダンプを出力</td>\n</tr>\n<tr>\n<td style="text-align: left">dumpxml</td>\n<td style="text-align: left">ゲストの仮想マシン用の設定ファイルをXML形式で出力</td>\n</tr>\n<tr>\n<td style="text-align: left">list</td>\n<td style="text-align: left">ゲストの仮想マシン一覧を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">migrate</td>\n<td style="text-align: left">ゲストの仮想マシンを別ホストに移行</td>\n</tr>\n<tr>\n<td style="text-align: left">net-auto</td>\n<td style="text-align: left">仮想ネットワークの自動起動</td>\n</tr>\n<tr>\n<td style="text-align: left">net-edit</td>\n<td style="text-align: left">ゲストの仮想ネットワークの一覧を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">net-list</td>\n<td style="text-align: left">仮想マシンネットワークの一覧を表示</td>\n</tr>\n<tr>\n<td style="text-align: left">net-start</td>\n<td style="text-align: left">仮想ネットワークを起動</td>\n</tr>\n<tr>\n<td style="text-align: left">reboot</td>\n<td style="text-align: left">ゲストの仮想マシンを再起動</td>\n</tr>\n<tr>\n<td style="text-align: left">resume</td>\n<td style="text-align: left">ゲストの仮想マシンを再開</td>\n</tr>\n<tr>\n<td style="text-align: left">save</td>\n<td style="text-align: left">ゲストの仮想マシンをファイルに保存</td>\n</tr>\n<tr>\n<td style="text-align: left">setmem</td>\n<td style="text-align: left">ゲストの仮想マシンに割り当てるメモリサイズを設定</td>\n</tr>\n<tr>\n<td style="text-align: left">setvcpus</td>\n<td style="text-align: left">ゲストの仮想マシンに割り当てる仮想CPU数を設定</td>\n</tr>\n<tr>\n<td style="text-align: left">shutdown</td>\n<td style="text-align: left">ゲストの仮想マシンを停止</td>\n</tr>\n<tr>\n<td style="text-align: left">suspend</td>\n<td style="text-align: left">ゲストの仮想マシンを一時停止</td>\n</tr>\n<tr>\n<td style="text-align: left">vcpuinfo</td>\n<td style="text-align: left">ゲストの仮想CPUを表示</td>\n</tr>\n<tr>\n<td style="text-align: left">vcpuin</td>\n<td style="text-align: left">CPUアフィニティを設定</td>\n</tr>\n<tr>\n<td style="text-align: left">vol-list</td>\n<td style="text-align: left">ストレージプール内のストレージボリュームの一覧を表示</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="クラウド管理ツール" class="fragment"></span><a href="#%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>クラウド管理ツール</h1>\n\n<h3>\n<span id="openstack" class="fragment"></span><a href="#openstack"><i class="fa fa-link"></i></a>OpenStack</h3>\n\n<ul>\n<li>IaaS用プラットフォーム</li>\n<li>主要コンポーネント(Cinder,Glance,Keystone,Neutron,Nova,Swift)</li>\n</ul>\n\n<h3>\n<span id="cloudstack" class="fragment"></span><a href="#cloudstack"><i class="fa fa-link"></i></a>CloudStack</h3>\n\n<ul>\n<li>現在は Apache CloudStackとして開発</li>\n<li>管理サーバがさまざまなハイパーバイザーと通信する基盤を提供</li>\n</ul>\n\n<h1>\n<span id="高可用の概念と理論" class="fragment"></span><a href="#%E9%AB%98%E5%8F%AF%E7%94%A8%E3%81%AE%E6%A6%82%E5%BF%B5%E3%81%A8%E7%90%86%E8%AB%96"><i class="fa fa-link"></i></a>高可用の概念と理論</h1>\n\n<h3>\n<span id="高可用クラスタとは" class="fragment"></span><a href="#%E9%AB%98%E5%8F%AF%E7%94%A8%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>高可用クラスタとは</h3>\n\n<ul>\n<li>システムに冗長性を持たせSPOFをなくすことで耐障害性を向上させること</li>\n</ul>\n\n<h3>\n<span id="スプリットブレイン" class="fragment"></span><a href="#%E3%82%B9%E3%83%97%E3%83%AA%E3%83%83%E3%83%88%E3%83%96%E3%83%AC%E3%82%A4%E3%83%B3"><i class="fa fa-link"></i></a>スプリットブレイン</h3>\n\n<ul>\n<li> ネットワークの不具合等が原因でノード間のハートビート通信が途絶えた場合に複数ノードがマスターとなってしまったりサービスの二重起動が起きてしまう減少。</li>\n</ul>\n\n<h3>\n<span id="フェンシング" class="fragment"></span><a href="#%E3%83%95%E3%82%A7%E3%83%B3%E3%82%B7%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>フェンシング</h3>\n\n<ul>\n<li>クラスタ内のあるノードで障害が発生した場合そのノードの挙動はシステムにとって何らかの問題を引き起こす可能性がある。速やかに障害ノードと正常ノードの干渉を防ぐ。フェンシングデーモンによって実装される。</li>\n</ul>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">パワーフェンシング</td>\n<td style="text-align: left">パワーコントローラーを使用して障害ノードの電源をOFFにする</td>\n</tr>\n<tr>\n<td style="text-align: left">スイッチフェンシング</td>\n<td style="text-align: left">障害ノードと他のノードや共有ディスクとの通信をスイッチで遮断する</td>\n</tr>\n<tr>\n<td style="text-align: left">GNBDフェンシング</td>\n<td style="text-align: left">GNBDサーバに対するアクセスを無効にする</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id="クォーラム" class="fragment"></span><a href="#%E3%82%AF%E3%82%A9%E3%83%BC%E3%83%A9%E3%83%A0"><i class="fa fa-link"></i></a>クォーラム</h3>\n\n<ul>\n<li>議決に必要な定足数</li>\n<li>一定数以上の正常なノードが存在していればそのクラスタグループを有効なグループとみなす</li>\n<li>有効では無いグループをフェンシング</li>\n<li>ノードマジョリティとも呼ばれる</li>\n</ul>\n\n<h3>\n<span id="ディザスタリカバリ" class="fragment"></span><a href="#%E3%83%87%E3%82%A3%E3%82%B6%E3%82%B9%E3%82%BF%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA"><i class="fa fa-link"></i></a>ディザスタ・リカバリ</h3>\n\n<ul>\n<li>地震や火事などを想定した災害からのシステム復旧を表す言葉</li>\n<li>RPO（Recovery Point Objective） 過去のどの時点まで戻すか</li>\n<li>RTO(Recovery Time Objective) いつまでにデータを復旧すればよいか</li>\n</ul>\n\n<h1>\n<span id="ロードバランスクラスタ負荷分散クラスタ" class="fragment"></span><a href="#%E3%83%AD%E3%83%BC%E3%83%89%E3%83%90%E3%83%A9%E3%83%B3%E3%82%B9%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E8%B2%A0%E8%8D%B7%E5%88%86%E6%95%A3%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF"><i class="fa fa-link"></i></a>ロードバランスクラスタ(負荷分散クラスタ)</h1>\n\n<h3>\n<span id="lvslinux-virtual-server" class="fragment"></span><a href="#lvslinux-virtual-server"><i class="fa fa-link"></i></a>LVS(Linux Virtual Server)</h3>\n\n<ul>\n<li>クライアントからのリクエストを複数のサーバに振り分ける機能を提供</li>\n<li>サービスを提供するサーバをリアルサーバ</li>\n<li>割り振るサーバを仮想サーバ</li>\n<li>トランスポート層で動作するためレイヤ4スイッチングともいう</li>\n<li>中心的なコンポーネントとしてip_vsがある</li>\n<li>lsvdがnannyという子プロセスを生成し1対1で対応する</li>\n</ul>\n\n<h3>\n<span id="lvsのフォワーディング方式" class="fragment"></span><a href="#lvs%E3%81%AE%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E6%96%B9%E5%BC%8F"><i class="fa fa-link"></i></a>LVSのフォワーディング方式</h3>\n\n<p>/proc/sys/net/ipv4/ip_forward = 1の必要がある</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">方式</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">NAT</td>\n<td style="text-align: left">宛先IPアドレスをリアルサーバのアドレスに変換して転送</td>\n</tr>\n<tr>\n<td style="text-align: left">ダイレクトルーティング</td>\n<td style="text-align: left">宛先IPアドレスは変えずにMACアドレスのみをリアルサーバのアドレスに変換して転送</td>\n</tr>\n<tr>\n<td style="text-align: left">トンネリング</td>\n<td style="text-align: left">受け取ったパケットをリアルサーバ宛のIPヘッダでカプセル化して転送</td>\n</tr>\n<tr>\n<td style="text-align: left">ローカルノード</td>\n<td style="text-align: left">ロードバランサでリアルサーバの処理を兼用することが可能</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id="lvsの接続スケジューリングアルゴリズム" class="fragment"></span><a href="#lvs%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0"><i class="fa fa-link"></i></a>LVSの接続スケジューリングアルゴリズム</h3>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">ラウンドロビン</td>\n<td style="text-align: left">rr</td>\n</tr>\n<tr>\n<td style="text-align: left">重み付けラウンドロビン</td>\n<td style="text-align: left">wrr</td>\n</tr>\n<tr>\n<td style="text-align: left">最少コネクション</td>\n<td style="text-align: left">lc</td>\n</tr>\n<tr>\n<td style="text-align: left">重み付け最少コネクション</td>\n<td style="text-align: left">wls(デフォルト)</td>\n</tr>\n<tr>\n<td style="text-align: left">ローカリティベースの最少コネクション</td>\n<td style="text-align: left">lblc</td>\n</tr>\n<tr>\n<td style="text-align: left">宛先ハッシュ</td>\n<td style="text-align: left">dh</td>\n</tr>\n<tr>\n<td style="text-align: left">送信元ハッシュ</td>\n<td style="text-align: left">sh</td>\n</tr>\n<tr>\n<td style="text-align: left">最小遅延予測</td>\n<td style="text-align: left">sed</td>\n</tr>\n<tr>\n<td style="text-align: left">キューなし</td>\n<td style="text-align: left">nq</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id="ipvsadm" class="fragment"></span><a href="#ipvsadm"><i class="fa fa-link"></i></a>ipvsadm</h3>\n\n<p>LVSの管理ユーティ里程コマンド</p>\n\n<p>ipvsadm &lt;サブコマンド&gt; [オプション]</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">-A</td>\n<td style="text-align: left">仮想サーバの追加</td>\n</tr>\n<tr>\n<td style="text-align: left">-a</td>\n<td style="text-align: left">仮想サーバにリアルサーバを追加</td>\n</tr>\n<tr>\n<td style="text-align: left">-D</td>\n<td style="text-align: left">関連づいているすべてのリアルサーバと仮想サーバを削除</td>\n</tr>\n<tr>\n<td style="text-align: left">-d</td>\n<td style="text-align: left">仮想サーバからリアルサーバを削除</td>\n</tr>\n<tr>\n<td style="text-align: left">-E</td>\n<td style="text-align: left">仮想サーバの編集</td>\n</tr>\n<tr>\n<td style="text-align: left">-e</td>\n<td style="text-align: left">仮想サーバに関連づいているリアルサーバを編集</td>\n</tr>\n<tr>\n<td style="text-align: left">--start-daemon</td>\n<td style="text-align: left">接続同期デーモン開始</td>\n</tr>\n<tr>\n<td style="text-align: left">--stop-daemon</td>\n<td style="text-align: left">停止</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id="keepalived" class="fragment"></span><a href="#keepalived"><i class="fa fa-link"></i></a>keepalived</h3>\n\n<ul>\n<li>リアルサーバの稼働状況を監視</li>\n<li>ロードバランサ自体の冗長化をサポート</li>\n<li>LVSとの併用で運用</li>\n<li>設定ファイルは「/etc/keepalived/keepalived.conf」</li>\n<li>ロードバランサの設定はvirtual_serverで行う。</li>\n</ul>\n\n<h3>\n<span id="vrrp" class="fragment"></span><a href="#vrrp"><i class="fa fa-link"></i></a>VRRP</h3>\n\n<ul>\n<li>ルータの冗長化をするための標準プロトコル</li>\n<li>パスワードによる認証と、IPSecAHによる認証をサポートしている</li>\n</ul>\n\n<h3>\n<span id="ldirectord-linux-director-daemon" class="fragment"></span><a href="#ldirectord-linux-director-daemon"><i class="fa fa-link"></i></a>ldirectord (Linux Director Daemon)</h3>\n\n<ul>\n<li>LVSクラスタにおいてHeartbeatと連携して動作する負荷分散システムの監視/管理するツール</li>\n<li>LVSの複雑な構成における設定/管理が可能</li>\n<li>設定ファイルは「/etc/ha.d/ldirectord.cf」</li>\n</ul>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">autoreload</td>\n<td style="text-align: left">設定ファイルが変更された場合の自動読み込み</td>\n</tr>\n<tr>\n<td style="text-align: left">checkinterval</td>\n<td style="text-align: left">リアルサーバへの接続テストの間隔</td>\n</tr>\n<tr>\n<td style="text-align: left">checktimeout</td>\n<td style="text-align: left">異常と判断するまでの待ち時間。デフォ5秒</td>\n</tr>\n<tr>\n<td style="text-align: left">checktype</td>\n<td style="text-align: left">リアルサービスの死活監視のチェック方法</td>\n</tr>\n<tr>\n<td style="text-align: left">fallback</td>\n<td style="text-align: left">リアルサーバが停止した場合のリクエスト転送先</td>\n</tr>\n<tr>\n<td style="text-align: left">logfile</td>\n<td style="text-align: left">ログファイルの保存先</td>\n</tr>\n<tr>\n<td style="text-align: left">quiescent</td>\n<td style="text-align: left"></td>\n</tr>\n<tr>\n<td style="text-align: left">real</td>\n<td style="text-align: left">リアルサーバとサービスの指定</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id="haproxy" class="fragment"></span><a href="#haproxy"><i class="fa fa-link"></i></a>HAProxy</h3>\n\n<ul>\n<li>レイヤ7をサポート</li>\n<li>設定ファイルは「/etc/haproxy/haproxy.cfg」</li>\n</ul>\n\n<h1>\n<span id="フェイルオーバクラスタ" class="fragment"></span><a href="#%E3%83%95%E3%82%A7%E3%82%A4%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%90%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF"><i class="fa fa-link"></i></a>フェイルオーバクラスタ</h1>\n\n<h4>\n<span id="pacemaker" class="fragment"></span><a href="#pacemaker"><i class="fa fa-link"></i></a>Pacemaker</h4>\n\n<ul>\n<li>クラスタエンジン : HeartBeat3, Corosync</li>\n<li>リソースマネージャ : PaceMaker,  OpenAIS</li>\n</ul>\n\n<p>主要コンポーネント</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">CIB</td>\n<td style="text-align: left">Cluster Information Base cib.xmlに設定は保存</td>\n</tr>\n<tr>\n<td style="text-align: left">CRMｄ</td>\n<td style="text-align: left">クラスタにおけるリソース管理の中心となるデーモン</td>\n</tr>\n<tr>\n<td style="text-align: left">PEngine</td>\n<td style="text-align: left">Policy Engineの略でありCIBの情報に基づいてクラスタの最適な状態を算出する</td>\n</tr>\n<tr>\n<td style="text-align: left">LRMd</td>\n<td style="text-align: left">ローカルノードのリソース管理デーモン</td>\n</tr>\n<tr>\n<td style="text-align: left">STONITHd</td>\n<td style="text-align: left">スプリットブレインを防ぐフェンシングデーモン</td>\n</tr>\n</tbody>\n</table>\n\n<p>管理ユーティリティ</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">コマンド</th>\n<th style="text-align: left">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">crm_attribute</td>\n<td style="text-align: left">ノードの属性とクラスタのオプションを管理</td>\n</tr>\n<tr>\n<td style="text-align: left">crm_mon</td>\n<td style="text-align: left">クラスタの現在の動作状態をモニタリング</td>\n</tr>\n<tr>\n<td style="text-align: left">crm_node</td>\n<td style="text-align: left">クラスタのノード情報を一覧表示</td>\n</tr>\n<tr>\n<td style="text-align: left">crm_resource</td>\n<td style="text-align: left">クラスタリソースに関するタスクを実行</td>\n</tr>\n<tr>\n<td style="text-align: left">crm_shadow</td>\n<td style="text-align: left">設定変更を実際のクラスタで実行する前にサンドボックスで実行</td>\n</tr>\n<tr>\n<td style="text-align: left">crm_simulate</td>\n<td style="text-align: left">イベントに対するクラスタの応答をシミュレート</td>\n</tr>\n<tr>\n<td style="text-align: left">crm_standy</td>\n<td style="text-align: left">crm_attributeのラッパー</td>\n</tr>\n<tr>\n<td style="text-align: left">crm_verify</td>\n<td style="text-align: left">設定の構文チェック</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="エンタープライズlinux" class="fragment"></span><a href="#%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BAlinux"><i class="fa fa-link"></i></a>エンタープライズLinux</h1>\n\n<h4>\n<span id="rhelの高可用性アドオン" class="fragment"></span><a href="#rhel%E3%81%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3"><i class="fa fa-link"></i></a>RHELの高可用性アドオン</h4>\n\n<ul>\n<li>RHELがHigh Availability Add-Onというソフトウェアコンポーネントのセットを提供</li>\n<li>CMAN,DLM,フェンシング機能</li>\n<li>RGManager</li>\n<li>Conga,Luci,Ricci</li>\n</ul>\n\n<h4>\n<span id="suse-linux" class="fragment"></span><a href="#suse-linux"><i class="fa fa-link"></i></a>SUSE Linux</h4>\n\n<ul>\n<li>PaceMaker,Corosync,OpenAIS,Geo Clustering,HAProxy</li>\n<li>OCFS2,GFS2,cLVM2</li>\n<li>DRBR,Relax-and-Recover</li>\n<li>統合コマンドラインインターフェース,Hawk</li>\n</ul>\n\n<h1>\n<span id="drbd及びclvm" class="fragment"></span><a href="#drbd%E5%8F%8A%E3%81%B3clvm"><i class="fa fa-link"></i></a>DRBD及びcLVM</h1>\n\n<p>＜主要な知識範囲＞<br>\n・DRBD のリソース、状態、レプリケーションモードの理解<br>\n・DRBD のリソース、ネットワーク、ディスク、デバイスの理解<br>\n・DRBDの自動復旧とエラー処理。<br>\n・drbdadmを使用したDRBDの管理<br>\n・drbdsetup と drbdmetaの基本知識<br>\n・DRBD と Pacemakerの統合<br>\n・cLVM<br>\n・cLVM とPacemakerの統合</p>\n\n<p>＜重要なファイル、用語、ユーティリティ＞<br>\n・プロトコル A, B および C<br>\n・プライマリ、セカンダリ<br>\n・3ノードレプリケーション<br>\n・drbd カーネルモジュール<br>\n・drbdadm<br>\n・drbdsetup<br>\n・drbdmeta<br>\n・/etc/drbd.conf<br>\n・/proc/drbd<br>\n・LVM2<br>\n・clvmd<br>\n・vgchange, vgs</p>\n\n<p>Protocol A. 非同期レプリケーションプロトコル。<br>\nProtocol B. メモリ同期(半非同期)<br>\nProtocol C. 同期レプリケーションプロトコル。</p>\n\n<h1>\n<span id="クラスタファイルシステム" class="fragment"></span><a href="#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0"><i class="fa fa-link"></i></a>クラスタファイルシステム</h1>\n', 'body': "# 仮想化のメリット\n\n* 物理サーバ及びサーバの設置スペース\n* 物理サーバの調達や運用・管理コスト\n* 消費電力などのランニングコスト\n\n#### ホストOS型\n\n* ホストOSの上に構築するタイプ\n\n#### ハイパーバイザー型\n\n* ホストOSを介するオーバーヘッドがない\n* 準仮想化：ゲストOSのコードに改変が必要、デバイスドライバはゲストOS上にインストール\n* 完全仮想化：windowsなども使える、パフォーマンスは劣化する\n* ゲストOSが特権CPU命令を出すにはバイナリトランスレーション、CPU仮想化支援機能を使用する\n* CPUの仮想化支援機能では仮想化ソフトウェアの処理を一部担うことでパフォーマンスを向上させる\n* AMD-V, Intel Vt\n\n#### コンテナ型\n\n* OS上で仮想環境を動かす\n* ゲストOSや仮想ハードウェアは含まれない\n\n# Xen\n\n## 特徴\n* ハイパーバイザー型仮想化テクノロジー\n* 各種デバイスの操作はカーネルへ依存\n* SMP(Symmetrical Multi Processing)にも対応\n* 準仮想化ゲストと完全仮想化ゲストをサポート\n* 完全仮想化ドメインをHVMと呼ぶ\n* 管理用OSを実行するドメインをDomain-0\n* ゲストOSを実行するドメインをDomain-U\n* ブリッジモードがデフォルト\n* ネットワークインターフェースはDomain-0側にvif1.0\n\n## 設定ファイル\n/etc/xen/domain1\n\n例)完全仮想化ゲストを動かすための設定ファイル例\nbuilder='hvm'\n\n/etc/xen/xl.conf(グローバル設定ファイル)\n/etc/xen/xl.cfg(ドメイン個別の設定ファイル)\n\n## コマンド類\n\n##### xl(xmの拡張)\n\nxl <サブコマンド> [引数]\nXenを操作するためのコマンドラインユーティリティ\n\n|サブコマンド|説明|\n|:--|:--|\n|block-attach|新しい仮想ブロックデバイスの作成|\n|block-detach|ドメインの仮想ブロックデバイスの切り離し|\n|block-list|ドメインにアタッチされているブロックデバイスを表示|\n|cd-eject|ゲストドメインの仮想CDドライブからのCD取り出し|\n|cd-insert|CD挿入|\n|console|ドメインの仮想コンソールを開く|\n|create|ドメイン起動|\n|destroy|ドメイン強制終了|\n|info|Xenホストの情報を表示|\n|list|現在動作しているドメインの基本情報を表示|\n|migrate|ドメインを別ホストに以降|\n|shutdown|ドメインの正常終了|\n|vcpu-set|仮想CPU数の変更|\n\n#### xe\n\nxe <サブコマンド> <引数=値>\n\nXAPIはXenのサブプロジェクトとして開発されており、XenServerのためのデフォルト管理ツールの拡張\n\n|サブコマンド|説明|\n|:--|:--|\n|cd-list|CDの一覧表示|\n|sr-destroy|ストレージリポジトリ削除|\n|sr-list|ストレージリポジトリ一覧表示|\n|vm-cd-insert|ISOファイルのマウント|\n|vm-destroy|ホスト上の仮想マシン削除|\n|vm-list|ホスト上の仮想マシン一覧表示|\n|vm-start|仮想マシンの起動|\n\n#### xentop\n\nxentop <オプション>\nXenシステム及びドメインにおける利用状況をリアルタイムで表示するためのコマンド\n\n|オプション|説明|\n|:--|:--|\n|-b, --batch|出力データをコンソールへリダイレクト|\n|-d, --delay|更新間隔を秒数で表示|\n|-f, --full-name|完全ドメイン名を表示|\n|-n, --networks|ネットワーク情報を表示|\n|-v, --vcpus|VCPUの情報を表示|\n|-x, --bbds|ブロックデバイスを表示|\n\n#### xebstore-ls\n\nxenstore-ls [オプション] [パス|UUID] [引数]\nXenStoreに格納されているキーと値を情報を一覧表示するためのコマンド\n\n|オプション|説明|\n|:--|:--|\n|-f|すべてのキーのフルパスを表示|\n|-p|パーミッションを表示|\n|-s|ローカルソケットのみを使用してxenstoredに接続|\n\n# KVM (Kernel-based Virtual Machine)\n\n## 特徴\n\n* 完全仮想化をサポート\n* CPUの仮想化支援機能を前提に設計/開発\n* Intel VT\u3000及びAMD-Vが必要\n* ハードウェアデバイスのエミュレータが必要\n* QEMUが使用されている\n* カーネルの一部として組み込まれている為カーネルのデバイスドライバをそのまま利用できる\n* kvm.ko, qemu, libvirt, brige-utilsが必要\n* ホストOS上にvirb0という仮想ブリッジとTAPデバイスが作成される\n* Libvirtのlibvirtdデーモンによって管理される\n\n## 設定ファイル\n\n/etc/kvm\n/dev/kvm\n\n## コマンド類\n\n#### qemu-img\nスナップショットのファイル形式はqcow,qcow2\n\nqemu-img <サブコマンド> [オプション]\n\n|サブコマンド|説明|\n|:--|:--|\n|check|ディスクイメージにエラーがないかどうかのチェック|\n|commit|変更のコミット|\n|convert|ディスクイメージの変換|\n|create|指定したファイル名で新しいディスクイメージを作成|\n|info|ディスクイメージに関する情報の表示|\n|snapshot|スナップショットの表示(-l), 適用(-a), 作成(-c)|\n\n#### QEMUモニタ\n\nCtrl + Alt + 2でモニタ切り替え\n\n|コマンド|説明|\n|:--|:--|\n|change|メディアの変更|\n|commit|ディスクイメージに対する変更を確定|\n|delvm|スナップショットの削除|\n|eject|メディアの取り出し|\n|info <引数>|情報の表示|\n|loadvm|スナップショットから仮想マシンを復元|\n|savevm|スナップショットの作成|\n\n#### qemu-kvm\n\nKVMを管理/操作するための基本ユーティリティ\n\nqemu-kvm [オプション]\n\n|オプション|説明|\n|:--|:--|\n|-drive|新しいドライブを定義|\n|-boot|ドライブの起動順序を定義|\n|-cdrom|指定したファイルをCD-ROMイメージとして使用|\n|-snapshot|ディスクイメージファイルの代わりに一時ファイルを書き出し|\n|-usb|USBドライバを有効化|\n|-uuid UUID|UUIDを設定|\n\n#### brctl\n\nブリッジを管理するコマンド\n\n|オプション|説明|\n|:--|:--|\n|addbr|新しいブリッジの作成|\n|addif|ブリッジにインターフェースを接続|\n|show|ブリッジの状態を確認|\n\n#### tunctlコマンド\n\nTUN/TAPデバイスを作成/管理するためのコマンド\n\n|オプション|説明|\n|:--|:--|\n|-b|インターフェース名の表示|\n|-n|TUNインターフェースの作成|\n|-p|TAPインターフェースの作成|\n|-d|指定したインターフェースの削除|\n|-t|インターフェース名を定義|\n\n# OpebVZ\n\n## 特徴\n\n* Linuxカーネルをベースとしたオープンソースのコンテナ型仮想化ソフト\n* Windowsは動かせない\n\n## コマンド類\n\n#### vzpkg\n\nEZテンプレートのインストール等\n\n#### vzctl\n\nOpenVZの操作\n\nvzctl <サブコマンド> <コンテナID>\n\n|オプション|説明|\n|:--|:--|\n|create|コンテナ作成\n|destroy|コンテナ破棄\n|exec|OS上の任意のコマンドの実行\n|exec2|上記＋exitコードを返す\n|restart|コンテナの再起動\n|set|各種設定\n|start|コンテナ起動\n|stop|コンテナ停止\n|suspend|コンテナ一時停止\n\n# LXC(Linux Container)\n\n##\u3000特徴\n\n* カーネルの機能(cgroups)を用いてコンテナを実現\n* 高性能\n* テンプレートファイルを使用してコンテナを作成\n\n## 設定ファイル\n\nテンプレート\n/usr/share/lxc/templates\n\n## コマンド類\n\n|コマンド|説明|\n|:--|:--|\n|lxc-console|コンテナにコンソール接続|\n|lxc-create|コンテナ作成|\n|lxc-destroy|コンテナ破棄\n|lxc-start|コンテナ起動|\n|lxc-stop|コンテナ停止\n\n# その他ツール類の説明\n\n* Docker ： コンテナ仮想化ツール\n* Chef ：\u3000サーバーの環境構築、運用などを自動化するためのツール\n* Puppet\u3000:\u3000構成管理ツール。Rubyで書かれている\n* Ansible : 構成管理ツール\n* Packer\u3000：\u3000サーバーイメージを作成するためのツール\n\n# Libvirt\n\n## 概要/特徴\n\n* Xenに対応するAPIとして開発がスタート\n* 仮想化環境を操作/管理するための共通インターフェス(抽象化ライブラリ)\n* libvitrdが内部で動いている\n* 起動すると「default」というNATブリッジが作成される\n* SASL/Kerberos/SSHのプロトコルをサポート\n\n## 設定ファイル\n\n/etc/libvirt/libvirtd.conf\n\n## 関連ツール\n\n|ツール|説明|\n|:--|:--|\n|virt-clone|イメージ複製ツール\n|virt-image|XMLファイルから仮想マシンを作成するためのツール\n|virt-install|メディアから新しい仮想マシンを作成するためのツール\n|virt-manager|GUI管理ツール\n|virt-viewer|グラフィカルコンソール\n\n## コマンド類\n\n#### virsh <サブコマンド> [引数]\n\nlibvirtが提供する標準のコマンドラインツール\u3000\n\n|コマンド|説明|\n|:--|:--|\n|autostart|libvirtdの起動時にゲストの仮想マシンを自動起動|\n|change-media|仮想マシンにアタッチされたCD-ROMイメージファイルを変更|\n|console|ゲストの仮想マシンのコンソールに接続|\n|create|XMLファイルからゲストの仮想マシンを作成|\n|destroy|ゲストの仮想マシンを強制停止|\n|dump|ゲストの仮想マシンのコアダンプを出力|\n|dumpxml|ゲストの仮想マシン用の設定ファイルをXML形式で出力|\n|list|ゲストの仮想マシン一覧を表示|\n|migrate|ゲストの仮想マシンを別ホストに移行|\n|net-auto|仮想ネットワークの自動起動|\n|net-edit|ゲストの仮想ネットワークの一覧を表示|\n|net-list|仮想マシンネットワークの一覧を表示|\n|net-start|仮想ネットワークを起動|\n|reboot|ゲストの仮想マシンを再起動|\n|resume|ゲストの仮想マシンを再開|\n|save|ゲストの仮想マシンをファイルに保存|\n|setmem|ゲストの仮想マシンに割り当てるメモリサイズを設定|\n|setvcpus|ゲストの仮想マシンに割り当てる仮想CPU数を設定|\n|shutdown|ゲストの仮想マシンを停止|\n|suspend|ゲストの仮想マシンを一時停止|\n|vcpuinfo|ゲストの仮想CPUを表示|\n|vcpuin|CPUアフィニティを設定|\n|vol-list|ストレージプール内のストレージボリュームの一覧を表示|\n\n# クラウド管理ツール\n\n### OpenStack\n\n* IaaS用プラットフォーム\n* 主要コンポーネント(Cinder,Glance,Keystone,Neutron,Nova,Swift)\n\n### CloudStack\n\n* 現在は Apache CloudStackとして開発\n* 管理サーバがさまざまなハイパーバイザーと通信する基盤を提供\n\n# 高可用の概念と理論\n\n### 高可用クラスタとは\n\n* システムに冗長性を持たせSPOFをなくすことで耐障害性を向上させること\n\n### スプリットブレイン\n*  ネットワークの不具合等が原因でノード間のハートビート通信が途絶えた場合に複数ノードがマスターとなってしまったりサービスの二重起動が起きてしまう減少。\n\n### フェンシング\n\n* クラスタ内のあるノードで障害が発生した場合そのノードの挙動はシステムにとって何らかの問題を引き起こす可能性がある。速やかに障害ノードと正常ノードの干渉を防ぐ。フェンシングデーモンによって実装される。\n\n|コマンド|説明|\n|:--|:--|\n|パワーフェンシング|パワーコントローラーを使用して障害ノードの電源をOFFにする\n|スイッチフェンシング|障害ノードと他のノードや共有ディスクとの通信をスイッチで遮断する\n|GNBDフェンシング|GNBDサーバに対するアクセスを無効にする\n\n### クォーラム\n\n* 議決に必要な定足数\n* 一定数以上の正常なノードが存在していればそのクラスタグループを有効なグループとみなす\n* 有効では無いグループをフェンシング\n* ノードマジョリティとも呼ばれる\n\n### ディザスタ・リカバリ\n\n* 地震や火事などを想定した災害からのシステム復旧を表す言葉\n* RPO（Recovery Point Objective） 過去のどの時点まで戻すか\n* RTO(Recovery Time Objective) いつまでにデータを復旧すればよいか\n\n# ロードバランスクラスタ(負荷分散クラスタ)\n\n### LVS(Linux Virtual Server)\n\n* クライアントからのリクエストを複数のサーバに振り分ける機能を提供\n* サービスを提供するサーバをリアルサーバ\n* 割り振るサーバを仮想サーバ\n* トランスポート層で動作するためレイヤ4スイッチングともいう\n* 中心的なコンポーネントとしてip_vsがある\n* lsvdがnannyという子プロセスを生成し1対1で対応する\n\n### LVSのフォワーディング方式\n\n/proc/sys/net/ipv4/ip_forward = 1の必要がある\n\n|方式|説明|\n|:--|:--|\n|NAT|宛先IPアドレスをリアルサーバのアドレスに変換して転送|\n|ダイレクトルーティング|宛先IPアドレスは変えずにMACアドレスのみをリアルサーバのアドレスに変換して転送|\n|トンネリング|受け取ったパケットをリアルサーバ宛のIPヘッダでカプセル化して転送|\n|ローカルノード|ロードバランサでリアルサーバの処理を兼用することが可能|\n\n### LVSの接続スケジューリングアルゴリズム\n\n|コマンド|説明|\n|:--|:--|\n|ラウンドロビン|rr\n|重み付けラウンドロビン|wrr\n|最少コネクション|lc\n|重み付け最少コネクション|wls(デフォルト)\n|ローカリティベースの最少コネクション|lblc\n|宛先ハッシュ|dh\n|送信元ハッシュ|sh\n|最小遅延予測|sed\n|キューなし|nq\n\n### ipvsadm\n\nLVSの管理ユーティ里程コマンド\n\nipvsadm <サブコマンド> [オプション]\n\n|コマンド|説明|\n|:--|:--|\n|-A|仮想サーバの追加|\n|-a|仮想サーバにリアルサーバを追加|\n|-D|関連づいているすべてのリアルサーバと仮想サーバを削除|\n|-d|仮想サーバからリアルサーバを削除|\n|-E|仮想サーバの編集|\n|-e|仮想サーバに関連づいているリアルサーバを編集|\n|--start-daemon|接続同期デーモン開始|\n|--stop-daemon|停止|\n\n### keepalived\n\n* リアルサーバの稼働状況を監視\n* ロードバランサ自体の冗長化をサポート\n* LVSとの併用で運用\n* 設定ファイルは「/etc/keepalived/keepalived.conf」\n* ロードバランサの設定はvirtual_serverで行う。\n\n### VRRP\n\n* ルータの冗長化をするための標準プロトコル\n* パスワードによる認証と、IPSecAHによる認証をサポートしている\n\n### ldirectord (Linux Director Daemon)\n\n* LVSクラスタにおいてHeartbeatと連携して動作する負荷分散システムの監視/管理するツール\n* LVSの複雑な構成における設定/管理が可能\n* 設定ファイルは「/etc/ha.d/ldirectord.cf」\n\n|コマンド|説明|\n|:--|:--|\n|autoreload|設定ファイルが変更された場合の自動読み込み|\n|checkinterval|リアルサーバへの接続テストの間隔|\n|checktimeout|異常と判断するまでの待ち時間。デフォ5秒|\n|checktype|リアルサービスの死活監視のチェック方法|\n|fallback|リアルサーバが停止した場合のリクエスト転送先|\n|logfile|ログファイルの保存先|\n|quiescent|\n|real|リアルサーバとサービスの指定|\n\n### HAProxy\n\n* レイヤ7をサポート\n* 設定ファイルは「/etc/haproxy/haproxy.cfg」\n\n# フェイルオーバクラスタ\n\n#### Pacemaker\n\n* クラスタエンジン : HeartBeat3, Corosync\n* リソースマネージャ : PaceMaker,  OpenAIS\n\n主要コンポーネント\n\n|コマンド|説明|\n|:--|:--|\n|CIB|Cluster Information Base cib.xmlに設定は保存|\n|CRMｄ|クラスタにおけるリソース管理の中心となるデーモン|\n|PEngine|Policy Engineの略でありCIBの情報に基づいてクラスタの最適な状態を算出する|\n|LRMd|ローカルノードのリソース管理デーモン|\n|STONITHd|スプリットブレインを防ぐフェンシングデーモン|\n\n管理ユーティリティ\n\n|コマンド|説明|\n|:--|:--|\n|crm_attribute|ノードの属性とクラスタのオプションを管理|\n|crm_mon|クラスタの現在の動作状態をモニタリング|\n|crm_node|クラスタのノード情報を一覧表示|\n|crm_resource|クラスタリソースに関するタスクを実行|\n|crm_shadow|設定変更を実際のクラスタで実行する前にサンドボックスで実行|\n|crm_simulate|イベントに対するクラスタの応答をシミュレート|\n|crm_standy|crm_attributeのラッパー|\n|crm_verify|設定の構文チェック|\n\n# エンタープライズLinux\n\n#### RHELの高可用性アドオン\n\n* RHELがHigh Availability Add-Onというソフトウェアコンポーネントのセットを提供\n* CMAN,DLM,フェンシング機能\n* RGManager\n* Conga,Luci,Ricci\n\n#### SUSE Linux\n\n* PaceMaker,Corosync,OpenAIS,Geo Clustering,HAProxy\n* OCFS2,GFS2,cLVM2\n* DRBR,Relax-and-Recover\n* 統合コマンドラインインターフェース,Hawk\n\n# DRBD及びcLVM\n\n＜主要な知識範囲＞\n・DRBD のリソース、状態、レプリケーションモードの理解\n・DRBD のリソース、ネットワーク、ディスク、デバイスの理解\n・DRBDの自動復旧とエラー処理。\n・drbdadmを使用したDRBDの管理\n・drbdsetup と drbdmetaの基本知識\n・DRBD と Pacemakerの統合\n・cLVM\n・cLVM とPacemakerの統合\n\n＜重要なファイル、用語、ユーティリティ＞\n・プロトコル A, B および C\n・プライマリ、セカンダリ\n・3ノードレプリケーション\n・drbd カーネルモジュール\n・drbdadm\n・drbdsetup\n・drbdmeta\n・/etc/drbd.conf\n・/proc/drbd\n・LVM2\n・clvmd\n・vgchange, vgs\n\nProtocol A. 非同期レプリケーションプロトコル。\nProtocol B. メモリ同期(半非同期)\nProtocol C. 同期レプリケーションプロトコル。\n\n# クラスタファイルシステム\n", 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-08T14:05:53+09:00', 'group': None, 'id': 'e8238a01dfd1a43fac8a', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'openstack', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'lpic', 'versions': []}, {'name': '仮想化', 'versions': []}], 'title': '仮想化技術について (LPIC 304対策用メモ)', 'updated_at': '2018-10-09T21:10:22+09:00', 'url': 'https://qiita.com/ryuichi1208/items/e8238a01dfd1a43fac8a', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>最近デーモンについて学んだのでメモ代わりに書いてみました。</p>\n\n<h1>\n<span id="デーモンって" class="fragment"></span><a href="#%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>デーモンって？？</h1>\n\n<p>デーモン (daemon)とはLinuxやUNIXにおいてメモリ上に常駐してるプロセス。<br>\nデーモンの意味は，悪魔の「demon」ではなく守護神の「daemon」。ここ大事</p>\n\n<p>詳しくはwikiを読むのがベストだと思います。<br>\n<a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3" rel="nofollow noopener" target="_blank">デーモン (ソフトウェア)</a></p>\n\n<p>ぶっちゃけて言えば無限ループのプログラム。<br>\nループ中に要求があればそれに答えるといったイメージです。</p>\n\n<p>ちょっと細かく書くと</p>\n\n<ul>\n<li>(通常は)親プロセスのプロセスID (PID) が 1 (init)</li>\n<li>制御端末 (tty) を持たない</li>\n</ul>\n\n<h1>\n<span id="寄り道" class="fragment"></span><a href="#%E5%AF%84%E3%82%8A%E9%81%93"><i class="fa fa-link"></i></a>寄り道</h1>\n\n<p>ちょっと横道に反れます。<br>\nプロセスの話になるとよく聞くゾンビプロセスと孤児プロセスについてちょっと解説</p>\n\n<ul>\n<li><p>孤児プロセス<br>\n子プロセスよりも先に親プロセスが死んだとき、その子プロセスは道連れにはされません。<br>\n孤児となった子プロセスは init プロセスによって引き取られ、親が死んでも子は生き続けます。</p></li>\n<li><p>ゾンビプロセス<br>\n親プロセスが子プロセスの終了情報をキューから取り出さない限り、子プロセスの情報はシステムに残り続けます。<br>\npsコマンドでのゾンビプロセスの場合、STAT に Z と表示されます。</p></li>\n</ul>\n\n<h1>\n<span id="ソース" class="fragment"></span><a href="#%E3%82%BD%E3%83%BC%E3%82%B9"><i class="fa fa-link"></i></a>ソース</h1>\n\n<p>では、具体的なソースを記載します。<br>\nプロセス生成といえばfork(2)が有名ですがここでは手軽にデーモン化する関数があるので、<br>\ndaemon(3)を利用します(POSIX標準ではな無いのが注意点)。</p>\n\n<p>daemnをがっつり作るなら下記のような作りこみが必要です。</p>\n\n<ul>\n<li>プロセスを端末から切り離す</li>\n<li>入出力を一度閉じる(使うなら明示的にオープンしたものを使おう)</li>\n<li>chdir(2) によりカレントワーキングディレクトリをシステムルート ("/") にする</li>\n<li>umask(2) によりファイル作成モードマスクに 0 をセットする．</li>\n<li>SYSLOGなり何がしかの出力ファイルに動作を出力する</li>\n<li>SIGNALを受け取る</li>\n<li>PIDファイルを作る</li>\n</ul>\n\n<p>今回はさっくと手軽にデーモン作成を作成ってことで省略します。</p>\n\n<div class="code-frame" data-lang="c">\n<div class="code-lang"><span class="bold">daemon.c</span></div>\n<div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n</span>\n<span class="kt">void</span> <span class="nf">mainLoop</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n        <span class="c1">// ループさせたい処理</span>\n        <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> \n    <span class="p">}</span>\n<span class="p">}</span>\n\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">//ここで子プロセスを生成し親は終了</span>\n    <span class="k">if</span><span class="p">(</span><span class="n">daemon</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n        <span class="n">mainLoop</span><span class="p">();</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n        <span class="n">printf</span><span class="p">(</span><span class="s">"error</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n    <span class="p">}</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n</pre></div>\n</div>\n\n<p>上記をコンパイルしてプロセスを確認してみましょう<br>\n自身のPIDは164で親は1でinitとなっています。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>./daemon\n<span class="nv">$ </span>ps <span class="nt">-ef</span> | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"datemon|PID"</span>\nUID        PID  PPID  C STIME TTY          TIME CMD\ndaemon+    164     1  0 21:42 ?        00:00:00 ./daemon\n</pre></div></div>\n\n<p>上記はperlスクリプトなどもデーモンとして動かすことができます。<br>\n実際自作デーモンするくらいなら優秀なスケジューラにjobを設定すればいい話ですが<br>\n今回はちょっと踏み込んで調べてみました。</p>\n\n<p>間違い等あればご指摘お願いします。</p>\n', 'body': '最近デーモンについて学んだのでメモ代わりに書いてみました。\n\n# デーモンって？？\n\nデーモン (daemon)とはLinuxやUNIXにおいてメモリ上に常駐してるプロセス。\nデーモンの意味は，悪魔の「demon」ではなく守護神の「daemon」。ここ大事\n\n詳しくはwikiを読むのがベストだと思います。\n[デーモン (ソフトウェア)](https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3)\n\nぶっちゃけて言えば無限ループのプログラム。\nループ中に要求があればそれに答えるといったイメージです。\n\nちょっと細かく書くと\n\n* (通常は)親プロセスのプロセスID (PID) が 1 (init)\n* 制御端末 (tty) を持たない\n\n# 寄り道\n\nちょっと横道に反れます。\nプロセスの話になるとよく聞くゾンビプロセスと孤児プロセスについてちょっと解説\n\n* 孤児プロセス\n子プロセスよりも先に親プロセスが死んだとき、その子プロセスは道連れにはされません。\n孤児となった子プロセスは init プロセスによって引き取られ、親が死んでも子は生き続けます。\n\n* ゾンビプロセス\n親プロセスが子プロセスの終了情報をキューから取り出さない限り、子プロセスの情報はシステムに残り続けます。\npsコマンドでのゾンビプロセスの場合、STAT に Z と表示されます。\n\n# ソース\n\nでは、具体的なソースを記載します。\nプロセス生成といえばfork(2)が有名ですがここでは手軽にデーモン化する関数があるので、\ndaemon(3)を利用します(POSIX標準ではな無いのが注意点)。\n\ndaemnをがっつり作るなら下記のような作りこみが必要です。\n\n* プロセスを端末から切り離す\n* 入出力を一度閉じる(使うなら明示的にオープンしたものを使おう)\n* chdir(2) によりカレントワーキングディレクトリをシステムルート ("/") にする\n* umask(2) によりファイル作成モードマスクに 0 をセットする．\n* SYSLOGなり何がしかの出力ファイルに動作を出力する\n* SIGNALを受け取る\n* PIDファイルを作る\n\n今回はさっくと手軽にデーモン作成を作成ってことで省略します。\n\n``` c:daemon.c\n#include <stdio.h>\n#include <unistd.h>\n\nvoid mainLoop() {\n    while(1) {\n        // ループさせたい処理\n        sleep(3); \n    }\n}\n\n\nint main(void) {\n    //ここで子プロセスを生成し親は終了\n    if(daemon(0, 0) == 0) {\n        mainLoop();\n    } else {\n        printf("error\\n");\n    }\n    return 0;\n}\n```\n\n上記をコンパイルしてプロセスを確認してみましょう\n自身のPIDは164で親は1でinitとなっています。\n\n``` bash\n$ ./daemon\n$ ps -ef | grep -E "datemon|PID"\nUID        PID  PPID  C STIME TTY          TIME CMD\ndaemon+    164     1  0 21:42 ?        00:00:00 ./daemon\n```\n\n上記はperlスクリプトなどもデーモンとして動かすことができます。\n実際自作デーモンするくらいなら優秀なスケジューラにjobを設定すればいい話ですが\n今回はちょっと踏み込んで調べてみました。\n\n間違い等あればご指摘お願いします。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-05T21:59:21+09:00', 'group': None, 'id': 'dce61fe0b98a0e0c41a7', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Linux', 'versions': []}, {'name': 'C言語', 'versions': []}], 'title': 'Linuxでデーモンプロセスを作ってみた', 'updated_at': '2018-10-05T21:59:21+09:00', 'url': 'https://qiita.com/ryuichi1208/items/dce61fe0b98a0e0c41a7', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>dockerホストで管理するコンテナの数が膨大になってきました。<br>\n</p><div class="code-frame" data-lang="text"><div class="highlight"><pre>\nhttp://IPアドレス:PORT番号\n</pre></div></div>\n\n<p>と、いった感じでアクセスするのも困難な数になってきました。<br>\nまた、他にも</p>\n\n<ul>\n<li>ホスト側の空きポートを明示的に指定してあげる必要がある</li>\n<li>ブラウザからアプリケーションへのアクセスは、可能な限り80番を使いたい</li>\n</ul>\n\n<p>と、いった問題もあります。</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>\nhttp://ドメイン名.com\n</pre></div></div>\n\n<p>のような感じでアクセスする方法を実践したのでご紹介。<br>\nちなみにhttpsの対応は今回は記載しませんが勿論できます(追記予定)。</p>\n\n<p>今回は例として「jenkins」を使用します。</p>\n\n<h2>\n<span id="目標" class="fragment"></span><a href="#%E7%9B%AE%E6%A8%99"><i class="fa fa-link"></i></a>目標</h2>\n\n<p>上記の問題を、nginxで（動的に）リバースプロキシを設定し、<br>\n任意のサブドメイン等からコンテナにアクセスします。</p>\n\n<h2>\n<span id="用意するもの" class="fragment"></span><a href="#%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>用意するもの</h2>\n\n<ul>\n<li>docker</li>\n<li>docker-compose</li>\n</ul>\n\n<h2>\n<span id="アプリケーションのポートマッピング" class="fragment"></span><a href="#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%9D%E3%83%BC%E3%83%88%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>アプリケーションのポートマッピング</h2>\n\n<p>jwilder/nginx-proxy を使用します。<br>\nこのdockerイメージですべて解決します。</p>\n\n<p>使用した例のyamlがこちら</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><span class="na">proxy</span><span class="pi">:</span>\n  <span class="na">image</span><span class="pi">:</span> <span class="s">jwilder/nginx-proxy</span>\n  <span class="na">ports</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s2">"</span><span class="s">80:80"</span>\n  <span class="na">volumes</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">/var/run/docker.sock:/tmp/docker.sock:ro</span>\n\n<span class="na">jenkins</span><span class="pi">:</span>\n  <span class="na">image</span><span class="pi">:</span> <span class="s">jenkins</span>\n  <span class="na">environment</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">VIRTUAL_HOST=jenkins.com</span>\n</pre></div>\n</div>\n\n<p>上記のファイルを作成したらあとは「docker-compose up -d」を実行<br>\nポイントはnginx-proxyのvolumesを見てください。</p>\n\n<p>/var/run/docker.sock は Docker のソケットのパスです。<br>\nDockerはデーモンプロセス（dockerd）と通信するクライアントとして動くわけですが、<br>\nその際のソケットにはUNIXドメインソケット（/var/run/docker.sock）が利用されます。<br>\nそのため、dockerdは特権的な動作が可能です。<br>\ndockerdが使うUNIXドメインソケットに対して書き込み権限を有するということは、<br>\nルート権限があるのと同じことと言えます。</p>\n\n<p>こちらをコンテナへマウントすることでnginxは動的にリバースプロクシの設定を行います。</p>\n\n<p>※ /var/run/docker.sockへのコンテナからのマウントは注意が必要です<br>\n<a href="https://rimuru.lunanet.gr.jp/notes/post/how-to-root-from-inside-container/" class="autolink" rel="nofollow noopener" target="_blank">https://rimuru.lunanet.gr.jp/notes/post/how-to-root-from-inside-container/</a></p>\n\n<p>そして最後に、任意のホストの「/etc/hosts」に下記のように記述します。</p>\n\n<div class="code-frame" data-lang="">\n<div class="code-lang"><span class="bold">/etc/hosts</span></div>\n<div class="highlight"><pre>192.168.1.XXX  jenkins.com\n</pre></div>\n</div>\n\n<p>後は、ブラウザから下記のような形でアクセスすれば完了です。</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>http://jenkins.com\n</pre></div></div>\n\n<p>上記で目的は達成。<br>\n追記予定の内容としてはhttpsの対応を追記予定としています。</p>\n', 'body': '## 背景\ndockerホストで管理するコンテナの数が膨大になってきました。\n<pre>\nhttp://IPアドレス:PORT番号\n</pre>\n\nと、いった感じでアクセスするのも困難な数になってきました。\nまた、他にも\n\n* ホスト側の空きポートを明示的に指定してあげる必要がある\n* ブラウザからアプリケーションへのアクセスは、可能な限り80番を使いたい\n\nと、いった問題もあります。\n\n<pre>\nhttp://ドメイン名.com\n</pre>\n\nのような感じでアクセスする方法を実践したのでご紹介。\nちなみにhttpsの対応は今回は記載しませんが勿論できます(追記予定)。\n\n今回は例として「jenkins」を使用します。\n\n## 目標\n\n上記の問題を、nginxで（動的に）リバースプロキシを設定し、\n任意のサブドメイン等からコンテナにアクセスします。\n\n## 用意するもの\n* docker\n* docker-compose\n\n## アプリケーションのポートマッピング\n\njwilder/nginx-proxy を使用します。\nこのdockerイメージですべて解決します。\n\n使用した例のyamlがこちら\n\n``` yaml:docker-compose.yml\nproxy:\n  image: jwilder/nginx-proxy\n  ports:\n    - "80:80"\n  volumes:\n    - /var/run/docker.sock:/tmp/docker.sock:ro\n\njenkins:\n  image: jenkins\n  environment:\n    - VIRTUAL_HOST=jenkins.com\n```\n\n上記のファイルを作成したらあとは「docker-compose up -d」を実行\nポイントはnginx-proxyのvolumesを見てください。\n\n/var/run/docker.sock は Docker のソケットのパスです。\nDockerはデーモンプロセス（dockerd）と通信するクライアントとして動くわけですが、\nその際のソケットにはUNIXドメインソケット（/var/run/docker.sock）が利用されます。\nそのため、dockerdは特権的な動作が可能です。\ndockerdが使うUNIXドメインソケットに対して書き込み権限を有するということは、\nルート権限があるのと同じことと言えます。\n\nこちらをコンテナへマウントすることでnginxは動的にリバースプロクシの設定を行います。\n\n※ /var/run/docker.sockへのコンテナからのマウントは注意が必要です\nhttps://rimuru.lunanet.gr.jp/notes/post/how-to-root-from-inside-container/\n\nそして最後に、任意のホストの「/etc/hosts」に下記のように記述します。\n\n``` :/etc/hosts\n192.168.1.XXX  jenkins.com\n```\n\n後は、ブラウザから下記のような形でアクセスすれば完了です。\n\n``` \nhttp://jenkins.com\n```\n\n上記で目的は達成。\n追記予定の内容としてはhttpsの対応を追記予定としています。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-03T23:27:43+09:00', 'group': None, 'id': 'f1b9f5883440b3253543', 'likes_count': 8, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'nginx', 'versions': []}, {'name': 'Docker', 'versions': []}], 'title': 'docker ポート番号じゃなくドメインでアクセスしたい', 'updated_at': '2018-10-03T23:27:43+09:00', 'url': 'https://qiita.com/ryuichi1208/items/f1b9f5883440b3253543', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>Chromeの操作をvimっぽくするための拡張プラグインです。<br>\n結構vimってます。<br>\n※ただし非対応なwebページもあるのでマウス操作が皆無になるかと思うとそうでもありません。</p>\n\n<h2>\n<span id="インストール方法" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>インストール方法</h2>\n\n<p><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" class="autolink" rel="nofollow noopener" target="_blank">https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb</a></p>\n\n<p>上記サイトへアクセスしインストールするのみ</p>\n\n<h2>\n<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">Command</th>\n<th style="text-align: left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">?</td>\n<td style="text-align: left">使い方を説明してくれる</td>\n</tr>\n<tr>\n<td style="text-align: left">h</td>\n<td style="text-align: left">左へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">j</td>\n<td style="text-align: left">下へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">k</td>\n<td style="text-align: left">上へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">l</td>\n<td style="text-align: left">右へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">gg</td>\n<td style="text-align: left">一番上へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">G</td>\n<td style="text-align: left">一眼下へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">d</td>\n<td style="text-align: left">半ページ下へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">u</td>\n<td style="text-align: left">半ページ上へスクロール</td>\n</tr>\n<tr>\n<td style="text-align: left">f</td>\n<td style="text-align: left">現在のタブでリンクを開く</td>\n</tr>\n<tr>\n<td style="text-align: left">F</td>\n<td style="text-align: left">新しいタブでリンクを開く</td>\n</tr>\n<tr>\n<td style="text-align: left">r</td>\n<td style="text-align: left">更新</td>\n</tr>\n<tr>\n<td style="text-align: left">gs</td>\n<td style="text-align: left">view sourceを表示</td>\n</tr>\n<tr>\n<td style="text-align: left">yy</td>\n<td style="text-align: left">URLをコピーする</td>\n</tr>\n<tr>\n<td style="text-align: left">yf</td>\n<td style="text-align: left">リンク作のURLをコピーする</td>\n</tr>\n<tr>\n<td style="text-align: left">/</td>\n<td style="text-align: left">ファイル内検索</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id="カスタム-ショートカットキーを追加できます" class="fragment"></span><a href="#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0-%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%82%AD%E3%83%BC%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99"><i class="fa fa-link"></i></a>カスタム ショートカットキーを追加できます。</h2>\n\n<p>chromeの右上にvimiumボタンのoptionsをクリックする<br>\n個人的には左右スクロールは不要なのでブラウザの戻る/進むボタンを割り当て<br>\nあとはタブキーもShift + H とShift + Lで移動できるように設定します。</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre># 戻る\nmap h goBack\n# 進む\nmap l goForward\n# タブ移動\nmap H previousTab\nmap L nextTab\n</pre></div></div>\n\n<h2>\n<span id="特定のサイトでvimiumを止める方法" class="fragment"></span><a href="#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%B5%E3%82%A4%E3%83%88%E3%81%A7vimium%E3%82%92%E6%AD%A2%E3%82%81%E3%82%8B%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>特定のサイトでVimiumを止める方法</h2>\n\n<p>Vimiumを利用していると、特定のサイトのみ利用を停止したい場合があります。<br>\nその場合は、Vimium Optionsの「Excluded URLs and keys」に以下の形でURLを追加すればOKです。</p>\n\n<h2>\n<span id="感想" class="fragment"></span><a href="#%E6%84%9F%E6%83%B3"><i class="fa fa-link"></i></a>感想</h2>\n\n<p>ありとあらゆる操作がキーボード1つで出来るようになります。<br>\nしかも詳細なカスタマイズが可能です。</p>\n\n<p>単純なネット閲覧ではマウスやChromeデフォルトのショートカットと大差ありませんが、<br>\n色々なページを頻繁に行き来するハードなネットサーフィンをする場合は大きな差が出ます。</p>\n\n<p>手放すことのできない機能になることは間違い無いですね。</p>\n', 'body': 'Chromeの操作をvimっぽくするための拡張プラグインです。\n結構vimってます。\n※ただし非対応なwebページもあるのでマウス操作が皆無になるかと思うとそうでもありません。\n\n## インストール方法\nhttps://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb\n\n上記サイトへアクセスしインストールするのみ\n\n## 使い方\n\n| Command    | Description |\n|:-----------|:------------|\n|?           |使い方を説明してくれる    |\n|h           |左へスクロール            |\n|j           |下へスクロール            |\n|k           |上へスクロール            |\n|l           |右へスクロール            |\n|gg          |一番上へスクロール        |\n|G           |一眼下へスクロール        |\n|d           |半ページ下へスクロール    |\n|u           |半ページ上へスクロール    |\n|f           |現在のタブでリンクを開く  |\n|F           |新しいタブでリンクを開く  |\n|r           |更新                      |\n|gs          |view sourceを表示         |\n|yy          |URLをコピーする           |\n|yf          |リンク作のURLをコピーする |\n|/           |ファイル内検索           |\n\n## カスタム ショートカットキーを追加できます。\n\nchromeの右上にvimiumボタンのoptionsをクリックする\n個人的には左右スクロールは不要なのでブラウザの戻る/進むボタンを割り当て\nあとはタブキーもShift + H とShift + Lで移動できるように設定します。\n\n```\n# 戻る\nmap h goBack\n# 進む\nmap l goForward\n# タブ移動\nmap H previousTab\nmap L nextTab\n```\n\n## 特定のサイトでVimiumを止める方法\n\nVimiumを利用していると、特定のサイトのみ利用を停止したい場合があります。\nその場合は、Vimium Optionsの「Excluded URLs and keys」に以下の形でURLを追加すればOKです。\n\n## 感想\nありとあらゆる操作がキーボード1つで出来るようになります。\nしかも詳細なカスタマイズが可能です。\n\n単純なネット閲覧ではマウスやChromeデフォルトのショートカットと大差ありませんが、\n色々なページを頻繁に行き来するハードなネットサーフィンをする場合は大きな差が出ます。\n\n手放すことのできない機能になることは間違い無いですね。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-10-01T21:18:04+09:00', 'group': None, 'id': 'd343b8889a692046c874', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'ブラウザ', 'versions': []}], 'title': 'Chrome拡張「vimium」', 'updated_at': '2018-10-01T21:19:37+09:00', 'url': 'https://qiita.com/ryuichi1208/items/d343b8889a692046c874', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>docker-composeでGitBucketを起動する。</p>\n\n<h2>\n<span id="gitbucketって" class="fragment"></span><a href="#gitbucket%E3%81%A3%E3%81%A6"><i class="fa fa-link"></i></a>GitBucketって？</h2>\n\n<p>GitBucketはさ<a href="https://twitter.com/takezoen" rel="nofollow noopener" target="_blank">たけぞう</a>んという方が開発されているGitHubのクローンアプリです。<br>\nScalaで書かれており、驚くほど簡単に導入することができるのが特徴です。</p>\n\n<p>OSSのGitHubクローンといえばGitLabがメジャーですが構築の手順が複雑かつ面倒なため、<br>\n使い始める前に構築段階で挫折した経験のある人も多いのではないでしょうか。</p>\n\n<p>ちなみにGitBucketは今も頻繁に更新されているのでたけぞうさんのブログはチェックが必要ですね。<br>\n<a href="http://takezoe.hatenablog.com/" class="autolink" rel="nofollow noopener" target="_blank">http://takezoe.hatenablog.com/</a></p>\n\n<h2>\n<span id="最速で起動してみる" class="fragment"></span><a href="#%E6%9C%80%E9%80%9F%E3%81%A7%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>最速で起動してみる</h2>\n\n<p>git-hubのREADMEにもある通り以下のコマンドラインで最速起動ができます。<br>\n試す分には下記コマンドで運用を考えたらyamlを書く感じで行きましょう</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># docker run -d -p 8080:8080 gitbucket/gitbucket</span>\n\n<span class="c"># docker container ls | grep git</span>\n46627b46aa90        gitbucket/gitbucket    <span class="s2">"/gitbucket/wait-for…"</span>   24 minutes ago      Up 23 minutes       0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:29418-&gt;29418/tcp   gitbucket_gitbucket_1_f00c40995bff\n</pre></div></div>\n\n<p>上記状態であとはdockerホストのIP+ポート番号で試し実行は完了です。<br>\nログインは[root:root]でログインできます。</p>\n\n<p>postgresだったりDB使ったりデータのバックアップ先を指定してた書き方の例としては下記のような感じでしょうか。<br>\nどちらにしろ事前準備も殆ど必要なく構築できているのがわかりますね。</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">docker-compose.yml</span></div>\n<div class="highlight"><pre><span class="na">version</span><span class="pi">:</span> <span class="s1">\'</span><span class="s">2\'</span>\n\n<span class="na">services</span><span class="pi">:</span>\n  <span class="na">gitbucket</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">gitbucket/gitbucket</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>\n    <span class="na">ports</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">8080:8080</span>\n      <span class="pi">-</span> <span class="s">29418:29418</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./data:/gitbucket</span>\n    <span class="na">depends_on</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">db</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">GITBUCKET_DB_URL=jdbc:postgresql://db/gitbucket</span>\n      <span class="pi">-</span> <span class="s">GITBUCKET_DB_USER=gitbucket</span>\n      <span class="pi">-</span> <span class="s">GITBUCKET_DB_PASSWORD=gitbucket</span>\n    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">/gitbucket/wait-for-it.sh"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">db:5432"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">java"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-jar"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/opt/gitbucket.war"</span><span class="pi">]</span>\n\n  <span class="na">db</span><span class="pi">:</span>\n    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:9.5-alpine</span>\n    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>\n    <span class="na">environment</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">POSTGRES_DB=gitbucket</span>\n      <span class="pi">-</span> <span class="s">POSTGRES_USER=gitbucket</span>\n      <span class="pi">-</span> <span class="s">POSTGRES_PASSWORD=gitbucket</span>\n    <span class="na">volumes</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="s">./db:/var/lib/postgresql/data</span>\n</pre></div>\n</div>\n\n<p>コード管理としてgit hubを利用できない(公開できない)場合なんかの<br>\nローカルリポジトリとしては必要十分な機能を備えているのでお勧めです。</p>\n', 'body': 'docker-composeでGitBucketを起動する。\n\n## GitBucketって？\n\nGitBucketはさ[たけぞう](https://twitter.com/takezoen)んという方が開発されているGitHubのクローンアプリです。\nScalaで書かれており、驚くほど簡単に導入することができるのが特徴です。\n\nOSSのGitHubクローンといえばGitLabがメジャーですが構築の手順が複雑かつ面倒なため、\n使い始める前に構築段階で挫折した経験のある人も多いのではないでしょうか。\n\nちなみにGitBucketは今も頻繁に更新されているのでたけぞうさんのブログはチェックが必要ですね。\nhttp://takezoe.hatenablog.com/\n\n## 最速で起動してみる\n\ngit-hubのREADMEにもある通り以下のコマンドラインで最速起動ができます。\n試す分には下記コマンドで運用を考えたらyamlを書く感じで行きましょう\n\n``` bash\n# docker run -d -p 8080:8080 gitbucket/gitbucket\n\n# docker container ls | grep git\n46627b46aa90        gitbucket/gitbucket    "/gitbucket/wait-for…"   24 minutes ago      Up 23 minutes       0.0.0.0:8080->8080/tcp, 0.0.0.0:29418->29418/tcp   gitbucket_gitbucket_1_f00c40995bff\n```\n\n上記状態であとはdockerホストのIP+ポート番号で試し実行は完了です。\nログインは[root:root]でログインできます。\n\npostgresだったりDB使ったりデータのバックアップ先を指定してた書き方の例としては下記のような感じでしょうか。\nどちらにしろ事前準備も殆ど必要なく構築できているのがわかりますね。\n\n``` yaml:docker-compose.yml\nversion: \'2\'\n\nservices:\n  gitbucket:\n    image: gitbucket/gitbucket\n    restart: always\n    ports:\n      - 8080:8080\n      - 29418:29418\n    volumes:\n      - ./data:/gitbucket\n    depends_on:\n      - db\n    environment:\n      - GITBUCKET_DB_URL=jdbc:postgresql://db/gitbucket\n      - GITBUCKET_DB_USER=gitbucket\n      - GITBUCKET_DB_PASSWORD=gitbucket\n    command: ["/gitbucket/wait-for-it.sh", "db:5432", "--", "java", "-jar", "/opt/gitbucket.war"]\n\n  db:\n    image: postgres:9.5-alpine\n    restart: always\n    environment:\n      - POSTGRES_DB=gitbucket\n      - POSTGRES_USER=gitbucket\n      - POSTGRES_PASSWORD=gitbucket\n    volumes:\n      - ./db:/var/lib/postgresql/data\n```\n\nコード管理としてgit hubを利用できない(公開できない)場合なんかの\nローカルリポジトリとしては必要十分な機能を備えているのでお勧めです。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-30T17:48:18+09:00', 'group': None, 'id': 'f21d2f8c4bb9c3f1068a', 'likes_count': 7, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Git', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'GitBucket', 'versions': []}], 'title': 'docker-composeでGitBucket', 'updated_at': '2018-10-01T12:46:11+09:00', 'url': 'https://qiita.com/ryuichi1208/items/f21d2f8c4bb9c3f1068a', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/1329d7bdda7d3534a653675e0aea66302e39b146/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30363038363337652d656332642d656465322d663966382d3165636165376266626662392e6a706567" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/1329d7bdda7d3534a653675e0aea66302e39b146/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30363038363337652d656332642d656465322d663966382d3165636165376266626662392e6a706567" alt="Q9jiI1pL_400x400.jpg" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/0608637e-ec2d-ede2-f9f8-1ecae7bfbfb9.jpeg"></a></p>\n\n<h2>\n<span id="改版履歴的なの" class="fragment"></span><a href="#%E6%94%B9%E7%89%88%E5%B1%A5%E6%AD%B4%E7%9A%84%E3%81%AA%E3%81%AE"><i class="fa fa-link"></i></a>改版履歴的なの</h2>\n\n<p>2018/09/30 初版<br>\n2018/11/15 誤字修正<br>\n2018/12/23 情報追記<br>\n2019/02/17 実行例追記</p>\n\n<h2>\n<span id="背景" class="fragment"></span><a href="#%E8%83%8C%E6%99%AF"><i class="fa fa-link"></i></a>背景</h2>\n\n<p>namespaceとcgroupsの概要的なものは調べたので残りの主要機能であるoverlayfsについてまとめた記事です。<br>\n誤り等ありましたらご指摘ください。<br>\nホントにふわっとした理解だけなので詳しい情報は公式リファレンスなどをご参照ください。</p>\n\n<h2>\n<span id="dockerとは" class="fragment"></span><a href="#docker%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Dockerとは</h2>\n\n<p>一言でいえばコンテナ型の仮想化ツールです。<br>\nDockerはコンテナを作成するために種々のLinuxが持つ機能を利用しており、主要なものとして以下の3つがよく挙げられます。</p>\n\n<ul>\n<li>overlayfs</li>\n<li>namespaces</li>\n<li>cgroups</li>\n</ul>\n\n<p>今回はこの中のoverlayfsについて掘り下げて行こうと思います。</p>\n\n<h2>\n<span id="overlayfsとは" class="fragment"></span><a href="#overlayfs%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Overlayfsとは</h2>\n\n<p>overlayfsはnamespaceやcgryoups同様コンテナ専用として使う機能ではありません。<br>\noverlayfsはunion filesystemの実装の1つで，ディレクトリを重ね合わせて1つのディレクトリツリーが構成できます。<br>\nコンテナイメージの差分管理に一躍買っている。<br>\noverlayfsは3.18カーネルでマージされています。</p>\n\n<ul>\n<li>overlayfsは上の層と下の層をマージして1つのファイルシステムに見せる仕組み</li>\n<li>ディレクトリだけマージするが、その他のファイルは単純に上だけが見える。上がない場合は下が見える</li>\n<li>このマージは、statやreaddirなどのシステムコールの値を何と報告するかを適切に調整することにより行われる</li>\n<li>下の層はReadonly、上の層はReadonly/Writableどちらでも良い</li>\n<li>Readonlyの層はNFSや別のoverlayfsでも良い</li>\n</ul>\n\n<h2>\n<span id="unionfilesystemとは" class="fragment"></span><a href="#unionfilesystem%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>UnionFileSystemとは</h2>\n\n<p>UnionFS は Linux と FreeBSD 向けのファイルシステムサービスであり、複数の異なるファイルシステム (ブランチと呼ばれる) のファイルやディレクトリ同士を透過的に重ねる (マージする) ことができる技術のこと</p>\n\n<h2>\n<span id="aufsとは" class="fragment"></span><a href="#aufs%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>aufsとは</h2>\n\n<p>Linux のファイルシステムサービスであり、複数の異なるファイルシステム (ブランチと呼ばれる) のファイルやディレクトリ同士を透過的に重ねる (マージする) ことができる技術のこと<br>\n色々調べているとaufsも関連しそうな領域のようです。<br>\nが今回は触れません。基本的には使われていないと考えている為です。</p>\n\n<p>記事としては以下が参考になりました(ただ使えないわけではないようなので調査が必要になったらまとめようかな)。<br>\n<a href="https://qiita.com/DQNEO/items/ee0caf80b056487cb762" id="reference-306dc5a965d2084cd516">Docker = AUFSという図式はもう忘れたほうがいいかもしれない、あるいはDockerとストレージドライバの話</a></p>\n\n<h2>\n<span id="overlayfsを使ってみる" class="fragment"></span><a href="#overlayfs%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>overlayfsを使ってみる</h2>\n\n<p>下記のような構成のディレクトリツリーを作成します。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">mkdir </span>upperdir\n<span class="nv">$ </span><span class="nb">mkdir </span>lowerdir\n<span class="nv">$ </span><span class="nb">mkdir </span>mergedir\n<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"upper"</span> <span class="o">&gt;&gt;</span> upperdir/fileA\n<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"upper"</span> <span class="o">&gt;&gt;</span> upperdir/only_upper\n<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"lower"</span> <span class="o">&gt;&gt;</span> lowerdir/fileB\n<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"lower"</span> <span class="o">&gt;&gt;</span> lowerdir/only_lower\n\nrootdir\n|\n|- lowerdir/\n|   |- tqq fileB\n|   |_ only_lower\n|- upperdir/\n|   |- fileA\n|   |_ mqq only_upper\n|- mergedir/\n\n<span class="c"># only_upper: 上のみに存在するファイル</span>\n<span class="c"># only_lower: 下のみに存在するファイル</span>\n</pre></div></div>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>mount <span class="nt">-t</span> overlay overlay <span class="nt">-o</span> <span class="nv">lowerdir</span><span class="o">=</span>lowerdir,upperdir<span class="o">=</span>upperdir,workdir<span class="o">=</span>work mergedir\n\n<span class="o">[</span>root@zeus overlayfs]# <span class="nb">sudo </span>mount <span class="nt">-t</span> overlay overlay <span class="nt">-o</span> <span class="nv">lowerdir</span><span class="o">=</span>lowerdir,upperdir<span class="o">=</span>upperdir,workdir<span class="o">=</span>work mergedir\n\n<span class="nv">$ </span><span class="nb">df </span>mergedir\nFilesystem               1K-blocks      Used  Available Use% Mounted on\noverlay                   52403200   3261824   49141376   7% /root/work/overlayfs/mergedir\n\n<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> mergedir/\ntotal 16\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 fileA\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 fileB\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 only_lower\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 only_upper\n</pre></div></div>\n\n<p>上記の時点でmergedirにどちらのファイルも存在していることが確認できます。<br>\nここで両方に同じファイルを作成して挙動を見てみます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nb">ls</span> <span class="nt">-l</span> mergedir/\ntotal 20\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 fileA\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 fileB\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:58 fileC\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 only_lower\n<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root root 6 Feb 17 20:46 only_upper\n</pre></div></div>\n\n<p>fileCが透過的に一つのファイルとして見えています。</p>\n\n<h2>\n<span id="overlayfsとdocker" class="fragment"></span><a href="#overlayfs%E3%81%A8docker"><i class="fa fa-link"></i></a>overlayfsとDocker</h2>\n\n<p>overlayfsがイメージやコンテナの管理に大きく関わっています。<br>\nDockerでいうイメージレイヤがlowdirでコンテナレイヤがupperdir。<br>\nコンテナマウントはoverlayfsから見えた結果というイメージです。</p>\n\n<p>下図がDockerイメージレイヤとコンテナレイヤの構造の概要です。<br>\nイメージレイヤは下位ディレクトリとして構成されており、コンテナレイヤが上位ディレクトリです。</p>\n\n<p><a href="https://camo.qiitausercontent.com/8985bec1b4c325efbcc8f7c9fa95946b4562d32f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64333862353436352d616166652d646634662d353037372d3566653863613837623363362e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/8985bec1b4c325efbcc8f7c9fa95946b4562d32f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f64333862353436352d616166652d646634662d353037372d3566653863613837623363362e706e67" alt="overlay-construct.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/d38b5465-aafe-df4f-5077-5fe8ca87b3c6.png"></a><br>\n公式ドキュメントより引用</p>\n\n<p>コンテナのファイルシステム関連の内容ですがホストOS上で以下のように配置されています。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> /var/lib/docker/overlay2 | <span class="nb">head</span> <span class="nt">-n5</span>\n合計 1080\ndrwx------ 4 root root  4096 12月  1 15:53 02847b2115f435552f94d693ed3f041eb6467269756567dfcc18e42cb76d80b7\ndrwx------ 4 root root  4096  1月 10 21:12 02e8e4fbf430d5d3666d4a08e9c880c5af260f7378adf13868595d696f9cd415\ndrwx------ 4 root root  4096 12月  1 15:53 04ff3b7540486f64dc50d5687234c7108b0b3d87d848b7c3f6370a2ec98a79e5\ndrwx------ 4 root root  4096  1月 13 14:20 0661aa841ea4b7f829e6475cc060ff5d85f2a67ad55dde540f9cf2800049550d\n</pre></div></div>\n\n<p>/var/lib/docker/overlay2/ にコンテナのファイルシステムに関連するものがまとまっています。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nb">ls</span> <span class="nt">-l</span> /var/lib/docker/overlay2/f4b0c20f0dee750c9488368d744021866ab5e8b406923f67c55555c56a663f62\n合計 20\ndrwxr-xr-x 6 root root 4096 12月  1 21:48 diff\n<span class="nt">-rw-r--r--</span> 1 root root   26 12月  1 21:48 <span class="nb">link</span>\n<span class="nt">-rw-r--r--</span> 1 root root  318 12月  1 21:48 lower\ndrwxr-xr-x 1 root root 4096 12月  1 21:48 merged\ndrwx------ 3 root root 4096 12月  1 21:23 work\n</pre></div></div>\n\n<p>ディレクトリの構成は大まかに下記のような仕組みとなっています。</p>\n\n<ul>\n<li>diff がupperdir</li>\n<li>lower がlowerdir</li>\n<li>work がworkdir</li>\n</ul>\n\n<h2>\n<span id="dockerのストレージドライバ" class="fragment"></span><a href="#docker%E3%81%AE%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90"><i class="fa fa-link"></i></a>Dockerのストレージドライバ</h2>\n\n<p>現在Dockerでストレージドライバとして利用できるものは以下です。<br>\nデフォルトではoverlay2が使用されており最近の記事だとoverlay2以外に関する記事はあまり見られません<br>\n(みつけられて無いだけの可能性もあります。。。)</p>\n\n<table>\n<thead>\n<tr>\n<th>ストレージドライバ</th>\n<th>サポートファイルシステム</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>overlay2, overlay</td>\n<td>xfs, ext4</td>\n</tr>\n<tr>\n<td>devicemapper</td>\n<td>direct-lvm</td>\n</tr>\n<tr>\n<td>aufs</td>\n<td>xfs, ext4</td>\n</tr>\n<tr>\n<td>btrfs</td>\n<td>btrfs</td>\n</tr>\n<tr>\n<td>zfs</td>\n<td>zfs</td>\n</tr>\n<tr>\n<td>vfs</td>\n<td>その他ファイルシステム</td>\n</tr>\n</tbody>\n</table>\n\n<p>自分の環境で使用しているストレージドライバの確認は<code>docker info</code>コマンドのStorage Driver欄で確認できます。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker info | <span class="nb">grep </span>Storage\nStorage Driver: overlay2\n</pre></div></div>\n\n<h2>\n<span id="終わりに" class="fragment"></span><a href="#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB"><i class="fa fa-link"></i></a>終わりに</h2>\n\n<p>overlayfsの概要までを掴んで見るための記事でした。<br>\nDockerのストレージドライバとしてはそのシーンで都度検討が必要であると思います。<br>\n/var/lib/docker配下がどのように構成されているかを知るのはdockerを学ぶ上でも大事なことだと思うので<br>\nこの記事が少しでも役立てていただけたら幸いです。</p>\n\n<h2>\n<span id="参考記事" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E8%A8%98%E4%BA%8B"><i class="fa fa-link"></i></a>参考記事</h2>\n\n<p><a href="http://docs.docker.jp/engine/userguide/storagedriver/overlayfs-driver.html" rel="nofollow noopener" target="_blank">OverlayFS ストレージの使用</a><br>\n<a href="https://blog.tiqwab.com/2017/02/18/docker-technology.html" rel="nofollow noopener" target="_blank">Docker技術入門</a><br>\n<a href="https://qiita.com/NaotoHanaue/items/b9f395a63f7aae2a41b7" id="reference-b9b7dbbd0b41968707d5">Dockerのストレージドライバを理解する</a></p>\n', 'body': '![Q9jiI1pL_400x400.jpg](https://qiita-image-store.s3.amazonaws.com/0/258841/0608637e-ec2d-ede2-f9f8-1ecae7bfbfb9.jpeg)\n\n## 改版履歴的なの\n\n2018/09/30 初版\n2018/11/15 誤字修正\n2018/12/23 情報追記\n2019/02/17 実行例追記\n\n## 背景\n\nnamespaceとcgroupsの概要的なものは調べたので残りの主要機能であるoverlayfsについてまとめた記事です。\n誤り等ありましたらご指摘ください。\nホントにふわっとした理解だけなので詳しい情報は公式リファレンスなどをご参照ください。\n\n## Dockerとは\n\n一言でいえばコンテナ型の仮想化ツールです。\nDockerはコンテナを作成するために種々のLinuxが持つ機能を利用しており、主要なものとして以下の3つがよく挙げられます。\n\n* overlayfs\n* namespaces\n* cgroups\n\n今回はこの中のoverlayfsについて掘り下げて行こうと思います。\n\n## Overlayfsとは\n\noverlayfsはnamespaceやcgryoups同様コンテナ専用として使う機能ではありません。\noverlayfsはunion filesystemの実装の1つで，ディレクトリを重ね合わせて1つのディレクトリツリーが構成できます。\nコンテナイメージの差分管理に一躍買っている。\noverlayfsは3.18カーネルでマージされています。\n\n* overlayfsは上の層と下の層をマージして1つのファイルシステムに見せる仕組み\n* ディレクトリだけマージするが、その他のファイルは単純に上だけが見える。上がない場合は下が見える\n* このマージは、statやreaddirなどのシステムコールの値を何と報告するかを適切に調整することにより行われる\n* 下の層はReadonly、上の層はReadonly/Writableどちらでも良い\n* Readonlyの層はNFSや別のoverlayfsでも良い\n\n## UnionFileSystemとは\n\nUnionFS は Linux と FreeBSD 向けのファイルシステムサービスであり、複数の異なるファイルシステム (ブランチと呼ばれる) のファイルやディレクトリ同士を透過的に重ねる (マージする) ことができる技術のこと\n\n## aufsとは\n\nLinux のファイルシステムサービスであり、複数の異なるファイルシステム (ブランチと呼ばれる) のファイルやディレクトリ同士を透過的に重ねる (マージする) ことができる技術のこと\n色々調べているとaufsも関連しそうな領域のようです。\nが今回は触れません。基本的には使われていないと考えている為です。\n\n記事としては以下が参考になりました(ただ使えないわけではないようなので調査が必要になったらまとめようかな)。\n[Docker = AUFSという図式はもう忘れたほうがいいかもしれない、あるいはDockerとストレージドライバの話](https://qiita.com/DQNEO/items/ee0caf80b056487cb762)\n\n## overlayfsを使ってみる\n\n下記のような構成のディレクトリツリーを作成します。\n\n``` bash\n$ mkdir upperdir\n$ mkdir lowerdir\n$ mkdir mergedir\n$ echo "upper" >> upperdir/fileA\n$ echo "upper" >> upperdir/only_upper\n$ echo "lower" >> lowerdir/fileB\n$ echo "lower" >> lowerdir/only_lower\n\nrootdir\n|\n|- lowerdir/\n|   |- tqq fileB\n|   |_ only_lower\n|- upperdir/\n|   |- fileA\n|   |_ mqq only_upper\n|- mergedir/\n\n# only_upper: 上のみに存在するファイル\n# only_lower: 下のみに存在するファイル\n```\n\n``` bash\n$ sudo mount -t overlay overlay -o lowerdir=lowerdir,upperdir=upperdir,workdir=work mergedir\n\n[root@zeus overlayfs]# sudo mount -t overlay overlay -o lowerdir=lowerdir,upperdir=upperdir,workdir=work mergedir\n\n$ df mergedir\nFilesystem               1K-blocks      Used  Available Use% Mounted on\noverlay                   52403200   3261824   49141376   7% /root/work/overlayfs/mergedir\n\n$ ls -l mergedir/\ntotal 16\n-rw-r--r--. 1 root root 6 Feb 17 20:46 fileA\n-rw-r--r--. 1 root root 6 Feb 17 20:46 fileB\n-rw-r--r--. 1 root root 6 Feb 17 20:46 only_lower\n-rw-r--r--. 1 root root 6 Feb 17 20:46 only_upper\n```\n\n上記の時点でmergedirにどちらのファイルも存在していることが確認できます。\nここで両方に同じファイルを作成して挙動を見てみます。\n\n``` bash\nls -l mergedir/\ntotal 20\n-rw-r--r--. 1 root root 6 Feb 17 20:46 fileA\n-rw-r--r--. 1 root root 6 Feb 17 20:46 fileB\n-rw-r--r--. 1 root root 6 Feb 17 20:58 fileC\n-rw-r--r--. 1 root root 6 Feb 17 20:46 only_lower\n-rw-r--r--. 1 root root 6 Feb 17 20:46 only_upper\n```\n\nfileCが透過的に一つのファイルとして見えています。\n\n## overlayfsとDocker\n\noverlayfsがイメージやコンテナの管理に大きく関わっています。\nDockerでいうイメージレイヤがlowdirでコンテナレイヤがupperdir。\nコンテナマウントはoverlayfsから見えた結果というイメージです。\n\n下図がDockerイメージレイヤとコンテナレイヤの構造の概要です。\nイメージレイヤは下位ディレクトリとして構成されており、コンテナレイヤが上位ディレクトリです。\n\n![overlay-construct.png](https://qiita-image-store.s3.amazonaws.com/0/258841/d38b5465-aafe-df4f-5077-5fe8ca87b3c6.png)\n公式ドキュメントより引用\n\nコンテナのファイルシステム関連の内容ですがホストOS上で以下のように配置されています。\n\n``` bash\n$ ls -l /var/lib/docker/overlay2 | head -n5\n合計 1080\ndrwx------ 4 root root  4096 12月  1 15:53 02847b2115f435552f94d693ed3f041eb6467269756567dfcc18e42cb76d80b7\ndrwx------ 4 root root  4096  1月 10 21:12 02e8e4fbf430d5d3666d4a08e9c880c5af260f7378adf13868595d696f9cd415\ndrwx------ 4 root root  4096 12月  1 15:53 04ff3b7540486f64dc50d5687234c7108b0b3d87d848b7c3f6370a2ec98a79e5\ndrwx------ 4 root root  4096  1月 13 14:20 0661aa841ea4b7f829e6475cc060ff5d85f2a67ad55dde540f9cf2800049550d\n```\n\n/var/lib/docker/overlay2/<container id> にコンテナのファイルシステムに関連するものがまとまっています。\n\n``` bash\nls -l /var/lib/docker/overlay2/f4b0c20f0dee750c9488368d744021866ab5e8b406923f67c55555c56a663f62\n合計 20\ndrwxr-xr-x 6 root root 4096 12月  1 21:48 diff\n-rw-r--r-- 1 root root   26 12月  1 21:48 link\n-rw-r--r-- 1 root root  318 12月  1 21:48 lower\ndrwxr-xr-x 1 root root 4096 12月  1 21:48 merged\ndrwx------ 3 root root 4096 12月  1 21:23 work\n```\n\nディレクトリの構成は大まかに下記のような仕組みとなっています。\n\n* diff がupperdir\n* lower がlowerdir\n* work がworkdir\n\n## Dockerのストレージドライバ\n\n現在Dockerでストレージドライバとして利用できるものは以下です。\nデフォルトではoverlay2が使用されており最近の記事だとoverlay2以外に関する記事はあまり見られません\n(みつけられて無いだけの可能性もあります。。。)\n\n| ストレージドライバ | サポートファイルシステム |\n| --- | --- |\n| overlay2, overlay | xfs, ext4 |\n| devicemapper | direct-lvm |\n| aufs | xfs, ext4 |\n| btrfs | btrfs |\n| zfs | zfs |\n| vfs | その他ファイルシステム |\n\n自分の環境で使用しているストレージドライバの確認は```docker info```コマンドのStorage Driver欄で確認できます。\n\n``` bash\n$ docker info | grep Storage\nStorage Driver: overlay2\n```\n\n## 終わりに\n\noverlayfsの概要までを掴んで見るための記事でした。\nDockerのストレージドライバとしてはそのシーンで都度検討が必要であると思います。\n/var/lib/docker配下がどのように構成されているかを知るのはdockerを学ぶ上でも大事なことだと思うので\nこの記事が少しでも役立てていただけたら幸いです。\n\n## 参考記事\n\n[OverlayFS ストレージの使用](http://docs.docker.jp/engine/userguide/storagedriver/overlayfs-driver.html)\n[Docker技術入門](https://blog.tiqwab.com/2017/02/18/docker-technology.html)\n[Dockerのストレージドライバを理解する](https://qiita.com/NaotoHanaue/items/b9f395a63f7aae2a41b7)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-30T10:27:51+09:00', 'group': None, 'id': '0bd0284dcf8a09299504', 'likes_count': 1, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'aufs', 'versions': []}, {'name': 'overlayfs', 'versions': []}], 'title': 'overlayfsとDockerの関係性(実装も少しだけ見てみる記事)', 'updated_at': '2019-02-17T23:02:35+09:00', 'url': 'https://qiita.com/ryuichi1208/items/0bd0284dcf8a09299504', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>localからDocker Hubにimageをpushする方法</p>\n\n<h1>\n<span id="1-docker-hubアカウントの作成レポジトリ作成" class="fragment"></span><a href="#1-docker-hub%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90"><i class="fa fa-link"></i></a>1. Docker Hubアカウントの作成/レポジトリ作成</h1>\n\n<p>Docker Hubアカウントを作成<br>\n作成は下記から行えます。</p>\n\n<p><a href="https://hub.docker.com/" class="autolink" rel="nofollow noopener" target="_blank">https://hub.docker.com/</a></p>\n\n<p>レポジトリの作成<br>\n上記でアカウント作成後にログインし、Create Repositoryをクリックして<br>\n進めていきます。</p>\n\n<h1>\n<span id="2-dockerイメージのpush" class="fragment"></span><a href="#2-docker%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AEpush"><i class="fa fa-link"></i></a>2. Dockerイメージのpush</h1>\n\n<p>上記で作成したリポジトリにpushしたいイメージを選択<br>\n今回は下記のechoというサンプルイメージをプッシュします。</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># docker image ls | grep echo</span>\nexample/echo                               latest              a890aba05da1        2 weeks ago         750MB\n</pre></div></div>\n\n<p>Docker Hubにログイン</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># docker longin</span>\n...\nLogin Succeeded\n</pre></div></div>\n\n<p>ログインが成功したらローカルにある先ほどのイメージに対して<br>\npushしたいリポジトリ名へとタグを作成します。<br>\nそしていざ、push</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># docker tag ローカルにあるimage名 ユーザ名/リポジトリ名:タグ</span>\n\n<span class="c"># docker push ユーザ名/リポジトリ名</span>\n...\nThe push refers to repository <span class="o">[</span>docker.io/ユーザ名/リポジトリ名]\n</pre></div></div>\n\n<p>これでイメージのpushが完了ですので<br>\nあとは他のdocker hostからイメージをpullして実行することができるようになります。</p>\n', 'body': 'localからDocker Hubにimageをpushする方法\n\n# 1. Docker Hubアカウントの作成/レポジトリ作成\n\nDocker Hubアカウントを作成\n作成は下記から行えます。\n\nhttps://hub.docker.com/\n\nレポジトリの作成\n上記でアカウント作成後にログインし、Create Repositoryをクリックして\n進めていきます。\n\n# 2. Dockerイメージのpush\n\n上記で作成したリポジトリにpushしたいイメージを選択\n今回は下記のechoというサンプルイメージをプッシュします。\n\n``` bash\n# docker image ls | grep echo\nexample/echo                               latest              a890aba05da1        2 weeks ago         750MB\n```\n\nDocker Hubにログイン\n\n``` bash\n# docker longin\n...\nLogin Succeeded\n```\n\nログインが成功したらローカルにある先ほどのイメージに対して\npushしたいリポジトリ名へとタグを作成します。\nそしていざ、push\n\n``` bash\n# docker tag ローカルにあるimage名 ユーザ名/リポジトリ名:タグ\n\n# docker push ユーザ名/リポジトリ名\n...\nThe push refers to repository [docker.io/ユーザ名/リポジトリ名]\n```\n\nこれでイメージのpushが完了ですので\nあとは他のdocker hostからイメージをpullして実行することができるようになります。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-30T00:47:46+09:00', 'group': None, 'id': '4b2008da074d25faa6ca', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}, {'name': 'dockerfile', 'versions': []}, {'name': 'DockerHub', 'versions': []}, {'name': 'docker-compose', 'versions': []}], 'title': 'Docker Registry Hub にイメージをpush', 'updated_at': '2018-09-30T00:47:46+09:00', 'url': 'https://qiita.com/ryuichi1208/items/4b2008da074d25faa6ca', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="awkとは" class="fragment"></span><a href="#awk%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>awkとは</h1>\n\n<p>「awk」は空白などで区切られたテキストを処理するコマンドです。<br>\n演算機能もあり、プログラミング言語としても使用されています。</p>\n\n<p>awkで書いたプログラムを実行するには、「awk解釈プログラム(インタプリタ)」を呼び出し、<br>\nプログラムの1行ずつを解読しながら実行させます。</p>\n\n<h4>\n<span id="基本構造" class="fragment"></span><a href="#%E5%9F%BA%E6%9C%AC%E6%A7%8B%E9%80%A0"><i class="fa fa-link"></i></a>基本構造</h4>\n\n<div class="code-frame" data-lang="awk"><div class="highlight"><pre><span class="kr">BEGIN</span><span class="p">{</span><span class="err">アクション</span><span class="p">}</span>\n<span class="err">パターン</span> <span class="mi">1</span> <span class="p">{</span><span class="err">アクション</span> <span class="mi">1</span><span class="p">}</span>\n<span class="err">パターン</span> <span class="mi">2</span> <span class="p">{</span><span class="err">アクション</span> <span class="mi">2</span><span class="p">}</span>\n<span class="p">...</span>\n<span class="kr">END</span><span class="p">{</span><span class="err">アクション</span><span class="p">}</span>\n</pre></div></div>\n\n<p>日本語で簡単にすると</p>\n\n<div class="code-frame" data-lang="awk"><div class="highlight"><pre><span class="kr">BEGIN</span> <span class="p">{</span> <span class="err">最初にこんなことする</span> <span class="p">}</span>\n<span class="err">こんなレコードに</span> <span class="p">{</span> <span class="err">こんなことする</span> <span class="p">}</span>\n<span class="err">あんなレコードに</span> <span class="p">{</span> <span class="err">あんなことする</span> <span class="p">}</span>\n<span class="p">...</span>\n<span class="kr">END</span> <span class="p">{</span> <span class="err">最後にそんなことする</span> <span class="p">}</span>\n</pre></div></div>\n\n<p>コマンドで打つと下記</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'BEGIN{ 前処理 } 条件部 { 処理 } END{ 後処理 }\'</span>\n</pre></div></div>\n\n<p>今回はコマンド実行での便利なオプションを紹介していきます。</p>\n\n<table>\n<thead>\n<tr>\n<th style="text-align: left">オプション</th>\n<th style="text-align: left"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align: left">-f</td>\n<td style="text-align: left">ファイル名 awkスクリプトが書かれたファイルを指定する</td>\n</tr>\n<tr>\n<td style="text-align: left">-F</td>\n<td style="text-align: left">区切り文字 区切り文字を指定する（デフォルトは空白文字）</td>\n</tr>\n<tr>\n<td style="text-align: left">-v</td>\n<td style="text-align: left">変数名=値 変数を定義する</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id="よく使うコマンドリファレンス" class="fragment"></span><a href="#%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9"><i class="fa fa-link"></i></a>よく使うコマンドリファレンス</h1>\n\n<h4>\n<span id="ファイルの内容を全て出力" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%86%85%E5%AE%B9%E3%82%92%E5%85%A8%E3%81%A6%E5%87%BA%E5%8A%9B"><i class="fa fa-link"></i></a>ファイルの内容を全て出力</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'{print}\'</span> filename\n\n<span class="nv">$ </span><span class="nb">awk</span> <span class="s1">\'{print $0}\'</span> filename\n</pre></div></div>\n\n<h4>\n<span id="セパレータの指定" class="fragment"></span><a href="#%E3%82%BB%E3%83%91%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%AE%E6%8C%87%E5%AE%9A"><i class="fa fa-link"></i></a>セパレータの指定</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">","</span> <span class="s1">\'{print $2}\'</span> filename\n</pre></div></div>\n', 'body': '# awkとは\n\n「awk」は空白などで区切られたテキストを処理するコマンドです。\n演算機能もあり、プログラミング言語としても使用されています。\n\nawkで書いたプログラムを実行するには、「awk解釈プログラム(インタプリタ)」を呼び出し、\nプログラムの1行ずつを解読しながら実行させます。\n\n#### 基本構造\n\n``` awk\nBEGIN{アクション}\nパターン 1 {アクション 1}\nパターン 2 {アクション 2}\n...\nEND{アクション}\n```\n\n日本語で簡単にすると\n\n``` awk\nBEGIN { 最初にこんなことする }\nこんなレコードに { こんなことする }\nあんなレコードに { あんなことする }\n...\nEND { 最後にそんなことする }\n```\n\nコマンドで打つと下記\n\n``` bash\n$ awk \'BEGIN{ 前処理 } 条件部 { 処理 } END{ 後処理 }\'\n```\n\n今回はコマンド実行での便利なオプションを紹介していきます。\n\n| オプション  || \n|:-----------|:------------|\n| -f         |ファイル名 awkスクリプトが書かれたファイルを指定する|\n| -F         |区切り文字 区切り文字を指定する（デフォルトは空白文字）|\n| -v         |変数名=値\t変数を定義する        |\n\n# よく使うコマンドリファレンス\n\n#### ファイルの内容を全て出力\n``` bash\n$ awk \'{print}\' filename\n\n$ awk \'{print $0}\' filename\n```\n\n#### セパレータの指定\n\n``` bash\n$ awk -F "," \'{print $2}\' filename\n```\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-29T09:23:28+09:00', 'group': None, 'id': 'e07be1996ed4c57b0540', 'likes_count': 2, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'awk', 'versions': []}, {'name': '正規表現', 'versions': []}], 'title': '入門 awk', 'updated_at': '2018-10-18T10:58:47+09:00', 'url': 'https://qiita.com/ryuichi1208/items/e07be1996ed4c57b0540', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>最近よく聞くクラウドサービスやクラウドコンピューティングについてまとめてみました。<br>\nIaaS,PaaS,SaaSなんかについてもまとめてます。</p>\n\n<p>とっても簡単に言うと<br>\n* 土地を借りること = IaaS<br>\n* 家を借りること\u3000 = PaaS<br>\n* 部屋を借りること = SaaS</p>\n\n<hr>\n\n<h2>\n<span id="クラウドコンピューティング" class="fragment"></span><a href="#%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>クラウドコンピューティング</h2>\n\n<p>クラウドコンピューティング（英: cloud computing）は、インターネットなどのコンピュータネットワークを経由して、コンピュータ資源をサービスの形で提供する利用形態である。略してクラウドと呼ばれることも多く、cloud とは英語で「雲」を意味する。</p>\n\n<p>対義語はオンプレミス<br>\nオンプレミスとは、企業などが情報システムの設備（ハードウェア）を自社で保有し、自社の設備において運用することである。システムの自社構築という意味を含む場合もある。</p>\n\n<h2>\n<span id="saas" class="fragment"></span><a href="#saas"><i class="fa fa-link"></i></a>SaaS</h2>\n\n<h5>\n<span id="software-as-a-service" class="fragment"></span><a href="#software-as-a-service"><i class="fa fa-link"></i></a>Software as a Service</h5>\n\n<p>システムレイヤの最上位であるソフトウェアだけをクラウドで提供するサービスモデル<br>\n一般利用者が一番近いサービスですね。<br>\n最も手軽に使える分OSやハードウェア/ミドルウェアが自由にできない分開発の自由度は制限されている</p>\n\n<p>ex)<br>\n<a href="https://www.dropbox.com" rel="nofollow noopener" target="_blank">DropBox</a><br>\n<a href="https://mail.google.com/mail" rel="nofollow noopener" target="_blank">Gmail</a><br>\n<a href="https://www.youtube.com" rel="nofollow noopener" target="_blank">Youtube</a></p>\n\n<hr>\n\n<h2>\n<span id="paas" class="fragment"></span><a href="#paas"><i class="fa fa-link"></i></a>PaaS</h2>\n\n<h5>\n<span id="platform-as-a-service" class="fragment"></span><a href="#platform-as-a-service"><i class="fa fa-link"></i></a>Platform as a Service</h5>\n\n<p>アプリケーションが動作するためのプラットフォームをクラウドで提供するサービスモデル<br>\nプラットフォームといってもあくまでもミドルウェアのお話。アプリケーションサーバやミドルウェアとかを提供されそのプラットフォーム上でアプリケーションを開発する</p>\n\n<p>OSやDBソフトウェアのことを考えずに自分自身のプログラムをネットワーク上で実行したい時、PaaSは最良の選択肢と言えるでしょう。</p>\n\n<p>ex)<br>\n<a href="https://dashboard.heroku.com/apps" rel="nofollow noopener" target="_blank">heroku</a><br>\n<a href="https://cloud.google.com/appengine/" rel="nofollow noopener" target="_blank">Google App Engine</a></p>\n\n<hr>\n\n<h2>\n<span id="iaas" class="fragment"></span><a href="#iaas"><i class="fa fa-link"></i></a>IaaS</h2>\n\n<h5>\n<span id="infrastructure-as-a-service" class="fragment"></span><a href="#infrastructure-as-a-service"><i class="fa fa-link"></i></a>Infrastructure as a Service</h5>\n\n<p>システム全体が動作する基盤をクラウドで提供するサービスモデルです。ハードウェアやOS、ネットワークなんかをユーザ自身で構築しアプリケーションの開発を行う。</p>\n\n<p>PaaSやSaaSと比べ、OSやハードウェア、ネットワークの知識が必要になります。そして、更新やセキュリティ対策などもすべて自分の手で行わなければなりません。</p>\n\n<p>ex)<br>\n<a href="https://www.openstack.org/" rel="nofollow noopener" target="_blank">OpenStack</a><br>\n<a href="https://aws.amazon.com/jp/ec2/" rel="nofollow noopener" target="_blank">Amazon Elastic Compute Cloud</a></p>\n\n<hr>\n\n<h2>\n<span id="baas--mbaas" class="fragment"></span><a href="#baas--mbaas"><i class="fa fa-link"></i></a>BaaS / mBaaS</h2>\n\n<h5>\n<span id="backend-as-a-service" class="fragment"></span><a href="#backend-as-a-service"><i class="fa fa-link"></i></a>Backend as a Service</h5>\n\n<p>BaaSとは，バックエンド機能を提供するサービスです。</p>\n\n<p>BaaSは、「Backend as a Service」の略です。「ばーす」と呼びます。バックエンド側のサービスになります。mBaaSは、iOS、Androidなどに対応したモバイル（Mobile）用ということになります。</p>\n\n<p>サーバーにおけるサーバーソフトのインストールやメンテナンスをBaaSに任せてフロントエンド側のみの開発作業を行いたいエンジニア向けのサービスです。</p>\n\n<p>ex)<br>\n<a href="https://mbaas.nifcloud.com/" rel="nofollow noopener" target="_blank">NIFTY Cloud mobile backend</a></p>\n', 'body': '最近よく聞くクラウドサービスやクラウドコンピューティングについてまとめてみました。\nIaaS,PaaS,SaaSなんかについてもまとめてます。\n\nとっても簡単に言うと\n* 土地を借りること = IaaS\n* 家を借りること\u3000 = PaaS\n* 部屋を借りること = SaaS\n\n---\n\n## クラウドコンピューティング\nクラウドコンピューティング（英: cloud computing）は、インターネットなどのコンピュータネットワークを経由して、コンピュータ資源をサービスの形で提供する利用形態である。略してクラウドと呼ばれることも多く、cloud とは英語で「雲」を意味する。\n\n対義語はオンプレミス\nオンプレミスとは、企業などが情報システムの設備（ハードウェア）を自社で保有し、自社の設備において運用することである。システムの自社構築という意味を含む場合もある。\n\n\n## SaaS\n##### Software as a Service\nシステムレイヤの最上位であるソフトウェアだけをクラウドで提供するサービスモデル\n一般利用者が一番近いサービスですね。\n最も手軽に使える分OSやハードウェア/ミドルウェアが自由にできない分開発の自由度は制限されている\n\nex)\n[DropBox](https://www.dropbox.com)\n[Gmail](https://mail.google.com/mail)\n[Youtube](https://www.youtube.com)\n\n---\n\n## PaaS\n##### Platform as a Service\nアプリケーションが動作するためのプラットフォームをクラウドで提供するサービスモデル\nプラットフォームといってもあくまでもミドルウェアのお話。アプリケーションサーバやミドルウェアとかを提供されそのプラットフォーム上でアプリケーションを開発する\n\nOSやDBソフトウェアのことを考えずに自分自身のプログラムをネットワーク上で実行したい時、PaaSは最良の選択肢と言えるでしょう。\n\nex)\n[heroku](https://dashboard.heroku.com/apps)\n[Google App Engine](https://cloud.google.com/appengine/)\n\n---\n\n## IaaS\n##### Infrastructure as a Service\n\nシステム全体が動作する基盤をクラウドで提供するサービスモデルです。ハードウェアやOS、ネットワークなんかをユーザ自身で構築しアプリケーションの開発を行う。\n\nPaaSやSaaSと比べ、OSやハードウェア、ネットワークの知識が必要になります。そして、更新やセキュリティ対策などもすべて自分の手で行わなければなりません。\n\nex)\n[OpenStack](https://www.openstack.org/)\n[Amazon Elastic Compute Cloud](https://aws.amazon.com/jp/ec2/)\n\n---\n\n## BaaS / mBaaS\n##### Backend as a Service\n\nBaaSとは，バックエンド機能を提供するサービスです。\n\nBaaSは、「Backend as a Service」の略です。「ばーす」と呼びます。バックエンド側のサービスになります。mBaaSは、iOS、Androidなどに対応したモバイル（Mobile）用ということになります。\n\nサーバーにおけるサーバーソフトのインストールやメンテナンスをBaaSに任せてフロントエンド側のみの開発作業を行いたいエンジニア向けのサービスです。\n\nex)\n[NIFTY Cloud mobile backend](https://mbaas.nifcloud.com/)\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-26T21:07:54+09:00', 'group': None, 'id': 'f1bc4630a9b3c1970599', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'AWS', 'versions': []}, {'name': 'Dropbox', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'クラウド', 'versions': []}, {'name': 'GKE', 'versions': []}], 'title': 'クラウドサービスについて', 'updated_at': '2018-09-26T21:07:54+09:00', 'url': 'https://qiita.com/ryuichi1208/items/f1bc4630a9b3c1970599', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p>Ubuntuのkubernetesでダッシュボードを表示する方法です。<br>\nkubectlだけで管理するのはやはりしんどい。。。</p>\n\n<p>他ホストからのダッシュボード表示も記載しています。</p>\n\n<hr>\n\n<h4>\n<span id="公式サイト" class="fragment"></span><a href="#%E5%85%AC%E5%BC%8F%E3%82%B5%E3%82%A4%E3%83%88"><i class="fa fa-link"></i></a>#公式サイト</h4>\n\n<p><a href="https://kubernetes.io/docs/getting-started-guides/ubuntu/" rel="nofollow noopener" target="_blank">公式ドキュメント</a></p>\n\n<h4>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>#環境</h4>\n\n<div class="code-frame" data-lang="Bash"><div class="highlight"><pre><span class="c"># cat /etc/os-release</span>\n<span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu"</span>\n<span class="nv">VERSION</span><span class="o">=</span><span class="s2">"18.04.1 LTS (Bionic Beaver)"</span>\n<span class="nv">ID</span><span class="o">=</span>ubuntu\n<span class="nv">ID_LIKE</span><span class="o">=</span>debian\n<span class="nv">PRETTY_NAME</span><span class="o">=</span><span class="s2">"Ubuntu 18.04.1 LTS"</span>\n<span class="nv">VERSION_ID</span><span class="o">=</span><span class="s2">"18.04"</span>\n<span class="nv">HOME_URL</span><span class="o">=</span><span class="s2">"https://www.ubuntu.com/"</span>\n<span class="nv">SUPPORT_URL</span><span class="o">=</span><span class="s2">"https://help.ubuntu.com/"</span>\n<span class="nv">BUG_REPORT_URL</span><span class="o">=</span><span class="s2">"https://bugs.launchpad.net/ubuntu/"</span>\n<span class="nv">PRIVACY_POLICY_URL</span><span class="o">=</span><span class="s2">"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span>\n<span class="nv">VERSION_CODENAME</span><span class="o">=</span>bionic\n<span class="nv">UBUNTU_CODENAME</span><span class="o">=</span>bionic\n</pre></div></div>\n\n<h4>\n<span id="kubernetesのインストール" class="fragment"></span><a href="#kubernetes%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>#kubernetesのインストール</h4>\n\n<p>公式ドキュメントを参考に下記コマンドでインストール</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl</span>\n<span class="c"># curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span>\n<span class="c"># cat &lt;&lt;EOF &gt;</span>\n/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\n\n<span class="c"># apt-get update</span>\n<span class="c"># apt-get install -y kubelet kubeadm kubectl</span>\n</pre></div></div>\n\n<h4>\n<span id="swapoff" class="fragment"></span><a href="#swapoff"><i class="fa fa-link"></i></a>#swapoff</h4>\n\n<p>スワップを切っておきます（1.8かららしいです）</p>\n\n<div class="code-frame" data-lang="Bash"><div class="highlight"><pre><span class="c"># swapoff -a</span>\n</pre></div></div>\n\n<h4>\n<span id="kubectlを有効化" class="fragment"></span><a href="#kubectl%E3%82%92%E6%9C%89%E5%8A%B9%E5%8C%96"><i class="fa fa-link"></i></a>kubectlを有効化</h4>\n\n<div class="code-frame" data-lang="Bash"><div class="highlight"><pre><span class="c"># mkdir -p $HOME/.kube</span>\n<span class="c"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span>\n<span class="c"># chown $(id -u):$(id -g) $HOME/.kube/config</span>\n</pre></div></div>\n\n<p>kubectlを叩くためのコマンドのconfigファイルが生成されるので配置します<br>\nkubeadm initした時に最後に書いてある<br>\n※ファイルを移動した場合は環境変数を変更する必要があるので注意です</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># mkdir -p $HOME/.kube</span>\n<span class="c"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span>\n<span class="c"># chown $(id -u):$(id -g) $HOME/.kube/config</span>\n</pre></div></div>\n\n<h4>\n<span id="ダッシュボードを有効化" class="fragment"></span><a href="#%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5%E3%83%9C%E3%83%BC%E3%83%89%E3%82%92%E6%9C%89%E5%8A%B9%E5%8C%96"><i class="fa fa-link"></i></a>#ダッシュボードを有効化</h4>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># curl -O https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span>\n</pre></div></div>\n\n<p>上記ファイルを指定してcreateして実行</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># kubectl create -f kubernetes-dashboard.yaml</span>\n\n<span class="c"># kubectl proxy</span>\n</pre></div></div>\n\n<p>上記で実行したホストのブラウザを実行し<br>\n<a href="http://127.0.0.1" rel="nofollow noopener" target="_blank">http://127.0.0.1</a><br>\nへアクセスすることでダッシュボードが表示されます。</p>\n\n<h4>\n<span id="実行ホスト以外からダッシュボードが見たい" class="fragment"></span><a href="#%E5%AE%9F%E8%A1%8C%E3%83%9B%E3%82%B9%E3%83%88%E4%BB%A5%E5%A4%96%E3%81%8B%E3%82%89%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5%E3%83%9C%E3%83%BC%E3%83%89%E3%81%8C%E8%A6%8B%E3%81%9F%E3%81%84"><i class="fa fa-link"></i></a>#実行ホスト以外からダッシュボードが見たい</h4>\n\n<p>基本的にkubernetesのダッシューボードをインストールしたホストでブラウザを見ることは<br>\n少ないと思います。<br>\nその時に上記の方法だけでは他ホストからダッシューボードへはアクセスできないので下記設定を行います。</p>\n\n<p>yamlを指定して削除</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># kubectl delete -f kubernetes-dashboard.yaml</span>\n</pre></div></div>\n\n<p>yamlを編集します<br>\n1行追記するだけです。</p>\n\n<div class="code-frame" data-lang="bash">\n<div class="code-lang"><span class="bold">kubernetes-dashboard.yaml</span></div>\n<div class="highlight"><pre>   116          args:\n   117            - <span class="nt">--auto-generate-certificates</span>\n   118            <span class="c"># Uncomment the following line to manually specify Kubernetes API server Host</span>\n   119            <span class="c"># If not specified, Dashboard will attempt to auto discover the API server and connect</span>\n   120            <span class="c"># to it. Uncomment only if the default does not work.</span>\n   121            <span class="c"># - --apiserver-host=http://my-address:port</span>\n   122            - <span class="nt">--apiserver-host</span><span class="o">=</span>http://192.168.1.156:8001 //IPを指定して追記\n   123          volumeMounts:\n   124          - name: kubernetes-dashboard-certs\n   125            mountPath: /certs\n   126            <span class="c"># Create on-disk volume to store exec logs</span>\n   127          - mountPath: /tmp\n   128            name: tmp-volume\n   129          livenessProbe:\n</pre></div>\n</div>\n\n<p>上記のように設定したら再度create</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># kubectl create -f kubernetes-dashboard.yaml</span>\n</pre></div></div>\n\n<p>アクセス件を設定して実行</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="c"># kubectl proxy --address 0.0.0.0 --accept-hosts \'.*\'</span>\n</pre></div></div>\n\n<p>これで他ホストからIPアドレスとポート番号の指定でダッシュボードの表示が可能になります。<br>\nこちらに関してセキュリティ面に関してガバガバなので注意が必要です。</p>\n', 'body': 'Ubuntuのkubernetesでダッシュボードを表示する方法です。\nkubectlだけで管理するのはやはりしんどい。。。\n\n他ホストからのダッシュボード表示も記載しています。\n\n---\n\n#### #公式サイト\n[公式ドキュメント](https://kubernetes.io/docs/getting-started-guides/ubuntu/)\n\n#### #環境\n\n``` Bash\n# cat /etc/os-release\nNAME="Ubuntu"\nVERSION="18.04.1 LTS (Bionic Beaver)"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME="Ubuntu 18.04.1 LTS"\nVERSION_ID="18.04"\nHOME_URL="https://www.ubuntu.com/"\nSUPPORT_URL="https://help.ubuntu.com/"\nBUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"\nPRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"\nVERSION_CODENAME=bionic\nUBUNTU_CODENAME=bionic\n```\n\n#### #kubernetesのインストール\n\n公式ドキュメントを参考に下記コマンドでインストール\n\n``` bash\n# apt-get update && sudo apt-get install -y apt-transport-https curl\n# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n# cat <<EOF >\n/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\n\n# apt-get update\n# apt-get install -y kubelet kubeadm kubectl\n```\n\n#### #swapoff\n\nスワップを切っておきます（1.8かららしいです）\n\n``` Bash\n# swapoff -a\n```\n\n#### kubectlを有効化\n\n``` Bash\n# mkdir -p $HOME/.kube\n# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n# chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\nkubectlを叩くためのコマンドのconfigファイルが生成されるので配置します\nkubeadm initした時に最後に書いてある\n※ファイルを移動した場合は環境変数を変更する必要があるので注意です\n\n``` bash\n# mkdir -p $HOME/.kube\n# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n# chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n#### #ダッシュボードを有効化\n\n``` bash\n# curl -O https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml\n```\n\n上記ファイルを指定してcreateして実行\n\n``` bash\n# kubectl create -f kubernetes-dashboard.yaml\n\n# kubectl proxy\n```\n\n上記で実行したホストのブラウザを実行し\n[http://127.0.0.1](http://127.0.0.1)\nへアクセスすることでダッシュボードが表示されます。\n\n#### #実行ホスト以外からダッシュボードが見たい\n\n基本的にkubernetesのダッシューボードをインストールしたホストでブラウザを見ることは\n少ないと思います。\nその時に上記の方法だけでは他ホストからダッシューボードへはアクセスできないので下記設定を行います。\n\nyamlを指定して削除\n\n``` bash\n# kubectl delete -f kubernetes-dashboard.yaml\n```\n\nyamlを編集します\n1行追記するだけです。\n\n``` bash:kubernetes-dashboard.yaml\n   116          args:\n   117            - --auto-generate-certificates\n   118            # Uncomment the following line to manually specify Kubernetes API server Host\n   119            # If not specified, Dashboard will attempt to auto discover the API server and connect\n   120            # to it. Uncomment only if the default does not work.\n   121            # - --apiserver-host=http://my-address:port\n   122            - --apiserver-host=http://192.168.1.156:8001 //IPを指定して追記\n   123          volumeMounts:\n   124          - name: kubernetes-dashboard-certs\n   125            mountPath: /certs\n   126            # Create on-disk volume to store exec logs\n   127          - mountPath: /tmp\n   128            name: tmp-volume\n   129          livenessProbe:\n```\n\n上記のように設定したら再度create\n\n``` bash\n# kubectl create -f kubernetes-dashboard.yaml\n```\n\nアクセス件を設定して実行\n\n``` bash \n# kubectl proxy --address 0.0.0.0 --accept-hosts \'.*\'\n```\n\nこれで他ホストからIPアドレスとポート番号の指定でダッシュボードの表示が可能になります。\nこちらに関してセキュリティ面に関してガバガバなので注意が必要です。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-24T12:27:53+09:00', 'group': None, 'id': 'ed1a894b8757403031ae', 'likes_count': 11, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Ubuntu', 'versions': []}, {'name': 'kubernetes', 'versions': []}], 'title': 'ubuntuにkubernetesをインストールしてdashboardを表示する方法', 'updated_at': '2018-09-24T12:27:53+09:00', 'url': 'https://qiita.com/ryuichi1208/items/ed1a894b8757403031ae', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h3>\n<span id="ファイルサーバーとは" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>ファイルサーバーとは</h3>\n\n<p>ファイルサーバーとは<br>\n会社とか学校でよくあるファイルを共有出来るサーバーのことです。<br>\n家でファイルサーバーを立てると家のネットワークにつながったパソコンやタブレット、スマホから同じファイルにアクセスできます。<br>\n権限を設定することで家族間でもファイルを見られなかったりするので大変便利。</p>\n\n<h3>\n<span id="やり方" class="fragment"></span><a href="#%E3%82%84%E3%82%8A%E6%96%B9"><i class="fa fa-link"></i></a>やり方</h3>\n\n<p>sambaを導入して共有したいディスクを設定します</p>\n\n<p>sambaインストール</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ sudo apt-get install samba\n</pre></div></div>\n\n<p>sambaの設定ファイルを書き換える<br>\n末尾に下記を追記する</p>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">sudo </span>vim /etc/samba/smb.conf\n<span class="o">(</span>省略<span class="o">)</span>\n<span class="o">[</span>pi]\n        comment <span class="o">=</span> Raspberry pi\n        path <span class="o">=</span> /home/pi\n        force user <span class="o">=</span> pi\n        guest ok <span class="o">=</span> Yes\n</pre></div></div>\n\n<p>設定ファイルは主に以下のような構成となっている</p>\n\n<p>セクションは、全体的な設定を行う［global］やプリンタの共有設定を行う［printers］などがあり、好きな名前で［共有名］というセクションを作ることで、共有が作成できます。パラメータ値は、具体的に設定したい内容を記述することもありますが、「設定する」/「設定しない」に関しては「Yes」/「No」とすることで設定できます。</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>［セクション名］\n\u3000パラメータ名 ＝ パラメータ値\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 ：\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 ：\n</pre></div></div>\n\n<p>共有の名前は、予約されているglobal,home,printerなど以外であれば、自由につけることが可能です。特に、Samba日本語版では日本語を用いた共有名を利用することができます。</p>\n\n<ul>\n<li><p>comment<br>\n共有名の説明を設定します</p></li>\n<li><p>path<br>\n共有の対象ディレクトリを指定します</p></li>\n<li><p>read only<br>\n書き込み禁止にするかどうかのパラメータです。更新がある共有では No と設定します</p></li>\n<li><p>browseable<br>\n「ネットワークコンピュータ」に表示するかどうかの設定です。表示させたい場合は「Yes」とします。</p></li>\n</ul>\n\n<p>詳細は下記を参照してください<br>\n■ <a href="http://www.samba.gr.jp/project/translation/3.5/htmldocs/manpages-3/smb.conf.5.html" rel="nofollow noopener" target="_blank">公式ドキュメント</a></p>\n\n<p>以下でsambaの設定ファイルの確認を行うことができる<br>\nNGが出た場合はスペルなどを確認しましょう</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ testparm\nLoad smb config files from /etc/samba/smb.conf\nrlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)\nWARNING: The "syslog" option is deprecated\nProcessing section "[homes]"\nProcessing section "[printers]"\nProcessing section "[print$]"\nProcessing section "[pi]"\nLoaded services file OK.\n</pre></div></div>\n\n<p>問題がなければsambaサービスを再起動</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ sudo systemctl restart smbd\n$ sudo systemctl enable smbd\n</pre></div></div>\n\n<p>※エラーが出た場合はファイアウォールの設定が必要な可能性があります。<br>\nsamba用に適切にポートを設定してください</p>\n\n<p>sambaでは下記ポートをデフォルトで使用します)<br>\n137/udp,138/udp,139/tcp,445/tcp</p>\n\n<h3>\n<span id="確認" class="fragment"></span><a href="#%E7%A2%BA%E8%AA%8D"><i class="fa fa-link"></i></a>確認</h3>\n\n<p>あとはwindowsからエクスプローラーなりで<br>\n\\[IPアドレス]<br>\nと、入力すれば上記で設定したディレクトリにアクセスできるようになる</p>\n\n<p>macの場合は<br>\nsmb://[IPアドレス]/<br>\nで、アクセスできます</p>\n', 'body': '### ファイルサーバーとは\n\nファイルサーバーとは\n会社とか学校でよくあるファイルを共有出来るサーバーのことです。\n家でファイルサーバーを立てると家のネットワークにつながったパソコンやタブレット、スマホから同じファイルにアクセスできます。\n権限を設定することで家族間でもファイルを見られなかったりするので大変便利。\n\n### やり方\n\nsambaを導入して共有したいディスクを設定します\n\nsambaインストール\n\n``` \n$ sudo apt-get install samba\n```\n\nsambaの設定ファイルを書き換える\n末尾に下記を追記する\n\n``` bash\n$ sudo vim /etc/samba/smb.conf\n(省略)\n[pi]\n        comment = Raspberry pi\n        path = /home/pi\n        force user = pi\n        guest ok = Yes\n```\n\n設定ファイルは主に以下のような構成となっている\n\nセクションは、全体的な設定を行う［global］やプリンタの共有設定を行う［printers］などがあり、好きな名前で［共有名］というセクションを作ることで、共有が作成できます。パラメータ値は、具体的に設定したい内容を記述することもありますが、「設定する」/「設定しない」に関しては「Yes」/「No」とすることで設定できます。\n\n```\n［セクション名］\n\u3000パラメータ名 ＝ パラメータ値\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 ：\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 ：\n```\n\n共有の名前は、予約されているglobal,home,printerなど以外であれば、自由につけることが可能です。特に、Samba日本語版では日本語を用いた共有名を利用することができます。\n\n* comment\n共有名の説明を設定します\n\n* path\n共有の対象ディレクトリを指定します\n\n* read only\n書き込み禁止にするかどうかのパラメータです。更新がある共有では No と設定します\n\n* browseable\n「ネットワークコンピュータ」に表示するかどうかの設定です。表示させたい場合は「Yes」とします。\n\n詳細は下記を参照してください\n■ [公式ドキュメント](http://www.samba.gr.jp/project/translation/3.5/htmldocs/manpages-3/smb.conf.5.html)\n\n以下でsambaの設定ファイルの確認を行うことができる\nNGが出た場合はスペルなどを確認しましょう\n\n```\n$ testparm\nLoad smb config files from /etc/samba/smb.conf\nrlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)\nWARNING: The "syslog" option is deprecated\nProcessing section "[homes]"\nProcessing section "[printers]"\nProcessing section "[print$]"\nProcessing section "[pi]"\nLoaded services file OK.\n```\n\n問題がなければsambaサービスを再起動\n\n```\n$ sudo systemctl restart smbd\n$ sudo systemctl enable smbd\n```\n\n※エラーが出た場合はファイアウォールの設定が必要な可能性があります。\nsamba用に適切にポートを設定してください\n\nsambaでは下記ポートをデフォルトで使用します)\n137/udp,138/udp,139/tcp,445/tcp\n\n### 確認\n\nあとはwindowsからエクスプローラーなりで\n\\\\[IPアドレス]\nと、入力すれば上記で設定したディレクトリにアクセスできるようになる\n\nmacの場合は\nsmb://[IPアドレス]/\nで、アクセスできます\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-09T18:08:02+09:00', 'group': None, 'id': '4420d40cac451a93228e', 'likes_count': 6, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'RaspberryPi', 'versions': []}, {'name': 'samba', 'versions': []}], 'title': 'raspberry piをファイルサーバー化', 'updated_at': '2018-09-09T18:13:19+09:00', 'url': 'https://qiita.com/ryuichi1208/items/4420d40cac451a93228e', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '\n<h1>\n<span id="概要" class="fragment"></span><a href="#%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>概要</h1>\n\n<p>docker,docker-composeに関するコマンドのまとめです。<br>\n新しいコマンド体系で書き直しました。</p>\n\n<h1>\n<span id="docker-container" class="fragment"></span><a href="#docker-container"><i class="fa fa-link"></i></a>docker container</h1>\n\n<ul>\n<li>実行中のコンテナにアタッチ</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker container attach\n</pre></div></div>\n\n<ul>\n<li>コンテナに対する変更から新しいイメージを作成</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker container commit\n</pre></div></div>\n\n<ul>\n<li>コンテナとローカル間でファイルとディレクトリのコピー</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker container <span class="nb">cp</span>\n</pre></div></div>\n\n<ul>\n<li>新しいコンテナの作成</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker container create\n</pre></div></div>\n\n<ul>\n<li>イメージとコンテナの変更情報を調べる</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker container diff\n</pre></div></div>\n\n<ul>\n<li>実行中のコンテナ内でコマンド実行</li>\n</ul>\n\n<div class="code-frame" data-lang="bash"><div class="highlight"><pre><span class="nv">$ </span>docker container <span class="nb">exec</span>\n</pre></div></div>\n\n<ul>\n<li>コンテナのファイルシステムをtarアーカイブ化</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container export\n</pre></div></div>\n\n<ul>\n<li>コンテナの詳細情報を表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container inspect\n</pre></div></div>\n\n<ul>\n<li>コンテナのプロセスを停止(kill)</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container kill\n</pre></div></div>\n\n<ul>\n<li>コンテナのログを表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container logs\n</pre></div></div>\n\n<ul>\n<li>コンテナ一覧の表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container ls\n</pre></div></div>\n\n<ul>\n<li>コンテナのプロセスを一時停止(pause)</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container pause\n</pre></div></div>\n\n<ul>\n<li>コンテナが使用しているポート情報の表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container port\n</pre></div></div>\n\n<ul>\n<li>停止中の全コンテナを削除</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container prune\n</pre></div></div>\n\n<ul>\n<li>コンテナの名称を変更</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container rename\n</pre></div></div>\n\n<ul>\n<li>コンテナを再起動</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container restart\n</pre></div></div>\n\n<ul>\n<li>コンテナの削除</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container rm\n</pre></div></div>\n\n<ul>\n<li>新しいコンテナを実行</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container run\n</pre></div></div>\n\n<ul>\n<li>停止中のコンテナを起動</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container start\n</pre></div></div>\n\n<ul>\n<li>コンテナのリソース使用状況を表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container stats\n</pre></div></div>\n\n<ul>\n<li>実行中のコンテナを停止</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container stop\n</pre></div></div>\n\n<ul>\n<li>コンテナが実行しているプロセスを表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container top\n</pre></div></div>\n\n<ul>\n<li>一時停止中のコンテナを再開</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container unpause\n</pre></div></div>\n\n<ul>\n<li>コンテナの（リソース）設定を変更</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container update\n</pre></div></div>\n\n<ul>\n<li>コンテナが停止するまで待機</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker container wait\n</pre></div></div>\n\n<h1>\n<span id="docker-image" class="fragment"></span><a href="#docker-image"><i class="fa fa-link"></i></a>docker image</h1>\n\n<ul>\n<li>Dockerfile からイメージを構築（ビルド）</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image build\n</pre></div></div>\n\n<ul>\n<li>イメージの履歴を表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image history\n</pre></div></div>\n\n<ul>\n<li>tar 形式のファイルを読み込み、イメージを作成</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image import\n</pre></div></div>\n\n<ul>\n<li>イメージの詳細情報を表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image inspect\n</pre></div></div>\n\n<ul>\n<li>tar 形式または標準入力からイメージを読み込む</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image load\n</pre></div></div>\n\n<ul>\n<li>イメージ一覧表示</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image ls\n</pre></div></div>\n\n<ul>\n<li>使用していないイメージを削除</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image prune\n</pre></div></div>\n\n<ul>\n<li>イメージをレジストリから取得</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image pull\n</pre></div></div>\n\n<ul>\n<li>イメージをレジストリに送信</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image push\n</pre></div></div>\n\n<ul>\n<li>イメージを削除</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image rm\n</pre></div></div>\n\n<ul>\n<li>イメージを tar 形式または標準出力にストリーム</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image save\n</pre></div></div>\n\n<ul>\n<li>イメージを参照する新しいタグを付ける</li>\n</ul>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ docker image tag\n</pre></div></div>\n', 'body': '# 概要\n\ndocker,docker-composeに関するコマンドのまとめです。\n新しいコマンド体系で書き直しました。\n\n# docker container\n\n* 実行中のコンテナにアタッチ\n\n``` bash\n$ docker container attach\n```\n\n* コンテナに対する変更から新しいイメージを作成\n\n``` bash\n$ docker container commit\n```\n\n* コンテナとローカル間でファイルとディレクトリのコピー\n\n``` bash \n$ docker container cp\n```\n\n* 新しいコンテナの作成\n\n``` bash\n$ docker container create\n```\n\n* イメージとコンテナの変更情報を調べる\n\n``` bash\n$ docker container diff\n```\n\n* 実行中のコンテナ内でコマンド実行\n\n``` bash\n$ docker container exec\n```\n\n* コンテナのファイルシステムをtarアーカイブ化\n\n```\n$ docker container export\n```\n\n* コンテナの詳細情報を表示\n\n```\n$ docker container inspect\n```\n\n* コンテナのプロセスを停止(kill)\n\n```\n$ docker container kill\n```\n\n* コンテナのログを表示\n\n```\n$ docker container logs\n```\n\n* コンテナ一覧の表示\n\n```\n$ docker container ls\n```\n\n* コンテナのプロセスを一時停止(pause)\n\n```\n$ docker container pause\n```\n\n* コンテナが使用しているポート情報の表示\n\n```\n$ docker container port\n```\n\n* 停止中の全コンテナを削除\n\n```\n$ docker container prune\n```\n\n* コンテナの名称を変更\n\n```\n$ docker container rename\n```\n\n* コンテナを再起動\n\n```\n$ docker container restart\n```\n\n* コンテナの削除\n\n```\n$ docker container rm\n```\n\n* 新しいコンテナを実行\n\n```\n$ docker container run\n```\n\n* 停止中のコンテナを起動\n\n```\n$ docker container start\n```\n\n* コンテナのリソース使用状況を表示\n\n```\n$ docker container stats\n```\n\n* 実行中のコンテナを停止\n\n```\n$ docker container stop\n```\n\n* コンテナが実行しているプロセスを表示\n\n```\n$ docker container top\n```\n\n* 一時停止中のコンテナを再開\n\n```\n$ docker container unpause\n```\n\n* コンテナの（リソース）設定を変更\n\n```\n$ docker container update\n```\n\n* コンテナが停止するまで待機\n\n```\n$ docker container wait\n```\n\n# docker image\n\n* Dockerfile からイメージを構築（ビルド）\n\n```\n$ docker image build\n```\n\n* イメージの履歴を表示\n\n```\n$ docker image history\n```\n\n* tar 形式のファイルを読み込み、イメージを作成\n\n```\n$ docker image import\n```\n\n* イメージの詳細情報を表示\n\n```\n$ docker image inspect\n```\n\n* tar 形式または標準入力からイメージを読み込む\n\n```\n$ docker image load\n```\n\n* イメージ一覧表示\n\n```\n$ docker image ls\n```\n\n* 使用していないイメージを削除\n\n```\n$ docker image prune\n```\n\n* イメージをレジストリから取得\n\n```\n$ docker image pull\n```\n\n* イメージをレジストリに送信\n\n```\n$ docker image push\n```\n\n* イメージを削除\n\n```\n$ docker image rm\n```\n\n* イメージを tar 形式または標準出力にストリーム\n\n```\n$ docker image save\n```\n\n* イメージを参照する新しいタグを付ける\n\n```\n$ docker image tag\n```\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-09-08T08:07:43+09:00', 'group': None, 'id': '0d7bb34a97a9ddbea590', 'likes_count': 3, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Docker', 'versions': []}], 'title': 'docker コマンドリファレンス', 'updated_at': '2018-11-13T10:31:05+09:00', 'url': 'https://qiita.com/ryuichi1208/items/0d7bb34a97a9ddbea590', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/e0b900d324e6cf1ae3462658da58b18f7fcb7eec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30616661356131642d653639332d663864392d616638632d3339316537653233646261372e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/e0b900d324e6cf1ae3462658da58b18f7fcb7eec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f30616661356131642d653639332d663864392d616638632d3339316537653233646261372e706e67" alt="kuber.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/0afa5a1d-e693-f8d9-af8c-391e7e23dba7.png"></a></p>\n\n<h1>\n<span id="persistent-volumesとは" class="fragment"></span><a href="#persistent-volumes%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Persistent Volumesとは</h1>\n\n<p>Persistent VolumesはPodで使うストレージを管理するための仕組みです。<br>\nここではnginxを使用してデプロイ/サービスの作成/削除を行っても消えないコンテンツの作成を実践していきます。</p>\n\n<p>参考 [<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" class="autolink" rel="nofollow noopener" target="_blank">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a>]</p>\n\n<h1>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n\n<p>minikube version: v0.28.2</p>\n\n<h1>\n<span id="手順" class="fragment"></span><a href="#%E6%89%8B%E9%A0%86"><i class="fa fa-link"></i></a>手順</h1>\n\n<h4>\n<span id="-nasの準備" class="fragment"></span><a href="#-nas%E3%81%AE%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>① nasの準備</h4>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>下記をホストノードで実行\n\n■ 公開用ディレクトリの作成\n$ sudo mkdir /share \n\n■ パーミッションの変更\n$ sudo chmod 777 /share\n\n■ NFS サーバーの設定\n$ sudo vi /etc/expors\n/share -mapall=nobody:wheel -network 192.168.99.0 -mask 255.255.255.0\n\n■ NFSサーバ起動\n$ sudo nfsd start\n$ sudo nfsd update \n\n$ sudo showmount -e\nExports list on localhost:\n/share                              192.168.99.0\n\n■ minikubeからマウント確認\nminikube$ minikube ssh\nminikube$ mkdir /share\nminikube$ sudo mount -t nfs 192.168.99.1:/share /share\n\nminikube$ df -T | grep nfs\n192.168.99.1:/share nfs      248856960 158028288  90572672  64% /share\n\n■ 特にマウントしとく必要はないのでアンマウント\nminikube$ sudo umount /share/\n</pre></div></div>\n\n<h4>\n<span id="-persistent-volumesを作る" class="fragment"></span><a href="#-persistent-volumes%E3%82%92%E4%BD%9C%E3%82%8B"><i class="fa fa-link"></i></a>② Persistent Volumesを作る</h4>\n\n<p>pv(永続ボリューム)を作ります。<br>\n下記のようなファイルを作成</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">nfs-pv.yaml</span></div>\n<div class="highlight"><pre><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>\n<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolume</span>\n<span class="na">metadata</span><span class="pi">:</span>\n  <span class="na">name</span><span class="pi">:</span> <span class="s">nfs001</span>\n<span class="na">spec</span><span class="pi">:</span>\n  <span class="na">capacity</span><span class="pi">:</span>\n    <span class="na">storage</span><span class="pi">:</span> <span class="s">1Gi</span>\n  <span class="na">accessModes</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">ReadWriteMany</span>\n    <span class="c1">#- ReadOnlyMany  複数ノードからREAD ONLY1マウント可能にするモード</span>\n    <span class="c1">#- ReadWriteOnce 1つのノードからR/Wでマウントできるモード</span>\n  <span class="c1"># PersistentVolumeClaim を削除した時の動作</span>\n  <span class="na">persistentVolumeReclaimPolicy</span><span class="pi">:</span> <span class="s">Recycle</span>\n  <span class="na">storageClassName</span><span class="pi">:</span> <span class="s">slow</span>\n  <span class="na">mountOptions</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">hard</span>\n  <span class="c1">## マウント先のNFS Serverの情報を記載</span>\n  <span class="na">nfs</span><span class="pi">:</span>\n    <span class="na">path</span><span class="pi">:</span> <span class="s">/share</span>\n    <span class="na">server</span><span class="pi">:</span> <span class="s">192.168.99.1</span>\n</pre></div>\n</div>\n\n<p>ここでは1つのノードから利用するのでReadWriteOnceを指定します。</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ kubectl create -f nfs-pv.yaml\npersistentvolume "nfs001" created\n\n$ kubectl get pv -o wide\nNAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                STORAGECLASS   REASON    AGE\nnfs001    1Gi        RWX            Recycle          Bound     default/nfs-claim1   slow                     2h\n</pre></div></div>\n\n<h4>\n<span id="-persistentvolumeclaimsを作る" class="fragment"></span><a href="#-persistentvolumeclaims%E3%82%92%E4%BD%9C%E3%82%8B"><i class="fa fa-link"></i></a>③ PersistentVolumeClaimsを作る</h4>\n\n<p>pvからpodに紐付けるための領域を要求します。pvcを作ることでpodにストレージを追加することができます。</p>\n\n<p>下記のようなファイルを作ります</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">nfs-pvc.yaml</span></div>\n<div class="highlight"><pre><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>\n<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>\n<span class="na">metadata</span><span class="pi">:</span>\n  <span class="na">name</span><span class="pi">:</span> <span class="s">nfs-claim1</span>\n<span class="na">spec</span><span class="pi">:</span>\n  <span class="na">accessModes</span><span class="pi">:</span>\n    <span class="pi">-</span> <span class="s">ReadWriteMany</span>\n  <span class="na">resources</span><span class="pi">:</span>\n    <span class="na">requests</span><span class="pi">:</span>\n      <span class="na">storage</span><span class="pi">:</span> <span class="s">1Gi</span>\n  <span class="na">storageClassName</span><span class="pi">:</span> <span class="s">slow</span>\n</pre></div>\n</div>\n\n<p>詳細は公式をドキュメントをどうぞ<br>\n[<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes" class="autolink" rel="nofollow noopener" target="_blank">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes</a>]</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ kubectl create -f nfs-pv.yaml\npersistentvolumeclaim "nfs-claim1" created\n\n$ kubectl get pvc -o wide\nNAME         STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nnfs-claim1   Bound     nfs001    1Gi        RWX            slow           2h\n</pre></div></div>\n\n<h4>\n<span id="podに割り当てる" class="fragment"></span><a href="#pod%E3%81%AB%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E3%82%8B"><i class="fa fa-link"></i></a>⑤podに割り当てる</h4>\n\n<p>以下のようなyamlファイルを作成<br>\n基本的には普通のnginxのyamlと変わらないがvolumesに今回作成した永続ボリュームを指定している</p>\n\n<div class="code-frame" data-lang="yaml">\n<div class="code-lang"><span class="bold">nginx.yaml</span></div>\n<div class="highlight"><pre><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">extensions/v1beta1</span>\n<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>\n<span class="na">metadata</span><span class="pi">:</span>\n  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-dep</span>\n<span class="na">spec</span><span class="pi">:</span>\n  <span class="na">replicas</span><span class="pi">:</span> <span class="s">2</span>\n  <span class="na">template</span><span class="pi">:</span>\n    <span class="na">metadata</span><span class="pi">:</span>\n      <span class="na">labels</span><span class="pi">:</span>\n        <span class="na">run</span><span class="pi">:</span> <span class="s">nginx</span>\n    <span class="na">spec</span><span class="pi">:</span>\n      <span class="na">containers</span><span class="pi">:</span>\n      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>\n        <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>\n        <span class="na">ports</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="s">80</span>\n        <span class="na">volumeMounts</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="na">mountPath</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/usr/share/nginx/html"</span>\n          <span class="na">name</span><span class="pi">:</span> <span class="s">mydate</span>\n      <span class="na">volumes</span><span class="pi">:</span>\n        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mydate</span>\n          <span class="na">persistentVolumeClaim</span><span class="pi">:</span>\n            <span class="na">claimName</span><span class="pi">:</span> <span class="s">nfs-claim1</span>\n</pre></div>\n</div>\n\n<h4>\n<span id="デプロイ" class="fragment"></span><a href="#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4"><i class="fa fa-link"></i></a>⑥デプロイ</h4>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ kubectl create -f nginx-pod.yaml\ndeployment.extensions/nginx-dep created\n\n$ kubectl expose deployment nginx-dep --type="NodePort"\nservice/nginx-dep exposed\n\n$ kubectl get pod -o wide\nNAME                         READY     STATUS    RESTARTS   AGE       IP           NODE\nnginx-dep-75b78c75cb-bxj45   1/1       Running   0          2h        172.17.0.5   minikube\nnginx-dep-75b78c75cb-d89wd   1/1       Running   0          2h        172.17.0.6   minikube\n</pre></div></div>\n\n<h1>\n<span id="確認" class="fragment"></span><a href="#%E7%A2%BA%E8%AA%8D"><i class="fa fa-link"></i></a>確認</h1>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>■コンテナ\n$ kubectl exec nginx-dep-75b78c75cb-x2895 -it /bin/bash\n\nroot@nginx-dep-75b78c75cb-x2895:/# df\nFilesystem          1K-blocks      Used Available Use% Mounted on\noverlay              16888216   1567168  14331916  10% /\ntmpfs                   65536         0     65536   0% /dev\ntmpfs                 1019312         0   1019312   0% /sys/fs/cgroup\n/dev/sda1            16888216   1567168  14331916  10% /etc/hosts\nshm                     65536         0     65536   0% /dev/shm\n192.168.99.1:/share 248856960 158031360  90569600  64% /usr/share/nginx/html\ntmpfs                 1019312        12   1019300   1% /run/secrets/kubernetes.io/serviceaccount\ntmpfs                 1019312         0   1019312   0% /proc/scsi\ntmpfs                 1019312         0   1019312   0% /sys/firmware\n\n■ ダッシュボード\n$ minikube dashboard\n\n■ URL表示\n$ minikube service nginx-dep --url\nhttp://192.168.99.100:31508 \n</pre></div></div>\n\n<p>デプロイ/サービスを削除しても作成したWebコンテンツは削除されない</p>\n\n<div class="code-frame" data-lang="text"><div class="highlight"><pre>$ kubectl delete deployment nginx-dep\ndeployment.extensions "nginx-dep" deleted\n\n$ ls -l /share/file1.html \n-rw-r--r--  1 root  wheel  2656  8 26 15:45 /share/file1.html\n</pre></div></div>\n', 'body': '![kuber.png](https://qiita-image-store.s3.amazonaws.com/0/258841/0afa5a1d-e693-f8d9-af8c-391e7e23dba7.png)\n\n# Persistent Volumesとは\n\nPersistent VolumesはPodで使うストレージを管理するための仕組みです。\nここではnginxを使用してデプロイ/サービスの作成/削除を行っても消えないコンテンツの作成を実践していきます。\n\n参考 [https://kubernetes.io/docs/concepts/storage/persistent-volumes/]\n\n# 環境\nminikube version: v0.28.2\n\n# 手順\n\n#### ① nasの準備\n```\n下記をホストノードで実行\n\n■ 公開用ディレクトリの作成\n$ sudo mkdir /share \n\n■ パーミッションの変更\n$ sudo chmod 777 /share\n\n■ NFS サーバーの設定\n$ sudo vi /etc/expors\n/share -mapall=nobody:wheel -network 192.168.99.0 -mask 255.255.255.0\n\n■ NFSサーバ起動\n$ sudo nfsd start\n$ sudo nfsd update \n\n$ sudo showmount -e\nExports list on localhost:\n/share                              192.168.99.0\n\n■ minikubeからマウント確認\nminikube$ minikube ssh\nminikube$ mkdir /share\nminikube$ sudo mount -t nfs 192.168.99.1:/share /share\n\nminikube$ df -T | grep nfs\n192.168.99.1:/share nfs      248856960 158028288  90572672  64% /share\n\n■ 特にマウントしとく必要はないのでアンマウント\nminikube$ sudo umount /share/\n```\n\n#### ② Persistent Volumesを作る\npv(永続ボリューム)を作ります。\n下記のようなファイルを作成\n\n```yaml:nfs-pv.yaml \napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfs001\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteMany\n    #- ReadOnlyMany  複数ノードからREAD ONLY1マウント可能にするモード\n    #- ReadWriteOnce 1つのノードからR/Wでマウントできるモード\n  # PersistentVolumeClaim を削除した時の動作\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n    - hard\n  ## マウント先のNFS Serverの情報を記載\n  nfs:\n    path: /share\n    server: 192.168.99.1\n```\n\nここでは1つのノードから利用するのでReadWriteOnceを指定します。\n\n```\n$ kubectl create -f nfs-pv.yaml\npersistentvolume "nfs001" created\n\n$ kubectl get pv -o wide\nNAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                STORAGECLASS   REASON    AGE\nnfs001    1Gi        RWX            Recycle          Bound     default/nfs-claim1   slow                     2h\n```\n\n\n#### ③ PersistentVolumeClaimsを作る\npvからpodに紐付けるための領域を要求します。pvcを作ることでpodにストレージを追加することができます。\n\n下記のようなファイルを作ります\n\n```yaml:nfs-pvc.yaml \napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: nfs-claim1\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: slow\n```\n\n詳細は公式をドキュメントをどうぞ\n[https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes]\n\n```\n$ kubectl create -f nfs-pv.yaml\npersistentvolumeclaim "nfs-claim1" created\n\n$ kubectl get pvc -o wide\nNAME         STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nnfs-claim1   Bound     nfs001    1Gi        RWX            slow           2h\n```\n\n#### ⑤podに割り当てる\n\n以下のようなyamlファイルを作成\n基本的には普通のnginxのyamlと変わらないがvolumesに今回作成した永続ボリュームを指定している\n\n```yaml:nginx.yaml \napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: nginx-dep\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        run: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - mountPath: "/usr/share/nginx/html"\n          name: mydate\n      volumes:\n        - name: mydate\n          persistentVolumeClaim:\n            claimName: nfs-claim1\n```\n\n#### ⑥デプロイ\n\n```\n$ kubectl create -f nginx-pod.yaml\ndeployment.extensions/nginx-dep created\n\n$ kubectl expose deployment nginx-dep --type="NodePort"\nservice/nginx-dep exposed\n\n$ kubectl get pod -o wide\nNAME                         READY     STATUS    RESTARTS   AGE       IP           NODE\nnginx-dep-75b78c75cb-bxj45   1/1       Running   0          2h        172.17.0.5   minikube\nnginx-dep-75b78c75cb-d89wd   1/1       Running   0          2h        172.17.0.6   minikube\n```\n\n# 確認\n\n```\n■コンテナ\n$ kubectl exec nginx-dep-75b78c75cb-x2895 -it /bin/bash\n\nroot@nginx-dep-75b78c75cb-x2895:/# df\nFilesystem          1K-blocks      Used Available Use% Mounted on\noverlay              16888216   1567168  14331916  10% /\ntmpfs                   65536         0     65536   0% /dev\ntmpfs                 1019312         0   1019312   0% /sys/fs/cgroup\n/dev/sda1            16888216   1567168  14331916  10% /etc/hosts\nshm                     65536         0     65536   0% /dev/shm\n192.168.99.1:/share 248856960 158031360  90569600  64% /usr/share/nginx/html\ntmpfs                 1019312        12   1019300   1% /run/secrets/kubernetes.io/serviceaccount\ntmpfs                 1019312         0   1019312   0% /proc/scsi\ntmpfs                 1019312         0   1019312   0% /sys/firmware\n\n■ ダッシュボード\n$ minikube dashboard\n\n■ URL表示\n$ minikube service nginx-dep --url\nhttp://192.168.99.100:31508 \n```\n\nデプロイ/サービスを削除しても作成したWebコンテンツは削除されない\n\n```\n$ kubectl delete deployment nginx-dep\ndeployment.extensions "nginx-dep" deleted\n\n$ ls -l /share/file1.html \n-rw-r--r--  1 root  wheel  2656  8 26 15:45 /share/file1.html\n```\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-08-26T18:00:19+09:00', 'group': None, 'id': 'e1a8b8a7ba4c64f72a7e', 'likes_count': 4, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Windows', 'versions': []}, {'name': 'Linux', 'versions': []}, {'name': 'nginx', 'versions': []}, {'name': 'Docker', 'versions': []}, {'name': 'kubernetes', 'versions': []}], 'title': 'kubernetesのPersistent Volumesをnginxで使ってみた', 'updated_at': '2018-12-01T01:26:13+09:00', 'url': 'https://qiita.com/ryuichi1208/items/e1a8b8a7ba4c64f72a7e', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}, {'rendered_body': '<p><a href="https://camo.qiitausercontent.com/ee57b2d1095943741c95b34be565c437cd7157cf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38346165623963622d306164662d326662312d333238332d3266323130306131666535392e706e67" target="_blank" rel="nofollow noopener"><img src="https://camo.qiitausercontent.com/ee57b2d1095943741c95b34be565c437cd7157cf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3235383834312f38346165623963622d306164662d326662312d333238332d3266323130306131666535392e706e67" alt="dokusyo.png" data-canonical-src="https://qiita-image-store.s3.amazonaws.com/0/258841/84aeb9cb-0adf-2fb1-3283-2f2100a1fe59.png"></a></p>\n\n<h4>\n<span id="-イントロダクション" class="fragment"></span><a href="#-%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>■ イントロダクション</h4>\n\n<p>まずは簡単な自己紹介から<br>\nエンジニア歴2年目のペーペーです。<br>\n主な技術領域は組み込み<br>\n言語はCとPerlを使ってます。<br>\n趣味でPythonだったりJavaだったり書いてgithubで公開だったりしてます。<br>\n学生自体のプログラミング経験は0</p>\n\n<h4>\n<span id="-対象技術領域" class="fragment"></span><a href="#-%E5%AF%BE%E8%B1%A1%E6%8A%80%E8%A1%93%E9%A0%98%E5%9F%9F"><i class="fa fa-link"></i></a>■ 対象技術領域</h4>\n\n<p>OS : Linux<br>\n言語 : C言語, Java, Python<br>\nその他 : ネットワーク</p>\n\n<h4>\n<span id="-この記事の対象の読者" class="fragment"></span><a href="#-%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AE%E5%AF%BE%E8%B1%A1%E3%81%AE%E8%AA%AD%E8%80%85"><i class="fa fa-link"></i></a>■ この記事の対象の読者</h4>\n\n<p>・学生時代は非情報学系<br>\n・趣味でプログラミングやってない人</p>\n\n<h1>\n<span id="完全に未経験だった自分が読んでよかった本" class="fragment"></span><a href="#%E5%AE%8C%E5%85%A8%E3%81%AB%E6%9C%AA%E7%B5%8C%E9%A8%93%E3%81%A0%E3%81%A3%E3%81%9F%E8%87%AA%E5%88%86%E3%81%8C%E8%AA%AD%E3%82%93%E3%81%A7%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E6%9C%AC"><i class="fa fa-link"></i></a>完全に未経験だった自分が読んでよかった本</h1>\n\n<p>読んでみて率直に思った難易度を記載しています。<br>\n横に書いてあるのは自分が実際に読んだ入社時期からのカウントです。</p>\n\n<h2>\n<span id="難易度--対象入社1年目前半" class="fragment"></span><a href="#%E9%9B%A3%E6%98%93%E5%BA%A6--%E5%AF%BE%E8%B1%A1%E5%85%A5%E7%A4%BE1%E5%B9%B4%E7%9B%AE%E5%89%8D%E5%8D%8A"><i class="fa fa-link"></i></a>【難易度 ★☆☆☆☆】 対象：入社1年目(前半)</h2>\n\n<h4>\n<span id="スッキリわかるjava入門" class="fragment"></span><a href="#%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8Bjava%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8BJava%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E4%B8%AD%E5%B1%B1-%E6%B8%85%E5%96%AC/dp/484433638X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1530800720&amp;sr=1-1&amp;keywords=%E3%81%99%E3%81%A3%E3%81%8D%E3%82%8A%E3%82%8F%E3%81%8B%E3%82%8Bjava" rel="nofollow noopener" target="_blank">スッキリわかるJava入門</a>\n</h4>\n\n<p>Javaに関してだけではなくプログラミングについて学べます。<br>\n本を通してコーディングするだけで作品が出来上がりモチベーションの維持もできる<br>\n初心者にはもって付けの1冊</p>\n\n<h4>\n<span id="プログラミング言語図鑑" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E5%9B%B3%E9%91%91"><i class="fa fa-link"></i></a>◆<a href>プログラミング言語図鑑</a>\n</h4>\n\n<p>プログラミング言語がたくさん載っています。<br>\n学習というよりはこんなのあるんだ程度での読み物です。</p>\n\n<h4>\n<span id="tcpipの絵本-ネットワークっておもしろい" class="fragment"></span><a href="#tcpip%E3%81%AE%E7%B5%B5%E6%9C%AC-%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%A3%E3%81%A6%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84"><i class="fa fa-link"></i></a>◆<a href="http://amzn.asia/0UL8lB4" rel="nofollow noopener" target="_blank">TCP/IPの絵本 ネットワークっておもしろい!</a>\n</h4>\n\n<p>エンジニアとして最低限知っておきたいネットワークの技術が得られます。<br>\nこのくらいは知っておかないと現場出て苦労するだろうレベルなんで必須レベルの本です。</p>\n\n<h4>\n<span id="cの絵本c言語が好きになる9つの扉" class="fragment"></span><a href="#c%E3%81%AE%E7%B5%B5%E6%9C%ACc%E8%A8%80%E8%AA%9E%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AB%E3%81%AA%E3%82%8B9%E3%81%A4%E3%81%AE%E6%89%89"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/C%E3%81%AE%E7%B5%B5%E6%9C%AC%E2%80%95C%E8%A8%80%E8%AA%9E%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AB%E3%81%AA%E3%82%8B9%E3%81%A4%E3%81%AE%E6%89%89-%E3%82%A2%E3%83%B3%E3%82%AF/dp/4798101036/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1531569869&amp;sr=1-2&amp;keywords=C%E8%A8%80%E8%AA%9E%E3%81%AE%E7%B5%B5%E6%9C%AC" rel="nofollow noopener" target="_blank">Cの絵本―C言語が好きになる9つの扉</a>\n</h4>\n\n<p>配列、ポインタ、構造体の基礎の基礎がわかります。<br>\n実際他の言語を学ぶ際もCの基礎知識があるのと無いので習熟スピードは格段に変わると言われているので実際に見ておいて損のない一冊です。</p>\n\n<h4>\n<span id="1週間でlpicの基礎が学べる本" class="fragment"></span><a href="#1%E9%80%B1%E9%96%93%E3%81%A7lpic%E3%81%AE%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E6%9C%AC"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/1%E9%80%B1%E9%96%93%E3%81%A7LPIC%E3%81%AE%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E6%9C%AC-%E7%AC%AC2%E7%89%88-%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5-%E4%B8%AD%E5%B3%B6-%E8%83%BD%E5%92%8C/dp/4844335308/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1531570253&amp;sr=1-1&amp;keywords=Linux+1%E9%80%B1%E9%96%93" rel="nofollow noopener" target="_blank">1週間でLPICの基礎が学べる本</a>\n</h4>\n\n<p>現場で見ることは少ないかもしれないLinuxですが、実際触れる機会は必ずあると思います。<br>\nその際の基礎の基礎の部分がこちらの本で補えます。</p>\n\n<h4>\n<span id="ゼロからわかる-uml超入門" class="fragment"></span><a href="#%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B-uml%E8%B6%85%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B-UML%E8%B6%85%E5%85%A5%E9%96%80-%E6%B2%B3%E5%90%88-%E6%98%AD%E7%94%B7/dp/4774143952/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1531572416&amp;sr=1-2&amp;keywords=uml%E8%B6%85%E5%85%A5%E9%96%80" rel="nofollow noopener" target="_blank">ゼロからわかる UML超入門</a>\n</h4>\n\n<p>UMLの入門書です。基本情報を取得するつもりで勉強していればあまり必要のない本ですが<br>\n設計書などを読む際に必須中の必須の知識なのでこれは読むべきですね。</p>\n\n<h2>\n<span id="難易度--対象入社1年目後半" class="fragment"></span><a href="#%E9%9B%A3%E6%98%93%E5%BA%A6--%E5%AF%BE%E8%B1%A1%E5%85%A5%E7%A4%BE1%E5%B9%B4%E7%9B%AE%E5%BE%8C%E5%8D%8A"><i class="fa fa-link"></i></a>【難易度 ★★☆☆☆】 対象：入社1年目(後半)</h2>\n\n<h4>\n<span id="大滝みや子先生のかんたんアルゴリズム解法-流れ図と擬似言語" class="fragment"></span><a href="#%E5%A4%A7%E6%BB%9D%E3%81%BF%E3%82%84%E5%AD%90%E5%85%88%E7%94%9F%E3%81%AE%E3%81%8B%E3%82%93%E3%81%9F%E3%82%93%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E8%A7%A3%E6%B3%95-%E6%B5%81%E3%82%8C%E5%9B%B3%E3%81%A8%E6%93%AC%E4%BC%BC%E8%A8%80%E8%AA%9E"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85-%E5%A4%A7%E6%BB%9D%E3%81%BF%E3%82%84%E5%AD%90%E5%85%88%E7%94%9F%E3%81%AE%E3%81%8B%E3%82%93%E3%81%9F%E3%82%93%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E8%A7%A3%E6%B3%95-%E6%B5%81%E3%82%8C%E5%9B%B3%E3%81%A8%E6%93%AC%E4%BC%BC%E8%A8%80%E8%AA%9E-%E7%AC%AC3%E7%89%88-%E3%81%BF%E3%82%84%E5%AD%90/dp/4897979668/ref=sr_1_10?s=books&amp;ie=UTF8&amp;qid=1530800919&amp;sr=1-10&amp;keywords=%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" rel="nofollow noopener" target="_blank">大滝みや子先生のかんたんアルゴリズム解法 ~流れ図と擬似言語~</a>\n</h4>\n\n<p>ぜひとも1年目のうちに取得したい基本情報のアルゴリズムの分野に特化した1冊<br>\nアルゴリズムとは何なのかから試験合格レベルまでたどりつける1冊</p>\n\n<h4>\n<span id="インフラエンジニアの教科書" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E4%BD%90%E9%87%8E-%E8%A3%95/dp/4863541333" rel="nofollow noopener" target="_blank">インフラエンジニアの教科書</a>\n</h4>\n\n<p>エンジニアとして最低限のハードウェアの知識が得られます。<br>\nOSだったりネットワークの基礎中の基礎が学べます。インフラエンジニア以外の方でも<br>\nぜひ読んでいただきたい一冊</p>\n\n<h4>\n<span id="pythonチュートリアル" class="fragment"></span><a href="#python%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/Python%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB-%E7%AC%AC3%E7%89%88-Guido-van-Rossum/dp/4873117534/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1531570007&amp;sr=1-1&amp;keywords=Python%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB" rel="nofollow noopener" target="_blank">Pythonチュートリアル</a>\n</h4>\n\n<p>今はやりのPythonの基礎の基礎を学べます。<br>\nPythonが書けると何がいいって普段の評価業務の自動化だったり<br>\n自宅での定常作業を自動化できたりします(自宅では主にいろんなサイトからデータ収集)<br>\nこれ1冊で何か作れるわけではないですがPythonのコーディングスタイルなんかだったり<br>\nほかの入門書にはない情報が得られたりするので是非お勧めです。</p>\n\n<h4>\n<span id="スッキリわかる-java入門-実践編" class="fragment"></span><a href="#%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8B-java%E5%85%A5%E9%96%80-%E5%AE%9F%E8%B7%B5%E7%B7%A8"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8B-Java%E5%85%A5%E9%96%80-%E5%AE%9F%E8%B7%B5%E7%B7%A8-%E7%AC%AC2%E7%89%88-%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA/dp/4844336770/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1531570114&amp;sr=1-1&amp;keywords=%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8B+Java%E5%85%A5%E9%96%80+%E5%AE%9F%E8%B7%B5%E7%B7%A8" rel="nofollow noopener" target="_blank">スッキリわかる Java入門 実践編</a>\n</h4>\n\n<p>入門編より若干難易度が高いですが必須の一冊。テスト手法だったりテストのやり方自動化。工数だったりバグ摘出率だったり業務で使うオンパレードの用語も丁寧に解説してくれます。</p>\n\n<h4>\n<span id="スッキリわかる-サーブレットjsp入門" class="fragment"></span><a href="#%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8B-%E3%82%B5%E3%83%BC%E3%83%96%E3%83%AC%E3%83%83%E3%83%88jsp%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8B-%E3%82%B5%E3%83%BC%E3%83%96%E3%83%AC%E3%83%83%E3%83%88-JSP%E5%85%A5%E9%96%80-%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E5%9B%BD%E6%9C%AC/dp/4844335804/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1531570684&amp;sr=1-1&amp;keywords=%E3%82%B5%E3%83%BC%E3%83%96%E3%83%AC%E3%83%83%E3%83%88+%26+JSP" rel="nofollow noopener" target="_blank">スッキリわかる サーブレット&amp;JSP入門</a>\n</h4>\n\n<p>上記と同じ会社が出している本です。JSP&amp;サーブレットは趣味でしか使ったことが無いですがwebに関しての基礎知識が得られるって意味で読みました。</p>\n\n<h4>\n<span id="ベタープログラマ" class="fragment"></span><a href="#%E3%83%99%E3%82%BF%E3%83%BC%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E"><i class="fa fa-link"></i></a>◆<a href>ベタープログラマ</a>\n</h4>\n\n<p>プログラマがあるべき姿や名言などが書かれているオライリーの本です。<br>\n値段の割に内容は薄いですがエンジニアとして頑張ろうという意識が再度出てくるような<br>\nいい本でした。</p>\n\n<h2>\n<span id="難易度--対象入社2年目前半" class="fragment"></span><a href="#%E9%9B%A3%E6%98%93%E5%BA%A6--%E5%AF%BE%E8%B1%A1%E5%85%A5%E7%A4%BE2%E5%B9%B4%E7%9B%AE%E5%89%8D%E5%8D%8A"><i class="fa fa-link"></i></a>【難易度 ★★★☆☆】 対象：入社2年目(前半)</h2>\n\n<h4>\n<span id="java言語で学ぶデザインパターン入門" class="fragment"></span><a href="#java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797327030/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1530801482&amp;sr=1-1&amp;keywords=%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" rel="nofollow noopener" target="_blank">Java言語で学ぶデザインパターン入門</a>\n</h4>\n\n<p>現場でオブジェクト指向を使うことはない自分ですがJavaの勉強をしていると必ず出てくるワード「デザインパターン」。なぜ必要な知識なのかを学べかつ使用方法に関して丁寧に書いてあります。自分がこの本を読んだのは入社して3カ月目とかで正直何言ってるからわかりませんでしたがぜひ年度が替わるころにもう一度読んでいただきたい一冊</p>\n\n<h4>\n<span id="java言語で学ぶデザインパターン入門-マルチスレッド編" class="fragment"></span><a href="#java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E7%B7%A8"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88-Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E7%B7%A8-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797331623/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1531572222&amp;sr=1-3&amp;keywords=Java+%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" rel="nofollow noopener" target="_blank">Java言語で学ぶデザインパターン入門 マルチスレッド編</a>\n</h4>\n\n<p>スレッドの概念/スレッドを意識したプログラミングの基本能力が身につきます。<br>\nフレームワークオンリーの開発だけだと欠如しやすい領域ですのでぜひ一度はしっかり理解を深めてほしいのでオススメします。</p>\n\n<h3>\n<span id="難易度--対象入社2年目後半" class="fragment"></span><a href="#%E9%9B%A3%E6%98%93%E5%BA%A6--%E5%AF%BE%E8%B1%A1%E5%85%A5%E7%A4%BE2%E5%B9%B4%E7%9B%AE%E5%BE%8C%E5%8D%8A"><i class="fa fa-link"></i></a>【難易度 ★★★★☆】 対象：入社2年目(後半)</h3>\n\n<h4>\n<span id="c言語-実践プログラミング" class="fragment"></span><a href="#c%E8%A8%80%E8%AA%9E-%E5%AE%9F%E8%B7%B5%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>◆<a href="https://www.amaon.co.jp/C%E5%AE%9F%E8%B7%B5%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%AC%AC3%E7%89%88-Steve-Oualline/dp/4900900648" rel="nofollow noopener" target="_blank">C言語 実践プログラミング</a>\n</h4>\n\n<p>C言語を実務で使うなら必読の1冊。アルゴリズムやリストなどの考え方を理解した上でどう実装するのが効率がいいのかなど詳しく書かれています。</p>\n\n<h4>\n<span id="tcpipソケットプログラミング-c言語編" class="fragment"></span><a href="#tcpip%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-c%E8%A8%80%E8%AA%9E%E7%B7%A8"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/TCP-IP%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-C%E8%A8%80%E8%AA%9E%E7%B7%A8-Michael-Donahoo/dp/4274065197/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1531570787&amp;sr=1-2&amp;keywords=TCP%2FIP+%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88" rel="nofollow noopener" target="_blank">TCP/IPソケットプログラミング C言語編</a>\n</h4>\n\n<p>自分がたまたまネットワークの組み込み系の業務で必要となった知識だったので読みましたが、普段Javaなどの言語でネットワークプログラミングをやってる人だと必要のない知識ではなりますが、まあ参考までに紹介します。</p>\n\n<h4>\n<span id="dockerkubernetes-実践コンテナ開発入門" class="fragment"></span><a href="#dockerkubernetes-%E5%AE%9F%E8%B7%B5%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80"><i class="fa fa-link"></i></a>◆<a href>Docker/Kubernetes 実践コンテナ開発入門</a>\n</h4>\n\n<p>流行のDocker/Kubernetesの入門から実運用まで学べます。<br>\n割と最近出た本の中でも大変評価が高いのでおすすめです。</p>\n\n<h4>\n<span id="unixという考え方" class="fragment"></span><a href="#unix%E3%81%A8%E3%81%84%E3%81%86%E8%80%83%E3%81%88%E6%96%B9"><i class="fa fa-link"></i></a>◆<a href>UNIXという考え方</a>\n</h4>\n\n<p>この本は全エンジニアにおすすめの本です。<br>\nこれはUNIXの設計哲学が書かれていますが、WindowsやMacユーザやソフトウェア開発者にも読んでもらいたい一冊です。<br>\nUnixというOSに関して前提知識はほぼ無く読みやすい本となっています。</p>\n\n<h2>\n<span id="難易度--対象分かりません専門職強め" class="fragment"></span><a href="#%E9%9B%A3%E6%98%93%E5%BA%A6--%E5%AF%BE%E8%B1%A1%E5%88%86%E3%81%8B%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93%E5%B0%82%E9%96%80%E8%81%B7%E5%BC%B7%E3%82%81"><i class="fa fa-link"></i></a>【難易度 ★★★★★】 対象：分かりません(専門職強め)</h2>\n\n<h4>\n<span id="詳解-linuxカーネル" class="fragment"></span><a href="#%E8%A9%B3%E8%A7%A3-linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-%E7%AC%AC3%E7%89%88-Daniel-Bovet/dp/487311313X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1530801783&amp;sr=1-1&amp;keywords=%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB+LINUX" rel="nofollow noopener" target="_blank">詳解 Linuxカーネル</a>\n</h4>\n\n<p>いただいた本です。正直いまだに内容は難しくほとんど読めていません。<br>\n読むための知識が大量にある本。Linuxカーネルについて書かれています。</p>\n\n<p>引用：必要な知識<br>\n1.C言語（ポインタを完全に理解する必要あり）<br>\n2.LINUXの仕様の知識<br>\n3.LINUXプログラミングの知識。特にプロセスやスレッド関係。<br>\n4.x86アーキテクチャの知識。特にアセンブラとMMU関係。</p>\n\n<h4>\n<span id="linuxデバイスドライバ-第3版" class="fragment"></span><a href="#linux%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90-%E7%AC%AC3%E7%89%88"><i class="fa fa-link"></i></a>◆<a href="https://www.amazon.co.jp/Linux%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90-%E7%AC%AC3%E7%89%88-Jonathan-Corbet/dp/4873112532/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1530801929&amp;sr=1-1&amp;keywords=%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90" rel="nofollow noopener" target="_blank">Linuxデバイスドライバ 第3版</a>\n</h4>\n\n<p>読めてないですが紹介だけ。デバイスドライバについて設計からいろはがわかるとのこと<br>\n本棚の隅に置いてあります（いつか読めるようになろう！）</p>\n\n<hr>\n\n<p>まだ執筆中ですが、良書に関してはどんどん追記していきたいと思います。</p>\n', 'body': '![dokusyo.png](https://qiita-image-store.s3.amazonaws.com/0/258841/84aeb9cb-0adf-2fb1-3283-2f2100a1fe59.png)\n\n#### ■ イントロダクション\n\nまずは簡単な自己紹介から\nエンジニア歴2年目のペーペーです。\n主な技術領域は組み込み\n言語はCとPerlを使ってます。\n趣味でPythonだったりJavaだったり書いてgithubで公開だったりしてます。\n学生自体のプログラミング経験は0\n\n#### ■ 対象技術領域\nOS : Linux\n言語 : C言語, Java, Python\nその他 : ネットワーク\n\n#### ■ この記事の対象の読者\n・学生時代は非情報学系\n・趣味でプログラミングやってない人\n\n# 完全に未経験だった自分が読んでよかった本\n読んでみて率直に思った難易度を記載しています。\n横に書いてあるのは自分が実際に読んだ入社時期からのカウントです。\n\n##【難易度 ★☆☆☆☆】 対象：入社1年目(前半)\n\n#### ◆[スッキリわかるJava入門](https://www.amazon.co.jp/%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8BJava%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E4%B8%AD%E5%B1%B1-%E6%B8%85%E5%96%AC/dp/484433638X/ref=sr_1_1?s=books&ie=UTF8&qid=1530800720&sr=1-1&keywords=%E3%81%99%E3%81%A3%E3%81%8D%E3%82%8A%E3%82%8F%E3%81%8B%E3%82%8Bjava)\n\nJavaに関してだけではなくプログラミングについて学べます。\n本を通してコーディングするだけで作品が出来上がりモチベーションの維持もできる\n初心者にはもって付けの1冊\n\n#### ◆[プログラミング言語図鑑]()\n\nプログラミング言語がたくさん載っています。\n学習というよりはこんなのあるんだ程度での読み物です。\n\n#### ◆[TCP/IPの絵本 ネットワークっておもしろい!](http://amzn.asia/0UL8lB4)\n\nエンジニアとして最低限知っておきたいネットワークの技術が得られます。\nこのくらいは知っておかないと現場出て苦労するだろうレベルなんで必須レベルの本です。\n\n#### ◆[Cの絵本―C言語が好きになる9つの扉](https://www.amazon.co.jp/Cの絵本―C言語が好きになる9つの扉-アンク/dp/4798101036/ref=sr_1_2?s=books&ie=UTF8&qid=1531569869&sr=1-2&keywords=C言語の絵本)\n\n配列、ポインタ、構造体の基礎の基礎がわかります。\n実際他の言語を学ぶ際もCの基礎知識があるのと無いので習熟スピードは格段に変わると言われているので実際に見ておいて損のない一冊です。\n\n#### ◆[1週間でLPICの基礎が学べる本](https://www.amazon.co.jp/1週間でLPICの基礎が学べる本-第2版-徹底攻略-中島-能和/dp/4844335308/ref=sr_1_1?s=books&ie=UTF8&qid=1531570253&sr=1-1&keywords=Linux+1週間)\n\n現場で見ることは少ないかもしれないLinuxですが、実際触れる機会は必ずあると思います。\nその際の基礎の基礎の部分がこちらの本で補えます。\n\n#### ◆[ゼロからわかる UML超入門](https://www.amazon.co.jp/ゼロからわかる-UML超入門-河合-昭男/dp/4774143952/ref=sr_1_2?s=books&ie=UTF8&qid=1531572416&sr=1-2&keywords=uml超入門)\n\nUMLの入門書です。基本情報を取得するつもりで勉強していればあまり必要のない本ですが\n設計書などを読む際に必須中の必須の知識なのでこれは読むべきですね。\n\n##【難易度 ★★☆☆☆】 対象：入社1年目(後半)\n#### ◆[大滝みや子先生のかんたんアルゴリズム解法 ~流れ図と擬似言語~](https://www.amazon.co.jp/基本情報技術者-大滝みや子先生のかんたんアルゴリズム解法-流れ図と擬似言語-第3版-みや子/dp/4897979668/ref=sr_1_10?s=books&ie=UTF8&qid=1530800919&sr=1-10&keywords=アルゴリズム)\n\nぜひとも1年目のうちに取得したい基本情報のアルゴリズムの分野に特化した1冊\nアルゴリズムとは何なのかから試験合格レベルまでたどりつける1冊\n\n#### ◆[インフラエンジニアの教科書](https://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E4%BD%90%E9%87%8E-%E8%A3%95/dp/4863541333)\n\nエンジニアとして最低限のハードウェアの知識が得られます。\nOSだったりネットワークの基礎中の基礎が学べます。インフラエンジニア以外の方でも\nぜひ読んでいただきたい一冊\n\n#### ◆[Pythonチュートリアル](https://www.amazon.co.jp/Pythonチュートリアル-第3版-Guido-van-Rossum/dp/4873117534/ref=sr_1_1?s=books&ie=UTF8&qid=1531570007&sr=1-1&keywords=Pythonチュートリアル)\n\n今はやりのPythonの基礎の基礎を学べます。\nPythonが書けると何がいいって普段の評価業務の自動化だったり\n自宅での定常作業を自動化できたりします(自宅では主にいろんなサイトからデータ収集)\nこれ1冊で何か作れるわけではないですがPythonのコーディングスタイルなんかだったり\nほかの入門書にはない情報が得られたりするので是非お勧めです。\n\n#### ◆[スッキリわかる Java入門 実践編](https://www.amazon.co.jp/スッキリわかる-Java入門-実践編-第2版-スッキリシリーズ/dp/4844336770/ref=sr_1_1?s=books&ie=UTF8&qid=1531570114&sr=1-1&keywords=スッキリわかる+Java入門+実践編)\n\n入門編より若干難易度が高いですが必須の一冊。テスト手法だったりテストのやり方自動化。工数だったりバグ摘出率だったり業務で使うオンパレードの用語も丁寧に解説してくれます。\n\n#### ◆[スッキリわかる サーブレット&JSP入門](https://www.amazon.co.jp/スッキリわかる-サーブレット-JSP入門-スッキリシリーズ-国本/dp/4844335804/ref=sr_1_1?s=books&ie=UTF8&qid=1531570684&sr=1-1&keywords=サーブレット+%26+JSP)\n\n上記と同じ会社が出している本です。JSP&サーブレットは趣味でしか使ったことが無いですがwebに関しての基礎知識が得られるって意味で読みました。\n\n#### ◆[ベタープログラマ]()\n\nプログラマがあるべき姿や名言などが書かれているオライリーの本です。\n値段の割に内容は薄いですがエンジニアとして頑張ろうという意識が再度出てくるような\nいい本でした。\n\n\n##【難易度 ★★★☆☆】 対象：入社2年目(前半)\n#### ◆[Java言語で学ぶデザインパターン入門](https://www.amazon.co.jp/増補改訂版Java言語で学ぶデザインパターン入門-結城-浩/dp/4797327030/ref=sr_1_1?s=books&ie=UTF8&qid=1530801482&sr=1-1&keywords=デザインパターン)\n\n現場でオブジェクト指向を使うことはない自分ですがJavaの勉強をしていると必ず出てくるワード「デザインパターン」。なぜ必要な知識なのかを学べかつ使用方法に関して丁寧に書いてあります。自分がこの本を読んだのは入社して3カ月目とかで正直何言ってるからわかりませんでしたがぜひ年度が替わるころにもう一度読んでいただきたい一冊\n\n#### ◆[Java言語で学ぶデザインパターン入門 マルチスレッド編](https://www.amazon.co.jp/増補改訂版-Java言語で学ぶデザインパターン入門-マルチスレッド編-結城-浩/dp/4797331623/ref=sr_1_3?s=books&ie=UTF8&qid=1531572222&sr=1-3&keywords=Java+デザインパターン)\n\nスレッドの概念/スレッドを意識したプログラミングの基本能力が身につきます。\nフレームワークオンリーの開発だけだと欠如しやすい領域ですのでぜひ一度はしっかり理解を深めてほしいのでオススメします。\n\n###【難易度 ★★★★☆】 対象：入社2年目(後半)\n#### ◆[C言語 実践プログラミング](https://www.amaon.co.jp/C実践プログラミング-第3版-Steve-Oualline/dp/4900900648)\n\nC言語を実務で使うなら必読の1冊。アルゴリズムやリストなどの考え方を理解した上でどう実装するのが効率がいいのかなど詳しく書かれています。\n\n#### ◆[TCP/IPソケットプログラミング C言語編](https://www.amazon.co.jp/TCP-IPソケットプログラミング-C言語編-Michael-Donahoo/dp/4274065197/ref=sr_1_2?s=books&ie=UTF8&qid=1531570787&sr=1-2&keywords=TCP%2FIP+ソケット)\n\n自分がたまたまネットワークの組み込み系の業務で必要となった知識だったので読みましたが、普段Javaなどの言語でネットワークプログラミングをやってる人だと必要のない知識ではなりますが、まあ参考までに紹介します。\n\n#### ◆[Docker/Kubernetes 実践コンテナ開発入門]()\n\n流行のDocker/Kubernetesの入門から実運用まで学べます。\n割と最近出た本の中でも大変評価が高いのでおすすめです。\n\n#### ◆[UNIXという考え方]()\n\nこの本は全エンジニアにおすすめの本です。\nこれはUNIXの設計哲学が書かれていますが、WindowsやMacユーザやソフトウェア開発者にも読んでもらいたい一冊です。\nUnixというOSに関して前提知識はほぼ無く読みやすい本となっています。\n\n## 【難易度 ★★★★★】 対象：分かりません(専門職強め)\n#### ◆[詳解 Linuxカーネル](https://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-%E7%AC%AC3%E7%89%88-Daniel-Bovet/dp/487311313X/ref=sr_1_1?s=books&ie=UTF8&qid=1530801783&sr=1-1&keywords=%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB+LINUX)\n\nいただいた本です。正直いまだに内容は難しくほとんど読めていません。\n読むための知識が大量にある本。Linuxカーネルについて書かれています。\n\n引用：必要な知識\n1.C言語（ポインタを完全に理解する必要あり）\n2.LINUXの仕様の知識\n3.LINUXプログラミングの知識。特にプロセスやスレッド関係。\n4.x86アーキテクチャの知識。特にアセンブラとMMU関係。\n\n#### ◆[Linuxデバイスドライバ 第3版](https://www.amazon.co.jp/Linux%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90-%E7%AC%AC3%E7%89%88-Jonathan-Corbet/dp/4873112532/ref=sr_1_1?s=books&ie=UTF8&qid=1530801929&sr=1-1&keywords=%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90)\n\n読めてないですが紹介だけ。デバイスドライバについて設計からいろはがわかるとのこと\n本棚の隅に置いてあります（いつか読めるようになろう！）\n\n---\n\nまだ執筆中ですが、良書に関してはどんどん追記していきたいと思います。\n', 'coediting': False, 'comments_count': 0, 'created_at': '2018-08-18T16:37:03+09:00', 'group': None, 'id': 'ed607d7ea3f4cdc0217c', 'likes_count': 21, 'private': False, 'reactions_count': 0, 'tags': [{'name': 'Java', 'versions': []}, {'name': 'Ruby', 'versions': []}, {'name': 'Python', 'versions': []}, {'name': 'C言語', 'versions': []}, {'name': 'Docker', 'versions': []}], 'title': '新卒から2年間で読んだお勧め本', 'updated_at': '2018-11-09T23:44:01+09:00', 'url': 'https://qiita.com/ryuichi1208/items/ed607d7ea3f4cdc0217c', 'user': {'description': 'web屋さん', 'facebook_id': '', 'followees_count': 63, 'followers_count': 194, 'github_login_name': 'ryuichi1208', 'id': 'ryuichi1208', 'items_count': 81, 'linkedin_id': '', 'location': '', 'name': '渡部 龍一', 'organization': '', 'permanent_id': 258841, 'profile_image_url': 'https://qiita-image-store.s3.amazonaws.com/0/258841/profile-images/1545703924', 'team_only': False, 'twitter_screen_name': 'ryuichi_1208', 'website_url': ''}, 'page_views_count': None}]
